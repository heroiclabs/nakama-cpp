// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: github.com/heroiclabs/nakama/apigrpc/apigrpc.proto

#ifdef BUILD_GRPC_CLIENT

#include "github.com/heroiclabs/nakama/apigrpc/apigrpc.pb.h"
#include "github.com/heroiclabs/nakama/apigrpc/apigrpc.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace nakama {
namespace api {

static const char* Nakama_method_names[] = {
  "/nakama.api.Nakama/AddFriends",
  "/nakama.api.Nakama/AddGroupUsers",
  "/nakama.api.Nakama/AuthenticateCustom",
  "/nakama.api.Nakama/AuthenticateDevice",
  "/nakama.api.Nakama/AuthenticateEmail",
  "/nakama.api.Nakama/AuthenticateFacebook",
  "/nakama.api.Nakama/AuthenticateGameCenter",
  "/nakama.api.Nakama/AuthenticateGoogle",
  "/nakama.api.Nakama/AuthenticateSteam",
  "/nakama.api.Nakama/BlockFriends",
  "/nakama.api.Nakama/CreateGroup",
  "/nakama.api.Nakama/DeleteFriends",
  "/nakama.api.Nakama/DeleteGroup",
  "/nakama.api.Nakama/DeleteLeaderboardRecord",
  "/nakama.api.Nakama/DeleteNotifications",
  "/nakama.api.Nakama/DeleteStorageObjects",
  "/nakama.api.Nakama/GetAccount",
  "/nakama.api.Nakama/GetUsers",
  "/nakama.api.Nakama/Healthcheck",
  "/nakama.api.Nakama/ImportFacebookFriends",
  "/nakama.api.Nakama/JoinGroup",
  "/nakama.api.Nakama/JoinTournament",
  "/nakama.api.Nakama/KickGroupUsers",
  "/nakama.api.Nakama/LeaveGroup",
  "/nakama.api.Nakama/LinkCustom",
  "/nakama.api.Nakama/LinkDevice",
  "/nakama.api.Nakama/LinkEmail",
  "/nakama.api.Nakama/LinkFacebook",
  "/nakama.api.Nakama/LinkGameCenter",
  "/nakama.api.Nakama/LinkGoogle",
  "/nakama.api.Nakama/LinkSteam",
  "/nakama.api.Nakama/ListChannelMessages",
  "/nakama.api.Nakama/ListFriends",
  "/nakama.api.Nakama/ListGroups",
  "/nakama.api.Nakama/ListGroupUsers",
  "/nakama.api.Nakama/ListLeaderboardRecords",
  "/nakama.api.Nakama/ListLeaderboardRecordsAroundOwner",
  "/nakama.api.Nakama/ListMatches",
  "/nakama.api.Nakama/ListNotifications",
  "/nakama.api.Nakama/ListStorageObjects",
  "/nakama.api.Nakama/ListTournaments",
  "/nakama.api.Nakama/ListTournamentRecords",
  "/nakama.api.Nakama/ListTournamentRecordsAroundOwner",
  "/nakama.api.Nakama/ListUserGroups",
  "/nakama.api.Nakama/PromoteGroupUsers",
  "/nakama.api.Nakama/ReadStorageObjects",
  "/nakama.api.Nakama/RpcFunc",
  "/nakama.api.Nakama/UnlinkCustom",
  "/nakama.api.Nakama/UnlinkDevice",
  "/nakama.api.Nakama/UnlinkEmail",
  "/nakama.api.Nakama/UnlinkFacebook",
  "/nakama.api.Nakama/UnlinkGameCenter",
  "/nakama.api.Nakama/UnlinkGoogle",
  "/nakama.api.Nakama/UnlinkSteam",
  "/nakama.api.Nakama/UpdateAccount",
  "/nakama.api.Nakama/UpdateGroup",
  "/nakama.api.Nakama/WriteLeaderboardRecord",
  "/nakama.api.Nakama/WriteStorageObjects",
  "/nakama.api.Nakama/WriteTournamentRecord",
};

std::unique_ptr< Nakama::Stub> Nakama::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Nakama::Stub> stub(new Nakama::Stub(channel));
  return stub;
}

Nakama::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_AddFriends_(Nakama_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AddGroupUsers_(Nakama_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AuthenticateCustom_(Nakama_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AuthenticateDevice_(Nakama_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AuthenticateEmail_(Nakama_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AuthenticateFacebook_(Nakama_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AuthenticateGameCenter_(Nakama_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AuthenticateGoogle_(Nakama_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AuthenticateSteam_(Nakama_method_names[8], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_BlockFriends_(Nakama_method_names[9], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateGroup_(Nakama_method_names[10], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteFriends_(Nakama_method_names[11], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteGroup_(Nakama_method_names[12], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteLeaderboardRecord_(Nakama_method_names[13], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteNotifications_(Nakama_method_names[14], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteStorageObjects_(Nakama_method_names[15], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetAccount_(Nakama_method_names[16], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetUsers_(Nakama_method_names[17], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Healthcheck_(Nakama_method_names[18], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ImportFacebookFriends_(Nakama_method_names[19], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_JoinGroup_(Nakama_method_names[20], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_JoinTournament_(Nakama_method_names[21], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_KickGroupUsers_(Nakama_method_names[22], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_LeaveGroup_(Nakama_method_names[23], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_LinkCustom_(Nakama_method_names[24], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_LinkDevice_(Nakama_method_names[25], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_LinkEmail_(Nakama_method_names[26], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_LinkFacebook_(Nakama_method_names[27], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_LinkGameCenter_(Nakama_method_names[28], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_LinkGoogle_(Nakama_method_names[29], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_LinkSteam_(Nakama_method_names[30], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListChannelMessages_(Nakama_method_names[31], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListFriends_(Nakama_method_names[32], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListGroups_(Nakama_method_names[33], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListGroupUsers_(Nakama_method_names[34], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListLeaderboardRecords_(Nakama_method_names[35], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListLeaderboardRecordsAroundOwner_(Nakama_method_names[36], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListMatches_(Nakama_method_names[37], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListNotifications_(Nakama_method_names[38], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListStorageObjects_(Nakama_method_names[39], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListTournaments_(Nakama_method_names[40], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListTournamentRecords_(Nakama_method_names[41], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListTournamentRecordsAroundOwner_(Nakama_method_names[42], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListUserGroups_(Nakama_method_names[43], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PromoteGroupUsers_(Nakama_method_names[44], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ReadStorageObjects_(Nakama_method_names[45], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RpcFunc_(Nakama_method_names[46], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UnlinkCustom_(Nakama_method_names[47], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UnlinkDevice_(Nakama_method_names[48], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UnlinkEmail_(Nakama_method_names[49], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UnlinkFacebook_(Nakama_method_names[50], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UnlinkGameCenter_(Nakama_method_names[51], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UnlinkGoogle_(Nakama_method_names[52], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UnlinkSteam_(Nakama_method_names[53], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateAccount_(Nakama_method_names[54], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateGroup_(Nakama_method_names[55], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_WriteLeaderboardRecord_(Nakama_method_names[56], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_WriteStorageObjects_(Nakama_method_names[57], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_WriteTournamentRecord_(Nakama_method_names[58], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Nakama::Stub::AddFriends(::grpc::ClientContext* context, const ::nakama::api::AddFriendsRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_AddFriends_, context, request, response);
}

void Nakama::Stub::experimental_async::AddFriends(::grpc::ClientContext* context, const ::nakama::api::AddFriendsRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AddFriends_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Nakama::Stub::AsyncAddFriendsRaw(::grpc::ClientContext* context, const ::nakama::api::AddFriendsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_AddFriends_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Nakama::Stub::PrepareAsyncAddFriendsRaw(::grpc::ClientContext* context, const ::nakama::api::AddFriendsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_AddFriends_, context, request, false);
}

::grpc::Status Nakama::Stub::AddGroupUsers(::grpc::ClientContext* context, const ::nakama::api::AddGroupUsersRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_AddGroupUsers_, context, request, response);
}

void Nakama::Stub::experimental_async::AddGroupUsers(::grpc::ClientContext* context, const ::nakama::api::AddGroupUsersRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AddGroupUsers_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Nakama::Stub::AsyncAddGroupUsersRaw(::grpc::ClientContext* context, const ::nakama::api::AddGroupUsersRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_AddGroupUsers_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Nakama::Stub::PrepareAsyncAddGroupUsersRaw(::grpc::ClientContext* context, const ::nakama::api::AddGroupUsersRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_AddGroupUsers_, context, request, false);
}

::grpc::Status Nakama::Stub::AuthenticateCustom(::grpc::ClientContext* context, const ::nakama::api::AuthenticateCustomRequest& request, ::nakama::api::Session* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_AuthenticateCustom_, context, request, response);
}

void Nakama::Stub::experimental_async::AuthenticateCustom(::grpc::ClientContext* context, const ::nakama::api::AuthenticateCustomRequest* request, ::nakama::api::Session* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AuthenticateCustom_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::nakama::api::Session>* Nakama::Stub::AsyncAuthenticateCustomRaw(::grpc::ClientContext* context, const ::nakama::api::AuthenticateCustomRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::nakama::api::Session>::Create(channel_.get(), cq, rpcmethod_AuthenticateCustom_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::nakama::api::Session>* Nakama::Stub::PrepareAsyncAuthenticateCustomRaw(::grpc::ClientContext* context, const ::nakama::api::AuthenticateCustomRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::nakama::api::Session>::Create(channel_.get(), cq, rpcmethod_AuthenticateCustom_, context, request, false);
}

::grpc::Status Nakama::Stub::AuthenticateDevice(::grpc::ClientContext* context, const ::nakama::api::AuthenticateDeviceRequest& request, ::nakama::api::Session* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_AuthenticateDevice_, context, request, response);
}

void Nakama::Stub::experimental_async::AuthenticateDevice(::grpc::ClientContext* context, const ::nakama::api::AuthenticateDeviceRequest* request, ::nakama::api::Session* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AuthenticateDevice_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::nakama::api::Session>* Nakama::Stub::AsyncAuthenticateDeviceRaw(::grpc::ClientContext* context, const ::nakama::api::AuthenticateDeviceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::nakama::api::Session>::Create(channel_.get(), cq, rpcmethod_AuthenticateDevice_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::nakama::api::Session>* Nakama::Stub::PrepareAsyncAuthenticateDeviceRaw(::grpc::ClientContext* context, const ::nakama::api::AuthenticateDeviceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::nakama::api::Session>::Create(channel_.get(), cq, rpcmethod_AuthenticateDevice_, context, request, false);
}

::grpc::Status Nakama::Stub::AuthenticateEmail(::grpc::ClientContext* context, const ::nakama::api::AuthenticateEmailRequest& request, ::nakama::api::Session* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_AuthenticateEmail_, context, request, response);
}

void Nakama::Stub::experimental_async::AuthenticateEmail(::grpc::ClientContext* context, const ::nakama::api::AuthenticateEmailRequest* request, ::nakama::api::Session* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AuthenticateEmail_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::nakama::api::Session>* Nakama::Stub::AsyncAuthenticateEmailRaw(::grpc::ClientContext* context, const ::nakama::api::AuthenticateEmailRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::nakama::api::Session>::Create(channel_.get(), cq, rpcmethod_AuthenticateEmail_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::nakama::api::Session>* Nakama::Stub::PrepareAsyncAuthenticateEmailRaw(::grpc::ClientContext* context, const ::nakama::api::AuthenticateEmailRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::nakama::api::Session>::Create(channel_.get(), cq, rpcmethod_AuthenticateEmail_, context, request, false);
}

::grpc::Status Nakama::Stub::AuthenticateFacebook(::grpc::ClientContext* context, const ::nakama::api::AuthenticateFacebookRequest& request, ::nakama::api::Session* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_AuthenticateFacebook_, context, request, response);
}

void Nakama::Stub::experimental_async::AuthenticateFacebook(::grpc::ClientContext* context, const ::nakama::api::AuthenticateFacebookRequest* request, ::nakama::api::Session* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AuthenticateFacebook_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::nakama::api::Session>* Nakama::Stub::AsyncAuthenticateFacebookRaw(::grpc::ClientContext* context, const ::nakama::api::AuthenticateFacebookRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::nakama::api::Session>::Create(channel_.get(), cq, rpcmethod_AuthenticateFacebook_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::nakama::api::Session>* Nakama::Stub::PrepareAsyncAuthenticateFacebookRaw(::grpc::ClientContext* context, const ::nakama::api::AuthenticateFacebookRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::nakama::api::Session>::Create(channel_.get(), cq, rpcmethod_AuthenticateFacebook_, context, request, false);
}

::grpc::Status Nakama::Stub::AuthenticateGameCenter(::grpc::ClientContext* context, const ::nakama::api::AuthenticateGameCenterRequest& request, ::nakama::api::Session* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_AuthenticateGameCenter_, context, request, response);
}

void Nakama::Stub::experimental_async::AuthenticateGameCenter(::grpc::ClientContext* context, const ::nakama::api::AuthenticateGameCenterRequest* request, ::nakama::api::Session* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AuthenticateGameCenter_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::nakama::api::Session>* Nakama::Stub::AsyncAuthenticateGameCenterRaw(::grpc::ClientContext* context, const ::nakama::api::AuthenticateGameCenterRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::nakama::api::Session>::Create(channel_.get(), cq, rpcmethod_AuthenticateGameCenter_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::nakama::api::Session>* Nakama::Stub::PrepareAsyncAuthenticateGameCenterRaw(::grpc::ClientContext* context, const ::nakama::api::AuthenticateGameCenterRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::nakama::api::Session>::Create(channel_.get(), cq, rpcmethod_AuthenticateGameCenter_, context, request, false);
}

::grpc::Status Nakama::Stub::AuthenticateGoogle(::grpc::ClientContext* context, const ::nakama::api::AuthenticateGoogleRequest& request, ::nakama::api::Session* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_AuthenticateGoogle_, context, request, response);
}

void Nakama::Stub::experimental_async::AuthenticateGoogle(::grpc::ClientContext* context, const ::nakama::api::AuthenticateGoogleRequest* request, ::nakama::api::Session* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AuthenticateGoogle_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::nakama::api::Session>* Nakama::Stub::AsyncAuthenticateGoogleRaw(::grpc::ClientContext* context, const ::nakama::api::AuthenticateGoogleRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::nakama::api::Session>::Create(channel_.get(), cq, rpcmethod_AuthenticateGoogle_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::nakama::api::Session>* Nakama::Stub::PrepareAsyncAuthenticateGoogleRaw(::grpc::ClientContext* context, const ::nakama::api::AuthenticateGoogleRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::nakama::api::Session>::Create(channel_.get(), cq, rpcmethod_AuthenticateGoogle_, context, request, false);
}

::grpc::Status Nakama::Stub::AuthenticateSteam(::grpc::ClientContext* context, const ::nakama::api::AuthenticateSteamRequest& request, ::nakama::api::Session* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_AuthenticateSteam_, context, request, response);
}

void Nakama::Stub::experimental_async::AuthenticateSteam(::grpc::ClientContext* context, const ::nakama::api::AuthenticateSteamRequest* request, ::nakama::api::Session* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AuthenticateSteam_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::nakama::api::Session>* Nakama::Stub::AsyncAuthenticateSteamRaw(::grpc::ClientContext* context, const ::nakama::api::AuthenticateSteamRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::nakama::api::Session>::Create(channel_.get(), cq, rpcmethod_AuthenticateSteam_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::nakama::api::Session>* Nakama::Stub::PrepareAsyncAuthenticateSteamRaw(::grpc::ClientContext* context, const ::nakama::api::AuthenticateSteamRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::nakama::api::Session>::Create(channel_.get(), cq, rpcmethod_AuthenticateSteam_, context, request, false);
}

::grpc::Status Nakama::Stub::BlockFriends(::grpc::ClientContext* context, const ::nakama::api::BlockFriendsRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_BlockFriends_, context, request, response);
}

void Nakama::Stub::experimental_async::BlockFriends(::grpc::ClientContext* context, const ::nakama::api::BlockFriendsRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_BlockFriends_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Nakama::Stub::AsyncBlockFriendsRaw(::grpc::ClientContext* context, const ::nakama::api::BlockFriendsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_BlockFriends_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Nakama::Stub::PrepareAsyncBlockFriendsRaw(::grpc::ClientContext* context, const ::nakama::api::BlockFriendsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_BlockFriends_, context, request, false);
}

::grpc::Status Nakama::Stub::CreateGroup(::grpc::ClientContext* context, const ::nakama::api::CreateGroupRequest& request, ::nakama::api::Group* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CreateGroup_, context, request, response);
}

void Nakama::Stub::experimental_async::CreateGroup(::grpc::ClientContext* context, const ::nakama::api::CreateGroupRequest* request, ::nakama::api::Group* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateGroup_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::nakama::api::Group>* Nakama::Stub::AsyncCreateGroupRaw(::grpc::ClientContext* context, const ::nakama::api::CreateGroupRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::nakama::api::Group>::Create(channel_.get(), cq, rpcmethod_CreateGroup_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::nakama::api::Group>* Nakama::Stub::PrepareAsyncCreateGroupRaw(::grpc::ClientContext* context, const ::nakama::api::CreateGroupRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::nakama::api::Group>::Create(channel_.get(), cq, rpcmethod_CreateGroup_, context, request, false);
}

::grpc::Status Nakama::Stub::DeleteFriends(::grpc::ClientContext* context, const ::nakama::api::DeleteFriendsRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeleteFriends_, context, request, response);
}

void Nakama::Stub::experimental_async::DeleteFriends(::grpc::ClientContext* context, const ::nakama::api::DeleteFriendsRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteFriends_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Nakama::Stub::AsyncDeleteFriendsRaw(::grpc::ClientContext* context, const ::nakama::api::DeleteFriendsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_DeleteFriends_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Nakama::Stub::PrepareAsyncDeleteFriendsRaw(::grpc::ClientContext* context, const ::nakama::api::DeleteFriendsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_DeleteFriends_, context, request, false);
}

::grpc::Status Nakama::Stub::DeleteGroup(::grpc::ClientContext* context, const ::nakama::api::DeleteGroupRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeleteGroup_, context, request, response);
}

void Nakama::Stub::experimental_async::DeleteGroup(::grpc::ClientContext* context, const ::nakama::api::DeleteGroupRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteGroup_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Nakama::Stub::AsyncDeleteGroupRaw(::grpc::ClientContext* context, const ::nakama::api::DeleteGroupRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_DeleteGroup_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Nakama::Stub::PrepareAsyncDeleteGroupRaw(::grpc::ClientContext* context, const ::nakama::api::DeleteGroupRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_DeleteGroup_, context, request, false);
}

::grpc::Status Nakama::Stub::DeleteLeaderboardRecord(::grpc::ClientContext* context, const ::nakama::api::DeleteLeaderboardRecordRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeleteLeaderboardRecord_, context, request, response);
}

void Nakama::Stub::experimental_async::DeleteLeaderboardRecord(::grpc::ClientContext* context, const ::nakama::api::DeleteLeaderboardRecordRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteLeaderboardRecord_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Nakama::Stub::AsyncDeleteLeaderboardRecordRaw(::grpc::ClientContext* context, const ::nakama::api::DeleteLeaderboardRecordRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_DeleteLeaderboardRecord_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Nakama::Stub::PrepareAsyncDeleteLeaderboardRecordRaw(::grpc::ClientContext* context, const ::nakama::api::DeleteLeaderboardRecordRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_DeleteLeaderboardRecord_, context, request, false);
}

::grpc::Status Nakama::Stub::DeleteNotifications(::grpc::ClientContext* context, const ::nakama::api::DeleteNotificationsRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeleteNotifications_, context, request, response);
}

void Nakama::Stub::experimental_async::DeleteNotifications(::grpc::ClientContext* context, const ::nakama::api::DeleteNotificationsRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteNotifications_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Nakama::Stub::AsyncDeleteNotificationsRaw(::grpc::ClientContext* context, const ::nakama::api::DeleteNotificationsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_DeleteNotifications_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Nakama::Stub::PrepareAsyncDeleteNotificationsRaw(::grpc::ClientContext* context, const ::nakama::api::DeleteNotificationsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_DeleteNotifications_, context, request, false);
}

::grpc::Status Nakama::Stub::DeleteStorageObjects(::grpc::ClientContext* context, const ::nakama::api::DeleteStorageObjectsRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeleteStorageObjects_, context, request, response);
}

void Nakama::Stub::experimental_async::DeleteStorageObjects(::grpc::ClientContext* context, const ::nakama::api::DeleteStorageObjectsRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteStorageObjects_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Nakama::Stub::AsyncDeleteStorageObjectsRaw(::grpc::ClientContext* context, const ::nakama::api::DeleteStorageObjectsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_DeleteStorageObjects_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Nakama::Stub::PrepareAsyncDeleteStorageObjectsRaw(::grpc::ClientContext* context, const ::nakama::api::DeleteStorageObjectsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_DeleteStorageObjects_, context, request, false);
}

::grpc::Status Nakama::Stub::GetAccount(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::nakama::api::Account* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetAccount_, context, request, response);
}

void Nakama::Stub::experimental_async::GetAccount(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::nakama::api::Account* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetAccount_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::nakama::api::Account>* Nakama::Stub::AsyncGetAccountRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::nakama::api::Account>::Create(channel_.get(), cq, rpcmethod_GetAccount_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::nakama::api::Account>* Nakama::Stub::PrepareAsyncGetAccountRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::nakama::api::Account>::Create(channel_.get(), cq, rpcmethod_GetAccount_, context, request, false);
}

::grpc::Status Nakama::Stub::GetUsers(::grpc::ClientContext* context, const ::nakama::api::GetUsersRequest& request, ::nakama::api::Users* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetUsers_, context, request, response);
}

void Nakama::Stub::experimental_async::GetUsers(::grpc::ClientContext* context, const ::nakama::api::GetUsersRequest* request, ::nakama::api::Users* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetUsers_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::nakama::api::Users>* Nakama::Stub::AsyncGetUsersRaw(::grpc::ClientContext* context, const ::nakama::api::GetUsersRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::nakama::api::Users>::Create(channel_.get(), cq, rpcmethod_GetUsers_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::nakama::api::Users>* Nakama::Stub::PrepareAsyncGetUsersRaw(::grpc::ClientContext* context, const ::nakama::api::GetUsersRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::nakama::api::Users>::Create(channel_.get(), cq, rpcmethod_GetUsers_, context, request, false);
}

::grpc::Status Nakama::Stub::Healthcheck(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Healthcheck_, context, request, response);
}

void Nakama::Stub::experimental_async::Healthcheck(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Healthcheck_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Nakama::Stub::AsyncHealthcheckRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_Healthcheck_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Nakama::Stub::PrepareAsyncHealthcheckRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_Healthcheck_, context, request, false);
}

::grpc::Status Nakama::Stub::ImportFacebookFriends(::grpc::ClientContext* context, const ::nakama::api::ImportFacebookFriendsRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ImportFacebookFriends_, context, request, response);
}

void Nakama::Stub::experimental_async::ImportFacebookFriends(::grpc::ClientContext* context, const ::nakama::api::ImportFacebookFriendsRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ImportFacebookFriends_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Nakama::Stub::AsyncImportFacebookFriendsRaw(::grpc::ClientContext* context, const ::nakama::api::ImportFacebookFriendsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_ImportFacebookFriends_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Nakama::Stub::PrepareAsyncImportFacebookFriendsRaw(::grpc::ClientContext* context, const ::nakama::api::ImportFacebookFriendsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_ImportFacebookFriends_, context, request, false);
}

::grpc::Status Nakama::Stub::JoinGroup(::grpc::ClientContext* context, const ::nakama::api::JoinGroupRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_JoinGroup_, context, request, response);
}

void Nakama::Stub::experimental_async::JoinGroup(::grpc::ClientContext* context, const ::nakama::api::JoinGroupRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_JoinGroup_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Nakama::Stub::AsyncJoinGroupRaw(::grpc::ClientContext* context, const ::nakama::api::JoinGroupRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_JoinGroup_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Nakama::Stub::PrepareAsyncJoinGroupRaw(::grpc::ClientContext* context, const ::nakama::api::JoinGroupRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_JoinGroup_, context, request, false);
}

::grpc::Status Nakama::Stub::JoinTournament(::grpc::ClientContext* context, const ::nakama::api::JoinTournamentRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_JoinTournament_, context, request, response);
}

void Nakama::Stub::experimental_async::JoinTournament(::grpc::ClientContext* context, const ::nakama::api::JoinTournamentRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_JoinTournament_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Nakama::Stub::AsyncJoinTournamentRaw(::grpc::ClientContext* context, const ::nakama::api::JoinTournamentRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_JoinTournament_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Nakama::Stub::PrepareAsyncJoinTournamentRaw(::grpc::ClientContext* context, const ::nakama::api::JoinTournamentRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_JoinTournament_, context, request, false);
}

::grpc::Status Nakama::Stub::KickGroupUsers(::grpc::ClientContext* context, const ::nakama::api::KickGroupUsersRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_KickGroupUsers_, context, request, response);
}

void Nakama::Stub::experimental_async::KickGroupUsers(::grpc::ClientContext* context, const ::nakama::api::KickGroupUsersRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_KickGroupUsers_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Nakama::Stub::AsyncKickGroupUsersRaw(::grpc::ClientContext* context, const ::nakama::api::KickGroupUsersRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_KickGroupUsers_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Nakama::Stub::PrepareAsyncKickGroupUsersRaw(::grpc::ClientContext* context, const ::nakama::api::KickGroupUsersRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_KickGroupUsers_, context, request, false);
}

::grpc::Status Nakama::Stub::LeaveGroup(::grpc::ClientContext* context, const ::nakama::api::LeaveGroupRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_LeaveGroup_, context, request, response);
}

void Nakama::Stub::experimental_async::LeaveGroup(::grpc::ClientContext* context, const ::nakama::api::LeaveGroupRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_LeaveGroup_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Nakama::Stub::AsyncLeaveGroupRaw(::grpc::ClientContext* context, const ::nakama::api::LeaveGroupRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_LeaveGroup_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Nakama::Stub::PrepareAsyncLeaveGroupRaw(::grpc::ClientContext* context, const ::nakama::api::LeaveGroupRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_LeaveGroup_, context, request, false);
}

::grpc::Status Nakama::Stub::LinkCustom(::grpc::ClientContext* context, const ::nakama::api::AccountCustom& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_LinkCustom_, context, request, response);
}

void Nakama::Stub::experimental_async::LinkCustom(::grpc::ClientContext* context, const ::nakama::api::AccountCustom* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_LinkCustom_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Nakama::Stub::AsyncLinkCustomRaw(::grpc::ClientContext* context, const ::nakama::api::AccountCustom& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_LinkCustom_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Nakama::Stub::PrepareAsyncLinkCustomRaw(::grpc::ClientContext* context, const ::nakama::api::AccountCustom& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_LinkCustom_, context, request, false);
}

::grpc::Status Nakama::Stub::LinkDevice(::grpc::ClientContext* context, const ::nakama::api::AccountDevice& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_LinkDevice_, context, request, response);
}

void Nakama::Stub::experimental_async::LinkDevice(::grpc::ClientContext* context, const ::nakama::api::AccountDevice* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_LinkDevice_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Nakama::Stub::AsyncLinkDeviceRaw(::grpc::ClientContext* context, const ::nakama::api::AccountDevice& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_LinkDevice_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Nakama::Stub::PrepareAsyncLinkDeviceRaw(::grpc::ClientContext* context, const ::nakama::api::AccountDevice& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_LinkDevice_, context, request, false);
}

::grpc::Status Nakama::Stub::LinkEmail(::grpc::ClientContext* context, const ::nakama::api::AccountEmail& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_LinkEmail_, context, request, response);
}

void Nakama::Stub::experimental_async::LinkEmail(::grpc::ClientContext* context, const ::nakama::api::AccountEmail* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_LinkEmail_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Nakama::Stub::AsyncLinkEmailRaw(::grpc::ClientContext* context, const ::nakama::api::AccountEmail& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_LinkEmail_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Nakama::Stub::PrepareAsyncLinkEmailRaw(::grpc::ClientContext* context, const ::nakama::api::AccountEmail& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_LinkEmail_, context, request, false);
}

::grpc::Status Nakama::Stub::LinkFacebook(::grpc::ClientContext* context, const ::nakama::api::LinkFacebookRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_LinkFacebook_, context, request, response);
}

void Nakama::Stub::experimental_async::LinkFacebook(::grpc::ClientContext* context, const ::nakama::api::LinkFacebookRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_LinkFacebook_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Nakama::Stub::AsyncLinkFacebookRaw(::grpc::ClientContext* context, const ::nakama::api::LinkFacebookRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_LinkFacebook_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Nakama::Stub::PrepareAsyncLinkFacebookRaw(::grpc::ClientContext* context, const ::nakama::api::LinkFacebookRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_LinkFacebook_, context, request, false);
}

::grpc::Status Nakama::Stub::LinkGameCenter(::grpc::ClientContext* context, const ::nakama::api::AccountGameCenter& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_LinkGameCenter_, context, request, response);
}

void Nakama::Stub::experimental_async::LinkGameCenter(::grpc::ClientContext* context, const ::nakama::api::AccountGameCenter* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_LinkGameCenter_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Nakama::Stub::AsyncLinkGameCenterRaw(::grpc::ClientContext* context, const ::nakama::api::AccountGameCenter& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_LinkGameCenter_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Nakama::Stub::PrepareAsyncLinkGameCenterRaw(::grpc::ClientContext* context, const ::nakama::api::AccountGameCenter& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_LinkGameCenter_, context, request, false);
}

::grpc::Status Nakama::Stub::LinkGoogle(::grpc::ClientContext* context, const ::nakama::api::AccountGoogle& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_LinkGoogle_, context, request, response);
}

void Nakama::Stub::experimental_async::LinkGoogle(::grpc::ClientContext* context, const ::nakama::api::AccountGoogle* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_LinkGoogle_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Nakama::Stub::AsyncLinkGoogleRaw(::grpc::ClientContext* context, const ::nakama::api::AccountGoogle& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_LinkGoogle_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Nakama::Stub::PrepareAsyncLinkGoogleRaw(::grpc::ClientContext* context, const ::nakama::api::AccountGoogle& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_LinkGoogle_, context, request, false);
}

::grpc::Status Nakama::Stub::LinkSteam(::grpc::ClientContext* context, const ::nakama::api::AccountSteam& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_LinkSteam_, context, request, response);
}

void Nakama::Stub::experimental_async::LinkSteam(::grpc::ClientContext* context, const ::nakama::api::AccountSteam* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_LinkSteam_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Nakama::Stub::AsyncLinkSteamRaw(::grpc::ClientContext* context, const ::nakama::api::AccountSteam& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_LinkSteam_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Nakama::Stub::PrepareAsyncLinkSteamRaw(::grpc::ClientContext* context, const ::nakama::api::AccountSteam& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_LinkSteam_, context, request, false);
}

::grpc::Status Nakama::Stub::ListChannelMessages(::grpc::ClientContext* context, const ::nakama::api::ListChannelMessagesRequest& request, ::nakama::api::ChannelMessageList* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListChannelMessages_, context, request, response);
}

void Nakama::Stub::experimental_async::ListChannelMessages(::grpc::ClientContext* context, const ::nakama::api::ListChannelMessagesRequest* request, ::nakama::api::ChannelMessageList* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListChannelMessages_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::nakama::api::ChannelMessageList>* Nakama::Stub::AsyncListChannelMessagesRaw(::grpc::ClientContext* context, const ::nakama::api::ListChannelMessagesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::nakama::api::ChannelMessageList>::Create(channel_.get(), cq, rpcmethod_ListChannelMessages_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::nakama::api::ChannelMessageList>* Nakama::Stub::PrepareAsyncListChannelMessagesRaw(::grpc::ClientContext* context, const ::nakama::api::ListChannelMessagesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::nakama::api::ChannelMessageList>::Create(channel_.get(), cq, rpcmethod_ListChannelMessages_, context, request, false);
}

::grpc::Status Nakama::Stub::ListFriends(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::nakama::api::Friends* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListFriends_, context, request, response);
}

void Nakama::Stub::experimental_async::ListFriends(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::nakama::api::Friends* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListFriends_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::nakama::api::Friends>* Nakama::Stub::AsyncListFriendsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::nakama::api::Friends>::Create(channel_.get(), cq, rpcmethod_ListFriends_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::nakama::api::Friends>* Nakama::Stub::PrepareAsyncListFriendsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::nakama::api::Friends>::Create(channel_.get(), cq, rpcmethod_ListFriends_, context, request, false);
}

::grpc::Status Nakama::Stub::ListGroups(::grpc::ClientContext* context, const ::nakama::api::ListGroupsRequest& request, ::nakama::api::GroupList* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListGroups_, context, request, response);
}

void Nakama::Stub::experimental_async::ListGroups(::grpc::ClientContext* context, const ::nakama::api::ListGroupsRequest* request, ::nakama::api::GroupList* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListGroups_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::nakama::api::GroupList>* Nakama::Stub::AsyncListGroupsRaw(::grpc::ClientContext* context, const ::nakama::api::ListGroupsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::nakama::api::GroupList>::Create(channel_.get(), cq, rpcmethod_ListGroups_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::nakama::api::GroupList>* Nakama::Stub::PrepareAsyncListGroupsRaw(::grpc::ClientContext* context, const ::nakama::api::ListGroupsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::nakama::api::GroupList>::Create(channel_.get(), cq, rpcmethod_ListGroups_, context, request, false);
}

::grpc::Status Nakama::Stub::ListGroupUsers(::grpc::ClientContext* context, const ::nakama::api::ListGroupUsersRequest& request, ::nakama::api::GroupUserList* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListGroupUsers_, context, request, response);
}

void Nakama::Stub::experimental_async::ListGroupUsers(::grpc::ClientContext* context, const ::nakama::api::ListGroupUsersRequest* request, ::nakama::api::GroupUserList* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListGroupUsers_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::nakama::api::GroupUserList>* Nakama::Stub::AsyncListGroupUsersRaw(::grpc::ClientContext* context, const ::nakama::api::ListGroupUsersRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::nakama::api::GroupUserList>::Create(channel_.get(), cq, rpcmethod_ListGroupUsers_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::nakama::api::GroupUserList>* Nakama::Stub::PrepareAsyncListGroupUsersRaw(::grpc::ClientContext* context, const ::nakama::api::ListGroupUsersRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::nakama::api::GroupUserList>::Create(channel_.get(), cq, rpcmethod_ListGroupUsers_, context, request, false);
}

::grpc::Status Nakama::Stub::ListLeaderboardRecords(::grpc::ClientContext* context, const ::nakama::api::ListLeaderboardRecordsRequest& request, ::nakama::api::LeaderboardRecordList* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListLeaderboardRecords_, context, request, response);
}

void Nakama::Stub::experimental_async::ListLeaderboardRecords(::grpc::ClientContext* context, const ::nakama::api::ListLeaderboardRecordsRequest* request, ::nakama::api::LeaderboardRecordList* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListLeaderboardRecords_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::nakama::api::LeaderboardRecordList>* Nakama::Stub::AsyncListLeaderboardRecordsRaw(::grpc::ClientContext* context, const ::nakama::api::ListLeaderboardRecordsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::nakama::api::LeaderboardRecordList>::Create(channel_.get(), cq, rpcmethod_ListLeaderboardRecords_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::nakama::api::LeaderboardRecordList>* Nakama::Stub::PrepareAsyncListLeaderboardRecordsRaw(::grpc::ClientContext* context, const ::nakama::api::ListLeaderboardRecordsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::nakama::api::LeaderboardRecordList>::Create(channel_.get(), cq, rpcmethod_ListLeaderboardRecords_, context, request, false);
}

::grpc::Status Nakama::Stub::ListLeaderboardRecordsAroundOwner(::grpc::ClientContext* context, const ::nakama::api::ListLeaderboardRecordsAroundOwnerRequest& request, ::nakama::api::LeaderboardRecordList* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListLeaderboardRecordsAroundOwner_, context, request, response);
}

void Nakama::Stub::experimental_async::ListLeaderboardRecordsAroundOwner(::grpc::ClientContext* context, const ::nakama::api::ListLeaderboardRecordsAroundOwnerRequest* request, ::nakama::api::LeaderboardRecordList* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListLeaderboardRecordsAroundOwner_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::nakama::api::LeaderboardRecordList>* Nakama::Stub::AsyncListLeaderboardRecordsAroundOwnerRaw(::grpc::ClientContext* context, const ::nakama::api::ListLeaderboardRecordsAroundOwnerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::nakama::api::LeaderboardRecordList>::Create(channel_.get(), cq, rpcmethod_ListLeaderboardRecordsAroundOwner_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::nakama::api::LeaderboardRecordList>* Nakama::Stub::PrepareAsyncListLeaderboardRecordsAroundOwnerRaw(::grpc::ClientContext* context, const ::nakama::api::ListLeaderboardRecordsAroundOwnerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::nakama::api::LeaderboardRecordList>::Create(channel_.get(), cq, rpcmethod_ListLeaderboardRecordsAroundOwner_, context, request, false);
}

::grpc::Status Nakama::Stub::ListMatches(::grpc::ClientContext* context, const ::nakama::api::ListMatchesRequest& request, ::nakama::api::MatchList* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListMatches_, context, request, response);
}

void Nakama::Stub::experimental_async::ListMatches(::grpc::ClientContext* context, const ::nakama::api::ListMatchesRequest* request, ::nakama::api::MatchList* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListMatches_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::nakama::api::MatchList>* Nakama::Stub::AsyncListMatchesRaw(::grpc::ClientContext* context, const ::nakama::api::ListMatchesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::nakama::api::MatchList>::Create(channel_.get(), cq, rpcmethod_ListMatches_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::nakama::api::MatchList>* Nakama::Stub::PrepareAsyncListMatchesRaw(::grpc::ClientContext* context, const ::nakama::api::ListMatchesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::nakama::api::MatchList>::Create(channel_.get(), cq, rpcmethod_ListMatches_, context, request, false);
}

::grpc::Status Nakama::Stub::ListNotifications(::grpc::ClientContext* context, const ::nakama::api::ListNotificationsRequest& request, ::nakama::api::NotificationList* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListNotifications_, context, request, response);
}

void Nakama::Stub::experimental_async::ListNotifications(::grpc::ClientContext* context, const ::nakama::api::ListNotificationsRequest* request, ::nakama::api::NotificationList* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListNotifications_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::nakama::api::NotificationList>* Nakama::Stub::AsyncListNotificationsRaw(::grpc::ClientContext* context, const ::nakama::api::ListNotificationsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::nakama::api::NotificationList>::Create(channel_.get(), cq, rpcmethod_ListNotifications_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::nakama::api::NotificationList>* Nakama::Stub::PrepareAsyncListNotificationsRaw(::grpc::ClientContext* context, const ::nakama::api::ListNotificationsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::nakama::api::NotificationList>::Create(channel_.get(), cq, rpcmethod_ListNotifications_, context, request, false);
}

::grpc::Status Nakama::Stub::ListStorageObjects(::grpc::ClientContext* context, const ::nakama::api::ListStorageObjectsRequest& request, ::nakama::api::StorageObjectList* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListStorageObjects_, context, request, response);
}

void Nakama::Stub::experimental_async::ListStorageObjects(::grpc::ClientContext* context, const ::nakama::api::ListStorageObjectsRequest* request, ::nakama::api::StorageObjectList* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListStorageObjects_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::nakama::api::StorageObjectList>* Nakama::Stub::AsyncListStorageObjectsRaw(::grpc::ClientContext* context, const ::nakama::api::ListStorageObjectsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::nakama::api::StorageObjectList>::Create(channel_.get(), cq, rpcmethod_ListStorageObjects_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::nakama::api::StorageObjectList>* Nakama::Stub::PrepareAsyncListStorageObjectsRaw(::grpc::ClientContext* context, const ::nakama::api::ListStorageObjectsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::nakama::api::StorageObjectList>::Create(channel_.get(), cq, rpcmethod_ListStorageObjects_, context, request, false);
}

::grpc::Status Nakama::Stub::ListTournaments(::grpc::ClientContext* context, const ::nakama::api::ListTournamentsRequest& request, ::nakama::api::TournamentList* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListTournaments_, context, request, response);
}

void Nakama::Stub::experimental_async::ListTournaments(::grpc::ClientContext* context, const ::nakama::api::ListTournamentsRequest* request, ::nakama::api::TournamentList* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListTournaments_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::nakama::api::TournamentList>* Nakama::Stub::AsyncListTournamentsRaw(::grpc::ClientContext* context, const ::nakama::api::ListTournamentsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::nakama::api::TournamentList>::Create(channel_.get(), cq, rpcmethod_ListTournaments_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::nakama::api::TournamentList>* Nakama::Stub::PrepareAsyncListTournamentsRaw(::grpc::ClientContext* context, const ::nakama::api::ListTournamentsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::nakama::api::TournamentList>::Create(channel_.get(), cq, rpcmethod_ListTournaments_, context, request, false);
}

::grpc::Status Nakama::Stub::ListTournamentRecords(::grpc::ClientContext* context, const ::nakama::api::ListTournamentRecordsRequest& request, ::nakama::api::TournamentRecordList* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListTournamentRecords_, context, request, response);
}

void Nakama::Stub::experimental_async::ListTournamentRecords(::grpc::ClientContext* context, const ::nakama::api::ListTournamentRecordsRequest* request, ::nakama::api::TournamentRecordList* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListTournamentRecords_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::nakama::api::TournamentRecordList>* Nakama::Stub::AsyncListTournamentRecordsRaw(::grpc::ClientContext* context, const ::nakama::api::ListTournamentRecordsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::nakama::api::TournamentRecordList>::Create(channel_.get(), cq, rpcmethod_ListTournamentRecords_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::nakama::api::TournamentRecordList>* Nakama::Stub::PrepareAsyncListTournamentRecordsRaw(::grpc::ClientContext* context, const ::nakama::api::ListTournamentRecordsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::nakama::api::TournamentRecordList>::Create(channel_.get(), cq, rpcmethod_ListTournamentRecords_, context, request, false);
}

::grpc::Status Nakama::Stub::ListTournamentRecordsAroundOwner(::grpc::ClientContext* context, const ::nakama::api::ListTournamentRecordsAroundOwnerRequest& request, ::nakama::api::TournamentRecordList* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListTournamentRecordsAroundOwner_, context, request, response);
}

void Nakama::Stub::experimental_async::ListTournamentRecordsAroundOwner(::grpc::ClientContext* context, const ::nakama::api::ListTournamentRecordsAroundOwnerRequest* request, ::nakama::api::TournamentRecordList* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListTournamentRecordsAroundOwner_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::nakama::api::TournamentRecordList>* Nakama::Stub::AsyncListTournamentRecordsAroundOwnerRaw(::grpc::ClientContext* context, const ::nakama::api::ListTournamentRecordsAroundOwnerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::nakama::api::TournamentRecordList>::Create(channel_.get(), cq, rpcmethod_ListTournamentRecordsAroundOwner_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::nakama::api::TournamentRecordList>* Nakama::Stub::PrepareAsyncListTournamentRecordsAroundOwnerRaw(::grpc::ClientContext* context, const ::nakama::api::ListTournamentRecordsAroundOwnerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::nakama::api::TournamentRecordList>::Create(channel_.get(), cq, rpcmethod_ListTournamentRecordsAroundOwner_, context, request, false);
}

::grpc::Status Nakama::Stub::ListUserGroups(::grpc::ClientContext* context, const ::nakama::api::ListUserGroupsRequest& request, ::nakama::api::UserGroupList* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListUserGroups_, context, request, response);
}

void Nakama::Stub::experimental_async::ListUserGroups(::grpc::ClientContext* context, const ::nakama::api::ListUserGroupsRequest* request, ::nakama::api::UserGroupList* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListUserGroups_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::nakama::api::UserGroupList>* Nakama::Stub::AsyncListUserGroupsRaw(::grpc::ClientContext* context, const ::nakama::api::ListUserGroupsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::nakama::api::UserGroupList>::Create(channel_.get(), cq, rpcmethod_ListUserGroups_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::nakama::api::UserGroupList>* Nakama::Stub::PrepareAsyncListUserGroupsRaw(::grpc::ClientContext* context, const ::nakama::api::ListUserGroupsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::nakama::api::UserGroupList>::Create(channel_.get(), cq, rpcmethod_ListUserGroups_, context, request, false);
}

::grpc::Status Nakama::Stub::PromoteGroupUsers(::grpc::ClientContext* context, const ::nakama::api::PromoteGroupUsersRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_PromoteGroupUsers_, context, request, response);
}

void Nakama::Stub::experimental_async::PromoteGroupUsers(::grpc::ClientContext* context, const ::nakama::api::PromoteGroupUsersRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PromoteGroupUsers_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Nakama::Stub::AsyncPromoteGroupUsersRaw(::grpc::ClientContext* context, const ::nakama::api::PromoteGroupUsersRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_PromoteGroupUsers_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Nakama::Stub::PrepareAsyncPromoteGroupUsersRaw(::grpc::ClientContext* context, const ::nakama::api::PromoteGroupUsersRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_PromoteGroupUsers_, context, request, false);
}

::grpc::Status Nakama::Stub::ReadStorageObjects(::grpc::ClientContext* context, const ::nakama::api::ReadStorageObjectsRequest& request, ::nakama::api::StorageObjects* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ReadStorageObjects_, context, request, response);
}

void Nakama::Stub::experimental_async::ReadStorageObjects(::grpc::ClientContext* context, const ::nakama::api::ReadStorageObjectsRequest* request, ::nakama::api::StorageObjects* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ReadStorageObjects_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::nakama::api::StorageObjects>* Nakama::Stub::AsyncReadStorageObjectsRaw(::grpc::ClientContext* context, const ::nakama::api::ReadStorageObjectsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::nakama::api::StorageObjects>::Create(channel_.get(), cq, rpcmethod_ReadStorageObjects_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::nakama::api::StorageObjects>* Nakama::Stub::PrepareAsyncReadStorageObjectsRaw(::grpc::ClientContext* context, const ::nakama::api::ReadStorageObjectsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::nakama::api::StorageObjects>::Create(channel_.get(), cq, rpcmethod_ReadStorageObjects_, context, request, false);
}

::grpc::Status Nakama::Stub::RpcFunc(::grpc::ClientContext* context, const ::nakama::api::Rpc& request, ::nakama::api::Rpc* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RpcFunc_, context, request, response);
}

void Nakama::Stub::experimental_async::RpcFunc(::grpc::ClientContext* context, const ::nakama::api::Rpc* request, ::nakama::api::Rpc* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RpcFunc_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::nakama::api::Rpc>* Nakama::Stub::AsyncRpcFuncRaw(::grpc::ClientContext* context, const ::nakama::api::Rpc& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::nakama::api::Rpc>::Create(channel_.get(), cq, rpcmethod_RpcFunc_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::nakama::api::Rpc>* Nakama::Stub::PrepareAsyncRpcFuncRaw(::grpc::ClientContext* context, const ::nakama::api::Rpc& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::nakama::api::Rpc>::Create(channel_.get(), cq, rpcmethod_RpcFunc_, context, request, false);
}

::grpc::Status Nakama::Stub::UnlinkCustom(::grpc::ClientContext* context, const ::nakama::api::AccountCustom& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UnlinkCustom_, context, request, response);
}

void Nakama::Stub::experimental_async::UnlinkCustom(::grpc::ClientContext* context, const ::nakama::api::AccountCustom* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UnlinkCustom_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Nakama::Stub::AsyncUnlinkCustomRaw(::grpc::ClientContext* context, const ::nakama::api::AccountCustom& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_UnlinkCustom_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Nakama::Stub::PrepareAsyncUnlinkCustomRaw(::grpc::ClientContext* context, const ::nakama::api::AccountCustom& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_UnlinkCustom_, context, request, false);
}

::grpc::Status Nakama::Stub::UnlinkDevice(::grpc::ClientContext* context, const ::nakama::api::AccountDevice& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UnlinkDevice_, context, request, response);
}

void Nakama::Stub::experimental_async::UnlinkDevice(::grpc::ClientContext* context, const ::nakama::api::AccountDevice* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UnlinkDevice_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Nakama::Stub::AsyncUnlinkDeviceRaw(::grpc::ClientContext* context, const ::nakama::api::AccountDevice& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_UnlinkDevice_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Nakama::Stub::PrepareAsyncUnlinkDeviceRaw(::grpc::ClientContext* context, const ::nakama::api::AccountDevice& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_UnlinkDevice_, context, request, false);
}

::grpc::Status Nakama::Stub::UnlinkEmail(::grpc::ClientContext* context, const ::nakama::api::AccountEmail& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UnlinkEmail_, context, request, response);
}

void Nakama::Stub::experimental_async::UnlinkEmail(::grpc::ClientContext* context, const ::nakama::api::AccountEmail* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UnlinkEmail_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Nakama::Stub::AsyncUnlinkEmailRaw(::grpc::ClientContext* context, const ::nakama::api::AccountEmail& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_UnlinkEmail_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Nakama::Stub::PrepareAsyncUnlinkEmailRaw(::grpc::ClientContext* context, const ::nakama::api::AccountEmail& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_UnlinkEmail_, context, request, false);
}

::grpc::Status Nakama::Stub::UnlinkFacebook(::grpc::ClientContext* context, const ::nakama::api::AccountFacebook& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UnlinkFacebook_, context, request, response);
}

void Nakama::Stub::experimental_async::UnlinkFacebook(::grpc::ClientContext* context, const ::nakama::api::AccountFacebook* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UnlinkFacebook_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Nakama::Stub::AsyncUnlinkFacebookRaw(::grpc::ClientContext* context, const ::nakama::api::AccountFacebook& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_UnlinkFacebook_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Nakama::Stub::PrepareAsyncUnlinkFacebookRaw(::grpc::ClientContext* context, const ::nakama::api::AccountFacebook& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_UnlinkFacebook_, context, request, false);
}

::grpc::Status Nakama::Stub::UnlinkGameCenter(::grpc::ClientContext* context, const ::nakama::api::AccountGameCenter& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UnlinkGameCenter_, context, request, response);
}

void Nakama::Stub::experimental_async::UnlinkGameCenter(::grpc::ClientContext* context, const ::nakama::api::AccountGameCenter* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UnlinkGameCenter_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Nakama::Stub::AsyncUnlinkGameCenterRaw(::grpc::ClientContext* context, const ::nakama::api::AccountGameCenter& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_UnlinkGameCenter_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Nakama::Stub::PrepareAsyncUnlinkGameCenterRaw(::grpc::ClientContext* context, const ::nakama::api::AccountGameCenter& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_UnlinkGameCenter_, context, request, false);
}

::grpc::Status Nakama::Stub::UnlinkGoogle(::grpc::ClientContext* context, const ::nakama::api::AccountGoogle& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UnlinkGoogle_, context, request, response);
}

void Nakama::Stub::experimental_async::UnlinkGoogle(::grpc::ClientContext* context, const ::nakama::api::AccountGoogle* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UnlinkGoogle_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Nakama::Stub::AsyncUnlinkGoogleRaw(::grpc::ClientContext* context, const ::nakama::api::AccountGoogle& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_UnlinkGoogle_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Nakama::Stub::PrepareAsyncUnlinkGoogleRaw(::grpc::ClientContext* context, const ::nakama::api::AccountGoogle& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_UnlinkGoogle_, context, request, false);
}

::grpc::Status Nakama::Stub::UnlinkSteam(::grpc::ClientContext* context, const ::nakama::api::AccountSteam& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UnlinkSteam_, context, request, response);
}

void Nakama::Stub::experimental_async::UnlinkSteam(::grpc::ClientContext* context, const ::nakama::api::AccountSteam* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UnlinkSteam_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Nakama::Stub::AsyncUnlinkSteamRaw(::grpc::ClientContext* context, const ::nakama::api::AccountSteam& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_UnlinkSteam_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Nakama::Stub::PrepareAsyncUnlinkSteamRaw(::grpc::ClientContext* context, const ::nakama::api::AccountSteam& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_UnlinkSteam_, context, request, false);
}

::grpc::Status Nakama::Stub::UpdateAccount(::grpc::ClientContext* context, const ::nakama::api::UpdateAccountRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UpdateAccount_, context, request, response);
}

void Nakama::Stub::experimental_async::UpdateAccount(::grpc::ClientContext* context, const ::nakama::api::UpdateAccountRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UpdateAccount_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Nakama::Stub::AsyncUpdateAccountRaw(::grpc::ClientContext* context, const ::nakama::api::UpdateAccountRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_UpdateAccount_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Nakama::Stub::PrepareAsyncUpdateAccountRaw(::grpc::ClientContext* context, const ::nakama::api::UpdateAccountRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_UpdateAccount_, context, request, false);
}

::grpc::Status Nakama::Stub::UpdateGroup(::grpc::ClientContext* context, const ::nakama::api::UpdateGroupRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UpdateGroup_, context, request, response);
}

void Nakama::Stub::experimental_async::UpdateGroup(::grpc::ClientContext* context, const ::nakama::api::UpdateGroupRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UpdateGroup_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Nakama::Stub::AsyncUpdateGroupRaw(::grpc::ClientContext* context, const ::nakama::api::UpdateGroupRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_UpdateGroup_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Nakama::Stub::PrepareAsyncUpdateGroupRaw(::grpc::ClientContext* context, const ::nakama::api::UpdateGroupRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_UpdateGroup_, context, request, false);
}

::grpc::Status Nakama::Stub::WriteLeaderboardRecord(::grpc::ClientContext* context, const ::nakama::api::WriteLeaderboardRecordRequest& request, ::nakama::api::LeaderboardRecord* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_WriteLeaderboardRecord_, context, request, response);
}

void Nakama::Stub::experimental_async::WriteLeaderboardRecord(::grpc::ClientContext* context, const ::nakama::api::WriteLeaderboardRecordRequest* request, ::nakama::api::LeaderboardRecord* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_WriteLeaderboardRecord_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::nakama::api::LeaderboardRecord>* Nakama::Stub::AsyncWriteLeaderboardRecordRaw(::grpc::ClientContext* context, const ::nakama::api::WriteLeaderboardRecordRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::nakama::api::LeaderboardRecord>::Create(channel_.get(), cq, rpcmethod_WriteLeaderboardRecord_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::nakama::api::LeaderboardRecord>* Nakama::Stub::PrepareAsyncWriteLeaderboardRecordRaw(::grpc::ClientContext* context, const ::nakama::api::WriteLeaderboardRecordRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::nakama::api::LeaderboardRecord>::Create(channel_.get(), cq, rpcmethod_WriteLeaderboardRecord_, context, request, false);
}

::grpc::Status Nakama::Stub::WriteStorageObjects(::grpc::ClientContext* context, const ::nakama::api::WriteStorageObjectsRequest& request, ::nakama::api::StorageObjectAcks* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_WriteStorageObjects_, context, request, response);
}

void Nakama::Stub::experimental_async::WriteStorageObjects(::grpc::ClientContext* context, const ::nakama::api::WriteStorageObjectsRequest* request, ::nakama::api::StorageObjectAcks* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_WriteStorageObjects_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::nakama::api::StorageObjectAcks>* Nakama::Stub::AsyncWriteStorageObjectsRaw(::grpc::ClientContext* context, const ::nakama::api::WriteStorageObjectsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::nakama::api::StorageObjectAcks>::Create(channel_.get(), cq, rpcmethod_WriteStorageObjects_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::nakama::api::StorageObjectAcks>* Nakama::Stub::PrepareAsyncWriteStorageObjectsRaw(::grpc::ClientContext* context, const ::nakama::api::WriteStorageObjectsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::nakama::api::StorageObjectAcks>::Create(channel_.get(), cq, rpcmethod_WriteStorageObjects_, context, request, false);
}

::grpc::Status Nakama::Stub::WriteTournamentRecord(::grpc::ClientContext* context, const ::nakama::api::WriteTournamentRecordRequest& request, ::nakama::api::LeaderboardRecord* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_WriteTournamentRecord_, context, request, response);
}

void Nakama::Stub::experimental_async::WriteTournamentRecord(::grpc::ClientContext* context, const ::nakama::api::WriteTournamentRecordRequest* request, ::nakama::api::LeaderboardRecord* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_WriteTournamentRecord_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::nakama::api::LeaderboardRecord>* Nakama::Stub::AsyncWriteTournamentRecordRaw(::grpc::ClientContext* context, const ::nakama::api::WriteTournamentRecordRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::nakama::api::LeaderboardRecord>::Create(channel_.get(), cq, rpcmethod_WriteTournamentRecord_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::nakama::api::LeaderboardRecord>* Nakama::Stub::PrepareAsyncWriteTournamentRecordRaw(::grpc::ClientContext* context, const ::nakama::api::WriteTournamentRecordRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::nakama::api::LeaderboardRecord>::Create(channel_.get(), cq, rpcmethod_WriteTournamentRecord_, context, request, false);
}

Nakama::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Nakama_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Nakama::Service, ::nakama::api::AddFriendsRequest, ::google::protobuf::Empty>(
          std::mem_fn(&Nakama::Service::AddFriends), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Nakama_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Nakama::Service, ::nakama::api::AddGroupUsersRequest, ::google::protobuf::Empty>(
          std::mem_fn(&Nakama::Service::AddGroupUsers), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Nakama_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Nakama::Service, ::nakama::api::AuthenticateCustomRequest, ::nakama::api::Session>(
          std::mem_fn(&Nakama::Service::AuthenticateCustom), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Nakama_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Nakama::Service, ::nakama::api::AuthenticateDeviceRequest, ::nakama::api::Session>(
          std::mem_fn(&Nakama::Service::AuthenticateDevice), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Nakama_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Nakama::Service, ::nakama::api::AuthenticateEmailRequest, ::nakama::api::Session>(
          std::mem_fn(&Nakama::Service::AuthenticateEmail), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Nakama_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Nakama::Service, ::nakama::api::AuthenticateFacebookRequest, ::nakama::api::Session>(
          std::mem_fn(&Nakama::Service::AuthenticateFacebook), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Nakama_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Nakama::Service, ::nakama::api::AuthenticateGameCenterRequest, ::nakama::api::Session>(
          std::mem_fn(&Nakama::Service::AuthenticateGameCenter), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Nakama_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Nakama::Service, ::nakama::api::AuthenticateGoogleRequest, ::nakama::api::Session>(
          std::mem_fn(&Nakama::Service::AuthenticateGoogle), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Nakama_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Nakama::Service, ::nakama::api::AuthenticateSteamRequest, ::nakama::api::Session>(
          std::mem_fn(&Nakama::Service::AuthenticateSteam), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Nakama_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Nakama::Service, ::nakama::api::BlockFriendsRequest, ::google::protobuf::Empty>(
          std::mem_fn(&Nakama::Service::BlockFriends), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Nakama_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Nakama::Service, ::nakama::api::CreateGroupRequest, ::nakama::api::Group>(
          std::mem_fn(&Nakama::Service::CreateGroup), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Nakama_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Nakama::Service, ::nakama::api::DeleteFriendsRequest, ::google::protobuf::Empty>(
          std::mem_fn(&Nakama::Service::DeleteFriends), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Nakama_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Nakama::Service, ::nakama::api::DeleteGroupRequest, ::google::protobuf::Empty>(
          std::mem_fn(&Nakama::Service::DeleteGroup), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Nakama_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Nakama::Service, ::nakama::api::DeleteLeaderboardRecordRequest, ::google::protobuf::Empty>(
          std::mem_fn(&Nakama::Service::DeleteLeaderboardRecord), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Nakama_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Nakama::Service, ::nakama::api::DeleteNotificationsRequest, ::google::protobuf::Empty>(
          std::mem_fn(&Nakama::Service::DeleteNotifications), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Nakama_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Nakama::Service, ::nakama::api::DeleteStorageObjectsRequest, ::google::protobuf::Empty>(
          std::mem_fn(&Nakama::Service::DeleteStorageObjects), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Nakama_method_names[16],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Nakama::Service, ::google::protobuf::Empty, ::nakama::api::Account>(
          std::mem_fn(&Nakama::Service::GetAccount), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Nakama_method_names[17],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Nakama::Service, ::nakama::api::GetUsersRequest, ::nakama::api::Users>(
          std::mem_fn(&Nakama::Service::GetUsers), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Nakama_method_names[18],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Nakama::Service, ::google::protobuf::Empty, ::google::protobuf::Empty>(
          std::mem_fn(&Nakama::Service::Healthcheck), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Nakama_method_names[19],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Nakama::Service, ::nakama::api::ImportFacebookFriendsRequest, ::google::protobuf::Empty>(
          std::mem_fn(&Nakama::Service::ImportFacebookFriends), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Nakama_method_names[20],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Nakama::Service, ::nakama::api::JoinGroupRequest, ::google::protobuf::Empty>(
          std::mem_fn(&Nakama::Service::JoinGroup), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Nakama_method_names[21],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Nakama::Service, ::nakama::api::JoinTournamentRequest, ::google::protobuf::Empty>(
          std::mem_fn(&Nakama::Service::JoinTournament), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Nakama_method_names[22],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Nakama::Service, ::nakama::api::KickGroupUsersRequest, ::google::protobuf::Empty>(
          std::mem_fn(&Nakama::Service::KickGroupUsers), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Nakama_method_names[23],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Nakama::Service, ::nakama::api::LeaveGroupRequest, ::google::protobuf::Empty>(
          std::mem_fn(&Nakama::Service::LeaveGroup), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Nakama_method_names[24],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Nakama::Service, ::nakama::api::AccountCustom, ::google::protobuf::Empty>(
          std::mem_fn(&Nakama::Service::LinkCustom), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Nakama_method_names[25],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Nakama::Service, ::nakama::api::AccountDevice, ::google::protobuf::Empty>(
          std::mem_fn(&Nakama::Service::LinkDevice), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Nakama_method_names[26],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Nakama::Service, ::nakama::api::AccountEmail, ::google::protobuf::Empty>(
          std::mem_fn(&Nakama::Service::LinkEmail), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Nakama_method_names[27],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Nakama::Service, ::nakama::api::LinkFacebookRequest, ::google::protobuf::Empty>(
          std::mem_fn(&Nakama::Service::LinkFacebook), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Nakama_method_names[28],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Nakama::Service, ::nakama::api::AccountGameCenter, ::google::protobuf::Empty>(
          std::mem_fn(&Nakama::Service::LinkGameCenter), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Nakama_method_names[29],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Nakama::Service, ::nakama::api::AccountGoogle, ::google::protobuf::Empty>(
          std::mem_fn(&Nakama::Service::LinkGoogle), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Nakama_method_names[30],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Nakama::Service, ::nakama::api::AccountSteam, ::google::protobuf::Empty>(
          std::mem_fn(&Nakama::Service::LinkSteam), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Nakama_method_names[31],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Nakama::Service, ::nakama::api::ListChannelMessagesRequest, ::nakama::api::ChannelMessageList>(
          std::mem_fn(&Nakama::Service::ListChannelMessages), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Nakama_method_names[32],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Nakama::Service, ::google::protobuf::Empty, ::nakama::api::Friends>(
          std::mem_fn(&Nakama::Service::ListFriends), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Nakama_method_names[33],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Nakama::Service, ::nakama::api::ListGroupsRequest, ::nakama::api::GroupList>(
          std::mem_fn(&Nakama::Service::ListGroups), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Nakama_method_names[34],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Nakama::Service, ::nakama::api::ListGroupUsersRequest, ::nakama::api::GroupUserList>(
          std::mem_fn(&Nakama::Service::ListGroupUsers), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Nakama_method_names[35],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Nakama::Service, ::nakama::api::ListLeaderboardRecordsRequest, ::nakama::api::LeaderboardRecordList>(
          std::mem_fn(&Nakama::Service::ListLeaderboardRecords), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Nakama_method_names[36],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Nakama::Service, ::nakama::api::ListLeaderboardRecordsAroundOwnerRequest, ::nakama::api::LeaderboardRecordList>(
          std::mem_fn(&Nakama::Service::ListLeaderboardRecordsAroundOwner), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Nakama_method_names[37],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Nakama::Service, ::nakama::api::ListMatchesRequest, ::nakama::api::MatchList>(
          std::mem_fn(&Nakama::Service::ListMatches), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Nakama_method_names[38],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Nakama::Service, ::nakama::api::ListNotificationsRequest, ::nakama::api::NotificationList>(
          std::mem_fn(&Nakama::Service::ListNotifications), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Nakama_method_names[39],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Nakama::Service, ::nakama::api::ListStorageObjectsRequest, ::nakama::api::StorageObjectList>(
          std::mem_fn(&Nakama::Service::ListStorageObjects), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Nakama_method_names[40],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Nakama::Service, ::nakama::api::ListTournamentsRequest, ::nakama::api::TournamentList>(
          std::mem_fn(&Nakama::Service::ListTournaments), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Nakama_method_names[41],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Nakama::Service, ::nakama::api::ListTournamentRecordsRequest, ::nakama::api::TournamentRecordList>(
          std::mem_fn(&Nakama::Service::ListTournamentRecords), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Nakama_method_names[42],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Nakama::Service, ::nakama::api::ListTournamentRecordsAroundOwnerRequest, ::nakama::api::TournamentRecordList>(
          std::mem_fn(&Nakama::Service::ListTournamentRecordsAroundOwner), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Nakama_method_names[43],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Nakama::Service, ::nakama::api::ListUserGroupsRequest, ::nakama::api::UserGroupList>(
          std::mem_fn(&Nakama::Service::ListUserGroups), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Nakama_method_names[44],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Nakama::Service, ::nakama::api::PromoteGroupUsersRequest, ::google::protobuf::Empty>(
          std::mem_fn(&Nakama::Service::PromoteGroupUsers), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Nakama_method_names[45],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Nakama::Service, ::nakama::api::ReadStorageObjectsRequest, ::nakama::api::StorageObjects>(
          std::mem_fn(&Nakama::Service::ReadStorageObjects), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Nakama_method_names[46],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Nakama::Service, ::nakama::api::Rpc, ::nakama::api::Rpc>(
          std::mem_fn(&Nakama::Service::RpcFunc), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Nakama_method_names[47],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Nakama::Service, ::nakama::api::AccountCustom, ::google::protobuf::Empty>(
          std::mem_fn(&Nakama::Service::UnlinkCustom), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Nakama_method_names[48],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Nakama::Service, ::nakama::api::AccountDevice, ::google::protobuf::Empty>(
          std::mem_fn(&Nakama::Service::UnlinkDevice), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Nakama_method_names[49],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Nakama::Service, ::nakama::api::AccountEmail, ::google::protobuf::Empty>(
          std::mem_fn(&Nakama::Service::UnlinkEmail), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Nakama_method_names[50],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Nakama::Service, ::nakama::api::AccountFacebook, ::google::protobuf::Empty>(
          std::mem_fn(&Nakama::Service::UnlinkFacebook), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Nakama_method_names[51],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Nakama::Service, ::nakama::api::AccountGameCenter, ::google::protobuf::Empty>(
          std::mem_fn(&Nakama::Service::UnlinkGameCenter), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Nakama_method_names[52],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Nakama::Service, ::nakama::api::AccountGoogle, ::google::protobuf::Empty>(
          std::mem_fn(&Nakama::Service::UnlinkGoogle), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Nakama_method_names[53],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Nakama::Service, ::nakama::api::AccountSteam, ::google::protobuf::Empty>(
          std::mem_fn(&Nakama::Service::UnlinkSteam), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Nakama_method_names[54],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Nakama::Service, ::nakama::api::UpdateAccountRequest, ::google::protobuf::Empty>(
          std::mem_fn(&Nakama::Service::UpdateAccount), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Nakama_method_names[55],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Nakama::Service, ::nakama::api::UpdateGroupRequest, ::google::protobuf::Empty>(
          std::mem_fn(&Nakama::Service::UpdateGroup), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Nakama_method_names[56],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Nakama::Service, ::nakama::api::WriteLeaderboardRecordRequest, ::nakama::api::LeaderboardRecord>(
          std::mem_fn(&Nakama::Service::WriteLeaderboardRecord), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Nakama_method_names[57],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Nakama::Service, ::nakama::api::WriteStorageObjectsRequest, ::nakama::api::StorageObjectAcks>(
          std::mem_fn(&Nakama::Service::WriteStorageObjects), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Nakama_method_names[58],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Nakama::Service, ::nakama::api::WriteTournamentRecordRequest, ::nakama::api::LeaderboardRecord>(
          std::mem_fn(&Nakama::Service::WriteTournamentRecord), this)));
}

Nakama::Service::~Service() {
}

::grpc::Status Nakama::Service::AddFriends(::grpc::ServerContext* context, const ::nakama::api::AddFriendsRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Nakama::Service::AddGroupUsers(::grpc::ServerContext* context, const ::nakama::api::AddGroupUsersRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Nakama::Service::AuthenticateCustom(::grpc::ServerContext* context, const ::nakama::api::AuthenticateCustomRequest* request, ::nakama::api::Session* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Nakama::Service::AuthenticateDevice(::grpc::ServerContext* context, const ::nakama::api::AuthenticateDeviceRequest* request, ::nakama::api::Session* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Nakama::Service::AuthenticateEmail(::grpc::ServerContext* context, const ::nakama::api::AuthenticateEmailRequest* request, ::nakama::api::Session* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Nakama::Service::AuthenticateFacebook(::grpc::ServerContext* context, const ::nakama::api::AuthenticateFacebookRequest* request, ::nakama::api::Session* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Nakama::Service::AuthenticateGameCenter(::grpc::ServerContext* context, const ::nakama::api::AuthenticateGameCenterRequest* request, ::nakama::api::Session* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Nakama::Service::AuthenticateGoogle(::grpc::ServerContext* context, const ::nakama::api::AuthenticateGoogleRequest* request, ::nakama::api::Session* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Nakama::Service::AuthenticateSteam(::grpc::ServerContext* context, const ::nakama::api::AuthenticateSteamRequest* request, ::nakama::api::Session* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Nakama::Service::BlockFriends(::grpc::ServerContext* context, const ::nakama::api::BlockFriendsRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Nakama::Service::CreateGroup(::grpc::ServerContext* context, const ::nakama::api::CreateGroupRequest* request, ::nakama::api::Group* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Nakama::Service::DeleteFriends(::grpc::ServerContext* context, const ::nakama::api::DeleteFriendsRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Nakama::Service::DeleteGroup(::grpc::ServerContext* context, const ::nakama::api::DeleteGroupRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Nakama::Service::DeleteLeaderboardRecord(::grpc::ServerContext* context, const ::nakama::api::DeleteLeaderboardRecordRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Nakama::Service::DeleteNotifications(::grpc::ServerContext* context, const ::nakama::api::DeleteNotificationsRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Nakama::Service::DeleteStorageObjects(::grpc::ServerContext* context, const ::nakama::api::DeleteStorageObjectsRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Nakama::Service::GetAccount(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::nakama::api::Account* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Nakama::Service::GetUsers(::grpc::ServerContext* context, const ::nakama::api::GetUsersRequest* request, ::nakama::api::Users* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Nakama::Service::Healthcheck(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Nakama::Service::ImportFacebookFriends(::grpc::ServerContext* context, const ::nakama::api::ImportFacebookFriendsRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Nakama::Service::JoinGroup(::grpc::ServerContext* context, const ::nakama::api::JoinGroupRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Nakama::Service::JoinTournament(::grpc::ServerContext* context, const ::nakama::api::JoinTournamentRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Nakama::Service::KickGroupUsers(::grpc::ServerContext* context, const ::nakama::api::KickGroupUsersRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Nakama::Service::LeaveGroup(::grpc::ServerContext* context, const ::nakama::api::LeaveGroupRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Nakama::Service::LinkCustom(::grpc::ServerContext* context, const ::nakama::api::AccountCustom* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Nakama::Service::LinkDevice(::grpc::ServerContext* context, const ::nakama::api::AccountDevice* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Nakama::Service::LinkEmail(::grpc::ServerContext* context, const ::nakama::api::AccountEmail* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Nakama::Service::LinkFacebook(::grpc::ServerContext* context, const ::nakama::api::LinkFacebookRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Nakama::Service::LinkGameCenter(::grpc::ServerContext* context, const ::nakama::api::AccountGameCenter* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Nakama::Service::LinkGoogle(::grpc::ServerContext* context, const ::nakama::api::AccountGoogle* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Nakama::Service::LinkSteam(::grpc::ServerContext* context, const ::nakama::api::AccountSteam* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Nakama::Service::ListChannelMessages(::grpc::ServerContext* context, const ::nakama::api::ListChannelMessagesRequest* request, ::nakama::api::ChannelMessageList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Nakama::Service::ListFriends(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::nakama::api::Friends* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Nakama::Service::ListGroups(::grpc::ServerContext* context, const ::nakama::api::ListGroupsRequest* request, ::nakama::api::GroupList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Nakama::Service::ListGroupUsers(::grpc::ServerContext* context, const ::nakama::api::ListGroupUsersRequest* request, ::nakama::api::GroupUserList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Nakama::Service::ListLeaderboardRecords(::grpc::ServerContext* context, const ::nakama::api::ListLeaderboardRecordsRequest* request, ::nakama::api::LeaderboardRecordList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Nakama::Service::ListLeaderboardRecordsAroundOwner(::grpc::ServerContext* context, const ::nakama::api::ListLeaderboardRecordsAroundOwnerRequest* request, ::nakama::api::LeaderboardRecordList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Nakama::Service::ListMatches(::grpc::ServerContext* context, const ::nakama::api::ListMatchesRequest* request, ::nakama::api::MatchList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Nakama::Service::ListNotifications(::grpc::ServerContext* context, const ::nakama::api::ListNotificationsRequest* request, ::nakama::api::NotificationList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Nakama::Service::ListStorageObjects(::grpc::ServerContext* context, const ::nakama::api::ListStorageObjectsRequest* request, ::nakama::api::StorageObjectList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Nakama::Service::ListTournaments(::grpc::ServerContext* context, const ::nakama::api::ListTournamentsRequest* request, ::nakama::api::TournamentList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Nakama::Service::ListTournamentRecords(::grpc::ServerContext* context, const ::nakama::api::ListTournamentRecordsRequest* request, ::nakama::api::TournamentRecordList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Nakama::Service::ListTournamentRecordsAroundOwner(::grpc::ServerContext* context, const ::nakama::api::ListTournamentRecordsAroundOwnerRequest* request, ::nakama::api::TournamentRecordList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Nakama::Service::ListUserGroups(::grpc::ServerContext* context, const ::nakama::api::ListUserGroupsRequest* request, ::nakama::api::UserGroupList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Nakama::Service::PromoteGroupUsers(::grpc::ServerContext* context, const ::nakama::api::PromoteGroupUsersRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Nakama::Service::ReadStorageObjects(::grpc::ServerContext* context, const ::nakama::api::ReadStorageObjectsRequest* request, ::nakama::api::StorageObjects* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Nakama::Service::RpcFunc(::grpc::ServerContext* context, const ::nakama::api::Rpc* request, ::nakama::api::Rpc* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Nakama::Service::UnlinkCustom(::grpc::ServerContext* context, const ::nakama::api::AccountCustom* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Nakama::Service::UnlinkDevice(::grpc::ServerContext* context, const ::nakama::api::AccountDevice* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Nakama::Service::UnlinkEmail(::grpc::ServerContext* context, const ::nakama::api::AccountEmail* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Nakama::Service::UnlinkFacebook(::grpc::ServerContext* context, const ::nakama::api::AccountFacebook* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Nakama::Service::UnlinkGameCenter(::grpc::ServerContext* context, const ::nakama::api::AccountGameCenter* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Nakama::Service::UnlinkGoogle(::grpc::ServerContext* context, const ::nakama::api::AccountGoogle* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Nakama::Service::UnlinkSteam(::grpc::ServerContext* context, const ::nakama::api::AccountSteam* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Nakama::Service::UpdateAccount(::grpc::ServerContext* context, const ::nakama::api::UpdateAccountRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Nakama::Service::UpdateGroup(::grpc::ServerContext* context, const ::nakama::api::UpdateGroupRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Nakama::Service::WriteLeaderboardRecord(::grpc::ServerContext* context, const ::nakama::api::WriteLeaderboardRecordRequest* request, ::nakama::api::LeaderboardRecord* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Nakama::Service::WriteStorageObjects(::grpc::ServerContext* context, const ::nakama::api::WriteStorageObjectsRequest* request, ::nakama::api::StorageObjectAcks* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Nakama::Service::WriteTournamentRecord(::grpc::ServerContext* context, const ::nakama::api::WriteTournamentRecordRequest* request, ::nakama::api::LeaderboardRecord* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace nakama
}  // namespace api

#endif  // BUILD_GRPC_CLIENT
