// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: github.com/heroiclabs/nakama/api/api.proto

#include "github.com/heroiclabs/nakama/api/api.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_AccountCustom;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_AccountDevice;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_AccountEmail;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_AccountFacebook;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_AccountGameCenter;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_AccountGoogle;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_AccountSteam;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_DeleteStorageObjectId;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ReadStorageObjectId;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_StorageObjectAck;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_WriteLeaderboardRecordRequest_LeaderboardRecordWrite;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_WriteTournamentRecordRequest_TournamentRecordWrite;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Match;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Notification;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_StorageObject;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Tournament;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_User;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_WriteStorageObject;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Friend;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Group;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_GroupUserList_GroupUser;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_LeaderboardRecord;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_UserGroupList_UserGroup;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_ChannelMessage;
}  // namespace protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto
namespace protobuf_google_2fprotobuf_2ftimestamp_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fprotobuf_2ftimestamp_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Timestamp;
}  // namespace protobuf_google_2fprotobuf_2ftimestamp_2eproto
namespace protobuf_google_2fprotobuf_2fwrappers_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fprotobuf_2fwrappers_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_BoolValue;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fprotobuf_2fwrappers_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Int32Value;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fprotobuf_2fwrappers_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_StringValue;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fprotobuf_2fwrappers_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_UInt32Value;
}  // namespace protobuf_google_2fprotobuf_2fwrappers_2eproto
namespace nakama {
namespace api {
class AccountDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Account>
      _instance;
} _Account_default_instance_;
class AccountCustomDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AccountCustom>
      _instance;
} _AccountCustom_default_instance_;
class AccountDeviceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AccountDevice>
      _instance;
} _AccountDevice_default_instance_;
class AccountEmailDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AccountEmail>
      _instance;
} _AccountEmail_default_instance_;
class AccountFacebookDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AccountFacebook>
      _instance;
} _AccountFacebook_default_instance_;
class AccountGameCenterDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AccountGameCenter>
      _instance;
} _AccountGameCenter_default_instance_;
class AccountGoogleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AccountGoogle>
      _instance;
} _AccountGoogle_default_instance_;
class AccountSteamDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AccountSteam>
      _instance;
} _AccountSteam_default_instance_;
class AddFriendsRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AddFriendsRequest>
      _instance;
} _AddFriendsRequest_default_instance_;
class AddGroupUsersRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AddGroupUsersRequest>
      _instance;
} _AddGroupUsersRequest_default_instance_;
class AuthenticateCustomRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AuthenticateCustomRequest>
      _instance;
} _AuthenticateCustomRequest_default_instance_;
class AuthenticateDeviceRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AuthenticateDeviceRequest>
      _instance;
} _AuthenticateDeviceRequest_default_instance_;
class AuthenticateEmailRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AuthenticateEmailRequest>
      _instance;
} _AuthenticateEmailRequest_default_instance_;
class AuthenticateFacebookRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AuthenticateFacebookRequest>
      _instance;
} _AuthenticateFacebookRequest_default_instance_;
class AuthenticateGameCenterRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AuthenticateGameCenterRequest>
      _instance;
} _AuthenticateGameCenterRequest_default_instance_;
class AuthenticateGoogleRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AuthenticateGoogleRequest>
      _instance;
} _AuthenticateGoogleRequest_default_instance_;
class AuthenticateSteamRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AuthenticateSteamRequest>
      _instance;
} _AuthenticateSteamRequest_default_instance_;
class BlockFriendsRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BlockFriendsRequest>
      _instance;
} _BlockFriendsRequest_default_instance_;
class ChannelMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ChannelMessage>
      _instance;
} _ChannelMessage_default_instance_;
class ChannelMessageListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ChannelMessageList>
      _instance;
} _ChannelMessageList_default_instance_;
class CreateGroupRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CreateGroupRequest>
      _instance;
} _CreateGroupRequest_default_instance_;
class DeleteFriendsRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DeleteFriendsRequest>
      _instance;
} _DeleteFriendsRequest_default_instance_;
class DeleteGroupRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DeleteGroupRequest>
      _instance;
} _DeleteGroupRequest_default_instance_;
class DeleteLeaderboardRecordRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DeleteLeaderboardRecordRequest>
      _instance;
} _DeleteLeaderboardRecordRequest_default_instance_;
class DeleteNotificationsRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DeleteNotificationsRequest>
      _instance;
} _DeleteNotificationsRequest_default_instance_;
class DeleteStorageObjectIdDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DeleteStorageObjectId>
      _instance;
} _DeleteStorageObjectId_default_instance_;
class DeleteStorageObjectsRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DeleteStorageObjectsRequest>
      _instance;
} _DeleteStorageObjectsRequest_default_instance_;
class FriendDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Friend>
      _instance;
} _Friend_default_instance_;
class FriendsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Friends>
      _instance;
} _Friends_default_instance_;
class GetUsersRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetUsersRequest>
      _instance;
} _GetUsersRequest_default_instance_;
class GroupDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Group>
      _instance;
} _Group_default_instance_;
class GroupListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GroupList>
      _instance;
} _GroupList_default_instance_;
class GroupUserList_GroupUserDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GroupUserList_GroupUser>
      _instance;
} _GroupUserList_GroupUser_default_instance_;
class GroupUserListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GroupUserList>
      _instance;
} _GroupUserList_default_instance_;
class ImportFacebookFriendsRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ImportFacebookFriendsRequest>
      _instance;
} _ImportFacebookFriendsRequest_default_instance_;
class JoinGroupRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<JoinGroupRequest>
      _instance;
} _JoinGroupRequest_default_instance_;
class JoinTournamentRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<JoinTournamentRequest>
      _instance;
} _JoinTournamentRequest_default_instance_;
class KickGroupUsersRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<KickGroupUsersRequest>
      _instance;
} _KickGroupUsersRequest_default_instance_;
class LeaderboardRecordDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LeaderboardRecord>
      _instance;
} _LeaderboardRecord_default_instance_;
class LeaderboardRecordListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LeaderboardRecordList>
      _instance;
} _LeaderboardRecordList_default_instance_;
class LeaveGroupRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LeaveGroupRequest>
      _instance;
} _LeaveGroupRequest_default_instance_;
class LinkFacebookRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LinkFacebookRequest>
      _instance;
} _LinkFacebookRequest_default_instance_;
class ListChannelMessagesRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ListChannelMessagesRequest>
      _instance;
} _ListChannelMessagesRequest_default_instance_;
class ListGroupsRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ListGroupsRequest>
      _instance;
} _ListGroupsRequest_default_instance_;
class ListGroupUsersRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ListGroupUsersRequest>
      _instance;
} _ListGroupUsersRequest_default_instance_;
class ListLeaderboardRecordsAroundOwnerRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ListLeaderboardRecordsAroundOwnerRequest>
      _instance;
} _ListLeaderboardRecordsAroundOwnerRequest_default_instance_;
class ListLeaderboardRecordsRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ListLeaderboardRecordsRequest>
      _instance;
} _ListLeaderboardRecordsRequest_default_instance_;
class ListMatchesRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ListMatchesRequest>
      _instance;
} _ListMatchesRequest_default_instance_;
class ListNotificationsRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ListNotificationsRequest>
      _instance;
} _ListNotificationsRequest_default_instance_;
class ListStorageObjectsRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ListStorageObjectsRequest>
      _instance;
} _ListStorageObjectsRequest_default_instance_;
class ListTournamentRecordsAroundOwnerRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ListTournamentRecordsAroundOwnerRequest>
      _instance;
} _ListTournamentRecordsAroundOwnerRequest_default_instance_;
class ListTournamentRecordsRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ListTournamentRecordsRequest>
      _instance;
} _ListTournamentRecordsRequest_default_instance_;
class ListTournamentsRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ListTournamentsRequest>
      _instance;
} _ListTournamentsRequest_default_instance_;
class ListUserGroupsRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ListUserGroupsRequest>
      _instance;
} _ListUserGroupsRequest_default_instance_;
class MatchDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Match>
      _instance;
} _Match_default_instance_;
class MatchListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MatchList>
      _instance;
} _MatchList_default_instance_;
class NotificationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Notification>
      _instance;
} _Notification_default_instance_;
class NotificationListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NotificationList>
      _instance;
} _NotificationList_default_instance_;
class PromoteGroupUsersRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PromoteGroupUsersRequest>
      _instance;
} _PromoteGroupUsersRequest_default_instance_;
class ReadStorageObjectIdDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReadStorageObjectId>
      _instance;
} _ReadStorageObjectId_default_instance_;
class ReadStorageObjectsRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReadStorageObjectsRequest>
      _instance;
} _ReadStorageObjectsRequest_default_instance_;
class RpcDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Rpc>
      _instance;
} _Rpc_default_instance_;
class SessionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Session>
      _instance;
} _Session_default_instance_;
class StorageObjectDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StorageObject>
      _instance;
} _StorageObject_default_instance_;
class StorageObjectAckDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StorageObjectAck>
      _instance;
} _StorageObjectAck_default_instance_;
class StorageObjectAcksDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StorageObjectAcks>
      _instance;
} _StorageObjectAcks_default_instance_;
class StorageObjectsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StorageObjects>
      _instance;
} _StorageObjects_default_instance_;
class StorageObjectListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StorageObjectList>
      _instance;
} _StorageObjectList_default_instance_;
class TournamentDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Tournament>
      _instance;
} _Tournament_default_instance_;
class TournamentListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TournamentList>
      _instance;
} _TournamentList_default_instance_;
class TournamentRecordListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TournamentRecordList>
      _instance;
} _TournamentRecordList_default_instance_;
class UpdateAccountRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UpdateAccountRequest>
      _instance;
} _UpdateAccountRequest_default_instance_;
class UpdateGroupRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UpdateGroupRequest>
      _instance;
} _UpdateGroupRequest_default_instance_;
class UserDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<User>
      _instance;
} _User_default_instance_;
class UserGroupList_UserGroupDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserGroupList_UserGroup>
      _instance;
} _UserGroupList_UserGroup_default_instance_;
class UserGroupListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserGroupList>
      _instance;
} _UserGroupList_default_instance_;
class UsersDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Users>
      _instance;
} _Users_default_instance_;
class WriteLeaderboardRecordRequest_LeaderboardRecordWriteDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<WriteLeaderboardRecordRequest_LeaderboardRecordWrite>
      _instance;
} _WriteLeaderboardRecordRequest_LeaderboardRecordWrite_default_instance_;
class WriteLeaderboardRecordRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<WriteLeaderboardRecordRequest>
      _instance;
} _WriteLeaderboardRecordRequest_default_instance_;
class WriteStorageObjectDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<WriteStorageObject>
      _instance;
} _WriteStorageObject_default_instance_;
class WriteStorageObjectsRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<WriteStorageObjectsRequest>
      _instance;
} _WriteStorageObjectsRequest_default_instance_;
class WriteTournamentRecordRequest_TournamentRecordWriteDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<WriteTournamentRecordRequest_TournamentRecordWrite>
      _instance;
} _WriteTournamentRecordRequest_TournamentRecordWrite_default_instance_;
class WriteTournamentRecordRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<WriteTournamentRecordRequest>
      _instance;
} _WriteTournamentRecordRequest_default_instance_;
}  // namespace api
}  // namespace nakama
namespace protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto {
static void InitDefaultsAccount() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_Account_default_instance_;
    new (ptr) ::nakama::api::Account();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nakama::api::Account::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_Account =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsAccount}, {
      &protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_User.base,
      &protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_AccountDevice.base,
      &protobuf_google_2fprotobuf_2ftimestamp_2eproto::scc_info_Timestamp.base,}};

static void InitDefaultsAccountCustom() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_AccountCustom_default_instance_;
    new (ptr) ::nakama::api::AccountCustom();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nakama::api::AccountCustom::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AccountCustom =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAccountCustom}, {}};

static void InitDefaultsAccountDevice() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_AccountDevice_default_instance_;
    new (ptr) ::nakama::api::AccountDevice();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nakama::api::AccountDevice::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AccountDevice =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAccountDevice}, {}};

static void InitDefaultsAccountEmail() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_AccountEmail_default_instance_;
    new (ptr) ::nakama::api::AccountEmail();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nakama::api::AccountEmail::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AccountEmail =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAccountEmail}, {}};

static void InitDefaultsAccountFacebook() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_AccountFacebook_default_instance_;
    new (ptr) ::nakama::api::AccountFacebook();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nakama::api::AccountFacebook::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AccountFacebook =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAccountFacebook}, {}};

static void InitDefaultsAccountGameCenter() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_AccountGameCenter_default_instance_;
    new (ptr) ::nakama::api::AccountGameCenter();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nakama::api::AccountGameCenter::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AccountGameCenter =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAccountGameCenter}, {}};

static void InitDefaultsAccountGoogle() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_AccountGoogle_default_instance_;
    new (ptr) ::nakama::api::AccountGoogle();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nakama::api::AccountGoogle::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AccountGoogle =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAccountGoogle}, {}};

static void InitDefaultsAccountSteam() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_AccountSteam_default_instance_;
    new (ptr) ::nakama::api::AccountSteam();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nakama::api::AccountSteam::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AccountSteam =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAccountSteam}, {}};

static void InitDefaultsAddFriendsRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_AddFriendsRequest_default_instance_;
    new (ptr) ::nakama::api::AddFriendsRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nakama::api::AddFriendsRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AddFriendsRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAddFriendsRequest}, {}};

static void InitDefaultsAddGroupUsersRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_AddGroupUsersRequest_default_instance_;
    new (ptr) ::nakama::api::AddGroupUsersRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nakama::api::AddGroupUsersRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AddGroupUsersRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAddGroupUsersRequest}, {}};

static void InitDefaultsAuthenticateCustomRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_AuthenticateCustomRequest_default_instance_;
    new (ptr) ::nakama::api::AuthenticateCustomRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nakama::api::AuthenticateCustomRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_AuthenticateCustomRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsAuthenticateCustomRequest}, {
      &protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_AccountCustom.base,
      &protobuf_google_2fprotobuf_2fwrappers_2eproto::scc_info_BoolValue.base,}};

static void InitDefaultsAuthenticateDeviceRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_AuthenticateDeviceRequest_default_instance_;
    new (ptr) ::nakama::api::AuthenticateDeviceRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nakama::api::AuthenticateDeviceRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_AuthenticateDeviceRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsAuthenticateDeviceRequest}, {
      &protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_AccountDevice.base,
      &protobuf_google_2fprotobuf_2fwrappers_2eproto::scc_info_BoolValue.base,}};

static void InitDefaultsAuthenticateEmailRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_AuthenticateEmailRequest_default_instance_;
    new (ptr) ::nakama::api::AuthenticateEmailRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nakama::api::AuthenticateEmailRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_AuthenticateEmailRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsAuthenticateEmailRequest}, {
      &protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_AccountEmail.base,
      &protobuf_google_2fprotobuf_2fwrappers_2eproto::scc_info_BoolValue.base,}};

static void InitDefaultsAuthenticateFacebookRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_AuthenticateFacebookRequest_default_instance_;
    new (ptr) ::nakama::api::AuthenticateFacebookRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nakama::api::AuthenticateFacebookRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_AuthenticateFacebookRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsAuthenticateFacebookRequest}, {
      &protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_AccountFacebook.base,
      &protobuf_google_2fprotobuf_2fwrappers_2eproto::scc_info_BoolValue.base,}};

static void InitDefaultsAuthenticateGameCenterRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_AuthenticateGameCenterRequest_default_instance_;
    new (ptr) ::nakama::api::AuthenticateGameCenterRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nakama::api::AuthenticateGameCenterRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_AuthenticateGameCenterRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsAuthenticateGameCenterRequest}, {
      &protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_AccountGameCenter.base,
      &protobuf_google_2fprotobuf_2fwrappers_2eproto::scc_info_BoolValue.base,}};

static void InitDefaultsAuthenticateGoogleRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_AuthenticateGoogleRequest_default_instance_;
    new (ptr) ::nakama::api::AuthenticateGoogleRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nakama::api::AuthenticateGoogleRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_AuthenticateGoogleRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsAuthenticateGoogleRequest}, {
      &protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_AccountGoogle.base,
      &protobuf_google_2fprotobuf_2fwrappers_2eproto::scc_info_BoolValue.base,}};

static void InitDefaultsAuthenticateSteamRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_AuthenticateSteamRequest_default_instance_;
    new (ptr) ::nakama::api::AuthenticateSteamRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nakama::api::AuthenticateSteamRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_AuthenticateSteamRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsAuthenticateSteamRequest}, {
      &protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_AccountSteam.base,
      &protobuf_google_2fprotobuf_2fwrappers_2eproto::scc_info_BoolValue.base,}};

static void InitDefaultsBlockFriendsRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_BlockFriendsRequest_default_instance_;
    new (ptr) ::nakama::api::BlockFriendsRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nakama::api::BlockFriendsRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_BlockFriendsRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsBlockFriendsRequest}, {}};

static void InitDefaultsChannelMessage() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_ChannelMessage_default_instance_;
    new (ptr) ::nakama::api::ChannelMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nakama::api::ChannelMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_ChannelMessage =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsChannelMessage}, {
      &protobuf_google_2fprotobuf_2fwrappers_2eproto::scc_info_Int32Value.base,
      &protobuf_google_2fprotobuf_2ftimestamp_2eproto::scc_info_Timestamp.base,
      &protobuf_google_2fprotobuf_2fwrappers_2eproto::scc_info_BoolValue.base,}};

static void InitDefaultsChannelMessageList() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_ChannelMessageList_default_instance_;
    new (ptr) ::nakama::api::ChannelMessageList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nakama::api::ChannelMessageList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ChannelMessageList =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsChannelMessageList}, {
      &protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_ChannelMessage.base,}};

static void InitDefaultsCreateGroupRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_CreateGroupRequest_default_instance_;
    new (ptr) ::nakama::api::CreateGroupRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nakama::api::CreateGroupRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CreateGroupRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCreateGroupRequest}, {}};

static void InitDefaultsDeleteFriendsRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_DeleteFriendsRequest_default_instance_;
    new (ptr) ::nakama::api::DeleteFriendsRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nakama::api::DeleteFriendsRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DeleteFriendsRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDeleteFriendsRequest}, {}};

static void InitDefaultsDeleteGroupRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_DeleteGroupRequest_default_instance_;
    new (ptr) ::nakama::api::DeleteGroupRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nakama::api::DeleteGroupRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DeleteGroupRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDeleteGroupRequest}, {}};

static void InitDefaultsDeleteLeaderboardRecordRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_DeleteLeaderboardRecordRequest_default_instance_;
    new (ptr) ::nakama::api::DeleteLeaderboardRecordRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nakama::api::DeleteLeaderboardRecordRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DeleteLeaderboardRecordRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDeleteLeaderboardRecordRequest}, {}};

static void InitDefaultsDeleteNotificationsRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_DeleteNotificationsRequest_default_instance_;
    new (ptr) ::nakama::api::DeleteNotificationsRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nakama::api::DeleteNotificationsRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DeleteNotificationsRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDeleteNotificationsRequest}, {}};

static void InitDefaultsDeleteStorageObjectId() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_DeleteStorageObjectId_default_instance_;
    new (ptr) ::nakama::api::DeleteStorageObjectId();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nakama::api::DeleteStorageObjectId::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DeleteStorageObjectId =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDeleteStorageObjectId}, {}};

static void InitDefaultsDeleteStorageObjectsRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_DeleteStorageObjectsRequest_default_instance_;
    new (ptr) ::nakama::api::DeleteStorageObjectsRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nakama::api::DeleteStorageObjectsRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_DeleteStorageObjectsRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsDeleteStorageObjectsRequest}, {
      &protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_DeleteStorageObjectId.base,}};

static void InitDefaultsFriend() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_Friend_default_instance_;
    new (ptr) ::nakama::api::Friend();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nakama::api::Friend::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Friend =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsFriend}, {
      &protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_User.base,
      &protobuf_google_2fprotobuf_2fwrappers_2eproto::scc_info_Int32Value.base,}};

static void InitDefaultsFriends() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_Friends_default_instance_;
    new (ptr) ::nakama::api::Friends();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nakama::api::Friends::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Friends =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsFriends}, {
      &protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_Friend.base,}};

static void InitDefaultsGetUsersRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_GetUsersRequest_default_instance_;
    new (ptr) ::nakama::api::GetUsersRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nakama::api::GetUsersRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GetUsersRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGetUsersRequest}, {}};

static void InitDefaultsGroup() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_Group_default_instance_;
    new (ptr) ::nakama::api::Group();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nakama::api::Group::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Group =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsGroup}, {
      &protobuf_google_2fprotobuf_2fwrappers_2eproto::scc_info_BoolValue.base,
      &protobuf_google_2fprotobuf_2ftimestamp_2eproto::scc_info_Timestamp.base,}};

static void InitDefaultsGroupList() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_GroupList_default_instance_;
    new (ptr) ::nakama::api::GroupList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nakama::api::GroupList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GroupList =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGroupList}, {
      &protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_Group.base,}};

static void InitDefaultsGroupUserList_GroupUser() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_GroupUserList_GroupUser_default_instance_;
    new (ptr) ::nakama::api::GroupUserList_GroupUser();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nakama::api::GroupUserList_GroupUser::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_GroupUserList_GroupUser =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsGroupUserList_GroupUser}, {
      &protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_User.base,
      &protobuf_google_2fprotobuf_2fwrappers_2eproto::scc_info_Int32Value.base,}};

static void InitDefaultsGroupUserList() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_GroupUserList_default_instance_;
    new (ptr) ::nakama::api::GroupUserList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nakama::api::GroupUserList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GroupUserList =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGroupUserList}, {
      &protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_GroupUserList_GroupUser.base,}};

static void InitDefaultsImportFacebookFriendsRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_ImportFacebookFriendsRequest_default_instance_;
    new (ptr) ::nakama::api::ImportFacebookFriendsRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nakama::api::ImportFacebookFriendsRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_ImportFacebookFriendsRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsImportFacebookFriendsRequest}, {
      &protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_AccountFacebook.base,
      &protobuf_google_2fprotobuf_2fwrappers_2eproto::scc_info_BoolValue.base,}};

static void InitDefaultsJoinGroupRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_JoinGroupRequest_default_instance_;
    new (ptr) ::nakama::api::JoinGroupRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nakama::api::JoinGroupRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_JoinGroupRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsJoinGroupRequest}, {}};

static void InitDefaultsJoinTournamentRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_JoinTournamentRequest_default_instance_;
    new (ptr) ::nakama::api::JoinTournamentRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nakama::api::JoinTournamentRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_JoinTournamentRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsJoinTournamentRequest}, {}};

static void InitDefaultsKickGroupUsersRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_KickGroupUsersRequest_default_instance_;
    new (ptr) ::nakama::api::KickGroupUsersRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nakama::api::KickGroupUsersRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_KickGroupUsersRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsKickGroupUsersRequest}, {}};

static void InitDefaultsLeaderboardRecord() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_LeaderboardRecord_default_instance_;
    new (ptr) ::nakama::api::LeaderboardRecord();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nakama::api::LeaderboardRecord::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_LeaderboardRecord =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsLeaderboardRecord}, {
      &protobuf_google_2fprotobuf_2fwrappers_2eproto::scc_info_StringValue.base,
      &protobuf_google_2fprotobuf_2ftimestamp_2eproto::scc_info_Timestamp.base,}};

static void InitDefaultsLeaderboardRecordList() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_LeaderboardRecordList_default_instance_;
    new (ptr) ::nakama::api::LeaderboardRecordList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nakama::api::LeaderboardRecordList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_LeaderboardRecordList =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsLeaderboardRecordList}, {
      &protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_LeaderboardRecord.base,}};

static void InitDefaultsLeaveGroupRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_LeaveGroupRequest_default_instance_;
    new (ptr) ::nakama::api::LeaveGroupRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nakama::api::LeaveGroupRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_LeaveGroupRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLeaveGroupRequest}, {}};

static void InitDefaultsLinkFacebookRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_LinkFacebookRequest_default_instance_;
    new (ptr) ::nakama::api::LinkFacebookRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nakama::api::LinkFacebookRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_LinkFacebookRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsLinkFacebookRequest}, {
      &protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_AccountFacebook.base,
      &protobuf_google_2fprotobuf_2fwrappers_2eproto::scc_info_BoolValue.base,}};

static void InitDefaultsListChannelMessagesRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_ListChannelMessagesRequest_default_instance_;
    new (ptr) ::nakama::api::ListChannelMessagesRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nakama::api::ListChannelMessagesRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_ListChannelMessagesRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsListChannelMessagesRequest}, {
      &protobuf_google_2fprotobuf_2fwrappers_2eproto::scc_info_Int32Value.base,
      &protobuf_google_2fprotobuf_2fwrappers_2eproto::scc_info_BoolValue.base,}};

static void InitDefaultsListGroupsRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_ListGroupsRequest_default_instance_;
    new (ptr) ::nakama::api::ListGroupsRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nakama::api::ListGroupsRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ListGroupsRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsListGroupsRequest}, {
      &protobuf_google_2fprotobuf_2fwrappers_2eproto::scc_info_Int32Value.base,}};

static void InitDefaultsListGroupUsersRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_ListGroupUsersRequest_default_instance_;
    new (ptr) ::nakama::api::ListGroupUsersRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nakama::api::ListGroupUsersRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ListGroupUsersRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsListGroupUsersRequest}, {}};

static void InitDefaultsListLeaderboardRecordsAroundOwnerRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_ListLeaderboardRecordsAroundOwnerRequest_default_instance_;
    new (ptr) ::nakama::api::ListLeaderboardRecordsAroundOwnerRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nakama::api::ListLeaderboardRecordsAroundOwnerRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ListLeaderboardRecordsAroundOwnerRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsListLeaderboardRecordsAroundOwnerRequest}, {
      &protobuf_google_2fprotobuf_2fwrappers_2eproto::scc_info_UInt32Value.base,}};

static void InitDefaultsListLeaderboardRecordsRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_ListLeaderboardRecordsRequest_default_instance_;
    new (ptr) ::nakama::api::ListLeaderboardRecordsRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nakama::api::ListLeaderboardRecordsRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ListLeaderboardRecordsRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsListLeaderboardRecordsRequest}, {
      &protobuf_google_2fprotobuf_2fwrappers_2eproto::scc_info_Int32Value.base,}};

static void InitDefaultsListMatchesRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_ListMatchesRequest_default_instance_;
    new (ptr) ::nakama::api::ListMatchesRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nakama::api::ListMatchesRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_ListMatchesRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsListMatchesRequest}, {
      &protobuf_google_2fprotobuf_2fwrappers_2eproto::scc_info_Int32Value.base,
      &protobuf_google_2fprotobuf_2fwrappers_2eproto::scc_info_BoolValue.base,
      &protobuf_google_2fprotobuf_2fwrappers_2eproto::scc_info_StringValue.base,}};

static void InitDefaultsListNotificationsRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_ListNotificationsRequest_default_instance_;
    new (ptr) ::nakama::api::ListNotificationsRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nakama::api::ListNotificationsRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ListNotificationsRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsListNotificationsRequest}, {
      &protobuf_google_2fprotobuf_2fwrappers_2eproto::scc_info_Int32Value.base,}};

static void InitDefaultsListStorageObjectsRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_ListStorageObjectsRequest_default_instance_;
    new (ptr) ::nakama::api::ListStorageObjectsRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nakama::api::ListStorageObjectsRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ListStorageObjectsRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsListStorageObjectsRequest}, {
      &protobuf_google_2fprotobuf_2fwrappers_2eproto::scc_info_Int32Value.base,}};

static void InitDefaultsListTournamentRecordsAroundOwnerRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_ListTournamentRecordsAroundOwnerRequest_default_instance_;
    new (ptr) ::nakama::api::ListTournamentRecordsAroundOwnerRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nakama::api::ListTournamentRecordsAroundOwnerRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ListTournamentRecordsAroundOwnerRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsListTournamentRecordsAroundOwnerRequest}, {
      &protobuf_google_2fprotobuf_2fwrappers_2eproto::scc_info_UInt32Value.base,}};

static void InitDefaultsListTournamentRecordsRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_ListTournamentRecordsRequest_default_instance_;
    new (ptr) ::nakama::api::ListTournamentRecordsRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nakama::api::ListTournamentRecordsRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ListTournamentRecordsRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsListTournamentRecordsRequest}, {
      &protobuf_google_2fprotobuf_2fwrappers_2eproto::scc_info_Int32Value.base,}};

static void InitDefaultsListTournamentsRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_ListTournamentsRequest_default_instance_;
    new (ptr) ::nakama::api::ListTournamentsRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nakama::api::ListTournamentsRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_ListTournamentsRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsListTournamentsRequest}, {
      &protobuf_google_2fprotobuf_2fwrappers_2eproto::scc_info_UInt32Value.base,
      &protobuf_google_2fprotobuf_2fwrappers_2eproto::scc_info_Int32Value.base,}};

static void InitDefaultsListUserGroupsRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_ListUserGroupsRequest_default_instance_;
    new (ptr) ::nakama::api::ListUserGroupsRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nakama::api::ListUserGroupsRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ListUserGroupsRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsListUserGroupsRequest}, {}};

static void InitDefaultsMatch() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_Match_default_instance_;
    new (ptr) ::nakama::api::Match();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nakama::api::Match::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Match =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsMatch}, {
      &protobuf_google_2fprotobuf_2fwrappers_2eproto::scc_info_StringValue.base,}};

static void InitDefaultsMatchList() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_MatchList_default_instance_;
    new (ptr) ::nakama::api::MatchList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nakama::api::MatchList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_MatchList =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsMatchList}, {
      &protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_Match.base,}};

static void InitDefaultsNotification() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_Notification_default_instance_;
    new (ptr) ::nakama::api::Notification();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nakama::api::Notification::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Notification =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsNotification}, {
      &protobuf_google_2fprotobuf_2ftimestamp_2eproto::scc_info_Timestamp.base,}};

static void InitDefaultsNotificationList() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_NotificationList_default_instance_;
    new (ptr) ::nakama::api::NotificationList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nakama::api::NotificationList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_NotificationList =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsNotificationList}, {
      &protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_Notification.base,}};

static void InitDefaultsPromoteGroupUsersRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_PromoteGroupUsersRequest_default_instance_;
    new (ptr) ::nakama::api::PromoteGroupUsersRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nakama::api::PromoteGroupUsersRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PromoteGroupUsersRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPromoteGroupUsersRequest}, {}};

static void InitDefaultsReadStorageObjectId() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_ReadStorageObjectId_default_instance_;
    new (ptr) ::nakama::api::ReadStorageObjectId();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nakama::api::ReadStorageObjectId::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ReadStorageObjectId =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsReadStorageObjectId}, {}};

static void InitDefaultsReadStorageObjectsRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_ReadStorageObjectsRequest_default_instance_;
    new (ptr) ::nakama::api::ReadStorageObjectsRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nakama::api::ReadStorageObjectsRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ReadStorageObjectsRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsReadStorageObjectsRequest}, {
      &protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_ReadStorageObjectId.base,}};

static void InitDefaultsRpc() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_Rpc_default_instance_;
    new (ptr) ::nakama::api::Rpc();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nakama::api::Rpc::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Rpc =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRpc}, {}};

static void InitDefaultsSession() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_Session_default_instance_;
    new (ptr) ::nakama::api::Session();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nakama::api::Session::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Session =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSession}, {}};

static void InitDefaultsStorageObject() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_StorageObject_default_instance_;
    new (ptr) ::nakama::api::StorageObject();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nakama::api::StorageObject::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_StorageObject =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsStorageObject}, {
      &protobuf_google_2fprotobuf_2ftimestamp_2eproto::scc_info_Timestamp.base,}};

static void InitDefaultsStorageObjectAck() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_StorageObjectAck_default_instance_;
    new (ptr) ::nakama::api::StorageObjectAck();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nakama::api::StorageObjectAck::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_StorageObjectAck =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsStorageObjectAck}, {}};

static void InitDefaultsStorageObjectAcks() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_StorageObjectAcks_default_instance_;
    new (ptr) ::nakama::api::StorageObjectAcks();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nakama::api::StorageObjectAcks::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_StorageObjectAcks =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsStorageObjectAcks}, {
      &protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_StorageObjectAck.base,}};

static void InitDefaultsStorageObjects() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_StorageObjects_default_instance_;
    new (ptr) ::nakama::api::StorageObjects();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nakama::api::StorageObjects::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_StorageObjects =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsStorageObjects}, {
      &protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_StorageObject.base,}};

static void InitDefaultsStorageObjectList() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_StorageObjectList_default_instance_;
    new (ptr) ::nakama::api::StorageObjectList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nakama::api::StorageObjectList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_StorageObjectList =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsStorageObjectList}, {
      &protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_StorageObject.base,}};

static void InitDefaultsTournament() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_Tournament_default_instance_;
    new (ptr) ::nakama::api::Tournament();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nakama::api::Tournament::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Tournament =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTournament}, {
      &protobuf_google_2fprotobuf_2ftimestamp_2eproto::scc_info_Timestamp.base,}};

static void InitDefaultsTournamentList() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_TournamentList_default_instance_;
    new (ptr) ::nakama::api::TournamentList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nakama::api::TournamentList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_TournamentList =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTournamentList}, {
      &protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_Tournament.base,}};

static void InitDefaultsTournamentRecordList() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_TournamentRecordList_default_instance_;
    new (ptr) ::nakama::api::TournamentRecordList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nakama::api::TournamentRecordList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_TournamentRecordList =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTournamentRecordList}, {
      &protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_LeaderboardRecord.base,}};

static void InitDefaultsUpdateAccountRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_UpdateAccountRequest_default_instance_;
    new (ptr) ::nakama::api::UpdateAccountRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nakama::api::UpdateAccountRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_UpdateAccountRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsUpdateAccountRequest}, {
      &protobuf_google_2fprotobuf_2fwrappers_2eproto::scc_info_StringValue.base,}};

static void InitDefaultsUpdateGroupRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_UpdateGroupRequest_default_instance_;
    new (ptr) ::nakama::api::UpdateGroupRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nakama::api::UpdateGroupRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_UpdateGroupRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsUpdateGroupRequest}, {
      &protobuf_google_2fprotobuf_2fwrappers_2eproto::scc_info_StringValue.base,
      &protobuf_google_2fprotobuf_2fwrappers_2eproto::scc_info_BoolValue.base,}};

static void InitDefaultsUser() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_User_default_instance_;
    new (ptr) ::nakama::api::User();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nakama::api::User::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_User =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsUser}, {
      &protobuf_google_2fprotobuf_2ftimestamp_2eproto::scc_info_Timestamp.base,}};

static void InitDefaultsUserGroupList_UserGroup() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_UserGroupList_UserGroup_default_instance_;
    new (ptr) ::nakama::api::UserGroupList_UserGroup();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nakama::api::UserGroupList_UserGroup::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_UserGroupList_UserGroup =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsUserGroupList_UserGroup}, {
      &protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_Group.base,
      &protobuf_google_2fprotobuf_2fwrappers_2eproto::scc_info_Int32Value.base,}};

static void InitDefaultsUserGroupList() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_UserGroupList_default_instance_;
    new (ptr) ::nakama::api::UserGroupList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nakama::api::UserGroupList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_UserGroupList =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsUserGroupList}, {
      &protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_UserGroupList_UserGroup.base,}};

static void InitDefaultsUsers() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_Users_default_instance_;
    new (ptr) ::nakama::api::Users();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nakama::api::Users::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Users =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsUsers}, {
      &protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_User.base,}};

static void InitDefaultsWriteLeaderboardRecordRequest_LeaderboardRecordWrite() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_WriteLeaderboardRecordRequest_LeaderboardRecordWrite_default_instance_;
    new (ptr) ::nakama::api::WriteLeaderboardRecordRequest_LeaderboardRecordWrite();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nakama::api::WriteLeaderboardRecordRequest_LeaderboardRecordWrite::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_WriteLeaderboardRecordRequest_LeaderboardRecordWrite =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsWriteLeaderboardRecordRequest_LeaderboardRecordWrite}, {}};

static void InitDefaultsWriteLeaderboardRecordRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_WriteLeaderboardRecordRequest_default_instance_;
    new (ptr) ::nakama::api::WriteLeaderboardRecordRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nakama::api::WriteLeaderboardRecordRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_WriteLeaderboardRecordRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsWriteLeaderboardRecordRequest}, {
      &protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_WriteLeaderboardRecordRequest_LeaderboardRecordWrite.base,}};

static void InitDefaultsWriteStorageObject() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_WriteStorageObject_default_instance_;
    new (ptr) ::nakama::api::WriteStorageObject();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nakama::api::WriteStorageObject::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_WriteStorageObject =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsWriteStorageObject}, {
      &protobuf_google_2fprotobuf_2fwrappers_2eproto::scc_info_Int32Value.base,}};

static void InitDefaultsWriteStorageObjectsRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_WriteStorageObjectsRequest_default_instance_;
    new (ptr) ::nakama::api::WriteStorageObjectsRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nakama::api::WriteStorageObjectsRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_WriteStorageObjectsRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsWriteStorageObjectsRequest}, {
      &protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_WriteStorageObject.base,}};

static void InitDefaultsWriteTournamentRecordRequest_TournamentRecordWrite() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_WriteTournamentRecordRequest_TournamentRecordWrite_default_instance_;
    new (ptr) ::nakama::api::WriteTournamentRecordRequest_TournamentRecordWrite();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nakama::api::WriteTournamentRecordRequest_TournamentRecordWrite::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_WriteTournamentRecordRequest_TournamentRecordWrite =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsWriteTournamentRecordRequest_TournamentRecordWrite}, {}};

static void InitDefaultsWriteTournamentRecordRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_WriteTournamentRecordRequest_default_instance_;
    new (ptr) ::nakama::api::WriteTournamentRecordRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nakama::api::WriteTournamentRecordRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_WriteTournamentRecordRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsWriteTournamentRecordRequest}, {
      &protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_WriteTournamentRecordRequest_TournamentRecordWrite.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Account.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AccountCustom.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AccountDevice.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AccountEmail.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AccountFacebook.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AccountGameCenter.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AccountGoogle.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AccountSteam.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AddFriendsRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AddGroupUsersRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AuthenticateCustomRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AuthenticateDeviceRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AuthenticateEmailRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AuthenticateFacebookRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AuthenticateGameCenterRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AuthenticateGoogleRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AuthenticateSteamRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BlockFriendsRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ChannelMessage.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ChannelMessageList.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CreateGroupRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DeleteFriendsRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DeleteGroupRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DeleteLeaderboardRecordRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DeleteNotificationsRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DeleteStorageObjectId.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DeleteStorageObjectsRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Friend.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Friends.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetUsersRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Group.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GroupList.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GroupUserList_GroupUser.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GroupUserList.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ImportFacebookFriendsRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_JoinGroupRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_JoinTournamentRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_KickGroupUsersRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LeaderboardRecord.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LeaderboardRecordList.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LeaveGroupRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LinkFacebookRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ListChannelMessagesRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ListGroupsRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ListGroupUsersRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ListLeaderboardRecordsAroundOwnerRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ListLeaderboardRecordsRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ListMatchesRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ListNotificationsRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ListStorageObjectsRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ListTournamentRecordsAroundOwnerRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ListTournamentRecordsRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ListTournamentsRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ListUserGroupsRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Match.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MatchList.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Notification.base);
  ::google::protobuf::internal::InitSCC(&scc_info_NotificationList.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PromoteGroupUsersRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReadStorageObjectId.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReadStorageObjectsRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Rpc.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Session.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StorageObject.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StorageObjectAck.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StorageObjectAcks.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StorageObjects.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StorageObjectList.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Tournament.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TournamentList.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TournamentRecordList.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UpdateAccountRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UpdateGroupRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_User.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UserGroupList_UserGroup.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UserGroupList.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Users.base);
  ::google::protobuf::internal::InitSCC(&scc_info_WriteLeaderboardRecordRequest_LeaderboardRecordWrite.base);
  ::google::protobuf::internal::InitSCC(&scc_info_WriteLeaderboardRecordRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_WriteStorageObject.base);
  ::google::protobuf::internal::InitSCC(&scc_info_WriteStorageObjectsRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_WriteTournamentRecordRequest_TournamentRecordWrite.base);
  ::google::protobuf::internal::InitSCC(&scc_info_WriteTournamentRecordRequest.base);
}

::google::protobuf::Metadata file_level_metadata[83];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[3];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::Account, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::Account, user_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::Account, wallet_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::Account, email_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::Account, devices_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::Account, custom_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::Account, verify_time_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::AccountCustom, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::AccountCustom, id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::AccountDevice, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::AccountDevice, id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::AccountEmail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::AccountEmail, email_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::AccountEmail, password_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::AccountFacebook, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::AccountFacebook, token_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::AccountGameCenter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::AccountGameCenter, player_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::AccountGameCenter, bundle_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::AccountGameCenter, timestamp_seconds_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::AccountGameCenter, salt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::AccountGameCenter, signature_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::AccountGameCenter, public_key_url_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::AccountGoogle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::AccountGoogle, token_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::AccountSteam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::AccountSteam, token_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::AddFriendsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::AddFriendsRequest, ids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::AddFriendsRequest, usernames_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::AddGroupUsersRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::AddGroupUsersRequest, group_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::AddGroupUsersRequest, user_ids_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::AuthenticateCustomRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::AuthenticateCustomRequest, account_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::AuthenticateCustomRequest, create_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::AuthenticateCustomRequest, username_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::AuthenticateDeviceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::AuthenticateDeviceRequest, account_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::AuthenticateDeviceRequest, create_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::AuthenticateDeviceRequest, username_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::AuthenticateEmailRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::AuthenticateEmailRequest, account_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::AuthenticateEmailRequest, create_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::AuthenticateEmailRequest, username_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::AuthenticateFacebookRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::AuthenticateFacebookRequest, account_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::AuthenticateFacebookRequest, create_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::AuthenticateFacebookRequest, username_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::AuthenticateFacebookRequest, import_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::AuthenticateGameCenterRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::AuthenticateGameCenterRequest, account_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::AuthenticateGameCenterRequest, create_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::AuthenticateGameCenterRequest, username_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::AuthenticateGoogleRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::AuthenticateGoogleRequest, account_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::AuthenticateGoogleRequest, create_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::AuthenticateGoogleRequest, username_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::AuthenticateSteamRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::AuthenticateSteamRequest, account_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::AuthenticateSteamRequest, create_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::AuthenticateSteamRequest, username_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::BlockFriendsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::BlockFriendsRequest, ids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::BlockFriendsRequest, usernames_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::ChannelMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::ChannelMessage, channel_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::ChannelMessage, message_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::ChannelMessage, code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::ChannelMessage, sender_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::ChannelMessage, username_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::ChannelMessage, content_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::ChannelMessage, create_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::ChannelMessage, update_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::ChannelMessage, persistent_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::ChannelMessageList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::ChannelMessageList, messages_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::ChannelMessageList, next_cursor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::ChannelMessageList, prev_cursor_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::CreateGroupRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::CreateGroupRequest, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::CreateGroupRequest, description_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::CreateGroupRequest, lang_tag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::CreateGroupRequest, avatar_url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::CreateGroupRequest, open_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::DeleteFriendsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::DeleteFriendsRequest, ids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::DeleteFriendsRequest, usernames_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::DeleteGroupRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::DeleteGroupRequest, group_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::DeleteLeaderboardRecordRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::DeleteLeaderboardRecordRequest, leaderboard_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::DeleteNotificationsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::DeleteNotificationsRequest, ids_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::DeleteStorageObjectId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::DeleteStorageObjectId, collection_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::DeleteStorageObjectId, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::DeleteStorageObjectId, version_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::DeleteStorageObjectsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::DeleteStorageObjectsRequest, object_ids_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::Friend, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::Friend, user_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::Friend, state_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::Friends, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::Friends, friends_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::GetUsersRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::GetUsersRequest, ids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::GetUsersRequest, usernames_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::GetUsersRequest, facebook_ids_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::Group, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::Group, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::Group, creator_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::Group, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::Group, description_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::Group, lang_tag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::Group, metadata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::Group, avatar_url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::Group, open_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::Group, edge_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::Group, max_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::Group, create_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::Group, update_time_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::GroupList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::GroupList, groups_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::GroupList, cursor_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::GroupUserList_GroupUser, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::GroupUserList_GroupUser, user_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::GroupUserList_GroupUser, state_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::GroupUserList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::GroupUserList, group_users_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::ImportFacebookFriendsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::ImportFacebookFriendsRequest, account_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::ImportFacebookFriendsRequest, reset_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::JoinGroupRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::JoinGroupRequest, group_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::JoinTournamentRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::JoinTournamentRequest, tournament_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::KickGroupUsersRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::KickGroupUsersRequest, group_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::KickGroupUsersRequest, user_ids_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::LeaderboardRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::LeaderboardRecord, leaderboard_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::LeaderboardRecord, owner_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::LeaderboardRecord, username_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::LeaderboardRecord, score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::LeaderboardRecord, subscore_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::LeaderboardRecord, num_score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::LeaderboardRecord, metadata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::LeaderboardRecord, create_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::LeaderboardRecord, update_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::LeaderboardRecord, expiry_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::LeaderboardRecord, rank_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::LeaderboardRecord, max_num_score_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::LeaderboardRecordList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::LeaderboardRecordList, records_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::LeaderboardRecordList, owner_records_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::LeaderboardRecordList, next_cursor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::LeaderboardRecordList, prev_cursor_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::LeaveGroupRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::LeaveGroupRequest, group_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::LinkFacebookRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::LinkFacebookRequest, account_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::LinkFacebookRequest, import_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::ListChannelMessagesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::ListChannelMessagesRequest, channel_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::ListChannelMessagesRequest, limit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::ListChannelMessagesRequest, forward_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::ListChannelMessagesRequest, cursor_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::ListGroupsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::ListGroupsRequest, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::ListGroupsRequest, cursor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::ListGroupsRequest, limit_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::ListGroupUsersRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::ListGroupUsersRequest, group_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::ListLeaderboardRecordsAroundOwnerRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::ListLeaderboardRecordsAroundOwnerRequest, leaderboard_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::ListLeaderboardRecordsAroundOwnerRequest, limit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::ListLeaderboardRecordsAroundOwnerRequest, owner_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::ListLeaderboardRecordsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::ListLeaderboardRecordsRequest, leaderboard_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::ListLeaderboardRecordsRequest, owner_ids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::ListLeaderboardRecordsRequest, limit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::ListLeaderboardRecordsRequest, cursor_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::ListMatchesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::ListMatchesRequest, limit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::ListMatchesRequest, authoritative_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::ListMatchesRequest, label_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::ListMatchesRequest, min_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::ListMatchesRequest, max_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::ListMatchesRequest, query_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::ListNotificationsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::ListNotificationsRequest, limit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::ListNotificationsRequest, cacheable_cursor_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::ListStorageObjectsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::ListStorageObjectsRequest, user_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::ListStorageObjectsRequest, collection_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::ListStorageObjectsRequest, limit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::ListStorageObjectsRequest, cursor_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::ListTournamentRecordsAroundOwnerRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::ListTournamentRecordsAroundOwnerRequest, tournament_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::ListTournamentRecordsAroundOwnerRequest, limit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::ListTournamentRecordsAroundOwnerRequest, owner_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::ListTournamentRecordsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::ListTournamentRecordsRequest, tournament_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::ListTournamentRecordsRequest, owner_ids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::ListTournamentRecordsRequest, limit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::ListTournamentRecordsRequest, cursor_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::ListTournamentsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::ListTournamentsRequest, category_start_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::ListTournamentsRequest, category_end_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::ListTournamentsRequest, start_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::ListTournamentsRequest, end_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::ListTournamentsRequest, limit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::ListTournamentsRequest, cursor_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::ListUserGroupsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::ListUserGroupsRequest, user_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::Match, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::Match, match_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::Match, authoritative_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::Match, label_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::Match, size_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::MatchList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::MatchList, matches_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::Notification, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::Notification, subject_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::Notification, content_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::Notification, code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::Notification, sender_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::Notification, create_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::Notification, persistent_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::NotificationList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::NotificationList, notifications_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::NotificationList, cacheable_cursor_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::PromoteGroupUsersRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::PromoteGroupUsersRequest, group_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::PromoteGroupUsersRequest, user_ids_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::ReadStorageObjectId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::ReadStorageObjectId, collection_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::ReadStorageObjectId, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::ReadStorageObjectId, user_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::ReadStorageObjectsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::ReadStorageObjectsRequest, object_ids_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::Rpc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::Rpc, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::Rpc, payload_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::Rpc, http_key_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::Session, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::Session, created_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::Session, token_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::Session, udp_token_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::StorageObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::StorageObject, collection_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::StorageObject, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::StorageObject, user_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::StorageObject, value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::StorageObject, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::StorageObject, permission_read_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::StorageObject, permission_write_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::StorageObject, create_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::StorageObject, update_time_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::StorageObjectAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::StorageObjectAck, collection_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::StorageObjectAck, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::StorageObjectAck, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::StorageObjectAck, user_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::StorageObjectAcks, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::StorageObjectAcks, acks_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::StorageObjects, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::StorageObjects, objects_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::StorageObjectList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::StorageObjectList, objects_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::StorageObjectList, cursor_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::Tournament, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::Tournament, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::Tournament, title_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::Tournament, description_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::Tournament, category_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::Tournament, sort_order_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::Tournament, size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::Tournament, max_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::Tournament, max_num_score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::Tournament, can_enter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::Tournament, end_active_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::Tournament, next_reset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::Tournament, metadata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::Tournament, create_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::Tournament, start_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::Tournament, end_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::Tournament, duration_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::TournamentList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::TournamentList, tournaments_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::TournamentList, cursor_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::TournamentRecordList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::TournamentRecordList, records_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::TournamentRecordList, owner_records_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::TournamentRecordList, next_cursor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::TournamentRecordList, prev_cursor_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::UpdateAccountRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::UpdateAccountRequest, username_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::UpdateAccountRequest, display_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::UpdateAccountRequest, avatar_url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::UpdateAccountRequest, lang_tag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::UpdateAccountRequest, location_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::UpdateAccountRequest, timezone_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::UpdateGroupRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::UpdateGroupRequest, group_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::UpdateGroupRequest, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::UpdateGroupRequest, description_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::UpdateGroupRequest, lang_tag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::UpdateGroupRequest, avatar_url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::UpdateGroupRequest, open_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::User, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::User, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::User, username_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::User, display_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::User, avatar_url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::User, lang_tag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::User, location_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::User, timezone_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::User, metadata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::User, facebook_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::User, google_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::User, gamecenter_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::User, steam_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::User, online_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::User, edge_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::User, create_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::User, update_time_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::UserGroupList_UserGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::UserGroupList_UserGroup, group_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::UserGroupList_UserGroup, state_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::UserGroupList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::UserGroupList, user_groups_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::Users, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::Users, users_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::WriteLeaderboardRecordRequest_LeaderboardRecordWrite, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::WriteLeaderboardRecordRequest_LeaderboardRecordWrite, score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::WriteLeaderboardRecordRequest_LeaderboardRecordWrite, subscore_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::WriteLeaderboardRecordRequest_LeaderboardRecordWrite, metadata_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::WriteLeaderboardRecordRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::WriteLeaderboardRecordRequest, leaderboard_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::WriteLeaderboardRecordRequest, record_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::WriteStorageObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::WriteStorageObject, collection_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::WriteStorageObject, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::WriteStorageObject, value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::WriteStorageObject, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::WriteStorageObject, permission_read_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::WriteStorageObject, permission_write_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::WriteStorageObjectsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::WriteStorageObjectsRequest, objects_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::WriteTournamentRecordRequest_TournamentRecordWrite, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::WriteTournamentRecordRequest_TournamentRecordWrite, score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::WriteTournamentRecordRequest_TournamentRecordWrite, subscore_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::WriteTournamentRecordRequest_TournamentRecordWrite, metadata_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::WriteTournamentRecordRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::WriteTournamentRecordRequest, tournament_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nakama::api::WriteTournamentRecordRequest, record_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::nakama::api::Account)},
  { 11, -1, sizeof(::nakama::api::AccountCustom)},
  { 17, -1, sizeof(::nakama::api::AccountDevice)},
  { 23, -1, sizeof(::nakama::api::AccountEmail)},
  { 30, -1, sizeof(::nakama::api::AccountFacebook)},
  { 36, -1, sizeof(::nakama::api::AccountGameCenter)},
  { 47, -1, sizeof(::nakama::api::AccountGoogle)},
  { 53, -1, sizeof(::nakama::api::AccountSteam)},
  { 59, -1, sizeof(::nakama::api::AddFriendsRequest)},
  { 66, -1, sizeof(::nakama::api::AddGroupUsersRequest)},
  { 73, -1, sizeof(::nakama::api::AuthenticateCustomRequest)},
  { 81, -1, sizeof(::nakama::api::AuthenticateDeviceRequest)},
  { 89, -1, sizeof(::nakama::api::AuthenticateEmailRequest)},
  { 97, -1, sizeof(::nakama::api::AuthenticateFacebookRequest)},
  { 106, -1, sizeof(::nakama::api::AuthenticateGameCenterRequest)},
  { 114, -1, sizeof(::nakama::api::AuthenticateGoogleRequest)},
  { 122, -1, sizeof(::nakama::api::AuthenticateSteamRequest)},
  { 130, -1, sizeof(::nakama::api::BlockFriendsRequest)},
  { 137, -1, sizeof(::nakama::api::ChannelMessage)},
  { 151, -1, sizeof(::nakama::api::ChannelMessageList)},
  { 159, -1, sizeof(::nakama::api::CreateGroupRequest)},
  { 169, -1, sizeof(::nakama::api::DeleteFriendsRequest)},
  { 176, -1, sizeof(::nakama::api::DeleteGroupRequest)},
  { 182, -1, sizeof(::nakama::api::DeleteLeaderboardRecordRequest)},
  { 188, -1, sizeof(::nakama::api::DeleteNotificationsRequest)},
  { 194, -1, sizeof(::nakama::api::DeleteStorageObjectId)},
  { 202, -1, sizeof(::nakama::api::DeleteStorageObjectsRequest)},
  { 208, -1, sizeof(::nakama::api::Friend)},
  { 215, -1, sizeof(::nakama::api::Friends)},
  { 221, -1, sizeof(::nakama::api::GetUsersRequest)},
  { 229, -1, sizeof(::nakama::api::Group)},
  { 246, -1, sizeof(::nakama::api::GroupList)},
  { 253, -1, sizeof(::nakama::api::GroupUserList_GroupUser)},
  { 260, -1, sizeof(::nakama::api::GroupUserList)},
  { 266, -1, sizeof(::nakama::api::ImportFacebookFriendsRequest)},
  { 273, -1, sizeof(::nakama::api::JoinGroupRequest)},
  { 279, -1, sizeof(::nakama::api::JoinTournamentRequest)},
  { 285, -1, sizeof(::nakama::api::KickGroupUsersRequest)},
  { 292, -1, sizeof(::nakama::api::LeaderboardRecord)},
  { 309, -1, sizeof(::nakama::api::LeaderboardRecordList)},
  { 318, -1, sizeof(::nakama::api::LeaveGroupRequest)},
  { 324, -1, sizeof(::nakama::api::LinkFacebookRequest)},
  { 331, -1, sizeof(::nakama::api::ListChannelMessagesRequest)},
  { 340, -1, sizeof(::nakama::api::ListGroupsRequest)},
  { 348, -1, sizeof(::nakama::api::ListGroupUsersRequest)},
  { 354, -1, sizeof(::nakama::api::ListLeaderboardRecordsAroundOwnerRequest)},
  { 362, -1, sizeof(::nakama::api::ListLeaderboardRecordsRequest)},
  { 371, -1, sizeof(::nakama::api::ListMatchesRequest)},
  { 382, -1, sizeof(::nakama::api::ListNotificationsRequest)},
  { 389, -1, sizeof(::nakama::api::ListStorageObjectsRequest)},
  { 398, -1, sizeof(::nakama::api::ListTournamentRecordsAroundOwnerRequest)},
  { 406, -1, sizeof(::nakama::api::ListTournamentRecordsRequest)},
  { 415, -1, sizeof(::nakama::api::ListTournamentsRequest)},
  { 426, -1, sizeof(::nakama::api::ListUserGroupsRequest)},
  { 432, -1, sizeof(::nakama::api::Match)},
  { 441, -1, sizeof(::nakama::api::MatchList)},
  { 447, -1, sizeof(::nakama::api::Notification)},
  { 459, -1, sizeof(::nakama::api::NotificationList)},
  { 466, -1, sizeof(::nakama::api::PromoteGroupUsersRequest)},
  { 473, -1, sizeof(::nakama::api::ReadStorageObjectId)},
  { 481, -1, sizeof(::nakama::api::ReadStorageObjectsRequest)},
  { 487, -1, sizeof(::nakama::api::Rpc)},
  { 495, -1, sizeof(::nakama::api::Session)},
  { 503, -1, sizeof(::nakama::api::StorageObject)},
  { 517, -1, sizeof(::nakama::api::StorageObjectAck)},
  { 526, -1, sizeof(::nakama::api::StorageObjectAcks)},
  { 532, -1, sizeof(::nakama::api::StorageObjects)},
  { 538, -1, sizeof(::nakama::api::StorageObjectList)},
  { 545, -1, sizeof(::nakama::api::Tournament)},
  { 566, -1, sizeof(::nakama::api::TournamentList)},
  { 573, -1, sizeof(::nakama::api::TournamentRecordList)},
  { 582, -1, sizeof(::nakama::api::UpdateAccountRequest)},
  { 593, -1, sizeof(::nakama::api::UpdateGroupRequest)},
  { 604, -1, sizeof(::nakama::api::User)},
  { 625, -1, sizeof(::nakama::api::UserGroupList_UserGroup)},
  { 632, -1, sizeof(::nakama::api::UserGroupList)},
  { 638, -1, sizeof(::nakama::api::Users)},
  { 644, -1, sizeof(::nakama::api::WriteLeaderboardRecordRequest_LeaderboardRecordWrite)},
  { 652, -1, sizeof(::nakama::api::WriteLeaderboardRecordRequest)},
  { 659, -1, sizeof(::nakama::api::WriteStorageObject)},
  { 670, -1, sizeof(::nakama::api::WriteStorageObjectsRequest)},
  { 676, -1, sizeof(::nakama::api::WriteTournamentRecordRequest_TournamentRecordWrite)},
  { 684, -1, sizeof(::nakama::api::WriteTournamentRecordRequest)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::nakama::api::_Account_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::nakama::api::_AccountCustom_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::nakama::api::_AccountDevice_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::nakama::api::_AccountEmail_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::nakama::api::_AccountFacebook_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::nakama::api::_AccountGameCenter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::nakama::api::_AccountGoogle_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::nakama::api::_AccountSteam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::nakama::api::_AddFriendsRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::nakama::api::_AddGroupUsersRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::nakama::api::_AuthenticateCustomRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::nakama::api::_AuthenticateDeviceRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::nakama::api::_AuthenticateEmailRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::nakama::api::_AuthenticateFacebookRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::nakama::api::_AuthenticateGameCenterRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::nakama::api::_AuthenticateGoogleRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::nakama::api::_AuthenticateSteamRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::nakama::api::_BlockFriendsRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::nakama::api::_ChannelMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::nakama::api::_ChannelMessageList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::nakama::api::_CreateGroupRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::nakama::api::_DeleteFriendsRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::nakama::api::_DeleteGroupRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::nakama::api::_DeleteLeaderboardRecordRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::nakama::api::_DeleteNotificationsRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::nakama::api::_DeleteStorageObjectId_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::nakama::api::_DeleteStorageObjectsRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::nakama::api::_Friend_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::nakama::api::_Friends_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::nakama::api::_GetUsersRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::nakama::api::_Group_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::nakama::api::_GroupList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::nakama::api::_GroupUserList_GroupUser_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::nakama::api::_GroupUserList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::nakama::api::_ImportFacebookFriendsRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::nakama::api::_JoinGroupRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::nakama::api::_JoinTournamentRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::nakama::api::_KickGroupUsersRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::nakama::api::_LeaderboardRecord_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::nakama::api::_LeaderboardRecordList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::nakama::api::_LeaveGroupRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::nakama::api::_LinkFacebookRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::nakama::api::_ListChannelMessagesRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::nakama::api::_ListGroupsRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::nakama::api::_ListGroupUsersRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::nakama::api::_ListLeaderboardRecordsAroundOwnerRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::nakama::api::_ListLeaderboardRecordsRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::nakama::api::_ListMatchesRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::nakama::api::_ListNotificationsRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::nakama::api::_ListStorageObjectsRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::nakama::api::_ListTournamentRecordsAroundOwnerRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::nakama::api::_ListTournamentRecordsRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::nakama::api::_ListTournamentsRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::nakama::api::_ListUserGroupsRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::nakama::api::_Match_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::nakama::api::_MatchList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::nakama::api::_Notification_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::nakama::api::_NotificationList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::nakama::api::_PromoteGroupUsersRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::nakama::api::_ReadStorageObjectId_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::nakama::api::_ReadStorageObjectsRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::nakama::api::_Rpc_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::nakama::api::_Session_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::nakama::api::_StorageObject_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::nakama::api::_StorageObjectAck_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::nakama::api::_StorageObjectAcks_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::nakama::api::_StorageObjects_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::nakama::api::_StorageObjectList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::nakama::api::_Tournament_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::nakama::api::_TournamentList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::nakama::api::_TournamentRecordList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::nakama::api::_UpdateAccountRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::nakama::api::_UpdateGroupRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::nakama::api::_User_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::nakama::api::_UserGroupList_UserGroup_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::nakama::api::_UserGroupList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::nakama::api::_Users_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::nakama::api::_WriteLeaderboardRecordRequest_LeaderboardRecordWrite_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::nakama::api::_WriteLeaderboardRecordRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::nakama::api::_WriteStorageObject_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::nakama::api::_WriteStorageObjectsRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::nakama::api::_WriteTournamentRecordRequest_TournamentRecordWrite_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::nakama::api::_WriteTournamentRecordRequest_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "github.com/heroiclabs/nakama/api/api.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 83);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n*github.com/heroiclabs/nakama/api/api.p"
      "roto\022\nnakama.api\032\037google/protobuf/timest"
      "amp.proto\032\036google/protobuf/wrappers.prot"
      "o\"\270\001\n\007Account\022\036\n\004user\030\001 \001(\0132\020.nakama.api"
      ".User\022\016\n\006wallet\030\002 \001(\t\022\r\n\005email\030\003 \001(\t\022*\n\007"
      "devices\030\004 \003(\0132\031.nakama.api.AccountDevice"
      "\022\021\n\tcustom_id\030\005 \001(\t\022/\n\013verify_time\030\006 \001(\013"
      "2\032.google.protobuf.Timestamp\"\033\n\rAccountC"
      "ustom\022\n\n\002id\030\001 \001(\t\"\033\n\rAccountDevice\022\n\n\002id"
      "\030\001 \001(\t\"/\n\014AccountEmail\022\r\n\005email\030\001 \001(\t\022\020\n"
      "\010password\030\002 \001(\t\" \n\017AccountFacebook\022\r\n\005to"
      "ken\030\001 \001(\t\"\215\001\n\021AccountGameCenter\022\021\n\tplaye"
      "r_id\030\001 \001(\t\022\021\n\tbundle_id\030\002 \001(\t\022\031\n\021timesta"
      "mp_seconds\030\003 \001(\003\022\014\n\004salt\030\004 \001(\t\022\021\n\tsignat"
      "ure\030\005 \001(\t\022\026\n\016public_key_url\030\006 \001(\t\"\036\n\rAcc"
      "ountGoogle\022\r\n\005token\030\001 \001(\t\"\035\n\014AccountStea"
      "m\022\r\n\005token\030\001 \001(\t\"3\n\021AddFriendsRequest\022\013\n"
      "\003ids\030\001 \003(\t\022\021\n\tusernames\030\002 \003(\t\":\n\024AddGrou"
      "pUsersRequest\022\020\n\010group_id\030\001 \001(\t\022\020\n\010user_"
      "ids\030\002 \003(\t\"\205\001\n\031AuthenticateCustomRequest\022"
      "*\n\007account\030\001 \001(\0132\031.nakama.api.AccountCus"
      "tom\022*\n\006create\030\002 \001(\0132\032.google.protobuf.Bo"
      "olValue\022\020\n\010username\030\003 \001(\t\"\205\001\n\031Authentica"
      "teDeviceRequest\022*\n\007account\030\001 \001(\0132\031.nakam"
      "a.api.AccountDevice\022*\n\006create\030\002 \001(\0132\032.go"
      "ogle.protobuf.BoolValue\022\020\n\010username\030\003 \001("
      "\t\"\203\001\n\030AuthenticateEmailRequest\022)\n\007accoun"
      "t\030\001 \001(\0132\030.nakama.api.AccountEmail\022*\n\006cre"
      "ate\030\002 \001(\0132\032.google.protobuf.BoolValue\022\020\n"
      "\010username\030\003 \001(\t\"\265\001\n\033AuthenticateFacebook"
      "Request\022,\n\007account\030\001 \001(\0132\033.nakama.api.Ac"
      "countFacebook\022*\n\006create\030\002 \001(\0132\032.google.p"
      "rotobuf.BoolValue\022\020\n\010username\030\003 \001(\t\022*\n\006i"
      "mport\030\004 \001(\0132\032.google.protobuf.BoolValue\""
      "\215\001\n\035AuthenticateGameCenterRequest\022.\n\007acc"
      "ount\030\001 \001(\0132\035.nakama.api.AccountGameCente"
      "r\022*\n\006create\030\002 \001(\0132\032.google.protobuf.Bool"
      "Value\022\020\n\010username\030\003 \001(\t\"\205\001\n\031Authenticate"
      "GoogleRequest\022*\n\007account\030\001 \001(\0132\031.nakama."
      "api.AccountGoogle\022*\n\006create\030\002 \001(\0132\032.goog"
      "le.protobuf.BoolValue\022\020\n\010username\030\003 \001(\t\""
      "\203\001\n\030AuthenticateSteamRequest\022)\n\007account\030"
      "\001 \001(\0132\030.nakama.api.AccountSteam\022*\n\006creat"
      "e\030\002 \001(\0132\032.google.protobuf.BoolValue\022\020\n\010u"
      "sername\030\003 \001(\t\"5\n\023BlockFriendsRequest\022\013\n\003"
      "ids\030\001 \003(\t\022\021\n\tusernames\030\002 \003(\t\"\253\002\n\016Channel"
      "Message\022\022\n\nchannel_id\030\001 \001(\t\022\022\n\nmessage_i"
      "d\030\002 \001(\t\022)\n\004code\030\003 \001(\0132\033.google.protobuf."
      "Int32Value\022\021\n\tsender_id\030\004 \001(\t\022\020\n\010usernam"
      "e\030\005 \001(\t\022\017\n\007content\030\006 \001(\t\022/\n\013create_time\030"
      "\007 \001(\0132\032.google.protobuf.Timestamp\022/\n\013upd"
      "ate_time\030\010 \001(\0132\032.google.protobuf.Timesta"
      "mp\022.\n\npersistent\030\t \001(\0132\032.google.protobuf"
      ".BoolValue\"l\n\022ChannelMessageList\022,\n\010mess"
      "ages\030\001 \003(\0132\032.nakama.api.ChannelMessage\022\023"
      "\n\013next_cursor\030\002 \001(\t\022\023\n\013prev_cursor\030\003 \001(\t"
      "\"k\n\022CreateGroupRequest\022\014\n\004name\030\001 \001(\t\022\023\n\013"
      "description\030\002 \001(\t\022\020\n\010lang_tag\030\003 \001(\t\022\022\n\na"
      "vatar_url\030\004 \001(\t\022\014\n\004open\030\005 \001(\010\"6\n\024DeleteF"
      "riendsRequest\022\013\n\003ids\030\001 \003(\t\022\021\n\tusernames\030"
      "\002 \003(\t\"&\n\022DeleteGroupRequest\022\020\n\010group_id\030"
      "\001 \001(\t\"8\n\036DeleteLeaderboardRecordRequest\022"
      "\026\n\016leaderboard_id\030\001 \001(\t\")\n\032DeleteNotific"
      "ationsRequest\022\013\n\003ids\030\001 \003(\t\"I\n\025DeleteStor"
      "ageObjectId\022\022\n\ncollection\030\001 \001(\t\022\013\n\003key\030\002"
      " \001(\t\022\017\n\007version\030\003 \001(\t\"T\n\033DeleteStorageOb"
      "jectsRequest\0225\n\nobject_ids\030\001 \003(\0132!.nakam"
      "a.api.DeleteStorageObjectId\"\234\001\n\006Friend\022\036"
      "\n\004user\030\001 \001(\0132\020.nakama.api.User\022*\n\005state\030"
      "\002 \001(\0132\033.google.protobuf.Int32Value\"F\n\005St"
      "ate\022\n\n\006FRIEND\020\000\022\017\n\013INVITE_SENT\020\001\022\023\n\017INVI"
      "TE_RECEIVED\020\002\022\013\n\007BLOCKED\020\003\".\n\007Friends\022#\n"
      "\007friends\030\001 \003(\0132\022.nakama.api.Friend\"G\n\017Ge"
      "tUsersRequest\022\013\n\003ids\030\001 \003(\t\022\021\n\tusernames\030"
      "\002 \003(\t\022\024\n\014facebook_ids\030\003 \003(\t\"\265\002\n\005Group\022\n\n"
      "\002id\030\001 \001(\t\022\022\n\ncreator_id\030\002 \001(\t\022\014\n\004name\030\003 "
      "\001(\t\022\023\n\013description\030\004 \001(\t\022\020\n\010lang_tag\030\005 \001"
      "(\t\022\020\n\010metadata\030\006 \001(\t\022\022\n\navatar_url\030\007 \001(\t"
      "\022(\n\004open\030\010 \001(\0132\032.google.protobuf.BoolVal"
      "ue\022\022\n\nedge_count\030\t \001(\005\022\021\n\tmax_count\030\n \001("
      "\005\022/\n\013create_time\030\013 \001(\0132\032.google.protobuf"
      ".Timestamp\022/\n\013update_time\030\014 \001(\0132\032.google"
      ".protobuf.Timestamp\">\n\tGroupList\022!\n\006grou"
      "ps\030\001 \003(\0132\021.nakama.api.Group\022\016\n\006cursor\030\002 "
      "\001(\t\"\345\001\n\rGroupUserList\0228\n\013group_users\030\001 \003"
      "(\0132#.nakama.api.GroupUserList.GroupUser\032"
      "\231\001\n\tGroupUser\022\036\n\004user\030\001 \001(\0132\020.nakama.api"
      ".User\022*\n\005state\030\002 \001(\0132\033.google.protobuf.I"
      "nt32Value\"@\n\005State\022\016\n\nSUPERADMIN\020\000\022\t\n\005AD"
      "MIN\020\001\022\n\n\006MEMBER\020\002\022\020\n\014JOIN_REQUEST\020\003\"w\n\034I"
      "mportFacebookFriendsRequest\022,\n\007account\030\001"
      " \001(\0132\033.nakama.api.AccountFacebook\022)\n\005res"
      "et\030\002 \001(\0132\032.google.protobuf.BoolValue\"$\n\020"
      "JoinGroupRequest\022\020\n\010group_id\030\001 \001(\t\".\n\025Jo"
      "inTournamentRequest\022\025\n\rtournament_id\030\001 \001"
      "(\t\";\n\025KickGroupUsersRequest\022\020\n\010group_id\030"
      "\001 \001(\t\022\020\n\010user_ids\030\002 \003(\t\"\353\002\n\021LeaderboardR"
      "ecord\022\026\n\016leaderboard_id\030\001 \001(\t\022\020\n\010owner_i"
      "d\030\002 \001(\t\022.\n\010username\030\003 \001(\0132\034.google.proto"
      "buf.StringValue\022\r\n\005score\030\004 \001(\003\022\020\n\010subsco"
      "re\030\005 \001(\003\022\021\n\tnum_score\030\006 \001(\005\022\020\n\010metadata\030"
      "\007 \001(\t\022/\n\013create_time\030\010 \001(\0132\032.google.prot"
      "obuf.Timestamp\022/\n\013update_time\030\t \001(\0132\032.go"
      "ogle.protobuf.Timestamp\022/\n\013expiry_time\030\n"
      " \001(\0132\032.google.protobuf.Timestamp\022\014\n\004rank"
      "\030\013 \001(\003\022\025\n\rmax_num_score\030\014 \001(\r\"\247\001\n\025Leader"
      "boardRecordList\022.\n\007records\030\001 \003(\0132\035.nakam"
      "a.api.LeaderboardRecord\0224\n\rowner_records"
      "\030\002 \003(\0132\035.nakama.api.LeaderboardRecord\022\023\n"
      "\013next_cursor\030\003 \001(\t\022\023\n\013prev_cursor\030\004 \001(\t\""
      "%\n\021LeaveGroupRequest\022\020\n\010group_id\030\001 \001(\t\"o"
      "\n\023LinkFacebookRequest\022,\n\007account\030\001 \001(\0132\033"
      ".nakama.api.AccountFacebook\022*\n\006import\030\004 "
      "\001(\0132\032.google.protobuf.BoolValue\"\231\001\n\032List"
      "ChannelMessagesRequest\022\022\n\nchannel_id\030\001 \001"
      "(\t\022*\n\005limit\030\002 \001(\0132\033.google.protobuf.Int3"
      "2Value\022+\n\007forward\030\003 \001(\0132\032.google.protobu"
      "f.BoolValue\022\016\n\006cursor\030\004 \001(\t\"]\n\021ListGroup"
      "sRequest\022\014\n\004name\030\001 \001(\t\022\016\n\006cursor\030\002 \001(\t\022*"
      "\n\005limit\030\003 \001(\0132\033.google.protobuf.Int32Val"
      "ue\")\n\025ListGroupUsersRequest\022\020\n\010group_id\030"
      "\001 \001(\t\"\201\001\n(ListLeaderboardRecordsAroundOw"
      "nerRequest\022\026\n\016leaderboard_id\030\001 \001(\t\022+\n\005li"
      "mit\030\002 \001(\0132\034.google.protobuf.UInt32Value\022"
      "\020\n\010owner_id\030\003 \001(\t\"\206\001\n\035ListLeaderboardRec"
      "ordsRequest\022\026\n\016leaderboard_id\030\001 \001(\t\022\021\n\to"
      "wner_ids\030\002 \003(\t\022*\n\005limit\030\003 \001(\0132\033.google.p"
      "rotobuf.Int32Value\022\016\n\006cursor\030\004 \001(\t\"\253\002\n\022L"
      "istMatchesRequest\022*\n\005limit\030\001 \001(\0132\033.googl"
      "e.protobuf.Int32Value\0221\n\rauthoritative\030\002"
      " \001(\0132\032.google.protobuf.BoolValue\022+\n\005labe"
      "l\030\003 \001(\0132\034.google.protobuf.StringValue\022-\n"
      "\010min_size\030\004 \001(\0132\033.google.protobuf.Int32V"
      "alue\022-\n\010max_size\030\005 \001(\0132\033.google.protobuf"
      ".Int32Value\022+\n\005query\030\006 \001(\0132\034.google.prot"
      "obuf.StringValue\"`\n\030ListNotificationsReq"
      "uest\022*\n\005limit\030\001 \001(\0132\033.google.protobuf.In"
      "t32Value\022\030\n\020cacheable_cursor\030\002 \001(\t\"|\n\031Li"
      "stStorageObjectsRequest\022\017\n\007user_id\030\001 \001(\t"
      "\022\022\n\ncollection\030\002 \001(\t\022*\n\005limit\030\003 \001(\0132\033.go"
      "ogle.protobuf.Int32Value\022\016\n\006cursor\030\004 \001(\t"
      "\"\177\n\'ListTournamentRecordsAroundOwnerRequ"
      "est\022\025\n\rtournament_id\030\001 \001(\t\022+\n\005limit\030\002 \001("
      "\0132\034.google.protobuf.UInt32Value\022\020\n\010owner"
      "_id\030\003 \001(\t\"\204\001\n\034ListTournamentRecordsReque"
      "st\022\025\n\rtournament_id\030\001 \001(\t\022\021\n\towner_ids\030\002"
      " \003(\t\022*\n\005limit\030\003 \001(\0132\033.google.protobuf.In"
      "t32Value\022\016\n\006cursor\030\004 \001(\t\"\240\002\n\026ListTournam"
      "entsRequest\0224\n\016category_start\030\001 \001(\0132\034.go"
      "ogle.protobuf.UInt32Value\0222\n\014category_en"
      "d\030\002 \001(\0132\034.google.protobuf.UInt32Value\0220\n"
      "\nstart_time\030\003 \001(\0132\034.google.protobuf.UInt"
      "32Value\022.\n\010end_time\030\004 \001(\0132\034.google.proto"
      "buf.UInt32Value\022*\n\005limit\030\006 \001(\0132\033.google."
      "protobuf.Int32Value\022\016\n\006cursor\030\010 \001(\t\"(\n\025L"
      "istUserGroupsRequest\022\017\n\007user_id\030\001 \001(\t\"k\n"
      "\005Match\022\020\n\010match_id\030\001 \001(\t\022\025\n\rauthoritativ"
      "e\030\002 \001(\010\022+\n\005label\030\003 \001(\0132\034.google.protobuf"
      ".StringValue\022\014\n\004size\030\004 \001(\005\"/\n\tMatchList\022"
      "\"\n\007matches\030\001 \003(\0132\021.nakama.api.Match\"\242\001\n\014"
      "Notification\022\n\n\002id\030\001 \001(\t\022\017\n\007subject\030\002 \001("
      "\t\022\017\n\007content\030\003 \001(\t\022\014\n\004code\030\004 \001(\005\022\021\n\tsend"
      "er_id\030\005 \001(\t\022/\n\013create_time\030\006 \001(\0132\032.googl"
      "e.protobuf.Timestamp\022\022\n\npersistent\030\007 \001(\010"
      "\"]\n\020NotificationList\022/\n\rnotifications\030\001 "
      "\003(\0132\030.nakama.api.Notification\022\030\n\020cacheab"
      "le_cursor\030\002 \001(\t\">\n\030PromoteGroupUsersRequ"
      "est\022\020\n\010group_id\030\001 \001(\t\022\020\n\010user_ids\030\002 \003(\t\""
      "G\n\023ReadStorageObjectId\022\022\n\ncollection\030\001 \001"
      "(\t\022\013\n\003key\030\002 \001(\t\022\017\n\007user_id\030\003 \001(\t\"P\n\031Read"
      "StorageObjectsRequest\0223\n\nobject_ids\030\001 \003("
      "\0132\037.nakama.api.ReadStorageObjectId\"4\n\003Rp"
      "c\022\n\n\002id\030\001 \001(\t\022\017\n\007payload\030\002 \001(\t\022\020\n\010http_k"
      "ey\030\003 \001(\t\"<\n\007Session\022\017\n\007created\030\001 \001(\010\022\r\n\005"
      "token\030\002 \001(\t\022\021\n\tudp_token\030\003 \001(\t\"\366\001\n\rStora"
      "geObject\022\022\n\ncollection\030\001 \001(\t\022\013\n\003key\030\002 \001("
      "\t\022\017\n\007user_id\030\003 \001(\t\022\r\n\005value\030\004 \001(\t\022\017\n\007ver"
      "sion\030\005 \001(\t\022\027\n\017permission_read\030\006 \001(\005\022\030\n\020p"
      "ermission_write\030\007 \001(\005\022/\n\013create_time\030\010 \001"
      "(\0132\032.google.protobuf.Timestamp\022/\n\013update"
      "_time\030\t \001(\0132\032.google.protobuf.Timestamp\""
      "U\n\020StorageObjectAck\022\022\n\ncollection\030\001 \001(\t\022"
      "\013\n\003key\030\002 \001(\t\022\017\n\007version\030\003 \001(\t\022\017\n\007user_id"
      "\030\004 \001(\t\"\?\n\021StorageObjectAcks\022*\n\004acks\030\001 \003("
      "\0132\034.nakama.api.StorageObjectAck\"<\n\016Stora"
      "geObjects\022*\n\007objects\030\001 \003(\0132\031.nakama.api."
      "StorageObject\"O\n\021StorageObjectList\022*\n\007ob"
      "jects\030\001 \003(\0132\031.nakama.api.StorageObject\022\016"
      "\n\006cursor\030\002 \001(\t\"\207\003\n\nTournament\022\n\n\002id\030\001 \001("
      "\t\022\r\n\005title\030\002 \001(\t\022\023\n\013description\030\003 \001(\t\022\020\n"
      "\010category\030\004 \001(\r\022\022\n\nsort_order\030\005 \001(\r\022\014\n\004s"
      "ize\030\006 \001(\r\022\020\n\010max_size\030\007 \001(\r\022\025\n\rmax_num_s"
      "core\030\010 \001(\r\022\021\n\tcan_enter\030\t \001(\010\022\022\n\nend_act"
      "ive\030\n \001(\r\022\022\n\nnext_reset\030\013 \001(\r\022\020\n\010metadat"
      "a\030\014 \001(\t\022/\n\013create_time\030\r \001(\0132\032.google.pr"
      "otobuf.Timestamp\022.\n\nstart_time\030\016 \001(\0132\032.g"
      "oogle.protobuf.Timestamp\022,\n\010end_time\030\017 \001"
      "(\0132\032.google.protobuf.Timestamp\022\020\n\010durati"
      "on\030\020 \001(\r\"M\n\016TournamentList\022+\n\013tournament"
      "s\030\001 \003(\0132\026.nakama.api.Tournament\022\016\n\006curso"
      "r\030\002 \001(\t\"\246\001\n\024TournamentRecordList\022.\n\007reco"
      "rds\030\001 \003(\0132\035.nakama.api.LeaderboardRecord"
      "\0224\n\rowner_records\030\002 \003(\0132\035.nakama.api.Lea"
      "derboardRecord\022\023\n\013next_cursor\030\003 \001(\t\022\023\n\013p"
      "rev_cursor\030\004 \001(\t\"\274\002\n\024UpdateAccountReques"
      "t\022.\n\010username\030\001 \001(\0132\034.google.protobuf.St"
      "ringValue\0222\n\014display_name\030\002 \001(\0132\034.google"
      ".protobuf.StringValue\0220\n\navatar_url\030\003 \001("
      "\0132\034.google.protobuf.StringValue\022.\n\010lang_"
      "tag\030\004 \001(\0132\034.google.protobuf.StringValue\022"
      ".\n\010location\030\005 \001(\0132\034.google.protobuf.Stri"
      "ngValue\022.\n\010timezone\030\006 \001(\0132\034.google.proto"
      "buf.StringValue\"\221\002\n\022UpdateGroupRequest\022\020"
      "\n\010group_id\030\001 \001(\t\022*\n\004name\030\002 \001(\0132\034.google."
      "protobuf.StringValue\0221\n\013description\030\003 \001("
      "\0132\034.google.protobuf.StringValue\022.\n\010lang_"
      "tag\030\004 \001(\0132\034.google.protobuf.StringValue\022"
      "0\n\navatar_url\030\005 \001(\0132\034.google.protobuf.St"
      "ringValue\022(\n\004open\030\006 \001(\0132\032.google.protobu"
      "f.BoolValue\"\355\002\n\004User\022\n\n\002id\030\001 \001(\t\022\020\n\010user"
      "name\030\002 \001(\t\022\024\n\014display_name\030\003 \001(\t\022\022\n\navat"
      "ar_url\030\004 \001(\t\022\020\n\010lang_tag\030\005 \001(\t\022\020\n\010locati"
      "on\030\006 \001(\t\022\020\n\010timezone\030\007 \001(\t\022\020\n\010metadata\030\010"
      " \001(\t\022\023\n\013facebook_id\030\t \001(\t\022\021\n\tgoogle_id\030\n"
      " \001(\t\022\025\n\rgamecenter_id\030\013 \001(\t\022\020\n\010steam_id\030"
      "\014 \001(\t\022\016\n\006online\030\r \001(\010\022\022\n\nedge_count\030\016 \001("
      "\005\022/\n\013create_time\030\017 \001(\0132\032.google.protobuf"
      ".Timestamp\022/\n\013update_time\030\020 \001(\0132\032.google"
      ".protobuf.Timestamp\"\347\001\n\rUserGroupList\0228\n"
      "\013user_groups\030\001 \003(\0132#.nakama.api.UserGrou"
      "pList.UserGroup\032\233\001\n\tUserGroup\022 \n\005group\030\001"
      " \001(\0132\021.nakama.api.Group\022*\n\005state\030\002 \001(\0132\033"
      ".google.protobuf.Int32Value\"@\n\005State\022\016\n\n"
      "SUPERADMIN\020\000\022\t\n\005ADMIN\020\001\022\n\n\006MEMBER\020\002\022\020\n\014J"
      "OIN_REQUEST\020\003\"(\n\005Users\022\037\n\005users\030\001 \003(\0132\020."
      "nakama.api.User\"\326\001\n\035WriteLeaderboardReco"
      "rdRequest\022\026\n\016leaderboard_id\030\001 \001(\t\022P\n\006rec"
      "ord\030\002 \001(\0132@.nakama.api.WriteLeaderboardR"
      "ecordRequest.LeaderboardRecordWrite\032K\n\026L"
      "eaderboardRecordWrite\022\r\n\005score\030\001 \001(\003\022\020\n\010"
      "subscore\030\002 \001(\003\022\020\n\010metadata\030\003 \001(\t\"\302\001\n\022Wri"
      "teStorageObject\022\022\n\ncollection\030\001 \001(\t\022\013\n\003k"
      "ey\030\002 \001(\t\022\r\n\005value\030\003 \001(\t\022\017\n\007version\030\004 \001(\t"
      "\0224\n\017permission_read\030\005 \001(\0132\033.google.proto"
      "buf.Int32Value\0225\n\020permission_write\030\006 \001(\013"
      "2\033.google.protobuf.Int32Value\"M\n\032WriteSt"
      "orageObjectsRequest\022/\n\007objects\030\001 \003(\0132\036.n"
      "akama.api.WriteStorageObject\"\321\001\n\034WriteTo"
      "urnamentRecordRequest\022\025\n\rtournament_id\030\001"
      " \001(\t\022N\n\006record\030\002 \001(\0132>.nakama.api.WriteT"
      "ournamentRecordRequest.TournamentRecordW"
      "rite\032J\n\025TournamentRecordWrite\022\r\n\005score\030\001"
      " \001(\003\022\020\n\010subscore\030\002 \001(\003\022\020\n\010metadata\030\003 \001(\t"
      "B=\n\031com.heroiclabs.nakama.apiB\tNakamaApi"
      "P\001Z\003api\242\002\004NKPB\252\002\006Nakamab\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 10191);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "github.com/heroiclabs/nakama/api/api.proto", &protobuf_RegisterTypes);
  ::protobuf_google_2fprotobuf_2ftimestamp_2eproto::AddDescriptors();
  ::protobuf_google_2fprotobuf_2fwrappers_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto
namespace nakama {
namespace api {
const ::google::protobuf::EnumDescriptor* Friend_State_descriptor() {
  protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_enum_descriptors[0];
}
bool Friend_State_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Friend_State Friend::FRIEND;
const Friend_State Friend::INVITE_SENT;
const Friend_State Friend::INVITE_RECEIVED;
const Friend_State Friend::BLOCKED;
const Friend_State Friend::State_MIN;
const Friend_State Friend::State_MAX;
const int Friend::State_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* GroupUserList_GroupUser_State_descriptor() {
  protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_enum_descriptors[1];
}
bool GroupUserList_GroupUser_State_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const GroupUserList_GroupUser_State GroupUserList_GroupUser::SUPERADMIN;
const GroupUserList_GroupUser_State GroupUserList_GroupUser::ADMIN;
const GroupUserList_GroupUser_State GroupUserList_GroupUser::MEMBER;
const GroupUserList_GroupUser_State GroupUserList_GroupUser::JOIN_REQUEST;
const GroupUserList_GroupUser_State GroupUserList_GroupUser::State_MIN;
const GroupUserList_GroupUser_State GroupUserList_GroupUser::State_MAX;
const int GroupUserList_GroupUser::State_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* UserGroupList_UserGroup_State_descriptor() {
  protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_enum_descriptors[2];
}
bool UserGroupList_UserGroup_State_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const UserGroupList_UserGroup_State UserGroupList_UserGroup::SUPERADMIN;
const UserGroupList_UserGroup_State UserGroupList_UserGroup::ADMIN;
const UserGroupList_UserGroup_State UserGroupList_UserGroup::MEMBER;
const UserGroupList_UserGroup_State UserGroupList_UserGroup::JOIN_REQUEST;
const UserGroupList_UserGroup_State UserGroupList_UserGroup::State_MIN;
const UserGroupList_UserGroup_State UserGroupList_UserGroup::State_MAX;
const int UserGroupList_UserGroup::State_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void Account::InitAsDefaultInstance() {
  ::nakama::api::_Account_default_instance_._instance.get_mutable()->user_ = const_cast< ::nakama::api::User*>(
      ::nakama::api::User::internal_default_instance());
  ::nakama::api::_Account_default_instance_._instance.get_mutable()->verify_time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
}
void Account::clear_verify_time() {
  if (GetArenaNoVirtual() == NULL && verify_time_ != NULL) {
    delete verify_time_;
  }
  verify_time_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Account::kUserFieldNumber;
const int Account::kWalletFieldNumber;
const int Account::kEmailFieldNumber;
const int Account::kDevicesFieldNumber;
const int Account::kCustomIdFieldNumber;
const int Account::kVerifyTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Account::Account()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_Account.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:nakama.api.Account)
}
Account::Account(const Account& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      devices_(from.devices_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  wallet_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.wallet().size() > 0) {
    wallet_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.wallet_);
  }
  email_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.email().size() > 0) {
    email_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.email_);
  }
  custom_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.custom_id().size() > 0) {
    custom_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.custom_id_);
  }
  if (from.has_user()) {
    user_ = new ::nakama::api::User(*from.user_);
  } else {
    user_ = NULL;
  }
  if (from.has_verify_time()) {
    verify_time_ = new ::google::protobuf::Timestamp(*from.verify_time_);
  } else {
    verify_time_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:nakama.api.Account)
}

void Account::SharedCtor() {
  wallet_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  email_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  custom_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&verify_time_) -
      reinterpret_cast<char*>(&user_)) + sizeof(verify_time_));
}

Account::~Account() {
  // @@protoc_insertion_point(destructor:nakama.api.Account)
  SharedDtor();
}

void Account::SharedDtor() {
  wallet_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  email_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  custom_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_;
  if (this != internal_default_instance()) delete verify_time_;
}

void Account::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Account::descriptor() {
  ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Account& Account::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_Account.base);
  return *internal_default_instance();
}


void Account::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.Account)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  devices_.Clear();
  wallet_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  custom_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && user_ != NULL) {
    delete user_;
  }
  user_ = NULL;
  if (GetArenaNoVirtual() == NULL && verify_time_ != NULL) {
    delete verify_time_;
  }
  verify_time_ = NULL;
  _internal_metadata_.Clear();
}

bool Account::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nakama.api.Account)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .nakama.api.User user = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_user()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string wallet = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_wallet()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->wallet().data(), static_cast<int>(this->wallet().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nakama.api.Account.wallet"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string email = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_email()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->email().data(), static_cast<int>(this->email().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nakama.api.Account.email"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .nakama.api.AccountDevice devices = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_devices()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string custom_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_custom_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->custom_id().data(), static_cast<int>(this->custom_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nakama.api.Account.custom_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp verify_time = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_verify_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nakama.api.Account)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nakama.api.Account)
  return false;
#undef DO_
}

void Account::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nakama.api.Account)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .nakama.api.User user = 1;
  if (this->has_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_user(), output);
  }

  // string wallet = 2;
  if (this->wallet().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->wallet().data(), static_cast<int>(this->wallet().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.Account.wallet");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->wallet(), output);
  }

  // string email = 3;
  if (this->email().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->email().data(), static_cast<int>(this->email().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.Account.email");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->email(), output);
  }

  // repeated .nakama.api.AccountDevice devices = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->devices_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->devices(static_cast<int>(i)),
      output);
  }

  // string custom_id = 5;
  if (this->custom_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->custom_id().data(), static_cast<int>(this->custom_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.Account.custom_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->custom_id(), output);
  }

  // .google.protobuf.Timestamp verify_time = 6;
  if (this->has_verify_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_verify_time(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:nakama.api.Account)
}

::google::protobuf::uint8* Account::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.Account)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .nakama.api.User user = 1;
  if (this->has_user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_user(), deterministic, target);
  }

  // string wallet = 2;
  if (this->wallet().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->wallet().data(), static_cast<int>(this->wallet().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.Account.wallet");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->wallet(), target);
  }

  // string email = 3;
  if (this->email().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->email().data(), static_cast<int>(this->email().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.Account.email");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->email(), target);
  }

  // repeated .nakama.api.AccountDevice devices = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->devices_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->devices(static_cast<int>(i)), deterministic, target);
  }

  // string custom_id = 5;
  if (this->custom_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->custom_id().data(), static_cast<int>(this->custom_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.Account.custom_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->custom_id(), target);
  }

  // .google.protobuf.Timestamp verify_time = 6;
  if (this->has_verify_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_verify_time(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.Account)
  return target;
}

size_t Account::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.Account)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .nakama.api.AccountDevice devices = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->devices_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->devices(static_cast<int>(i)));
    }
  }

  // string wallet = 2;
  if (this->wallet().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->wallet());
  }

  // string email = 3;
  if (this->email().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->email());
  }

  // string custom_id = 5;
  if (this->custom_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->custom_id());
  }

  // .nakama.api.User user = 1;
  if (this->has_user()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *user_);
  }

  // .google.protobuf.Timestamp verify_time = 6;
  if (this->has_verify_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *verify_time_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Account::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.Account)
  GOOGLE_DCHECK_NE(&from, this);
  const Account* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Account>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.Account)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.Account)
    MergeFrom(*source);
  }
}

void Account::MergeFrom(const Account& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.Account)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  devices_.MergeFrom(from.devices_);
  if (from.wallet().size() > 0) {

    wallet_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.wallet_);
  }
  if (from.email().size() > 0) {

    email_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.email_);
  }
  if (from.custom_id().size() > 0) {

    custom_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.custom_id_);
  }
  if (from.has_user()) {
    mutable_user()->::nakama::api::User::MergeFrom(from.user());
  }
  if (from.has_verify_time()) {
    mutable_verify_time()->::google::protobuf::Timestamp::MergeFrom(from.verify_time());
  }
}

void Account::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.Account)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Account::CopyFrom(const Account& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.Account)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Account::IsInitialized() const {
  return true;
}

void Account::Swap(Account* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Account::InternalSwap(Account* other) {
  using std::swap;
  CastToBase(&devices_)->InternalSwap(CastToBase(&other->devices_));
  wallet_.Swap(&other->wallet_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  email_.Swap(&other->email_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  custom_id_.Swap(&other->custom_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_, other->user_);
  swap(verify_time_, other->verify_time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Account::GetMetadata() const {
  protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AccountCustom::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AccountCustom::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AccountCustom::AccountCustom()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_AccountCustom.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:nakama.api.AccountCustom)
}
AccountCustom::AccountCustom(const AccountCustom& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  // @@protoc_insertion_point(copy_constructor:nakama.api.AccountCustom)
}

void AccountCustom::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

AccountCustom::~AccountCustom() {
  // @@protoc_insertion_point(destructor:nakama.api.AccountCustom)
  SharedDtor();
}

void AccountCustom::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AccountCustom::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AccountCustom::descriptor() {
  ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AccountCustom& AccountCustom::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_AccountCustom.base);
  return *internal_default_instance();
}


void AccountCustom::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.AccountCustom)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool AccountCustom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nakama.api.AccountCustom)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nakama.api.AccountCustom.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nakama.api.AccountCustom)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nakama.api.AccountCustom)
  return false;
#undef DO_
}

void AccountCustom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nakama.api.AccountCustom)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.AccountCustom.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:nakama.api.AccountCustom)
}

::google::protobuf::uint8* AccountCustom::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.AccountCustom)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.AccountCustom.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.AccountCustom)
  return target;
}

size_t AccountCustom::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.AccountCustom)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AccountCustom::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.AccountCustom)
  GOOGLE_DCHECK_NE(&from, this);
  const AccountCustom* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AccountCustom>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.AccountCustom)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.AccountCustom)
    MergeFrom(*source);
  }
}

void AccountCustom::MergeFrom(const AccountCustom& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.AccountCustom)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
}

void AccountCustom::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.AccountCustom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountCustom::CopyFrom(const AccountCustom& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.AccountCustom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountCustom::IsInitialized() const {
  return true;
}

void AccountCustom::Swap(AccountCustom* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AccountCustom::InternalSwap(AccountCustom* other) {
  using std::swap;
  id_.Swap(&other->id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AccountCustom::GetMetadata() const {
  protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AccountDevice::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AccountDevice::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AccountDevice::AccountDevice()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_AccountDevice.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:nakama.api.AccountDevice)
}
AccountDevice::AccountDevice(const AccountDevice& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  // @@protoc_insertion_point(copy_constructor:nakama.api.AccountDevice)
}

void AccountDevice::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

AccountDevice::~AccountDevice() {
  // @@protoc_insertion_point(destructor:nakama.api.AccountDevice)
  SharedDtor();
}

void AccountDevice::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AccountDevice::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AccountDevice::descriptor() {
  ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AccountDevice& AccountDevice::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_AccountDevice.base);
  return *internal_default_instance();
}


void AccountDevice::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.AccountDevice)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool AccountDevice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nakama.api.AccountDevice)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nakama.api.AccountDevice.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nakama.api.AccountDevice)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nakama.api.AccountDevice)
  return false;
#undef DO_
}

void AccountDevice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nakama.api.AccountDevice)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.AccountDevice.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:nakama.api.AccountDevice)
}

::google::protobuf::uint8* AccountDevice::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.AccountDevice)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.AccountDevice.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.AccountDevice)
  return target;
}

size_t AccountDevice::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.AccountDevice)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AccountDevice::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.AccountDevice)
  GOOGLE_DCHECK_NE(&from, this);
  const AccountDevice* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AccountDevice>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.AccountDevice)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.AccountDevice)
    MergeFrom(*source);
  }
}

void AccountDevice::MergeFrom(const AccountDevice& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.AccountDevice)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
}

void AccountDevice::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.AccountDevice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountDevice::CopyFrom(const AccountDevice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.AccountDevice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountDevice::IsInitialized() const {
  return true;
}

void AccountDevice::Swap(AccountDevice* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AccountDevice::InternalSwap(AccountDevice* other) {
  using std::swap;
  id_.Swap(&other->id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AccountDevice::GetMetadata() const {
  protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AccountEmail::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AccountEmail::kEmailFieldNumber;
const int AccountEmail::kPasswordFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AccountEmail::AccountEmail()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_AccountEmail.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:nakama.api.AccountEmail)
}
AccountEmail::AccountEmail(const AccountEmail& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  email_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.email().size() > 0) {
    email_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.email_);
  }
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.password().size() > 0) {
    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  // @@protoc_insertion_point(copy_constructor:nakama.api.AccountEmail)
}

void AccountEmail::SharedCtor() {
  email_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

AccountEmail::~AccountEmail() {
  // @@protoc_insertion_point(destructor:nakama.api.AccountEmail)
  SharedDtor();
}

void AccountEmail::SharedDtor() {
  email_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AccountEmail::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AccountEmail::descriptor() {
  ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AccountEmail& AccountEmail::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_AccountEmail.base);
  return *internal_default_instance();
}


void AccountEmail::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.AccountEmail)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool AccountEmail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nakama.api.AccountEmail)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string email = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_email()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->email().data(), static_cast<int>(this->email().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nakama.api.AccountEmail.email"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string password = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->password().data(), static_cast<int>(this->password().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nakama.api.AccountEmail.password"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nakama.api.AccountEmail)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nakama.api.AccountEmail)
  return false;
#undef DO_
}

void AccountEmail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nakama.api.AccountEmail)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string email = 1;
  if (this->email().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->email().data(), static_cast<int>(this->email().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.AccountEmail.email");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->email(), output);
  }

  // string password = 2;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.AccountEmail.password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->password(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:nakama.api.AccountEmail)
}

::google::protobuf::uint8* AccountEmail::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.AccountEmail)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string email = 1;
  if (this->email().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->email().data(), static_cast<int>(this->email().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.AccountEmail.email");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->email(), target);
  }

  // string password = 2;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.AccountEmail.password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.AccountEmail)
  return target;
}

size_t AccountEmail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.AccountEmail)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string email = 1;
  if (this->email().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->email());
  }

  // string password = 2;
  if (this->password().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->password());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AccountEmail::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.AccountEmail)
  GOOGLE_DCHECK_NE(&from, this);
  const AccountEmail* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AccountEmail>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.AccountEmail)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.AccountEmail)
    MergeFrom(*source);
  }
}

void AccountEmail::MergeFrom(const AccountEmail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.AccountEmail)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.email().size() > 0) {

    email_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.email_);
  }
  if (from.password().size() > 0) {

    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
}

void AccountEmail::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.AccountEmail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountEmail::CopyFrom(const AccountEmail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.AccountEmail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountEmail::IsInitialized() const {
  return true;
}

void AccountEmail::Swap(AccountEmail* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AccountEmail::InternalSwap(AccountEmail* other) {
  using std::swap;
  email_.Swap(&other->email_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  password_.Swap(&other->password_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AccountEmail::GetMetadata() const {
  protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AccountFacebook::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AccountFacebook::kTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AccountFacebook::AccountFacebook()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_AccountFacebook.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:nakama.api.AccountFacebook)
}
AccountFacebook::AccountFacebook(const AccountFacebook& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.token().size() > 0) {
    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  // @@protoc_insertion_point(copy_constructor:nakama.api.AccountFacebook)
}

void AccountFacebook::SharedCtor() {
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

AccountFacebook::~AccountFacebook() {
  // @@protoc_insertion_point(destructor:nakama.api.AccountFacebook)
  SharedDtor();
}

void AccountFacebook::SharedDtor() {
  token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AccountFacebook::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AccountFacebook::descriptor() {
  ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AccountFacebook& AccountFacebook::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_AccountFacebook.base);
  return *internal_default_instance();
}


void AccountFacebook::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.AccountFacebook)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool AccountFacebook::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nakama.api.AccountFacebook)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string token = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->token().data(), static_cast<int>(this->token().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nakama.api.AccountFacebook.token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nakama.api.AccountFacebook)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nakama.api.AccountFacebook)
  return false;
#undef DO_
}

void AccountFacebook::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nakama.api.AccountFacebook)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string token = 1;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), static_cast<int>(this->token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.AccountFacebook.token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->token(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:nakama.api.AccountFacebook)
}

::google::protobuf::uint8* AccountFacebook::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.AccountFacebook)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string token = 1;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), static_cast<int>(this->token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.AccountFacebook.token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->token(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.AccountFacebook)
  return target;
}

size_t AccountFacebook::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.AccountFacebook)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string token = 1;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->token());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AccountFacebook::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.AccountFacebook)
  GOOGLE_DCHECK_NE(&from, this);
  const AccountFacebook* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AccountFacebook>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.AccountFacebook)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.AccountFacebook)
    MergeFrom(*source);
  }
}

void AccountFacebook::MergeFrom(const AccountFacebook& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.AccountFacebook)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.token().size() > 0) {

    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
}

void AccountFacebook::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.AccountFacebook)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountFacebook::CopyFrom(const AccountFacebook& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.AccountFacebook)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountFacebook::IsInitialized() const {
  return true;
}

void AccountFacebook::Swap(AccountFacebook* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AccountFacebook::InternalSwap(AccountFacebook* other) {
  using std::swap;
  token_.Swap(&other->token_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AccountFacebook::GetMetadata() const {
  protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AccountGameCenter::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AccountGameCenter::kPlayerIdFieldNumber;
const int AccountGameCenter::kBundleIdFieldNumber;
const int AccountGameCenter::kTimestampSecondsFieldNumber;
const int AccountGameCenter::kSaltFieldNumber;
const int AccountGameCenter::kSignatureFieldNumber;
const int AccountGameCenter::kPublicKeyUrlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AccountGameCenter::AccountGameCenter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_AccountGameCenter.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:nakama.api.AccountGameCenter)
}
AccountGameCenter::AccountGameCenter(const AccountGameCenter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  player_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.player_id().size() > 0) {
    player_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.player_id_);
  }
  bundle_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.bundle_id().size() > 0) {
    bundle_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bundle_id_);
  }
  salt_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.salt().size() > 0) {
    salt_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.salt_);
  }
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.signature().size() > 0) {
    signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
  }
  public_key_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.public_key_url().size() > 0) {
    public_key_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.public_key_url_);
  }
  timestamp_seconds_ = from.timestamp_seconds_;
  // @@protoc_insertion_point(copy_constructor:nakama.api.AccountGameCenter)
}

void AccountGameCenter::SharedCtor() {
  player_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bundle_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  salt_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  public_key_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_seconds_ = GOOGLE_LONGLONG(0);
}

AccountGameCenter::~AccountGameCenter() {
  // @@protoc_insertion_point(destructor:nakama.api.AccountGameCenter)
  SharedDtor();
}

void AccountGameCenter::SharedDtor() {
  player_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bundle_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  salt_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  public_key_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AccountGameCenter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AccountGameCenter::descriptor() {
  ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AccountGameCenter& AccountGameCenter::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_AccountGameCenter.base);
  return *internal_default_instance();
}


void AccountGameCenter::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.AccountGameCenter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  player_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bundle_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  salt_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  public_key_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_seconds_ = GOOGLE_LONGLONG(0);
  _internal_metadata_.Clear();
}

bool AccountGameCenter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nakama.api.AccountGameCenter)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string player_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_player_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->player_id().data(), static_cast<int>(this->player_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nakama.api.AccountGameCenter.player_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string bundle_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bundle_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->bundle_id().data(), static_cast<int>(this->bundle_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nakama.api.AccountGameCenter.bundle_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 timestamp_seconds = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_seconds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string salt = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_salt()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->salt().data(), static_cast<int>(this->salt().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nakama.api.AccountGameCenter.salt"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string signature = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_signature()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->signature().data(), static_cast<int>(this->signature().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nakama.api.AccountGameCenter.signature"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string public_key_url = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_public_key_url()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->public_key_url().data(), static_cast<int>(this->public_key_url().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nakama.api.AccountGameCenter.public_key_url"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nakama.api.AccountGameCenter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nakama.api.AccountGameCenter)
  return false;
#undef DO_
}

void AccountGameCenter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nakama.api.AccountGameCenter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string player_id = 1;
  if (this->player_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->player_id().data(), static_cast<int>(this->player_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.AccountGameCenter.player_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->player_id(), output);
  }

  // string bundle_id = 2;
  if (this->bundle_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bundle_id().data(), static_cast<int>(this->bundle_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.AccountGameCenter.bundle_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->bundle_id(), output);
  }

  // int64 timestamp_seconds = 3;
  if (this->timestamp_seconds() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->timestamp_seconds(), output);
  }

  // string salt = 4;
  if (this->salt().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->salt().data(), static_cast<int>(this->salt().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.AccountGameCenter.salt");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->salt(), output);
  }

  // string signature = 5;
  if (this->signature().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->signature().data(), static_cast<int>(this->signature().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.AccountGameCenter.signature");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->signature(), output);
  }

  // string public_key_url = 6;
  if (this->public_key_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->public_key_url().data(), static_cast<int>(this->public_key_url().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.AccountGameCenter.public_key_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->public_key_url(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:nakama.api.AccountGameCenter)
}

::google::protobuf::uint8* AccountGameCenter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.AccountGameCenter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string player_id = 1;
  if (this->player_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->player_id().data(), static_cast<int>(this->player_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.AccountGameCenter.player_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->player_id(), target);
  }

  // string bundle_id = 2;
  if (this->bundle_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bundle_id().data(), static_cast<int>(this->bundle_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.AccountGameCenter.bundle_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->bundle_id(), target);
  }

  // int64 timestamp_seconds = 3;
  if (this->timestamp_seconds() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->timestamp_seconds(), target);
  }

  // string salt = 4;
  if (this->salt().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->salt().data(), static_cast<int>(this->salt().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.AccountGameCenter.salt");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->salt(), target);
  }

  // string signature = 5;
  if (this->signature().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->signature().data(), static_cast<int>(this->signature().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.AccountGameCenter.signature");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->signature(), target);
  }

  // string public_key_url = 6;
  if (this->public_key_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->public_key_url().data(), static_cast<int>(this->public_key_url().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.AccountGameCenter.public_key_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->public_key_url(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.AccountGameCenter)
  return target;
}

size_t AccountGameCenter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.AccountGameCenter)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string player_id = 1;
  if (this->player_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->player_id());
  }

  // string bundle_id = 2;
  if (this->bundle_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->bundle_id());
  }

  // string salt = 4;
  if (this->salt().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->salt());
  }

  // string signature = 5;
  if (this->signature().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->signature());
  }

  // string public_key_url = 6;
  if (this->public_key_url().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->public_key_url());
  }

  // int64 timestamp_seconds = 3;
  if (this->timestamp_seconds() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp_seconds());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AccountGameCenter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.AccountGameCenter)
  GOOGLE_DCHECK_NE(&from, this);
  const AccountGameCenter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AccountGameCenter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.AccountGameCenter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.AccountGameCenter)
    MergeFrom(*source);
  }
}

void AccountGameCenter::MergeFrom(const AccountGameCenter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.AccountGameCenter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.player_id().size() > 0) {

    player_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.player_id_);
  }
  if (from.bundle_id().size() > 0) {

    bundle_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bundle_id_);
  }
  if (from.salt().size() > 0) {

    salt_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.salt_);
  }
  if (from.signature().size() > 0) {

    signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
  }
  if (from.public_key_url().size() > 0) {

    public_key_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.public_key_url_);
  }
  if (from.timestamp_seconds() != 0) {
    set_timestamp_seconds(from.timestamp_seconds());
  }
}

void AccountGameCenter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.AccountGameCenter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountGameCenter::CopyFrom(const AccountGameCenter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.AccountGameCenter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountGameCenter::IsInitialized() const {
  return true;
}

void AccountGameCenter::Swap(AccountGameCenter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AccountGameCenter::InternalSwap(AccountGameCenter* other) {
  using std::swap;
  player_id_.Swap(&other->player_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  bundle_id_.Swap(&other->bundle_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  salt_.Swap(&other->salt_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  signature_.Swap(&other->signature_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  public_key_url_.Swap(&other->public_key_url_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(timestamp_seconds_, other->timestamp_seconds_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AccountGameCenter::GetMetadata() const {
  protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AccountGoogle::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AccountGoogle::kTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AccountGoogle::AccountGoogle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_AccountGoogle.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:nakama.api.AccountGoogle)
}
AccountGoogle::AccountGoogle(const AccountGoogle& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.token().size() > 0) {
    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  // @@protoc_insertion_point(copy_constructor:nakama.api.AccountGoogle)
}

void AccountGoogle::SharedCtor() {
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

AccountGoogle::~AccountGoogle() {
  // @@protoc_insertion_point(destructor:nakama.api.AccountGoogle)
  SharedDtor();
}

void AccountGoogle::SharedDtor() {
  token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AccountGoogle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AccountGoogle::descriptor() {
  ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AccountGoogle& AccountGoogle::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_AccountGoogle.base);
  return *internal_default_instance();
}


void AccountGoogle::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.AccountGoogle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool AccountGoogle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nakama.api.AccountGoogle)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string token = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->token().data(), static_cast<int>(this->token().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nakama.api.AccountGoogle.token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nakama.api.AccountGoogle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nakama.api.AccountGoogle)
  return false;
#undef DO_
}

void AccountGoogle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nakama.api.AccountGoogle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string token = 1;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), static_cast<int>(this->token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.AccountGoogle.token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->token(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:nakama.api.AccountGoogle)
}

::google::protobuf::uint8* AccountGoogle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.AccountGoogle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string token = 1;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), static_cast<int>(this->token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.AccountGoogle.token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->token(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.AccountGoogle)
  return target;
}

size_t AccountGoogle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.AccountGoogle)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string token = 1;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->token());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AccountGoogle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.AccountGoogle)
  GOOGLE_DCHECK_NE(&from, this);
  const AccountGoogle* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AccountGoogle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.AccountGoogle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.AccountGoogle)
    MergeFrom(*source);
  }
}

void AccountGoogle::MergeFrom(const AccountGoogle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.AccountGoogle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.token().size() > 0) {

    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
}

void AccountGoogle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.AccountGoogle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountGoogle::CopyFrom(const AccountGoogle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.AccountGoogle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountGoogle::IsInitialized() const {
  return true;
}

void AccountGoogle::Swap(AccountGoogle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AccountGoogle::InternalSwap(AccountGoogle* other) {
  using std::swap;
  token_.Swap(&other->token_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AccountGoogle::GetMetadata() const {
  protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AccountSteam::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AccountSteam::kTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AccountSteam::AccountSteam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_AccountSteam.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:nakama.api.AccountSteam)
}
AccountSteam::AccountSteam(const AccountSteam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.token().size() > 0) {
    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  // @@protoc_insertion_point(copy_constructor:nakama.api.AccountSteam)
}

void AccountSteam::SharedCtor() {
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

AccountSteam::~AccountSteam() {
  // @@protoc_insertion_point(destructor:nakama.api.AccountSteam)
  SharedDtor();
}

void AccountSteam::SharedDtor() {
  token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AccountSteam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AccountSteam::descriptor() {
  ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AccountSteam& AccountSteam::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_AccountSteam.base);
  return *internal_default_instance();
}


void AccountSteam::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.AccountSteam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool AccountSteam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nakama.api.AccountSteam)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string token = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->token().data(), static_cast<int>(this->token().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nakama.api.AccountSteam.token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nakama.api.AccountSteam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nakama.api.AccountSteam)
  return false;
#undef DO_
}

void AccountSteam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nakama.api.AccountSteam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string token = 1;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), static_cast<int>(this->token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.AccountSteam.token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->token(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:nakama.api.AccountSteam)
}

::google::protobuf::uint8* AccountSteam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.AccountSteam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string token = 1;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), static_cast<int>(this->token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.AccountSteam.token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->token(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.AccountSteam)
  return target;
}

size_t AccountSteam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.AccountSteam)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string token = 1;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->token());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AccountSteam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.AccountSteam)
  GOOGLE_DCHECK_NE(&from, this);
  const AccountSteam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AccountSteam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.AccountSteam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.AccountSteam)
    MergeFrom(*source);
  }
}

void AccountSteam::MergeFrom(const AccountSteam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.AccountSteam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.token().size() > 0) {

    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
}

void AccountSteam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.AccountSteam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountSteam::CopyFrom(const AccountSteam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.AccountSteam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountSteam::IsInitialized() const {
  return true;
}

void AccountSteam::Swap(AccountSteam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AccountSteam::InternalSwap(AccountSteam* other) {
  using std::swap;
  token_.Swap(&other->token_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AccountSteam::GetMetadata() const {
  protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AddFriendsRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AddFriendsRequest::kIdsFieldNumber;
const int AddFriendsRequest::kUsernamesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AddFriendsRequest::AddFriendsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_AddFriendsRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:nakama.api.AddFriendsRequest)
}
AddFriendsRequest::AddFriendsRequest(const AddFriendsRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      ids_(from.ids_),
      usernames_(from.usernames_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:nakama.api.AddFriendsRequest)
}

void AddFriendsRequest::SharedCtor() {
}

AddFriendsRequest::~AddFriendsRequest() {
  // @@protoc_insertion_point(destructor:nakama.api.AddFriendsRequest)
  SharedDtor();
}

void AddFriendsRequest::SharedDtor() {
}

void AddFriendsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AddFriendsRequest::descriptor() {
  ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AddFriendsRequest& AddFriendsRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_AddFriendsRequest.base);
  return *internal_default_instance();
}


void AddFriendsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.AddFriendsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ids_.Clear();
  usernames_.Clear();
  _internal_metadata_.Clear();
}

bool AddFriendsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nakama.api.AddFriendsRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string ids = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_ids()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ids(this->ids_size() - 1).data(),
            static_cast<int>(this->ids(this->ids_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nakama.api.AddFriendsRequest.ids"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string usernames = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_usernames()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->usernames(this->usernames_size() - 1).data(),
            static_cast<int>(this->usernames(this->usernames_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nakama.api.AddFriendsRequest.usernames"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nakama.api.AddFriendsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nakama.api.AddFriendsRequest)
  return false;
#undef DO_
}

void AddFriendsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nakama.api.AddFriendsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string ids = 1;
  for (int i = 0, n = this->ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ids(i).data(), static_cast<int>(this->ids(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.AddFriendsRequest.ids");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->ids(i), output);
  }

  // repeated string usernames = 2;
  for (int i = 0, n = this->usernames_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->usernames(i).data(), static_cast<int>(this->usernames(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.AddFriendsRequest.usernames");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->usernames(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:nakama.api.AddFriendsRequest)
}

::google::protobuf::uint8* AddFriendsRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.AddFriendsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string ids = 1;
  for (int i = 0, n = this->ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ids(i).data(), static_cast<int>(this->ids(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.AddFriendsRequest.ids");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->ids(i), target);
  }

  // repeated string usernames = 2;
  for (int i = 0, n = this->usernames_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->usernames(i).data(), static_cast<int>(this->usernames(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.AddFriendsRequest.usernames");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->usernames(i), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.AddFriendsRequest)
  return target;
}

size_t AddFriendsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.AddFriendsRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string ids = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->ids_size());
  for (int i = 0, n = this->ids_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->ids(i));
  }

  // repeated string usernames = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->usernames_size());
  for (int i = 0, n = this->usernames_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->usernames(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddFriendsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.AddFriendsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AddFriendsRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AddFriendsRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.AddFriendsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.AddFriendsRequest)
    MergeFrom(*source);
  }
}

void AddFriendsRequest::MergeFrom(const AddFriendsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.AddFriendsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ids_.MergeFrom(from.ids_);
  usernames_.MergeFrom(from.usernames_);
}

void AddFriendsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.AddFriendsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddFriendsRequest::CopyFrom(const AddFriendsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.AddFriendsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddFriendsRequest::IsInitialized() const {
  return true;
}

void AddFriendsRequest::Swap(AddFriendsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AddFriendsRequest::InternalSwap(AddFriendsRequest* other) {
  using std::swap;
  ids_.InternalSwap(CastToBase(&other->ids_));
  usernames_.InternalSwap(CastToBase(&other->usernames_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AddFriendsRequest::GetMetadata() const {
  protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AddGroupUsersRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AddGroupUsersRequest::kGroupIdFieldNumber;
const int AddGroupUsersRequest::kUserIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AddGroupUsersRequest::AddGroupUsersRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_AddGroupUsersRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:nakama.api.AddGroupUsersRequest)
}
AddGroupUsersRequest::AddGroupUsersRequest(const AddGroupUsersRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      user_ids_(from.user_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.group_id().size() > 0) {
    group_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.group_id_);
  }
  // @@protoc_insertion_point(copy_constructor:nakama.api.AddGroupUsersRequest)
}

void AddGroupUsersRequest::SharedCtor() {
  group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

AddGroupUsersRequest::~AddGroupUsersRequest() {
  // @@protoc_insertion_point(destructor:nakama.api.AddGroupUsersRequest)
  SharedDtor();
}

void AddGroupUsersRequest::SharedDtor() {
  group_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AddGroupUsersRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AddGroupUsersRequest::descriptor() {
  ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AddGroupUsersRequest& AddGroupUsersRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_AddGroupUsersRequest.base);
  return *internal_default_instance();
}


void AddGroupUsersRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.AddGroupUsersRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_ids_.Clear();
  group_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool AddGroupUsersRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nakama.api.AddGroupUsersRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string group_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->group_id().data(), static_cast<int>(this->group_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nakama.api.AddGroupUsersRequest.group_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string user_ids = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_user_ids()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user_ids(this->user_ids_size() - 1).data(),
            static_cast<int>(this->user_ids(this->user_ids_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nakama.api.AddGroupUsersRequest.user_ids"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nakama.api.AddGroupUsersRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nakama.api.AddGroupUsersRequest)
  return false;
#undef DO_
}

void AddGroupUsersRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nakama.api.AddGroupUsersRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string group_id = 1;
  if (this->group_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->group_id().data(), static_cast<int>(this->group_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.AddGroupUsersRequest.group_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->group_id(), output);
  }

  // repeated string user_ids = 2;
  for (int i = 0, n = this->user_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_ids(i).data(), static_cast<int>(this->user_ids(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.AddGroupUsersRequest.user_ids");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->user_ids(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:nakama.api.AddGroupUsersRequest)
}

::google::protobuf::uint8* AddGroupUsersRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.AddGroupUsersRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string group_id = 1;
  if (this->group_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->group_id().data(), static_cast<int>(this->group_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.AddGroupUsersRequest.group_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->group_id(), target);
  }

  // repeated string user_ids = 2;
  for (int i = 0, n = this->user_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_ids(i).data(), static_cast<int>(this->user_ids(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.AddGroupUsersRequest.user_ids");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->user_ids(i), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.AddGroupUsersRequest)
  return target;
}

size_t AddGroupUsersRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.AddGroupUsersRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string user_ids = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->user_ids_size());
  for (int i = 0, n = this->user_ids_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->user_ids(i));
  }

  // string group_id = 1;
  if (this->group_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->group_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddGroupUsersRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.AddGroupUsersRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AddGroupUsersRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AddGroupUsersRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.AddGroupUsersRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.AddGroupUsersRequest)
    MergeFrom(*source);
  }
}

void AddGroupUsersRequest::MergeFrom(const AddGroupUsersRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.AddGroupUsersRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  user_ids_.MergeFrom(from.user_ids_);
  if (from.group_id().size() > 0) {

    group_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.group_id_);
  }
}

void AddGroupUsersRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.AddGroupUsersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddGroupUsersRequest::CopyFrom(const AddGroupUsersRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.AddGroupUsersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddGroupUsersRequest::IsInitialized() const {
  return true;
}

void AddGroupUsersRequest::Swap(AddGroupUsersRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AddGroupUsersRequest::InternalSwap(AddGroupUsersRequest* other) {
  using std::swap;
  user_ids_.InternalSwap(CastToBase(&other->user_ids_));
  group_id_.Swap(&other->group_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AddGroupUsersRequest::GetMetadata() const {
  protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AuthenticateCustomRequest::InitAsDefaultInstance() {
  ::nakama::api::_AuthenticateCustomRequest_default_instance_._instance.get_mutable()->account_ = const_cast< ::nakama::api::AccountCustom*>(
      ::nakama::api::AccountCustom::internal_default_instance());
  ::nakama::api::_AuthenticateCustomRequest_default_instance_._instance.get_mutable()->create_ = const_cast< ::google::protobuf::BoolValue*>(
      ::google::protobuf::BoolValue::internal_default_instance());
}
void AuthenticateCustomRequest::clear_create() {
  if (GetArenaNoVirtual() == NULL && create_ != NULL) {
    delete create_;
  }
  create_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AuthenticateCustomRequest::kAccountFieldNumber;
const int AuthenticateCustomRequest::kCreateFieldNumber;
const int AuthenticateCustomRequest::kUsernameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AuthenticateCustomRequest::AuthenticateCustomRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_AuthenticateCustomRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:nakama.api.AuthenticateCustomRequest)
}
AuthenticateCustomRequest::AuthenticateCustomRequest(const AuthenticateCustomRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.username().size() > 0) {
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  if (from.has_account()) {
    account_ = new ::nakama::api::AccountCustom(*from.account_);
  } else {
    account_ = NULL;
  }
  if (from.has_create()) {
    create_ = new ::google::protobuf::BoolValue(*from.create_);
  } else {
    create_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:nakama.api.AuthenticateCustomRequest)
}

void AuthenticateCustomRequest::SharedCtor() {
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&account_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&create_) -
      reinterpret_cast<char*>(&account_)) + sizeof(create_));
}

AuthenticateCustomRequest::~AuthenticateCustomRequest() {
  // @@protoc_insertion_point(destructor:nakama.api.AuthenticateCustomRequest)
  SharedDtor();
}

void AuthenticateCustomRequest::SharedDtor() {
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete account_;
  if (this != internal_default_instance()) delete create_;
}

void AuthenticateCustomRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AuthenticateCustomRequest::descriptor() {
  ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AuthenticateCustomRequest& AuthenticateCustomRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_AuthenticateCustomRequest.base);
  return *internal_default_instance();
}


void AuthenticateCustomRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.AuthenticateCustomRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && account_ != NULL) {
    delete account_;
  }
  account_ = NULL;
  if (GetArenaNoVirtual() == NULL && create_ != NULL) {
    delete create_;
  }
  create_ = NULL;
  _internal_metadata_.Clear();
}

bool AuthenticateCustomRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nakama.api.AuthenticateCustomRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .nakama.api.AccountCustom account = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_account()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.BoolValue create = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_create()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string username = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->username().data(), static_cast<int>(this->username().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nakama.api.AuthenticateCustomRequest.username"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nakama.api.AuthenticateCustomRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nakama.api.AuthenticateCustomRequest)
  return false;
#undef DO_
}

void AuthenticateCustomRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nakama.api.AuthenticateCustomRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .nakama.api.AccountCustom account = 1;
  if (this->has_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_account(), output);
  }

  // .google.protobuf.BoolValue create = 2;
  if (this->has_create()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_create(), output);
  }

  // string username = 3;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.AuthenticateCustomRequest.username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->username(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:nakama.api.AuthenticateCustomRequest)
}

::google::protobuf::uint8* AuthenticateCustomRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.AuthenticateCustomRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .nakama.api.AccountCustom account = 1;
  if (this->has_account()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_account(), deterministic, target);
  }

  // .google.protobuf.BoolValue create = 2;
  if (this->has_create()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_create(), deterministic, target);
  }

  // string username = 3;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.AuthenticateCustomRequest.username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->username(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.AuthenticateCustomRequest)
  return target;
}

size_t AuthenticateCustomRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.AuthenticateCustomRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string username = 3;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->username());
  }

  // .nakama.api.AccountCustom account = 1;
  if (this->has_account()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *account_);
  }

  // .google.protobuf.BoolValue create = 2;
  if (this->has_create()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *create_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AuthenticateCustomRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.AuthenticateCustomRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AuthenticateCustomRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AuthenticateCustomRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.AuthenticateCustomRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.AuthenticateCustomRequest)
    MergeFrom(*source);
  }
}

void AuthenticateCustomRequest::MergeFrom(const AuthenticateCustomRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.AuthenticateCustomRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.username().size() > 0) {

    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  if (from.has_account()) {
    mutable_account()->::nakama::api::AccountCustom::MergeFrom(from.account());
  }
  if (from.has_create()) {
    mutable_create()->::google::protobuf::BoolValue::MergeFrom(from.create());
  }
}

void AuthenticateCustomRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.AuthenticateCustomRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthenticateCustomRequest::CopyFrom(const AuthenticateCustomRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.AuthenticateCustomRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthenticateCustomRequest::IsInitialized() const {
  return true;
}

void AuthenticateCustomRequest::Swap(AuthenticateCustomRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AuthenticateCustomRequest::InternalSwap(AuthenticateCustomRequest* other) {
  using std::swap;
  username_.Swap(&other->username_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(account_, other->account_);
  swap(create_, other->create_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AuthenticateCustomRequest::GetMetadata() const {
  protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AuthenticateDeviceRequest::InitAsDefaultInstance() {
  ::nakama::api::_AuthenticateDeviceRequest_default_instance_._instance.get_mutable()->account_ = const_cast< ::nakama::api::AccountDevice*>(
      ::nakama::api::AccountDevice::internal_default_instance());
  ::nakama::api::_AuthenticateDeviceRequest_default_instance_._instance.get_mutable()->create_ = const_cast< ::google::protobuf::BoolValue*>(
      ::google::protobuf::BoolValue::internal_default_instance());
}
void AuthenticateDeviceRequest::clear_create() {
  if (GetArenaNoVirtual() == NULL && create_ != NULL) {
    delete create_;
  }
  create_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AuthenticateDeviceRequest::kAccountFieldNumber;
const int AuthenticateDeviceRequest::kCreateFieldNumber;
const int AuthenticateDeviceRequest::kUsernameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AuthenticateDeviceRequest::AuthenticateDeviceRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_AuthenticateDeviceRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:nakama.api.AuthenticateDeviceRequest)
}
AuthenticateDeviceRequest::AuthenticateDeviceRequest(const AuthenticateDeviceRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.username().size() > 0) {
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  if (from.has_account()) {
    account_ = new ::nakama::api::AccountDevice(*from.account_);
  } else {
    account_ = NULL;
  }
  if (from.has_create()) {
    create_ = new ::google::protobuf::BoolValue(*from.create_);
  } else {
    create_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:nakama.api.AuthenticateDeviceRequest)
}

void AuthenticateDeviceRequest::SharedCtor() {
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&account_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&create_) -
      reinterpret_cast<char*>(&account_)) + sizeof(create_));
}

AuthenticateDeviceRequest::~AuthenticateDeviceRequest() {
  // @@protoc_insertion_point(destructor:nakama.api.AuthenticateDeviceRequest)
  SharedDtor();
}

void AuthenticateDeviceRequest::SharedDtor() {
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete account_;
  if (this != internal_default_instance()) delete create_;
}

void AuthenticateDeviceRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AuthenticateDeviceRequest::descriptor() {
  ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AuthenticateDeviceRequest& AuthenticateDeviceRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_AuthenticateDeviceRequest.base);
  return *internal_default_instance();
}


void AuthenticateDeviceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.AuthenticateDeviceRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && account_ != NULL) {
    delete account_;
  }
  account_ = NULL;
  if (GetArenaNoVirtual() == NULL && create_ != NULL) {
    delete create_;
  }
  create_ = NULL;
  _internal_metadata_.Clear();
}

bool AuthenticateDeviceRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nakama.api.AuthenticateDeviceRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .nakama.api.AccountDevice account = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_account()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.BoolValue create = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_create()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string username = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->username().data(), static_cast<int>(this->username().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nakama.api.AuthenticateDeviceRequest.username"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nakama.api.AuthenticateDeviceRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nakama.api.AuthenticateDeviceRequest)
  return false;
#undef DO_
}

void AuthenticateDeviceRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nakama.api.AuthenticateDeviceRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .nakama.api.AccountDevice account = 1;
  if (this->has_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_account(), output);
  }

  // .google.protobuf.BoolValue create = 2;
  if (this->has_create()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_create(), output);
  }

  // string username = 3;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.AuthenticateDeviceRequest.username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->username(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:nakama.api.AuthenticateDeviceRequest)
}

::google::protobuf::uint8* AuthenticateDeviceRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.AuthenticateDeviceRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .nakama.api.AccountDevice account = 1;
  if (this->has_account()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_account(), deterministic, target);
  }

  // .google.protobuf.BoolValue create = 2;
  if (this->has_create()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_create(), deterministic, target);
  }

  // string username = 3;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.AuthenticateDeviceRequest.username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->username(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.AuthenticateDeviceRequest)
  return target;
}

size_t AuthenticateDeviceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.AuthenticateDeviceRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string username = 3;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->username());
  }

  // .nakama.api.AccountDevice account = 1;
  if (this->has_account()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *account_);
  }

  // .google.protobuf.BoolValue create = 2;
  if (this->has_create()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *create_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AuthenticateDeviceRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.AuthenticateDeviceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AuthenticateDeviceRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AuthenticateDeviceRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.AuthenticateDeviceRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.AuthenticateDeviceRequest)
    MergeFrom(*source);
  }
}

void AuthenticateDeviceRequest::MergeFrom(const AuthenticateDeviceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.AuthenticateDeviceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.username().size() > 0) {

    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  if (from.has_account()) {
    mutable_account()->::nakama::api::AccountDevice::MergeFrom(from.account());
  }
  if (from.has_create()) {
    mutable_create()->::google::protobuf::BoolValue::MergeFrom(from.create());
  }
}

void AuthenticateDeviceRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.AuthenticateDeviceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthenticateDeviceRequest::CopyFrom(const AuthenticateDeviceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.AuthenticateDeviceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthenticateDeviceRequest::IsInitialized() const {
  return true;
}

void AuthenticateDeviceRequest::Swap(AuthenticateDeviceRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AuthenticateDeviceRequest::InternalSwap(AuthenticateDeviceRequest* other) {
  using std::swap;
  username_.Swap(&other->username_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(account_, other->account_);
  swap(create_, other->create_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AuthenticateDeviceRequest::GetMetadata() const {
  protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AuthenticateEmailRequest::InitAsDefaultInstance() {
  ::nakama::api::_AuthenticateEmailRequest_default_instance_._instance.get_mutable()->account_ = const_cast< ::nakama::api::AccountEmail*>(
      ::nakama::api::AccountEmail::internal_default_instance());
  ::nakama::api::_AuthenticateEmailRequest_default_instance_._instance.get_mutable()->create_ = const_cast< ::google::protobuf::BoolValue*>(
      ::google::protobuf::BoolValue::internal_default_instance());
}
void AuthenticateEmailRequest::clear_create() {
  if (GetArenaNoVirtual() == NULL && create_ != NULL) {
    delete create_;
  }
  create_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AuthenticateEmailRequest::kAccountFieldNumber;
const int AuthenticateEmailRequest::kCreateFieldNumber;
const int AuthenticateEmailRequest::kUsernameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AuthenticateEmailRequest::AuthenticateEmailRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_AuthenticateEmailRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:nakama.api.AuthenticateEmailRequest)
}
AuthenticateEmailRequest::AuthenticateEmailRequest(const AuthenticateEmailRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.username().size() > 0) {
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  if (from.has_account()) {
    account_ = new ::nakama::api::AccountEmail(*from.account_);
  } else {
    account_ = NULL;
  }
  if (from.has_create()) {
    create_ = new ::google::protobuf::BoolValue(*from.create_);
  } else {
    create_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:nakama.api.AuthenticateEmailRequest)
}

void AuthenticateEmailRequest::SharedCtor() {
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&account_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&create_) -
      reinterpret_cast<char*>(&account_)) + sizeof(create_));
}

AuthenticateEmailRequest::~AuthenticateEmailRequest() {
  // @@protoc_insertion_point(destructor:nakama.api.AuthenticateEmailRequest)
  SharedDtor();
}

void AuthenticateEmailRequest::SharedDtor() {
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete account_;
  if (this != internal_default_instance()) delete create_;
}

void AuthenticateEmailRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AuthenticateEmailRequest::descriptor() {
  ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AuthenticateEmailRequest& AuthenticateEmailRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_AuthenticateEmailRequest.base);
  return *internal_default_instance();
}


void AuthenticateEmailRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.AuthenticateEmailRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && account_ != NULL) {
    delete account_;
  }
  account_ = NULL;
  if (GetArenaNoVirtual() == NULL && create_ != NULL) {
    delete create_;
  }
  create_ = NULL;
  _internal_metadata_.Clear();
}

bool AuthenticateEmailRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nakama.api.AuthenticateEmailRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .nakama.api.AccountEmail account = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_account()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.BoolValue create = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_create()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string username = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->username().data(), static_cast<int>(this->username().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nakama.api.AuthenticateEmailRequest.username"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nakama.api.AuthenticateEmailRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nakama.api.AuthenticateEmailRequest)
  return false;
#undef DO_
}

void AuthenticateEmailRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nakama.api.AuthenticateEmailRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .nakama.api.AccountEmail account = 1;
  if (this->has_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_account(), output);
  }

  // .google.protobuf.BoolValue create = 2;
  if (this->has_create()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_create(), output);
  }

  // string username = 3;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.AuthenticateEmailRequest.username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->username(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:nakama.api.AuthenticateEmailRequest)
}

::google::protobuf::uint8* AuthenticateEmailRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.AuthenticateEmailRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .nakama.api.AccountEmail account = 1;
  if (this->has_account()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_account(), deterministic, target);
  }

  // .google.protobuf.BoolValue create = 2;
  if (this->has_create()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_create(), deterministic, target);
  }

  // string username = 3;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.AuthenticateEmailRequest.username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->username(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.AuthenticateEmailRequest)
  return target;
}

size_t AuthenticateEmailRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.AuthenticateEmailRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string username = 3;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->username());
  }

  // .nakama.api.AccountEmail account = 1;
  if (this->has_account()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *account_);
  }

  // .google.protobuf.BoolValue create = 2;
  if (this->has_create()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *create_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AuthenticateEmailRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.AuthenticateEmailRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AuthenticateEmailRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AuthenticateEmailRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.AuthenticateEmailRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.AuthenticateEmailRequest)
    MergeFrom(*source);
  }
}

void AuthenticateEmailRequest::MergeFrom(const AuthenticateEmailRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.AuthenticateEmailRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.username().size() > 0) {

    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  if (from.has_account()) {
    mutable_account()->::nakama::api::AccountEmail::MergeFrom(from.account());
  }
  if (from.has_create()) {
    mutable_create()->::google::protobuf::BoolValue::MergeFrom(from.create());
  }
}

void AuthenticateEmailRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.AuthenticateEmailRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthenticateEmailRequest::CopyFrom(const AuthenticateEmailRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.AuthenticateEmailRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthenticateEmailRequest::IsInitialized() const {
  return true;
}

void AuthenticateEmailRequest::Swap(AuthenticateEmailRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AuthenticateEmailRequest::InternalSwap(AuthenticateEmailRequest* other) {
  using std::swap;
  username_.Swap(&other->username_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(account_, other->account_);
  swap(create_, other->create_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AuthenticateEmailRequest::GetMetadata() const {
  protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AuthenticateFacebookRequest::InitAsDefaultInstance() {
  ::nakama::api::_AuthenticateFacebookRequest_default_instance_._instance.get_mutable()->account_ = const_cast< ::nakama::api::AccountFacebook*>(
      ::nakama::api::AccountFacebook::internal_default_instance());
  ::nakama::api::_AuthenticateFacebookRequest_default_instance_._instance.get_mutable()->create_ = const_cast< ::google::protobuf::BoolValue*>(
      ::google::protobuf::BoolValue::internal_default_instance());
  ::nakama::api::_AuthenticateFacebookRequest_default_instance_._instance.get_mutable()->import_ = const_cast< ::google::protobuf::BoolValue*>(
      ::google::protobuf::BoolValue::internal_default_instance());
}
void AuthenticateFacebookRequest::clear_create() {
  if (GetArenaNoVirtual() == NULL && create_ != NULL) {
    delete create_;
  }
  create_ = NULL;
}
void AuthenticateFacebookRequest::clear_import() {
  if (GetArenaNoVirtual() == NULL && import_ != NULL) {
    delete import_;
  }
  import_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AuthenticateFacebookRequest::kAccountFieldNumber;
const int AuthenticateFacebookRequest::kCreateFieldNumber;
const int AuthenticateFacebookRequest::kUsernameFieldNumber;
const int AuthenticateFacebookRequest::kImportFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AuthenticateFacebookRequest::AuthenticateFacebookRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_AuthenticateFacebookRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:nakama.api.AuthenticateFacebookRequest)
}
AuthenticateFacebookRequest::AuthenticateFacebookRequest(const AuthenticateFacebookRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.username().size() > 0) {
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  if (from.has_account()) {
    account_ = new ::nakama::api::AccountFacebook(*from.account_);
  } else {
    account_ = NULL;
  }
  if (from.has_create()) {
    create_ = new ::google::protobuf::BoolValue(*from.create_);
  } else {
    create_ = NULL;
  }
  if (from.has_import()) {
    import_ = new ::google::protobuf::BoolValue(*from.import_);
  } else {
    import_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:nakama.api.AuthenticateFacebookRequest)
}

void AuthenticateFacebookRequest::SharedCtor() {
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&account_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&import_) -
      reinterpret_cast<char*>(&account_)) + sizeof(import_));
}

AuthenticateFacebookRequest::~AuthenticateFacebookRequest() {
  // @@protoc_insertion_point(destructor:nakama.api.AuthenticateFacebookRequest)
  SharedDtor();
}

void AuthenticateFacebookRequest::SharedDtor() {
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete account_;
  if (this != internal_default_instance()) delete create_;
  if (this != internal_default_instance()) delete import_;
}

void AuthenticateFacebookRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AuthenticateFacebookRequest::descriptor() {
  ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AuthenticateFacebookRequest& AuthenticateFacebookRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_AuthenticateFacebookRequest.base);
  return *internal_default_instance();
}


void AuthenticateFacebookRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.AuthenticateFacebookRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && account_ != NULL) {
    delete account_;
  }
  account_ = NULL;
  if (GetArenaNoVirtual() == NULL && create_ != NULL) {
    delete create_;
  }
  create_ = NULL;
  if (GetArenaNoVirtual() == NULL && import_ != NULL) {
    delete import_;
  }
  import_ = NULL;
  _internal_metadata_.Clear();
}

bool AuthenticateFacebookRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nakama.api.AuthenticateFacebookRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .nakama.api.AccountFacebook account = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_account()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.BoolValue create = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_create()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string username = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->username().data(), static_cast<int>(this->username().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nakama.api.AuthenticateFacebookRequest.username"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.BoolValue import = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_import()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nakama.api.AuthenticateFacebookRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nakama.api.AuthenticateFacebookRequest)
  return false;
#undef DO_
}

void AuthenticateFacebookRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nakama.api.AuthenticateFacebookRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .nakama.api.AccountFacebook account = 1;
  if (this->has_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_account(), output);
  }

  // .google.protobuf.BoolValue create = 2;
  if (this->has_create()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_create(), output);
  }

  // string username = 3;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.AuthenticateFacebookRequest.username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->username(), output);
  }

  // .google.protobuf.BoolValue import = 4;
  if (this->has_import()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_import(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:nakama.api.AuthenticateFacebookRequest)
}

::google::protobuf::uint8* AuthenticateFacebookRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.AuthenticateFacebookRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .nakama.api.AccountFacebook account = 1;
  if (this->has_account()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_account(), deterministic, target);
  }

  // .google.protobuf.BoolValue create = 2;
  if (this->has_create()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_create(), deterministic, target);
  }

  // string username = 3;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.AuthenticateFacebookRequest.username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->username(), target);
  }

  // .google.protobuf.BoolValue import = 4;
  if (this->has_import()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_import(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.AuthenticateFacebookRequest)
  return target;
}

size_t AuthenticateFacebookRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.AuthenticateFacebookRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string username = 3;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->username());
  }

  // .nakama.api.AccountFacebook account = 1;
  if (this->has_account()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *account_);
  }

  // .google.protobuf.BoolValue create = 2;
  if (this->has_create()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *create_);
  }

  // .google.protobuf.BoolValue import = 4;
  if (this->has_import()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *import_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AuthenticateFacebookRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.AuthenticateFacebookRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AuthenticateFacebookRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AuthenticateFacebookRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.AuthenticateFacebookRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.AuthenticateFacebookRequest)
    MergeFrom(*source);
  }
}

void AuthenticateFacebookRequest::MergeFrom(const AuthenticateFacebookRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.AuthenticateFacebookRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.username().size() > 0) {

    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  if (from.has_account()) {
    mutable_account()->::nakama::api::AccountFacebook::MergeFrom(from.account());
  }
  if (from.has_create()) {
    mutable_create()->::google::protobuf::BoolValue::MergeFrom(from.create());
  }
  if (from.has_import()) {
    mutable_import()->::google::protobuf::BoolValue::MergeFrom(from.import());
  }
}

void AuthenticateFacebookRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.AuthenticateFacebookRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthenticateFacebookRequest::CopyFrom(const AuthenticateFacebookRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.AuthenticateFacebookRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthenticateFacebookRequest::IsInitialized() const {
  return true;
}

void AuthenticateFacebookRequest::Swap(AuthenticateFacebookRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AuthenticateFacebookRequest::InternalSwap(AuthenticateFacebookRequest* other) {
  using std::swap;
  username_.Swap(&other->username_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(account_, other->account_);
  swap(create_, other->create_);
  swap(import_, other->import_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AuthenticateFacebookRequest::GetMetadata() const {
  protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AuthenticateGameCenterRequest::InitAsDefaultInstance() {
  ::nakama::api::_AuthenticateGameCenterRequest_default_instance_._instance.get_mutable()->account_ = const_cast< ::nakama::api::AccountGameCenter*>(
      ::nakama::api::AccountGameCenter::internal_default_instance());
  ::nakama::api::_AuthenticateGameCenterRequest_default_instance_._instance.get_mutable()->create_ = const_cast< ::google::protobuf::BoolValue*>(
      ::google::protobuf::BoolValue::internal_default_instance());
}
void AuthenticateGameCenterRequest::clear_create() {
  if (GetArenaNoVirtual() == NULL && create_ != NULL) {
    delete create_;
  }
  create_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AuthenticateGameCenterRequest::kAccountFieldNumber;
const int AuthenticateGameCenterRequest::kCreateFieldNumber;
const int AuthenticateGameCenterRequest::kUsernameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AuthenticateGameCenterRequest::AuthenticateGameCenterRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_AuthenticateGameCenterRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:nakama.api.AuthenticateGameCenterRequest)
}
AuthenticateGameCenterRequest::AuthenticateGameCenterRequest(const AuthenticateGameCenterRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.username().size() > 0) {
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  if (from.has_account()) {
    account_ = new ::nakama::api::AccountGameCenter(*from.account_);
  } else {
    account_ = NULL;
  }
  if (from.has_create()) {
    create_ = new ::google::protobuf::BoolValue(*from.create_);
  } else {
    create_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:nakama.api.AuthenticateGameCenterRequest)
}

void AuthenticateGameCenterRequest::SharedCtor() {
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&account_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&create_) -
      reinterpret_cast<char*>(&account_)) + sizeof(create_));
}

AuthenticateGameCenterRequest::~AuthenticateGameCenterRequest() {
  // @@protoc_insertion_point(destructor:nakama.api.AuthenticateGameCenterRequest)
  SharedDtor();
}

void AuthenticateGameCenterRequest::SharedDtor() {
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete account_;
  if (this != internal_default_instance()) delete create_;
}

void AuthenticateGameCenterRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AuthenticateGameCenterRequest::descriptor() {
  ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AuthenticateGameCenterRequest& AuthenticateGameCenterRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_AuthenticateGameCenterRequest.base);
  return *internal_default_instance();
}


void AuthenticateGameCenterRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.AuthenticateGameCenterRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && account_ != NULL) {
    delete account_;
  }
  account_ = NULL;
  if (GetArenaNoVirtual() == NULL && create_ != NULL) {
    delete create_;
  }
  create_ = NULL;
  _internal_metadata_.Clear();
}

bool AuthenticateGameCenterRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nakama.api.AuthenticateGameCenterRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .nakama.api.AccountGameCenter account = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_account()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.BoolValue create = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_create()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string username = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->username().data(), static_cast<int>(this->username().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nakama.api.AuthenticateGameCenterRequest.username"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nakama.api.AuthenticateGameCenterRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nakama.api.AuthenticateGameCenterRequest)
  return false;
#undef DO_
}

void AuthenticateGameCenterRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nakama.api.AuthenticateGameCenterRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .nakama.api.AccountGameCenter account = 1;
  if (this->has_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_account(), output);
  }

  // .google.protobuf.BoolValue create = 2;
  if (this->has_create()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_create(), output);
  }

  // string username = 3;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.AuthenticateGameCenterRequest.username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->username(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:nakama.api.AuthenticateGameCenterRequest)
}

::google::protobuf::uint8* AuthenticateGameCenterRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.AuthenticateGameCenterRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .nakama.api.AccountGameCenter account = 1;
  if (this->has_account()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_account(), deterministic, target);
  }

  // .google.protobuf.BoolValue create = 2;
  if (this->has_create()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_create(), deterministic, target);
  }

  // string username = 3;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.AuthenticateGameCenterRequest.username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->username(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.AuthenticateGameCenterRequest)
  return target;
}

size_t AuthenticateGameCenterRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.AuthenticateGameCenterRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string username = 3;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->username());
  }

  // .nakama.api.AccountGameCenter account = 1;
  if (this->has_account()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *account_);
  }

  // .google.protobuf.BoolValue create = 2;
  if (this->has_create()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *create_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AuthenticateGameCenterRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.AuthenticateGameCenterRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AuthenticateGameCenterRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AuthenticateGameCenterRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.AuthenticateGameCenterRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.AuthenticateGameCenterRequest)
    MergeFrom(*source);
  }
}

void AuthenticateGameCenterRequest::MergeFrom(const AuthenticateGameCenterRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.AuthenticateGameCenterRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.username().size() > 0) {

    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  if (from.has_account()) {
    mutable_account()->::nakama::api::AccountGameCenter::MergeFrom(from.account());
  }
  if (from.has_create()) {
    mutable_create()->::google::protobuf::BoolValue::MergeFrom(from.create());
  }
}

void AuthenticateGameCenterRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.AuthenticateGameCenterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthenticateGameCenterRequest::CopyFrom(const AuthenticateGameCenterRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.AuthenticateGameCenterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthenticateGameCenterRequest::IsInitialized() const {
  return true;
}

void AuthenticateGameCenterRequest::Swap(AuthenticateGameCenterRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AuthenticateGameCenterRequest::InternalSwap(AuthenticateGameCenterRequest* other) {
  using std::swap;
  username_.Swap(&other->username_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(account_, other->account_);
  swap(create_, other->create_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AuthenticateGameCenterRequest::GetMetadata() const {
  protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AuthenticateGoogleRequest::InitAsDefaultInstance() {
  ::nakama::api::_AuthenticateGoogleRequest_default_instance_._instance.get_mutable()->account_ = const_cast< ::nakama::api::AccountGoogle*>(
      ::nakama::api::AccountGoogle::internal_default_instance());
  ::nakama::api::_AuthenticateGoogleRequest_default_instance_._instance.get_mutable()->create_ = const_cast< ::google::protobuf::BoolValue*>(
      ::google::protobuf::BoolValue::internal_default_instance());
}
void AuthenticateGoogleRequest::clear_create() {
  if (GetArenaNoVirtual() == NULL && create_ != NULL) {
    delete create_;
  }
  create_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AuthenticateGoogleRequest::kAccountFieldNumber;
const int AuthenticateGoogleRequest::kCreateFieldNumber;
const int AuthenticateGoogleRequest::kUsernameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AuthenticateGoogleRequest::AuthenticateGoogleRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_AuthenticateGoogleRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:nakama.api.AuthenticateGoogleRequest)
}
AuthenticateGoogleRequest::AuthenticateGoogleRequest(const AuthenticateGoogleRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.username().size() > 0) {
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  if (from.has_account()) {
    account_ = new ::nakama::api::AccountGoogle(*from.account_);
  } else {
    account_ = NULL;
  }
  if (from.has_create()) {
    create_ = new ::google::protobuf::BoolValue(*from.create_);
  } else {
    create_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:nakama.api.AuthenticateGoogleRequest)
}

void AuthenticateGoogleRequest::SharedCtor() {
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&account_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&create_) -
      reinterpret_cast<char*>(&account_)) + sizeof(create_));
}

AuthenticateGoogleRequest::~AuthenticateGoogleRequest() {
  // @@protoc_insertion_point(destructor:nakama.api.AuthenticateGoogleRequest)
  SharedDtor();
}

void AuthenticateGoogleRequest::SharedDtor() {
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete account_;
  if (this != internal_default_instance()) delete create_;
}

void AuthenticateGoogleRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AuthenticateGoogleRequest::descriptor() {
  ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AuthenticateGoogleRequest& AuthenticateGoogleRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_AuthenticateGoogleRequest.base);
  return *internal_default_instance();
}


void AuthenticateGoogleRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.AuthenticateGoogleRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && account_ != NULL) {
    delete account_;
  }
  account_ = NULL;
  if (GetArenaNoVirtual() == NULL && create_ != NULL) {
    delete create_;
  }
  create_ = NULL;
  _internal_metadata_.Clear();
}

bool AuthenticateGoogleRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nakama.api.AuthenticateGoogleRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .nakama.api.AccountGoogle account = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_account()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.BoolValue create = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_create()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string username = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->username().data(), static_cast<int>(this->username().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nakama.api.AuthenticateGoogleRequest.username"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nakama.api.AuthenticateGoogleRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nakama.api.AuthenticateGoogleRequest)
  return false;
#undef DO_
}

void AuthenticateGoogleRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nakama.api.AuthenticateGoogleRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .nakama.api.AccountGoogle account = 1;
  if (this->has_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_account(), output);
  }

  // .google.protobuf.BoolValue create = 2;
  if (this->has_create()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_create(), output);
  }

  // string username = 3;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.AuthenticateGoogleRequest.username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->username(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:nakama.api.AuthenticateGoogleRequest)
}

::google::protobuf::uint8* AuthenticateGoogleRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.AuthenticateGoogleRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .nakama.api.AccountGoogle account = 1;
  if (this->has_account()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_account(), deterministic, target);
  }

  // .google.protobuf.BoolValue create = 2;
  if (this->has_create()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_create(), deterministic, target);
  }

  // string username = 3;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.AuthenticateGoogleRequest.username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->username(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.AuthenticateGoogleRequest)
  return target;
}

size_t AuthenticateGoogleRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.AuthenticateGoogleRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string username = 3;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->username());
  }

  // .nakama.api.AccountGoogle account = 1;
  if (this->has_account()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *account_);
  }

  // .google.protobuf.BoolValue create = 2;
  if (this->has_create()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *create_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AuthenticateGoogleRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.AuthenticateGoogleRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AuthenticateGoogleRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AuthenticateGoogleRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.AuthenticateGoogleRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.AuthenticateGoogleRequest)
    MergeFrom(*source);
  }
}

void AuthenticateGoogleRequest::MergeFrom(const AuthenticateGoogleRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.AuthenticateGoogleRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.username().size() > 0) {

    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  if (from.has_account()) {
    mutable_account()->::nakama::api::AccountGoogle::MergeFrom(from.account());
  }
  if (from.has_create()) {
    mutable_create()->::google::protobuf::BoolValue::MergeFrom(from.create());
  }
}

void AuthenticateGoogleRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.AuthenticateGoogleRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthenticateGoogleRequest::CopyFrom(const AuthenticateGoogleRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.AuthenticateGoogleRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthenticateGoogleRequest::IsInitialized() const {
  return true;
}

void AuthenticateGoogleRequest::Swap(AuthenticateGoogleRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AuthenticateGoogleRequest::InternalSwap(AuthenticateGoogleRequest* other) {
  using std::swap;
  username_.Swap(&other->username_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(account_, other->account_);
  swap(create_, other->create_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AuthenticateGoogleRequest::GetMetadata() const {
  protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AuthenticateSteamRequest::InitAsDefaultInstance() {
  ::nakama::api::_AuthenticateSteamRequest_default_instance_._instance.get_mutable()->account_ = const_cast< ::nakama::api::AccountSteam*>(
      ::nakama::api::AccountSteam::internal_default_instance());
  ::nakama::api::_AuthenticateSteamRequest_default_instance_._instance.get_mutable()->create_ = const_cast< ::google::protobuf::BoolValue*>(
      ::google::protobuf::BoolValue::internal_default_instance());
}
void AuthenticateSteamRequest::clear_create() {
  if (GetArenaNoVirtual() == NULL && create_ != NULL) {
    delete create_;
  }
  create_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AuthenticateSteamRequest::kAccountFieldNumber;
const int AuthenticateSteamRequest::kCreateFieldNumber;
const int AuthenticateSteamRequest::kUsernameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AuthenticateSteamRequest::AuthenticateSteamRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_AuthenticateSteamRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:nakama.api.AuthenticateSteamRequest)
}
AuthenticateSteamRequest::AuthenticateSteamRequest(const AuthenticateSteamRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.username().size() > 0) {
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  if (from.has_account()) {
    account_ = new ::nakama::api::AccountSteam(*from.account_);
  } else {
    account_ = NULL;
  }
  if (from.has_create()) {
    create_ = new ::google::protobuf::BoolValue(*from.create_);
  } else {
    create_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:nakama.api.AuthenticateSteamRequest)
}

void AuthenticateSteamRequest::SharedCtor() {
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&account_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&create_) -
      reinterpret_cast<char*>(&account_)) + sizeof(create_));
}

AuthenticateSteamRequest::~AuthenticateSteamRequest() {
  // @@protoc_insertion_point(destructor:nakama.api.AuthenticateSteamRequest)
  SharedDtor();
}

void AuthenticateSteamRequest::SharedDtor() {
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete account_;
  if (this != internal_default_instance()) delete create_;
}

void AuthenticateSteamRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AuthenticateSteamRequest::descriptor() {
  ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AuthenticateSteamRequest& AuthenticateSteamRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_AuthenticateSteamRequest.base);
  return *internal_default_instance();
}


void AuthenticateSteamRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.AuthenticateSteamRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && account_ != NULL) {
    delete account_;
  }
  account_ = NULL;
  if (GetArenaNoVirtual() == NULL && create_ != NULL) {
    delete create_;
  }
  create_ = NULL;
  _internal_metadata_.Clear();
}

bool AuthenticateSteamRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nakama.api.AuthenticateSteamRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .nakama.api.AccountSteam account = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_account()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.BoolValue create = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_create()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string username = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->username().data(), static_cast<int>(this->username().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nakama.api.AuthenticateSteamRequest.username"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nakama.api.AuthenticateSteamRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nakama.api.AuthenticateSteamRequest)
  return false;
#undef DO_
}

void AuthenticateSteamRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nakama.api.AuthenticateSteamRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .nakama.api.AccountSteam account = 1;
  if (this->has_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_account(), output);
  }

  // .google.protobuf.BoolValue create = 2;
  if (this->has_create()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_create(), output);
  }

  // string username = 3;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.AuthenticateSteamRequest.username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->username(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:nakama.api.AuthenticateSteamRequest)
}

::google::protobuf::uint8* AuthenticateSteamRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.AuthenticateSteamRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .nakama.api.AccountSteam account = 1;
  if (this->has_account()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_account(), deterministic, target);
  }

  // .google.protobuf.BoolValue create = 2;
  if (this->has_create()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_create(), deterministic, target);
  }

  // string username = 3;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.AuthenticateSteamRequest.username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->username(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.AuthenticateSteamRequest)
  return target;
}

size_t AuthenticateSteamRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.AuthenticateSteamRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string username = 3;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->username());
  }

  // .nakama.api.AccountSteam account = 1;
  if (this->has_account()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *account_);
  }

  // .google.protobuf.BoolValue create = 2;
  if (this->has_create()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *create_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AuthenticateSteamRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.AuthenticateSteamRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AuthenticateSteamRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AuthenticateSteamRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.AuthenticateSteamRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.AuthenticateSteamRequest)
    MergeFrom(*source);
  }
}

void AuthenticateSteamRequest::MergeFrom(const AuthenticateSteamRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.AuthenticateSteamRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.username().size() > 0) {

    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  if (from.has_account()) {
    mutable_account()->::nakama::api::AccountSteam::MergeFrom(from.account());
  }
  if (from.has_create()) {
    mutable_create()->::google::protobuf::BoolValue::MergeFrom(from.create());
  }
}

void AuthenticateSteamRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.AuthenticateSteamRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthenticateSteamRequest::CopyFrom(const AuthenticateSteamRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.AuthenticateSteamRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthenticateSteamRequest::IsInitialized() const {
  return true;
}

void AuthenticateSteamRequest::Swap(AuthenticateSteamRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AuthenticateSteamRequest::InternalSwap(AuthenticateSteamRequest* other) {
  using std::swap;
  username_.Swap(&other->username_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(account_, other->account_);
  swap(create_, other->create_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AuthenticateSteamRequest::GetMetadata() const {
  protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void BlockFriendsRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BlockFriendsRequest::kIdsFieldNumber;
const int BlockFriendsRequest::kUsernamesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BlockFriendsRequest::BlockFriendsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_BlockFriendsRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:nakama.api.BlockFriendsRequest)
}
BlockFriendsRequest::BlockFriendsRequest(const BlockFriendsRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      ids_(from.ids_),
      usernames_(from.usernames_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:nakama.api.BlockFriendsRequest)
}

void BlockFriendsRequest::SharedCtor() {
}

BlockFriendsRequest::~BlockFriendsRequest() {
  // @@protoc_insertion_point(destructor:nakama.api.BlockFriendsRequest)
  SharedDtor();
}

void BlockFriendsRequest::SharedDtor() {
}

void BlockFriendsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* BlockFriendsRequest::descriptor() {
  ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BlockFriendsRequest& BlockFriendsRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_BlockFriendsRequest.base);
  return *internal_default_instance();
}


void BlockFriendsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.BlockFriendsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ids_.Clear();
  usernames_.Clear();
  _internal_metadata_.Clear();
}

bool BlockFriendsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nakama.api.BlockFriendsRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string ids = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_ids()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ids(this->ids_size() - 1).data(),
            static_cast<int>(this->ids(this->ids_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nakama.api.BlockFriendsRequest.ids"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string usernames = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_usernames()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->usernames(this->usernames_size() - 1).data(),
            static_cast<int>(this->usernames(this->usernames_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nakama.api.BlockFriendsRequest.usernames"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nakama.api.BlockFriendsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nakama.api.BlockFriendsRequest)
  return false;
#undef DO_
}

void BlockFriendsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nakama.api.BlockFriendsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string ids = 1;
  for (int i = 0, n = this->ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ids(i).data(), static_cast<int>(this->ids(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.BlockFriendsRequest.ids");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->ids(i), output);
  }

  // repeated string usernames = 2;
  for (int i = 0, n = this->usernames_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->usernames(i).data(), static_cast<int>(this->usernames(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.BlockFriendsRequest.usernames");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->usernames(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:nakama.api.BlockFriendsRequest)
}

::google::protobuf::uint8* BlockFriendsRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.BlockFriendsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string ids = 1;
  for (int i = 0, n = this->ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ids(i).data(), static_cast<int>(this->ids(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.BlockFriendsRequest.ids");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->ids(i), target);
  }

  // repeated string usernames = 2;
  for (int i = 0, n = this->usernames_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->usernames(i).data(), static_cast<int>(this->usernames(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.BlockFriendsRequest.usernames");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->usernames(i), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.BlockFriendsRequest)
  return target;
}

size_t BlockFriendsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.BlockFriendsRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string ids = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->ids_size());
  for (int i = 0, n = this->ids_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->ids(i));
  }

  // repeated string usernames = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->usernames_size());
  for (int i = 0, n = this->usernames_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->usernames(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BlockFriendsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.BlockFriendsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BlockFriendsRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BlockFriendsRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.BlockFriendsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.BlockFriendsRequest)
    MergeFrom(*source);
  }
}

void BlockFriendsRequest::MergeFrom(const BlockFriendsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.BlockFriendsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ids_.MergeFrom(from.ids_);
  usernames_.MergeFrom(from.usernames_);
}

void BlockFriendsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.BlockFriendsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlockFriendsRequest::CopyFrom(const BlockFriendsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.BlockFriendsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockFriendsRequest::IsInitialized() const {
  return true;
}

void BlockFriendsRequest::Swap(BlockFriendsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BlockFriendsRequest::InternalSwap(BlockFriendsRequest* other) {
  using std::swap;
  ids_.InternalSwap(CastToBase(&other->ids_));
  usernames_.InternalSwap(CastToBase(&other->usernames_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata BlockFriendsRequest::GetMetadata() const {
  protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ChannelMessage::InitAsDefaultInstance() {
  ::nakama::api::_ChannelMessage_default_instance_._instance.get_mutable()->code_ = const_cast< ::google::protobuf::Int32Value*>(
      ::google::protobuf::Int32Value::internal_default_instance());
  ::nakama::api::_ChannelMessage_default_instance_._instance.get_mutable()->create_time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  ::nakama::api::_ChannelMessage_default_instance_._instance.get_mutable()->update_time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  ::nakama::api::_ChannelMessage_default_instance_._instance.get_mutable()->persistent_ = const_cast< ::google::protobuf::BoolValue*>(
      ::google::protobuf::BoolValue::internal_default_instance());
}
void ChannelMessage::clear_code() {
  if (GetArenaNoVirtual() == NULL && code_ != NULL) {
    delete code_;
  }
  code_ = NULL;
}
void ChannelMessage::clear_create_time() {
  if (GetArenaNoVirtual() == NULL && create_time_ != NULL) {
    delete create_time_;
  }
  create_time_ = NULL;
}
void ChannelMessage::clear_update_time() {
  if (GetArenaNoVirtual() == NULL && update_time_ != NULL) {
    delete update_time_;
  }
  update_time_ = NULL;
}
void ChannelMessage::clear_persistent() {
  if (GetArenaNoVirtual() == NULL && persistent_ != NULL) {
    delete persistent_;
  }
  persistent_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChannelMessage::kChannelIdFieldNumber;
const int ChannelMessage::kMessageIdFieldNumber;
const int ChannelMessage::kCodeFieldNumber;
const int ChannelMessage::kSenderIdFieldNumber;
const int ChannelMessage::kUsernameFieldNumber;
const int ChannelMessage::kContentFieldNumber;
const int ChannelMessage::kCreateTimeFieldNumber;
const int ChannelMessage::kUpdateTimeFieldNumber;
const int ChannelMessage::kPersistentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChannelMessage::ChannelMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_ChannelMessage.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:nakama.api.ChannelMessage)
}
ChannelMessage::ChannelMessage(const ChannelMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  channel_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.channel_id().size() > 0) {
    channel_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.channel_id_);
  }
  message_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.message_id().size() > 0) {
    message_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_id_);
  }
  sender_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sender_id().size() > 0) {
    sender_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sender_id_);
  }
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.username().size() > 0) {
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.content().size() > 0) {
    content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  if (from.has_code()) {
    code_ = new ::google::protobuf::Int32Value(*from.code_);
  } else {
    code_ = NULL;
  }
  if (from.has_create_time()) {
    create_time_ = new ::google::protobuf::Timestamp(*from.create_time_);
  } else {
    create_time_ = NULL;
  }
  if (from.has_update_time()) {
    update_time_ = new ::google::protobuf::Timestamp(*from.update_time_);
  } else {
    update_time_ = NULL;
  }
  if (from.has_persistent()) {
    persistent_ = new ::google::protobuf::BoolValue(*from.persistent_);
  } else {
    persistent_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:nakama.api.ChannelMessage)
}

void ChannelMessage::SharedCtor() {
  channel_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sender_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&persistent_) -
      reinterpret_cast<char*>(&code_)) + sizeof(persistent_));
}

ChannelMessage::~ChannelMessage() {
  // @@protoc_insertion_point(destructor:nakama.api.ChannelMessage)
  SharedDtor();
}

void ChannelMessage::SharedDtor() {
  channel_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sender_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete code_;
  if (this != internal_default_instance()) delete create_time_;
  if (this != internal_default_instance()) delete update_time_;
  if (this != internal_default_instance()) delete persistent_;
}

void ChannelMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ChannelMessage::descriptor() {
  ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChannelMessage& ChannelMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_ChannelMessage.base);
  return *internal_default_instance();
}


void ChannelMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.ChannelMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channel_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sender_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && code_ != NULL) {
    delete code_;
  }
  code_ = NULL;
  if (GetArenaNoVirtual() == NULL && create_time_ != NULL) {
    delete create_time_;
  }
  create_time_ = NULL;
  if (GetArenaNoVirtual() == NULL && update_time_ != NULL) {
    delete update_time_;
  }
  update_time_ = NULL;
  if (GetArenaNoVirtual() == NULL && persistent_ != NULL) {
    delete persistent_;
  }
  persistent_ = NULL;
  _internal_metadata_.Clear();
}

bool ChannelMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nakama.api.ChannelMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string channel_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->channel_id().data(), static_cast<int>(this->channel_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nakama.api.ChannelMessage.channel_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string message_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->message_id().data(), static_cast<int>(this->message_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nakama.api.ChannelMessage.message_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Int32Value code = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_code()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sender_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sender_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sender_id().data(), static_cast<int>(this->sender_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nakama.api.ChannelMessage.sender_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string username = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->username().data(), static_cast<int>(this->username().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nakama.api.ChannelMessage.username"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string content = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->content().data(), static_cast<int>(this->content().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nakama.api.ChannelMessage.content"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp create_time = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_create_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp update_time = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_update_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.BoolValue persistent = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_persistent()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nakama.api.ChannelMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nakama.api.ChannelMessage)
  return false;
#undef DO_
}

void ChannelMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nakama.api.ChannelMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string channel_id = 1;
  if (this->channel_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->channel_id().data(), static_cast<int>(this->channel_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.ChannelMessage.channel_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->channel_id(), output);
  }

  // string message_id = 2;
  if (this->message_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message_id().data(), static_cast<int>(this->message_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.ChannelMessage.message_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->message_id(), output);
  }

  // .google.protobuf.Int32Value code = 3;
  if (this->has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_code(), output);
  }

  // string sender_id = 4;
  if (this->sender_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sender_id().data(), static_cast<int>(this->sender_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.ChannelMessage.sender_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->sender_id(), output);
  }

  // string username = 5;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.ChannelMessage.username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->username(), output);
  }

  // string content = 6;
  if (this->content().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->content().data(), static_cast<int>(this->content().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.ChannelMessage.content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->content(), output);
  }

  // .google.protobuf.Timestamp create_time = 7;
  if (this->has_create_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_internal_create_time(), output);
  }

  // .google.protobuf.Timestamp update_time = 8;
  if (this->has_update_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->_internal_update_time(), output);
  }

  // .google.protobuf.BoolValue persistent = 9;
  if (this->has_persistent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->_internal_persistent(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:nakama.api.ChannelMessage)
}

::google::protobuf::uint8* ChannelMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.ChannelMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string channel_id = 1;
  if (this->channel_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->channel_id().data(), static_cast<int>(this->channel_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.ChannelMessage.channel_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->channel_id(), target);
  }

  // string message_id = 2;
  if (this->message_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message_id().data(), static_cast<int>(this->message_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.ChannelMessage.message_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message_id(), target);
  }

  // .google.protobuf.Int32Value code = 3;
  if (this->has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_code(), deterministic, target);
  }

  // string sender_id = 4;
  if (this->sender_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sender_id().data(), static_cast<int>(this->sender_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.ChannelMessage.sender_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->sender_id(), target);
  }

  // string username = 5;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.ChannelMessage.username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->username(), target);
  }

  // string content = 6;
  if (this->content().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->content().data(), static_cast<int>(this->content().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.ChannelMessage.content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->content(), target);
  }

  // .google.protobuf.Timestamp create_time = 7;
  if (this->has_create_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->_internal_create_time(), deterministic, target);
  }

  // .google.protobuf.Timestamp update_time = 8;
  if (this->has_update_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->_internal_update_time(), deterministic, target);
  }

  // .google.protobuf.BoolValue persistent = 9;
  if (this->has_persistent()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->_internal_persistent(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.ChannelMessage)
  return target;
}

size_t ChannelMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.ChannelMessage)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string channel_id = 1;
  if (this->channel_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->channel_id());
  }

  // string message_id = 2;
  if (this->message_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message_id());
  }

  // string sender_id = 4;
  if (this->sender_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sender_id());
  }

  // string username = 5;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->username());
  }

  // string content = 6;
  if (this->content().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->content());
  }

  // .google.protobuf.Int32Value code = 3;
  if (this->has_code()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *code_);
  }

  // .google.protobuf.Timestamp create_time = 7;
  if (this->has_create_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *create_time_);
  }

  // .google.protobuf.Timestamp update_time = 8;
  if (this->has_update_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *update_time_);
  }

  // .google.protobuf.BoolValue persistent = 9;
  if (this->has_persistent()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *persistent_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChannelMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.ChannelMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const ChannelMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChannelMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.ChannelMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.ChannelMessage)
    MergeFrom(*source);
  }
}

void ChannelMessage::MergeFrom(const ChannelMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.ChannelMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.channel_id().size() > 0) {

    channel_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.channel_id_);
  }
  if (from.message_id().size() > 0) {

    message_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_id_);
  }
  if (from.sender_id().size() > 0) {

    sender_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sender_id_);
  }
  if (from.username().size() > 0) {

    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  if (from.content().size() > 0) {

    content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  if (from.has_code()) {
    mutable_code()->::google::protobuf::Int32Value::MergeFrom(from.code());
  }
  if (from.has_create_time()) {
    mutable_create_time()->::google::protobuf::Timestamp::MergeFrom(from.create_time());
  }
  if (from.has_update_time()) {
    mutable_update_time()->::google::protobuf::Timestamp::MergeFrom(from.update_time());
  }
  if (from.has_persistent()) {
    mutable_persistent()->::google::protobuf::BoolValue::MergeFrom(from.persistent());
  }
}

void ChannelMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.ChannelMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChannelMessage::CopyFrom(const ChannelMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.ChannelMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelMessage::IsInitialized() const {
  return true;
}

void ChannelMessage::Swap(ChannelMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChannelMessage::InternalSwap(ChannelMessage* other) {
  using std::swap;
  channel_id_.Swap(&other->channel_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  message_id_.Swap(&other->message_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sender_id_.Swap(&other->sender_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  username_.Swap(&other->username_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  content_.Swap(&other->content_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(code_, other->code_);
  swap(create_time_, other->create_time_);
  swap(update_time_, other->update_time_);
  swap(persistent_, other->persistent_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ChannelMessage::GetMetadata() const {
  protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ChannelMessageList::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChannelMessageList::kMessagesFieldNumber;
const int ChannelMessageList::kNextCursorFieldNumber;
const int ChannelMessageList::kPrevCursorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChannelMessageList::ChannelMessageList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_ChannelMessageList.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:nakama.api.ChannelMessageList)
}
ChannelMessageList::ChannelMessageList(const ChannelMessageList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      messages_(from.messages_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  next_cursor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.next_cursor().size() > 0) {
    next_cursor_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.next_cursor_);
  }
  prev_cursor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.prev_cursor().size() > 0) {
    prev_cursor_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.prev_cursor_);
  }
  // @@protoc_insertion_point(copy_constructor:nakama.api.ChannelMessageList)
}

void ChannelMessageList::SharedCtor() {
  next_cursor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  prev_cursor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ChannelMessageList::~ChannelMessageList() {
  // @@protoc_insertion_point(destructor:nakama.api.ChannelMessageList)
  SharedDtor();
}

void ChannelMessageList::SharedDtor() {
  next_cursor_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  prev_cursor_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ChannelMessageList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ChannelMessageList::descriptor() {
  ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChannelMessageList& ChannelMessageList::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_ChannelMessageList.base);
  return *internal_default_instance();
}


void ChannelMessageList::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.ChannelMessageList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  messages_.Clear();
  next_cursor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  prev_cursor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool ChannelMessageList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nakama.api.ChannelMessageList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .nakama.api.ChannelMessage messages = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_messages()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string next_cursor = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_next_cursor()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->next_cursor().data(), static_cast<int>(this->next_cursor().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nakama.api.ChannelMessageList.next_cursor"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string prev_cursor = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_prev_cursor()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->prev_cursor().data(), static_cast<int>(this->prev_cursor().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nakama.api.ChannelMessageList.prev_cursor"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nakama.api.ChannelMessageList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nakama.api.ChannelMessageList)
  return false;
#undef DO_
}

void ChannelMessageList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nakama.api.ChannelMessageList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .nakama.api.ChannelMessage messages = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->messages_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->messages(static_cast<int>(i)),
      output);
  }

  // string next_cursor = 2;
  if (this->next_cursor().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->next_cursor().data(), static_cast<int>(this->next_cursor().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.ChannelMessageList.next_cursor");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->next_cursor(), output);
  }

  // string prev_cursor = 3;
  if (this->prev_cursor().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->prev_cursor().data(), static_cast<int>(this->prev_cursor().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.ChannelMessageList.prev_cursor");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->prev_cursor(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:nakama.api.ChannelMessageList)
}

::google::protobuf::uint8* ChannelMessageList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.ChannelMessageList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .nakama.api.ChannelMessage messages = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->messages_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->messages(static_cast<int>(i)), deterministic, target);
  }

  // string next_cursor = 2;
  if (this->next_cursor().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->next_cursor().data(), static_cast<int>(this->next_cursor().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.ChannelMessageList.next_cursor");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->next_cursor(), target);
  }

  // string prev_cursor = 3;
  if (this->prev_cursor().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->prev_cursor().data(), static_cast<int>(this->prev_cursor().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.ChannelMessageList.prev_cursor");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->prev_cursor(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.ChannelMessageList)
  return target;
}

size_t ChannelMessageList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.ChannelMessageList)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .nakama.api.ChannelMessage messages = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->messages_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->messages(static_cast<int>(i)));
    }
  }

  // string next_cursor = 2;
  if (this->next_cursor().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->next_cursor());
  }

  // string prev_cursor = 3;
  if (this->prev_cursor().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->prev_cursor());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChannelMessageList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.ChannelMessageList)
  GOOGLE_DCHECK_NE(&from, this);
  const ChannelMessageList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChannelMessageList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.ChannelMessageList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.ChannelMessageList)
    MergeFrom(*source);
  }
}

void ChannelMessageList::MergeFrom(const ChannelMessageList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.ChannelMessageList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  messages_.MergeFrom(from.messages_);
  if (from.next_cursor().size() > 0) {

    next_cursor_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.next_cursor_);
  }
  if (from.prev_cursor().size() > 0) {

    prev_cursor_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.prev_cursor_);
  }
}

void ChannelMessageList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.ChannelMessageList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChannelMessageList::CopyFrom(const ChannelMessageList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.ChannelMessageList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelMessageList::IsInitialized() const {
  return true;
}

void ChannelMessageList::Swap(ChannelMessageList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChannelMessageList::InternalSwap(ChannelMessageList* other) {
  using std::swap;
  CastToBase(&messages_)->InternalSwap(CastToBase(&other->messages_));
  next_cursor_.Swap(&other->next_cursor_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  prev_cursor_.Swap(&other->prev_cursor_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ChannelMessageList::GetMetadata() const {
  protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CreateGroupRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateGroupRequest::kNameFieldNumber;
const int CreateGroupRequest::kDescriptionFieldNumber;
const int CreateGroupRequest::kLangTagFieldNumber;
const int CreateGroupRequest::kAvatarUrlFieldNumber;
const int CreateGroupRequest::kOpenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateGroupRequest::CreateGroupRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_CreateGroupRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:nakama.api.CreateGroupRequest)
}
CreateGroupRequest::CreateGroupRequest(const CreateGroupRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.description().size() > 0) {
    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  lang_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.lang_tag().size() > 0) {
    lang_tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lang_tag_);
  }
  avatar_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.avatar_url().size() > 0) {
    avatar_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.avatar_url_);
  }
  open_ = from.open_;
  // @@protoc_insertion_point(copy_constructor:nakama.api.CreateGroupRequest)
}

void CreateGroupRequest::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lang_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  avatar_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  open_ = false;
}

CreateGroupRequest::~CreateGroupRequest() {
  // @@protoc_insertion_point(destructor:nakama.api.CreateGroupRequest)
  SharedDtor();
}

void CreateGroupRequest::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lang_tag_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  avatar_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CreateGroupRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CreateGroupRequest::descriptor() {
  ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CreateGroupRequest& CreateGroupRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_CreateGroupRequest.base);
  return *internal_default_instance();
}


void CreateGroupRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.CreateGroupRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lang_tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  avatar_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  open_ = false;
  _internal_metadata_.Clear();
}

bool CreateGroupRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nakama.api.CreateGroupRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nakama.api.CreateGroupRequest.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string description = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->description().data(), static_cast<int>(this->description().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nakama.api.CreateGroupRequest.description"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string lang_tag = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lang_tag()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->lang_tag().data(), static_cast<int>(this->lang_tag().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nakama.api.CreateGroupRequest.lang_tag"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string avatar_url = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_avatar_url()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->avatar_url().data(), static_cast<int>(this->avatar_url().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nakama.api.CreateGroupRequest.avatar_url"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool open = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &open_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nakama.api.CreateGroupRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nakama.api.CreateGroupRequest)
  return false;
#undef DO_
}

void CreateGroupRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nakama.api.CreateGroupRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.CreateGroupRequest.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // string description = 2;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.CreateGroupRequest.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->description(), output);
  }

  // string lang_tag = 3;
  if (this->lang_tag().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lang_tag().data(), static_cast<int>(this->lang_tag().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.CreateGroupRequest.lang_tag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->lang_tag(), output);
  }

  // string avatar_url = 4;
  if (this->avatar_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->avatar_url().data(), static_cast<int>(this->avatar_url().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.CreateGroupRequest.avatar_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->avatar_url(), output);
  }

  // bool open = 5;
  if (this->open() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->open(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:nakama.api.CreateGroupRequest)
}

::google::protobuf::uint8* CreateGroupRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.CreateGroupRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.CreateGroupRequest.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // string description = 2;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.CreateGroupRequest.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->description(), target);
  }

  // string lang_tag = 3;
  if (this->lang_tag().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lang_tag().data(), static_cast<int>(this->lang_tag().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.CreateGroupRequest.lang_tag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->lang_tag(), target);
  }

  // string avatar_url = 4;
  if (this->avatar_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->avatar_url().data(), static_cast<int>(this->avatar_url().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.CreateGroupRequest.avatar_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->avatar_url(), target);
  }

  // bool open = 5;
  if (this->open() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->open(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.CreateGroupRequest)
  return target;
}

size_t CreateGroupRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.CreateGroupRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string description = 2;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->description());
  }

  // string lang_tag = 3;
  if (this->lang_tag().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->lang_tag());
  }

  // string avatar_url = 4;
  if (this->avatar_url().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->avatar_url());
  }

  // bool open = 5;
  if (this->open() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateGroupRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.CreateGroupRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateGroupRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CreateGroupRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.CreateGroupRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.CreateGroupRequest)
    MergeFrom(*source);
  }
}

void CreateGroupRequest::MergeFrom(const CreateGroupRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.CreateGroupRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from.lang_tag().size() > 0) {

    lang_tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lang_tag_);
  }
  if (from.avatar_url().size() > 0) {

    avatar_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.avatar_url_);
  }
  if (from.open() != 0) {
    set_open(from.open());
  }
}

void CreateGroupRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.CreateGroupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateGroupRequest::CopyFrom(const CreateGroupRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.CreateGroupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateGroupRequest::IsInitialized() const {
  return true;
}

void CreateGroupRequest::Swap(CreateGroupRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateGroupRequest::InternalSwap(CreateGroupRequest* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  description_.Swap(&other->description_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  lang_tag_.Swap(&other->lang_tag_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  avatar_url_.Swap(&other->avatar_url_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(open_, other->open_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CreateGroupRequest::GetMetadata() const {
  protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DeleteFriendsRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeleteFriendsRequest::kIdsFieldNumber;
const int DeleteFriendsRequest::kUsernamesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeleteFriendsRequest::DeleteFriendsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_DeleteFriendsRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:nakama.api.DeleteFriendsRequest)
}
DeleteFriendsRequest::DeleteFriendsRequest(const DeleteFriendsRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      ids_(from.ids_),
      usernames_(from.usernames_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:nakama.api.DeleteFriendsRequest)
}

void DeleteFriendsRequest::SharedCtor() {
}

DeleteFriendsRequest::~DeleteFriendsRequest() {
  // @@protoc_insertion_point(destructor:nakama.api.DeleteFriendsRequest)
  SharedDtor();
}

void DeleteFriendsRequest::SharedDtor() {
}

void DeleteFriendsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* DeleteFriendsRequest::descriptor() {
  ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DeleteFriendsRequest& DeleteFriendsRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_DeleteFriendsRequest.base);
  return *internal_default_instance();
}


void DeleteFriendsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.DeleteFriendsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ids_.Clear();
  usernames_.Clear();
  _internal_metadata_.Clear();
}

bool DeleteFriendsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nakama.api.DeleteFriendsRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string ids = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_ids()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ids(this->ids_size() - 1).data(),
            static_cast<int>(this->ids(this->ids_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nakama.api.DeleteFriendsRequest.ids"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string usernames = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_usernames()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->usernames(this->usernames_size() - 1).data(),
            static_cast<int>(this->usernames(this->usernames_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nakama.api.DeleteFriendsRequest.usernames"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nakama.api.DeleteFriendsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nakama.api.DeleteFriendsRequest)
  return false;
#undef DO_
}

void DeleteFriendsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nakama.api.DeleteFriendsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string ids = 1;
  for (int i = 0, n = this->ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ids(i).data(), static_cast<int>(this->ids(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.DeleteFriendsRequest.ids");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->ids(i), output);
  }

  // repeated string usernames = 2;
  for (int i = 0, n = this->usernames_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->usernames(i).data(), static_cast<int>(this->usernames(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.DeleteFriendsRequest.usernames");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->usernames(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:nakama.api.DeleteFriendsRequest)
}

::google::protobuf::uint8* DeleteFriendsRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.DeleteFriendsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string ids = 1;
  for (int i = 0, n = this->ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ids(i).data(), static_cast<int>(this->ids(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.DeleteFriendsRequest.ids");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->ids(i), target);
  }

  // repeated string usernames = 2;
  for (int i = 0, n = this->usernames_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->usernames(i).data(), static_cast<int>(this->usernames(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.DeleteFriendsRequest.usernames");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->usernames(i), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.DeleteFriendsRequest)
  return target;
}

size_t DeleteFriendsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.DeleteFriendsRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string ids = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->ids_size());
  for (int i = 0, n = this->ids_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->ids(i));
  }

  // repeated string usernames = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->usernames_size());
  for (int i = 0, n = this->usernames_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->usernames(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteFriendsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.DeleteFriendsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteFriendsRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeleteFriendsRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.DeleteFriendsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.DeleteFriendsRequest)
    MergeFrom(*source);
  }
}

void DeleteFriendsRequest::MergeFrom(const DeleteFriendsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.DeleteFriendsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ids_.MergeFrom(from.ids_);
  usernames_.MergeFrom(from.usernames_);
}

void DeleteFriendsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.DeleteFriendsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteFriendsRequest::CopyFrom(const DeleteFriendsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.DeleteFriendsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteFriendsRequest::IsInitialized() const {
  return true;
}

void DeleteFriendsRequest::Swap(DeleteFriendsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeleteFriendsRequest::InternalSwap(DeleteFriendsRequest* other) {
  using std::swap;
  ids_.InternalSwap(CastToBase(&other->ids_));
  usernames_.InternalSwap(CastToBase(&other->usernames_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DeleteFriendsRequest::GetMetadata() const {
  protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DeleteGroupRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeleteGroupRequest::kGroupIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeleteGroupRequest::DeleteGroupRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_DeleteGroupRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:nakama.api.DeleteGroupRequest)
}
DeleteGroupRequest::DeleteGroupRequest(const DeleteGroupRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.group_id().size() > 0) {
    group_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.group_id_);
  }
  // @@protoc_insertion_point(copy_constructor:nakama.api.DeleteGroupRequest)
}

void DeleteGroupRequest::SharedCtor() {
  group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

DeleteGroupRequest::~DeleteGroupRequest() {
  // @@protoc_insertion_point(destructor:nakama.api.DeleteGroupRequest)
  SharedDtor();
}

void DeleteGroupRequest::SharedDtor() {
  group_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DeleteGroupRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* DeleteGroupRequest::descriptor() {
  ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DeleteGroupRequest& DeleteGroupRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_DeleteGroupRequest.base);
  return *internal_default_instance();
}


void DeleteGroupRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.DeleteGroupRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  group_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool DeleteGroupRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nakama.api.DeleteGroupRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string group_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->group_id().data(), static_cast<int>(this->group_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nakama.api.DeleteGroupRequest.group_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nakama.api.DeleteGroupRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nakama.api.DeleteGroupRequest)
  return false;
#undef DO_
}

void DeleteGroupRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nakama.api.DeleteGroupRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string group_id = 1;
  if (this->group_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->group_id().data(), static_cast<int>(this->group_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.DeleteGroupRequest.group_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->group_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:nakama.api.DeleteGroupRequest)
}

::google::protobuf::uint8* DeleteGroupRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.DeleteGroupRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string group_id = 1;
  if (this->group_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->group_id().data(), static_cast<int>(this->group_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.DeleteGroupRequest.group_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->group_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.DeleteGroupRequest)
  return target;
}

size_t DeleteGroupRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.DeleteGroupRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string group_id = 1;
  if (this->group_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->group_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteGroupRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.DeleteGroupRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteGroupRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeleteGroupRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.DeleteGroupRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.DeleteGroupRequest)
    MergeFrom(*source);
  }
}

void DeleteGroupRequest::MergeFrom(const DeleteGroupRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.DeleteGroupRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.group_id().size() > 0) {

    group_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.group_id_);
  }
}

void DeleteGroupRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.DeleteGroupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteGroupRequest::CopyFrom(const DeleteGroupRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.DeleteGroupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteGroupRequest::IsInitialized() const {
  return true;
}

void DeleteGroupRequest::Swap(DeleteGroupRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeleteGroupRequest::InternalSwap(DeleteGroupRequest* other) {
  using std::swap;
  group_id_.Swap(&other->group_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DeleteGroupRequest::GetMetadata() const {
  protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DeleteLeaderboardRecordRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeleteLeaderboardRecordRequest::kLeaderboardIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeleteLeaderboardRecordRequest::DeleteLeaderboardRecordRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_DeleteLeaderboardRecordRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:nakama.api.DeleteLeaderboardRecordRequest)
}
DeleteLeaderboardRecordRequest::DeleteLeaderboardRecordRequest(const DeleteLeaderboardRecordRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  leaderboard_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.leaderboard_id().size() > 0) {
    leaderboard_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.leaderboard_id_);
  }
  // @@protoc_insertion_point(copy_constructor:nakama.api.DeleteLeaderboardRecordRequest)
}

void DeleteLeaderboardRecordRequest::SharedCtor() {
  leaderboard_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

DeleteLeaderboardRecordRequest::~DeleteLeaderboardRecordRequest() {
  // @@protoc_insertion_point(destructor:nakama.api.DeleteLeaderboardRecordRequest)
  SharedDtor();
}

void DeleteLeaderboardRecordRequest::SharedDtor() {
  leaderboard_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DeleteLeaderboardRecordRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* DeleteLeaderboardRecordRequest::descriptor() {
  ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DeleteLeaderboardRecordRequest& DeleteLeaderboardRecordRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_DeleteLeaderboardRecordRequest.base);
  return *internal_default_instance();
}


void DeleteLeaderboardRecordRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.DeleteLeaderboardRecordRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  leaderboard_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool DeleteLeaderboardRecordRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nakama.api.DeleteLeaderboardRecordRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string leaderboard_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_leaderboard_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->leaderboard_id().data(), static_cast<int>(this->leaderboard_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nakama.api.DeleteLeaderboardRecordRequest.leaderboard_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nakama.api.DeleteLeaderboardRecordRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nakama.api.DeleteLeaderboardRecordRequest)
  return false;
#undef DO_
}

void DeleteLeaderboardRecordRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nakama.api.DeleteLeaderboardRecordRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string leaderboard_id = 1;
  if (this->leaderboard_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->leaderboard_id().data(), static_cast<int>(this->leaderboard_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.DeleteLeaderboardRecordRequest.leaderboard_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->leaderboard_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:nakama.api.DeleteLeaderboardRecordRequest)
}

::google::protobuf::uint8* DeleteLeaderboardRecordRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.DeleteLeaderboardRecordRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string leaderboard_id = 1;
  if (this->leaderboard_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->leaderboard_id().data(), static_cast<int>(this->leaderboard_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.DeleteLeaderboardRecordRequest.leaderboard_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->leaderboard_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.DeleteLeaderboardRecordRequest)
  return target;
}

size_t DeleteLeaderboardRecordRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.DeleteLeaderboardRecordRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string leaderboard_id = 1;
  if (this->leaderboard_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->leaderboard_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteLeaderboardRecordRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.DeleteLeaderboardRecordRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteLeaderboardRecordRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeleteLeaderboardRecordRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.DeleteLeaderboardRecordRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.DeleteLeaderboardRecordRequest)
    MergeFrom(*source);
  }
}

void DeleteLeaderboardRecordRequest::MergeFrom(const DeleteLeaderboardRecordRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.DeleteLeaderboardRecordRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.leaderboard_id().size() > 0) {

    leaderboard_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.leaderboard_id_);
  }
}

void DeleteLeaderboardRecordRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.DeleteLeaderboardRecordRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteLeaderboardRecordRequest::CopyFrom(const DeleteLeaderboardRecordRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.DeleteLeaderboardRecordRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteLeaderboardRecordRequest::IsInitialized() const {
  return true;
}

void DeleteLeaderboardRecordRequest::Swap(DeleteLeaderboardRecordRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeleteLeaderboardRecordRequest::InternalSwap(DeleteLeaderboardRecordRequest* other) {
  using std::swap;
  leaderboard_id_.Swap(&other->leaderboard_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DeleteLeaderboardRecordRequest::GetMetadata() const {
  protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DeleteNotificationsRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeleteNotificationsRequest::kIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeleteNotificationsRequest::DeleteNotificationsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_DeleteNotificationsRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:nakama.api.DeleteNotificationsRequest)
}
DeleteNotificationsRequest::DeleteNotificationsRequest(const DeleteNotificationsRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      ids_(from.ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:nakama.api.DeleteNotificationsRequest)
}

void DeleteNotificationsRequest::SharedCtor() {
}

DeleteNotificationsRequest::~DeleteNotificationsRequest() {
  // @@protoc_insertion_point(destructor:nakama.api.DeleteNotificationsRequest)
  SharedDtor();
}

void DeleteNotificationsRequest::SharedDtor() {
}

void DeleteNotificationsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* DeleteNotificationsRequest::descriptor() {
  ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DeleteNotificationsRequest& DeleteNotificationsRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_DeleteNotificationsRequest.base);
  return *internal_default_instance();
}


void DeleteNotificationsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.DeleteNotificationsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ids_.Clear();
  _internal_metadata_.Clear();
}

bool DeleteNotificationsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nakama.api.DeleteNotificationsRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string ids = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_ids()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ids(this->ids_size() - 1).data(),
            static_cast<int>(this->ids(this->ids_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nakama.api.DeleteNotificationsRequest.ids"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nakama.api.DeleteNotificationsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nakama.api.DeleteNotificationsRequest)
  return false;
#undef DO_
}

void DeleteNotificationsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nakama.api.DeleteNotificationsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string ids = 1;
  for (int i = 0, n = this->ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ids(i).data(), static_cast<int>(this->ids(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.DeleteNotificationsRequest.ids");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->ids(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:nakama.api.DeleteNotificationsRequest)
}

::google::protobuf::uint8* DeleteNotificationsRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.DeleteNotificationsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string ids = 1;
  for (int i = 0, n = this->ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ids(i).data(), static_cast<int>(this->ids(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.DeleteNotificationsRequest.ids");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->ids(i), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.DeleteNotificationsRequest)
  return target;
}

size_t DeleteNotificationsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.DeleteNotificationsRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string ids = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->ids_size());
  for (int i = 0, n = this->ids_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->ids(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteNotificationsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.DeleteNotificationsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteNotificationsRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeleteNotificationsRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.DeleteNotificationsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.DeleteNotificationsRequest)
    MergeFrom(*source);
  }
}

void DeleteNotificationsRequest::MergeFrom(const DeleteNotificationsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.DeleteNotificationsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ids_.MergeFrom(from.ids_);
}

void DeleteNotificationsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.DeleteNotificationsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteNotificationsRequest::CopyFrom(const DeleteNotificationsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.DeleteNotificationsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteNotificationsRequest::IsInitialized() const {
  return true;
}

void DeleteNotificationsRequest::Swap(DeleteNotificationsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeleteNotificationsRequest::InternalSwap(DeleteNotificationsRequest* other) {
  using std::swap;
  ids_.InternalSwap(CastToBase(&other->ids_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DeleteNotificationsRequest::GetMetadata() const {
  protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DeleteStorageObjectId::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeleteStorageObjectId::kCollectionFieldNumber;
const int DeleteStorageObjectId::kKeyFieldNumber;
const int DeleteStorageObjectId::kVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeleteStorageObjectId::DeleteStorageObjectId()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_DeleteStorageObjectId.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:nakama.api.DeleteStorageObjectId)
}
DeleteStorageObjectId::DeleteStorageObjectId(const DeleteStorageObjectId& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  collection_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.collection().size() > 0) {
    collection_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.collection_);
  }
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.version().size() > 0) {
    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  // @@protoc_insertion_point(copy_constructor:nakama.api.DeleteStorageObjectId)
}

void DeleteStorageObjectId::SharedCtor() {
  collection_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

DeleteStorageObjectId::~DeleteStorageObjectId() {
  // @@protoc_insertion_point(destructor:nakama.api.DeleteStorageObjectId)
  SharedDtor();
}

void DeleteStorageObjectId::SharedDtor() {
  collection_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DeleteStorageObjectId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* DeleteStorageObjectId::descriptor() {
  ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DeleteStorageObjectId& DeleteStorageObjectId::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_DeleteStorageObjectId.base);
  return *internal_default_instance();
}


void DeleteStorageObjectId::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.DeleteStorageObjectId)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  collection_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool DeleteStorageObjectId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nakama.api.DeleteStorageObjectId)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string collection = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_collection()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->collection().data(), static_cast<int>(this->collection().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nakama.api.DeleteStorageObjectId.collection"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string key = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->key().data(), static_cast<int>(this->key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nakama.api.DeleteStorageObjectId.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string version = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->version().data(), static_cast<int>(this->version().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nakama.api.DeleteStorageObjectId.version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nakama.api.DeleteStorageObjectId)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nakama.api.DeleteStorageObjectId)
  return false;
#undef DO_
}

void DeleteStorageObjectId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nakama.api.DeleteStorageObjectId)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string collection = 1;
  if (this->collection().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->collection().data(), static_cast<int>(this->collection().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.DeleteStorageObjectId.collection");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->collection(), output);
  }

  // string key = 2;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.DeleteStorageObjectId.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->key(), output);
  }

  // string version = 3;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), static_cast<int>(this->version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.DeleteStorageObjectId.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->version(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:nakama.api.DeleteStorageObjectId)
}

::google::protobuf::uint8* DeleteStorageObjectId::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.DeleteStorageObjectId)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string collection = 1;
  if (this->collection().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->collection().data(), static_cast<int>(this->collection().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.DeleteStorageObjectId.collection");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->collection(), target);
  }

  // string key = 2;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.DeleteStorageObjectId.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->key(), target);
  }

  // string version = 3;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), static_cast<int>(this->version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.DeleteStorageObjectId.version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->version(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.DeleteStorageObjectId)
  return target;
}

size_t DeleteStorageObjectId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.DeleteStorageObjectId)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string collection = 1;
  if (this->collection().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->collection());
  }

  // string key = 2;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  // string version = 3;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->version());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteStorageObjectId::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.DeleteStorageObjectId)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteStorageObjectId* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeleteStorageObjectId>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.DeleteStorageObjectId)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.DeleteStorageObjectId)
    MergeFrom(*source);
  }
}

void DeleteStorageObjectId::MergeFrom(const DeleteStorageObjectId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.DeleteStorageObjectId)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.collection().size() > 0) {

    collection_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.collection_);
  }
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.version().size() > 0) {

    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
}

void DeleteStorageObjectId::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.DeleteStorageObjectId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteStorageObjectId::CopyFrom(const DeleteStorageObjectId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.DeleteStorageObjectId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteStorageObjectId::IsInitialized() const {
  return true;
}

void DeleteStorageObjectId::Swap(DeleteStorageObjectId* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeleteStorageObjectId::InternalSwap(DeleteStorageObjectId* other) {
  using std::swap;
  collection_.Swap(&other->collection_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  key_.Swap(&other->key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  version_.Swap(&other->version_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DeleteStorageObjectId::GetMetadata() const {
  protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DeleteStorageObjectsRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeleteStorageObjectsRequest::kObjectIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeleteStorageObjectsRequest::DeleteStorageObjectsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_DeleteStorageObjectsRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:nakama.api.DeleteStorageObjectsRequest)
}
DeleteStorageObjectsRequest::DeleteStorageObjectsRequest(const DeleteStorageObjectsRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      object_ids_(from.object_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:nakama.api.DeleteStorageObjectsRequest)
}

void DeleteStorageObjectsRequest::SharedCtor() {
}

DeleteStorageObjectsRequest::~DeleteStorageObjectsRequest() {
  // @@protoc_insertion_point(destructor:nakama.api.DeleteStorageObjectsRequest)
  SharedDtor();
}

void DeleteStorageObjectsRequest::SharedDtor() {
}

void DeleteStorageObjectsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* DeleteStorageObjectsRequest::descriptor() {
  ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DeleteStorageObjectsRequest& DeleteStorageObjectsRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_DeleteStorageObjectsRequest.base);
  return *internal_default_instance();
}


void DeleteStorageObjectsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.DeleteStorageObjectsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  object_ids_.Clear();
  _internal_metadata_.Clear();
}

bool DeleteStorageObjectsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nakama.api.DeleteStorageObjectsRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .nakama.api.DeleteStorageObjectId object_ids = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_object_ids()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nakama.api.DeleteStorageObjectsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nakama.api.DeleteStorageObjectsRequest)
  return false;
#undef DO_
}

void DeleteStorageObjectsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nakama.api.DeleteStorageObjectsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .nakama.api.DeleteStorageObjectId object_ids = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->object_ids_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->object_ids(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:nakama.api.DeleteStorageObjectsRequest)
}

::google::protobuf::uint8* DeleteStorageObjectsRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.DeleteStorageObjectsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .nakama.api.DeleteStorageObjectId object_ids = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->object_ids_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->object_ids(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.DeleteStorageObjectsRequest)
  return target;
}

size_t DeleteStorageObjectsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.DeleteStorageObjectsRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .nakama.api.DeleteStorageObjectId object_ids = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->object_ids_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->object_ids(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteStorageObjectsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.DeleteStorageObjectsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteStorageObjectsRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeleteStorageObjectsRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.DeleteStorageObjectsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.DeleteStorageObjectsRequest)
    MergeFrom(*source);
  }
}

void DeleteStorageObjectsRequest::MergeFrom(const DeleteStorageObjectsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.DeleteStorageObjectsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  object_ids_.MergeFrom(from.object_ids_);
}

void DeleteStorageObjectsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.DeleteStorageObjectsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteStorageObjectsRequest::CopyFrom(const DeleteStorageObjectsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.DeleteStorageObjectsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteStorageObjectsRequest::IsInitialized() const {
  return true;
}

void DeleteStorageObjectsRequest::Swap(DeleteStorageObjectsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeleteStorageObjectsRequest::InternalSwap(DeleteStorageObjectsRequest* other) {
  using std::swap;
  CastToBase(&object_ids_)->InternalSwap(CastToBase(&other->object_ids_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DeleteStorageObjectsRequest::GetMetadata() const {
  protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Friend::InitAsDefaultInstance() {
  ::nakama::api::_Friend_default_instance_._instance.get_mutable()->user_ = const_cast< ::nakama::api::User*>(
      ::nakama::api::User::internal_default_instance());
  ::nakama::api::_Friend_default_instance_._instance.get_mutable()->state_ = const_cast< ::google::protobuf::Int32Value*>(
      ::google::protobuf::Int32Value::internal_default_instance());
}
void Friend::clear_state() {
  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Friend::kUserFieldNumber;
const int Friend::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Friend::Friend()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_Friend.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:nakama.api.Friend)
}
Friend::Friend(const Friend& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_user()) {
    user_ = new ::nakama::api::User(*from.user_);
  } else {
    user_ = NULL;
  }
  if (from.has_state()) {
    state_ = new ::google::protobuf::Int32Value(*from.state_);
  } else {
    state_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:nakama.api.Friend)
}

void Friend::SharedCtor() {
  ::memset(&user_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&user_)) + sizeof(state_));
}

Friend::~Friend() {
  // @@protoc_insertion_point(destructor:nakama.api.Friend)
  SharedDtor();
}

void Friend::SharedDtor() {
  if (this != internal_default_instance()) delete user_;
  if (this != internal_default_instance()) delete state_;
}

void Friend::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Friend::descriptor() {
  ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Friend& Friend::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_Friend.base);
  return *internal_default_instance();
}


void Friend::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.Friend)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && user_ != NULL) {
    delete user_;
  }
  user_ = NULL;
  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
  _internal_metadata_.Clear();
}

bool Friend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nakama.api.Friend)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .nakama.api.User user = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_user()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Int32Value state = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nakama.api.Friend)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nakama.api.Friend)
  return false;
#undef DO_
}

void Friend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nakama.api.Friend)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .nakama.api.User user = 1;
  if (this->has_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_user(), output);
  }

  // .google.protobuf.Int32Value state = 2;
  if (this->has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_state(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:nakama.api.Friend)
}

::google::protobuf::uint8* Friend::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.Friend)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .nakama.api.User user = 1;
  if (this->has_user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_user(), deterministic, target);
  }

  // .google.protobuf.Int32Value state = 2;
  if (this->has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_state(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.Friend)
  return target;
}

size_t Friend::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.Friend)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .nakama.api.User user = 1;
  if (this->has_user()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *user_);
  }

  // .google.protobuf.Int32Value state = 2;
  if (this->has_state()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *state_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Friend::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.Friend)
  GOOGLE_DCHECK_NE(&from, this);
  const Friend* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Friend>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.Friend)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.Friend)
    MergeFrom(*source);
  }
}

void Friend::MergeFrom(const Friend& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.Friend)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_user()) {
    mutable_user()->::nakama::api::User::MergeFrom(from.user());
  }
  if (from.has_state()) {
    mutable_state()->::google::protobuf::Int32Value::MergeFrom(from.state());
  }
}

void Friend::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.Friend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Friend::CopyFrom(const Friend& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.Friend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Friend::IsInitialized() const {
  return true;
}

void Friend::Swap(Friend* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Friend::InternalSwap(Friend* other) {
  using std::swap;
  swap(user_, other->user_);
  swap(state_, other->state_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Friend::GetMetadata() const {
  protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Friends::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Friends::kFriendsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Friends::Friends()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_Friends.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:nakama.api.Friends)
}
Friends::Friends(const Friends& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      friends_(from.friends_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:nakama.api.Friends)
}

void Friends::SharedCtor() {
}

Friends::~Friends() {
  // @@protoc_insertion_point(destructor:nakama.api.Friends)
  SharedDtor();
}

void Friends::SharedDtor() {
}

void Friends::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Friends::descriptor() {
  ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Friends& Friends::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_Friends.base);
  return *internal_default_instance();
}


void Friends::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.Friends)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  friends_.Clear();
  _internal_metadata_.Clear();
}

bool Friends::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nakama.api.Friends)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .nakama.api.Friend friends = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_friends()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nakama.api.Friends)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nakama.api.Friends)
  return false;
#undef DO_
}

void Friends::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nakama.api.Friends)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .nakama.api.Friend friends = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->friends_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->friends(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:nakama.api.Friends)
}

::google::protobuf::uint8* Friends::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.Friends)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .nakama.api.Friend friends = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->friends_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->friends(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.Friends)
  return target;
}

size_t Friends::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.Friends)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .nakama.api.Friend friends = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->friends_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->friends(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Friends::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.Friends)
  GOOGLE_DCHECK_NE(&from, this);
  const Friends* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Friends>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.Friends)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.Friends)
    MergeFrom(*source);
  }
}

void Friends::MergeFrom(const Friends& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.Friends)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  friends_.MergeFrom(from.friends_);
}

void Friends::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.Friends)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Friends::CopyFrom(const Friends& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.Friends)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Friends::IsInitialized() const {
  return true;
}

void Friends::Swap(Friends* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Friends::InternalSwap(Friends* other) {
  using std::swap;
  CastToBase(&friends_)->InternalSwap(CastToBase(&other->friends_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Friends::GetMetadata() const {
  protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetUsersRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetUsersRequest::kIdsFieldNumber;
const int GetUsersRequest::kUsernamesFieldNumber;
const int GetUsersRequest::kFacebookIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetUsersRequest::GetUsersRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_GetUsersRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:nakama.api.GetUsersRequest)
}
GetUsersRequest::GetUsersRequest(const GetUsersRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      ids_(from.ids_),
      usernames_(from.usernames_),
      facebook_ids_(from.facebook_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:nakama.api.GetUsersRequest)
}

void GetUsersRequest::SharedCtor() {
}

GetUsersRequest::~GetUsersRequest() {
  // @@protoc_insertion_point(destructor:nakama.api.GetUsersRequest)
  SharedDtor();
}

void GetUsersRequest::SharedDtor() {
}

void GetUsersRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GetUsersRequest::descriptor() {
  ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetUsersRequest& GetUsersRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_GetUsersRequest.base);
  return *internal_default_instance();
}


void GetUsersRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.GetUsersRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ids_.Clear();
  usernames_.Clear();
  facebook_ids_.Clear();
  _internal_metadata_.Clear();
}

bool GetUsersRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nakama.api.GetUsersRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string ids = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_ids()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ids(this->ids_size() - 1).data(),
            static_cast<int>(this->ids(this->ids_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nakama.api.GetUsersRequest.ids"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string usernames = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_usernames()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->usernames(this->usernames_size() - 1).data(),
            static_cast<int>(this->usernames(this->usernames_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nakama.api.GetUsersRequest.usernames"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string facebook_ids = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_facebook_ids()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->facebook_ids(this->facebook_ids_size() - 1).data(),
            static_cast<int>(this->facebook_ids(this->facebook_ids_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nakama.api.GetUsersRequest.facebook_ids"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nakama.api.GetUsersRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nakama.api.GetUsersRequest)
  return false;
#undef DO_
}

void GetUsersRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nakama.api.GetUsersRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string ids = 1;
  for (int i = 0, n = this->ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ids(i).data(), static_cast<int>(this->ids(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.GetUsersRequest.ids");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->ids(i), output);
  }

  // repeated string usernames = 2;
  for (int i = 0, n = this->usernames_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->usernames(i).data(), static_cast<int>(this->usernames(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.GetUsersRequest.usernames");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->usernames(i), output);
  }

  // repeated string facebook_ids = 3;
  for (int i = 0, n = this->facebook_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->facebook_ids(i).data(), static_cast<int>(this->facebook_ids(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.GetUsersRequest.facebook_ids");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->facebook_ids(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:nakama.api.GetUsersRequest)
}

::google::protobuf::uint8* GetUsersRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.GetUsersRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string ids = 1;
  for (int i = 0, n = this->ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ids(i).data(), static_cast<int>(this->ids(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.GetUsersRequest.ids");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->ids(i), target);
  }

  // repeated string usernames = 2;
  for (int i = 0, n = this->usernames_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->usernames(i).data(), static_cast<int>(this->usernames(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.GetUsersRequest.usernames");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->usernames(i), target);
  }

  // repeated string facebook_ids = 3;
  for (int i = 0, n = this->facebook_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->facebook_ids(i).data(), static_cast<int>(this->facebook_ids(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.GetUsersRequest.facebook_ids");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->facebook_ids(i), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.GetUsersRequest)
  return target;
}

size_t GetUsersRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.GetUsersRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string ids = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->ids_size());
  for (int i = 0, n = this->ids_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->ids(i));
  }

  // repeated string usernames = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->usernames_size());
  for (int i = 0, n = this->usernames_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->usernames(i));
  }

  // repeated string facebook_ids = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->facebook_ids_size());
  for (int i = 0, n = this->facebook_ids_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->facebook_ids(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetUsersRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.GetUsersRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetUsersRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetUsersRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.GetUsersRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.GetUsersRequest)
    MergeFrom(*source);
  }
}

void GetUsersRequest::MergeFrom(const GetUsersRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.GetUsersRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ids_.MergeFrom(from.ids_);
  usernames_.MergeFrom(from.usernames_);
  facebook_ids_.MergeFrom(from.facebook_ids_);
}

void GetUsersRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.GetUsersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetUsersRequest::CopyFrom(const GetUsersRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.GetUsersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUsersRequest::IsInitialized() const {
  return true;
}

void GetUsersRequest::Swap(GetUsersRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetUsersRequest::InternalSwap(GetUsersRequest* other) {
  using std::swap;
  ids_.InternalSwap(CastToBase(&other->ids_));
  usernames_.InternalSwap(CastToBase(&other->usernames_));
  facebook_ids_.InternalSwap(CastToBase(&other->facebook_ids_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GetUsersRequest::GetMetadata() const {
  protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Group::InitAsDefaultInstance() {
  ::nakama::api::_Group_default_instance_._instance.get_mutable()->open_ = const_cast< ::google::protobuf::BoolValue*>(
      ::google::protobuf::BoolValue::internal_default_instance());
  ::nakama::api::_Group_default_instance_._instance.get_mutable()->create_time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  ::nakama::api::_Group_default_instance_._instance.get_mutable()->update_time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
}
void Group::clear_open() {
  if (GetArenaNoVirtual() == NULL && open_ != NULL) {
    delete open_;
  }
  open_ = NULL;
}
void Group::clear_create_time() {
  if (GetArenaNoVirtual() == NULL && create_time_ != NULL) {
    delete create_time_;
  }
  create_time_ = NULL;
}
void Group::clear_update_time() {
  if (GetArenaNoVirtual() == NULL && update_time_ != NULL) {
    delete update_time_;
  }
  update_time_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Group::kIdFieldNumber;
const int Group::kCreatorIdFieldNumber;
const int Group::kNameFieldNumber;
const int Group::kDescriptionFieldNumber;
const int Group::kLangTagFieldNumber;
const int Group::kMetadataFieldNumber;
const int Group::kAvatarUrlFieldNumber;
const int Group::kOpenFieldNumber;
const int Group::kEdgeCountFieldNumber;
const int Group::kMaxCountFieldNumber;
const int Group::kCreateTimeFieldNumber;
const int Group::kUpdateTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Group::Group()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_Group.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:nakama.api.Group)
}
Group::Group(const Group& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  creator_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.creator_id().size() > 0) {
    creator_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.creator_id_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.description().size() > 0) {
    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  lang_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.lang_tag().size() > 0) {
    lang_tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lang_tag_);
  }
  metadata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.metadata().size() > 0) {
    metadata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.metadata_);
  }
  avatar_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.avatar_url().size() > 0) {
    avatar_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.avatar_url_);
  }
  if (from.has_open()) {
    open_ = new ::google::protobuf::BoolValue(*from.open_);
  } else {
    open_ = NULL;
  }
  if (from.has_create_time()) {
    create_time_ = new ::google::protobuf::Timestamp(*from.create_time_);
  } else {
    create_time_ = NULL;
  }
  if (from.has_update_time()) {
    update_time_ = new ::google::protobuf::Timestamp(*from.update_time_);
  } else {
    update_time_ = NULL;
  }
  ::memcpy(&edge_count_, &from.edge_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_count_) -
    reinterpret_cast<char*>(&edge_count_)) + sizeof(max_count_));
  // @@protoc_insertion_point(copy_constructor:nakama.api.Group)
}

void Group::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  creator_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lang_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  metadata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  avatar_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&open_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_count_) -
      reinterpret_cast<char*>(&open_)) + sizeof(max_count_));
}

Group::~Group() {
  // @@protoc_insertion_point(destructor:nakama.api.Group)
  SharedDtor();
}

void Group::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  creator_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lang_tag_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  metadata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  avatar_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete open_;
  if (this != internal_default_instance()) delete create_time_;
  if (this != internal_default_instance()) delete update_time_;
}

void Group::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Group::descriptor() {
  ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Group& Group::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_Group.base);
  return *internal_default_instance();
}


void Group::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.Group)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  creator_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lang_tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  metadata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  avatar_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && open_ != NULL) {
    delete open_;
  }
  open_ = NULL;
  if (GetArenaNoVirtual() == NULL && create_time_ != NULL) {
    delete create_time_;
  }
  create_time_ = NULL;
  if (GetArenaNoVirtual() == NULL && update_time_ != NULL) {
    delete update_time_;
  }
  update_time_ = NULL;
  ::memset(&edge_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_count_) -
      reinterpret_cast<char*>(&edge_count_)) + sizeof(max_count_));
  _internal_metadata_.Clear();
}

bool Group::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nakama.api.Group)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nakama.api.Group.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string creator_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_creator_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->creator_id().data(), static_cast<int>(this->creator_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nakama.api.Group.creator_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nakama.api.Group.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string description = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->description().data(), static_cast<int>(this->description().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nakama.api.Group.description"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string lang_tag = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lang_tag()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->lang_tag().data(), static_cast<int>(this->lang_tag().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nakama.api.Group.lang_tag"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string metadata = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_metadata()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->metadata().data(), static_cast<int>(this->metadata().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nakama.api.Group.metadata"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string avatar_url = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_avatar_url()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->avatar_url().data(), static_cast<int>(this->avatar_url().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nakama.api.Group.avatar_url"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.BoolValue open = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_open()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 edge_count = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &edge_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 max_count = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp create_time = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_create_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp update_time = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_update_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nakama.api.Group)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nakama.api.Group)
  return false;
#undef DO_
}

void Group::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nakama.api.Group)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.Group.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // string creator_id = 2;
  if (this->creator_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->creator_id().data(), static_cast<int>(this->creator_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.Group.creator_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->creator_id(), output);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.Group.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // string description = 4;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.Group.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->description(), output);
  }

  // string lang_tag = 5;
  if (this->lang_tag().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lang_tag().data(), static_cast<int>(this->lang_tag().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.Group.lang_tag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->lang_tag(), output);
  }

  // string metadata = 6;
  if (this->metadata().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->metadata().data(), static_cast<int>(this->metadata().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.Group.metadata");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->metadata(), output);
  }

  // string avatar_url = 7;
  if (this->avatar_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->avatar_url().data(), static_cast<int>(this->avatar_url().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.Group.avatar_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->avatar_url(), output);
  }

  // .google.protobuf.BoolValue open = 8;
  if (this->has_open()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->_internal_open(), output);
  }

  // int32 edge_count = 9;
  if (this->edge_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->edge_count(), output);
  }

  // int32 max_count = 10;
  if (this->max_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->max_count(), output);
  }

  // .google.protobuf.Timestamp create_time = 11;
  if (this->has_create_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->_internal_create_time(), output);
  }

  // .google.protobuf.Timestamp update_time = 12;
  if (this->has_update_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->_internal_update_time(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:nakama.api.Group)
}

::google::protobuf::uint8* Group::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.Group)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.Group.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // string creator_id = 2;
  if (this->creator_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->creator_id().data(), static_cast<int>(this->creator_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.Group.creator_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->creator_id(), target);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.Group.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // string description = 4;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.Group.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->description(), target);
  }

  // string lang_tag = 5;
  if (this->lang_tag().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lang_tag().data(), static_cast<int>(this->lang_tag().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.Group.lang_tag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->lang_tag(), target);
  }

  // string metadata = 6;
  if (this->metadata().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->metadata().data(), static_cast<int>(this->metadata().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.Group.metadata");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->metadata(), target);
  }

  // string avatar_url = 7;
  if (this->avatar_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->avatar_url().data(), static_cast<int>(this->avatar_url().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.Group.avatar_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->avatar_url(), target);
  }

  // .google.protobuf.BoolValue open = 8;
  if (this->has_open()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->_internal_open(), deterministic, target);
  }

  // int32 edge_count = 9;
  if (this->edge_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->edge_count(), target);
  }

  // int32 max_count = 10;
  if (this->max_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->max_count(), target);
  }

  // .google.protobuf.Timestamp create_time = 11;
  if (this->has_create_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, this->_internal_create_time(), deterministic, target);
  }

  // .google.protobuf.Timestamp update_time = 12;
  if (this->has_update_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, this->_internal_update_time(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.Group)
  return target;
}

size_t Group::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.Group)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // string creator_id = 2;
  if (this->creator_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->creator_id());
  }

  // string name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string description = 4;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->description());
  }

  // string lang_tag = 5;
  if (this->lang_tag().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->lang_tag());
  }

  // string metadata = 6;
  if (this->metadata().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->metadata());
  }

  // string avatar_url = 7;
  if (this->avatar_url().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->avatar_url());
  }

  // .google.protobuf.BoolValue open = 8;
  if (this->has_open()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *open_);
  }

  // .google.protobuf.Timestamp create_time = 11;
  if (this->has_create_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *create_time_);
  }

  // .google.protobuf.Timestamp update_time = 12;
  if (this->has_update_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *update_time_);
  }

  // int32 edge_count = 9;
  if (this->edge_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->edge_count());
  }

  // int32 max_count = 10;
  if (this->max_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->max_count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Group::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.Group)
  GOOGLE_DCHECK_NE(&from, this);
  const Group* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Group>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.Group)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.Group)
    MergeFrom(*source);
  }
}

void Group::MergeFrom(const Group& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.Group)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.creator_id().size() > 0) {

    creator_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.creator_id_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from.lang_tag().size() > 0) {

    lang_tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lang_tag_);
  }
  if (from.metadata().size() > 0) {

    metadata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.metadata_);
  }
  if (from.avatar_url().size() > 0) {

    avatar_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.avatar_url_);
  }
  if (from.has_open()) {
    mutable_open()->::google::protobuf::BoolValue::MergeFrom(from.open());
  }
  if (from.has_create_time()) {
    mutable_create_time()->::google::protobuf::Timestamp::MergeFrom(from.create_time());
  }
  if (from.has_update_time()) {
    mutable_update_time()->::google::protobuf::Timestamp::MergeFrom(from.update_time());
  }
  if (from.edge_count() != 0) {
    set_edge_count(from.edge_count());
  }
  if (from.max_count() != 0) {
    set_max_count(from.max_count());
  }
}

void Group::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.Group)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Group::CopyFrom(const Group& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.Group)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Group::IsInitialized() const {
  return true;
}

void Group::Swap(Group* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Group::InternalSwap(Group* other) {
  using std::swap;
  id_.Swap(&other->id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  creator_id_.Swap(&other->creator_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  description_.Swap(&other->description_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  lang_tag_.Swap(&other->lang_tag_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  metadata_.Swap(&other->metadata_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  avatar_url_.Swap(&other->avatar_url_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(open_, other->open_);
  swap(create_time_, other->create_time_);
  swap(update_time_, other->update_time_);
  swap(edge_count_, other->edge_count_);
  swap(max_count_, other->max_count_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Group::GetMetadata() const {
  protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GroupList::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GroupList::kGroupsFieldNumber;
const int GroupList::kCursorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GroupList::GroupList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_GroupList.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:nakama.api.GroupList)
}
GroupList::GroupList(const GroupList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      groups_(from.groups_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cursor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cursor().size() > 0) {
    cursor_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cursor_);
  }
  // @@protoc_insertion_point(copy_constructor:nakama.api.GroupList)
}

void GroupList::SharedCtor() {
  cursor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

GroupList::~GroupList() {
  // @@protoc_insertion_point(destructor:nakama.api.GroupList)
  SharedDtor();
}

void GroupList::SharedDtor() {
  cursor_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GroupList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GroupList::descriptor() {
  ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GroupList& GroupList::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_GroupList.base);
  return *internal_default_instance();
}


void GroupList::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.GroupList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  groups_.Clear();
  cursor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool GroupList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nakama.api.GroupList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .nakama.api.Group groups = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_groups()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cursor = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cursor()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cursor().data(), static_cast<int>(this->cursor().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nakama.api.GroupList.cursor"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nakama.api.GroupList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nakama.api.GroupList)
  return false;
#undef DO_
}

void GroupList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nakama.api.GroupList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .nakama.api.Group groups = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->groups_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->groups(static_cast<int>(i)),
      output);
  }

  // string cursor = 2;
  if (this->cursor().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cursor().data(), static_cast<int>(this->cursor().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.GroupList.cursor");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->cursor(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:nakama.api.GroupList)
}

::google::protobuf::uint8* GroupList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.GroupList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .nakama.api.Group groups = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->groups_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->groups(static_cast<int>(i)), deterministic, target);
  }

  // string cursor = 2;
  if (this->cursor().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cursor().data(), static_cast<int>(this->cursor().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.GroupList.cursor");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->cursor(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.GroupList)
  return target;
}

size_t GroupList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.GroupList)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .nakama.api.Group groups = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->groups_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->groups(static_cast<int>(i)));
    }
  }

  // string cursor = 2;
  if (this->cursor().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cursor());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GroupList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.GroupList)
  GOOGLE_DCHECK_NE(&from, this);
  const GroupList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GroupList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.GroupList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.GroupList)
    MergeFrom(*source);
  }
}

void GroupList::MergeFrom(const GroupList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.GroupList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  groups_.MergeFrom(from.groups_);
  if (from.cursor().size() > 0) {

    cursor_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cursor_);
  }
}

void GroupList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.GroupList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupList::CopyFrom(const GroupList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.GroupList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupList::IsInitialized() const {
  return true;
}

void GroupList::Swap(GroupList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GroupList::InternalSwap(GroupList* other) {
  using std::swap;
  CastToBase(&groups_)->InternalSwap(CastToBase(&other->groups_));
  cursor_.Swap(&other->cursor_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GroupList::GetMetadata() const {
  protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GroupUserList_GroupUser::InitAsDefaultInstance() {
  ::nakama::api::_GroupUserList_GroupUser_default_instance_._instance.get_mutable()->user_ = const_cast< ::nakama::api::User*>(
      ::nakama::api::User::internal_default_instance());
  ::nakama::api::_GroupUserList_GroupUser_default_instance_._instance.get_mutable()->state_ = const_cast< ::google::protobuf::Int32Value*>(
      ::google::protobuf::Int32Value::internal_default_instance());
}
void GroupUserList_GroupUser::clear_state() {
  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GroupUserList_GroupUser::kUserFieldNumber;
const int GroupUserList_GroupUser::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GroupUserList_GroupUser::GroupUserList_GroupUser()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_GroupUserList_GroupUser.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:nakama.api.GroupUserList.GroupUser)
}
GroupUserList_GroupUser::GroupUserList_GroupUser(const GroupUserList_GroupUser& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_user()) {
    user_ = new ::nakama::api::User(*from.user_);
  } else {
    user_ = NULL;
  }
  if (from.has_state()) {
    state_ = new ::google::protobuf::Int32Value(*from.state_);
  } else {
    state_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:nakama.api.GroupUserList.GroupUser)
}

void GroupUserList_GroupUser::SharedCtor() {
  ::memset(&user_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&user_)) + sizeof(state_));
}

GroupUserList_GroupUser::~GroupUserList_GroupUser() {
  // @@protoc_insertion_point(destructor:nakama.api.GroupUserList.GroupUser)
  SharedDtor();
}

void GroupUserList_GroupUser::SharedDtor() {
  if (this != internal_default_instance()) delete user_;
  if (this != internal_default_instance()) delete state_;
}

void GroupUserList_GroupUser::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GroupUserList_GroupUser::descriptor() {
  ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GroupUserList_GroupUser& GroupUserList_GroupUser::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_GroupUserList_GroupUser.base);
  return *internal_default_instance();
}


void GroupUserList_GroupUser::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.GroupUserList.GroupUser)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && user_ != NULL) {
    delete user_;
  }
  user_ = NULL;
  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
  _internal_metadata_.Clear();
}

bool GroupUserList_GroupUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nakama.api.GroupUserList.GroupUser)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .nakama.api.User user = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_user()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Int32Value state = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nakama.api.GroupUserList.GroupUser)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nakama.api.GroupUserList.GroupUser)
  return false;
#undef DO_
}

void GroupUserList_GroupUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nakama.api.GroupUserList.GroupUser)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .nakama.api.User user = 1;
  if (this->has_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_user(), output);
  }

  // .google.protobuf.Int32Value state = 2;
  if (this->has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_state(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:nakama.api.GroupUserList.GroupUser)
}

::google::protobuf::uint8* GroupUserList_GroupUser::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.GroupUserList.GroupUser)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .nakama.api.User user = 1;
  if (this->has_user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_user(), deterministic, target);
  }

  // .google.protobuf.Int32Value state = 2;
  if (this->has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_state(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.GroupUserList.GroupUser)
  return target;
}

size_t GroupUserList_GroupUser::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.GroupUserList.GroupUser)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .nakama.api.User user = 1;
  if (this->has_user()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *user_);
  }

  // .google.protobuf.Int32Value state = 2;
  if (this->has_state()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *state_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GroupUserList_GroupUser::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.GroupUserList.GroupUser)
  GOOGLE_DCHECK_NE(&from, this);
  const GroupUserList_GroupUser* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GroupUserList_GroupUser>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.GroupUserList.GroupUser)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.GroupUserList.GroupUser)
    MergeFrom(*source);
  }
}

void GroupUserList_GroupUser::MergeFrom(const GroupUserList_GroupUser& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.GroupUserList.GroupUser)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_user()) {
    mutable_user()->::nakama::api::User::MergeFrom(from.user());
  }
  if (from.has_state()) {
    mutable_state()->::google::protobuf::Int32Value::MergeFrom(from.state());
  }
}

void GroupUserList_GroupUser::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.GroupUserList.GroupUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupUserList_GroupUser::CopyFrom(const GroupUserList_GroupUser& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.GroupUserList.GroupUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupUserList_GroupUser::IsInitialized() const {
  return true;
}

void GroupUserList_GroupUser::Swap(GroupUserList_GroupUser* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GroupUserList_GroupUser::InternalSwap(GroupUserList_GroupUser* other) {
  using std::swap;
  swap(user_, other->user_);
  swap(state_, other->state_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GroupUserList_GroupUser::GetMetadata() const {
  protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GroupUserList::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GroupUserList::kGroupUsersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GroupUserList::GroupUserList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_GroupUserList.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:nakama.api.GroupUserList)
}
GroupUserList::GroupUserList(const GroupUserList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      group_users_(from.group_users_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:nakama.api.GroupUserList)
}

void GroupUserList::SharedCtor() {
}

GroupUserList::~GroupUserList() {
  // @@protoc_insertion_point(destructor:nakama.api.GroupUserList)
  SharedDtor();
}

void GroupUserList::SharedDtor() {
}

void GroupUserList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GroupUserList::descriptor() {
  ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GroupUserList& GroupUserList::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_GroupUserList.base);
  return *internal_default_instance();
}


void GroupUserList::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.GroupUserList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  group_users_.Clear();
  _internal_metadata_.Clear();
}

bool GroupUserList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nakama.api.GroupUserList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .nakama.api.GroupUserList.GroupUser group_users = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_group_users()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nakama.api.GroupUserList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nakama.api.GroupUserList)
  return false;
#undef DO_
}

void GroupUserList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nakama.api.GroupUserList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .nakama.api.GroupUserList.GroupUser group_users = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->group_users_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->group_users(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:nakama.api.GroupUserList)
}

::google::protobuf::uint8* GroupUserList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.GroupUserList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .nakama.api.GroupUserList.GroupUser group_users = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->group_users_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->group_users(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.GroupUserList)
  return target;
}

size_t GroupUserList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.GroupUserList)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .nakama.api.GroupUserList.GroupUser group_users = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->group_users_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->group_users(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GroupUserList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.GroupUserList)
  GOOGLE_DCHECK_NE(&from, this);
  const GroupUserList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GroupUserList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.GroupUserList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.GroupUserList)
    MergeFrom(*source);
  }
}

void GroupUserList::MergeFrom(const GroupUserList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.GroupUserList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  group_users_.MergeFrom(from.group_users_);
}

void GroupUserList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.GroupUserList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupUserList::CopyFrom(const GroupUserList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.GroupUserList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupUserList::IsInitialized() const {
  return true;
}

void GroupUserList::Swap(GroupUserList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GroupUserList::InternalSwap(GroupUserList* other) {
  using std::swap;
  CastToBase(&group_users_)->InternalSwap(CastToBase(&other->group_users_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GroupUserList::GetMetadata() const {
  protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ImportFacebookFriendsRequest::InitAsDefaultInstance() {
  ::nakama::api::_ImportFacebookFriendsRequest_default_instance_._instance.get_mutable()->account_ = const_cast< ::nakama::api::AccountFacebook*>(
      ::nakama::api::AccountFacebook::internal_default_instance());
  ::nakama::api::_ImportFacebookFriendsRequest_default_instance_._instance.get_mutable()->reset_ = const_cast< ::google::protobuf::BoolValue*>(
      ::google::protobuf::BoolValue::internal_default_instance());
}
void ImportFacebookFriendsRequest::clear_reset() {
  if (GetArenaNoVirtual() == NULL && reset_ != NULL) {
    delete reset_;
  }
  reset_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ImportFacebookFriendsRequest::kAccountFieldNumber;
const int ImportFacebookFriendsRequest::kResetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ImportFacebookFriendsRequest::ImportFacebookFriendsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_ImportFacebookFriendsRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:nakama.api.ImportFacebookFriendsRequest)
}
ImportFacebookFriendsRequest::ImportFacebookFriendsRequest(const ImportFacebookFriendsRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_account()) {
    account_ = new ::nakama::api::AccountFacebook(*from.account_);
  } else {
    account_ = NULL;
  }
  if (from.has_reset()) {
    reset_ = new ::google::protobuf::BoolValue(*from.reset_);
  } else {
    reset_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:nakama.api.ImportFacebookFriendsRequest)
}

void ImportFacebookFriendsRequest::SharedCtor() {
  ::memset(&account_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reset_) -
      reinterpret_cast<char*>(&account_)) + sizeof(reset_));
}

ImportFacebookFriendsRequest::~ImportFacebookFriendsRequest() {
  // @@protoc_insertion_point(destructor:nakama.api.ImportFacebookFriendsRequest)
  SharedDtor();
}

void ImportFacebookFriendsRequest::SharedDtor() {
  if (this != internal_default_instance()) delete account_;
  if (this != internal_default_instance()) delete reset_;
}

void ImportFacebookFriendsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ImportFacebookFriendsRequest::descriptor() {
  ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ImportFacebookFriendsRequest& ImportFacebookFriendsRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_ImportFacebookFriendsRequest.base);
  return *internal_default_instance();
}


void ImportFacebookFriendsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.ImportFacebookFriendsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && account_ != NULL) {
    delete account_;
  }
  account_ = NULL;
  if (GetArenaNoVirtual() == NULL && reset_ != NULL) {
    delete reset_;
  }
  reset_ = NULL;
  _internal_metadata_.Clear();
}

bool ImportFacebookFriendsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nakama.api.ImportFacebookFriendsRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .nakama.api.AccountFacebook account = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_account()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.BoolValue reset = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_reset()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nakama.api.ImportFacebookFriendsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nakama.api.ImportFacebookFriendsRequest)
  return false;
#undef DO_
}

void ImportFacebookFriendsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nakama.api.ImportFacebookFriendsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .nakama.api.AccountFacebook account = 1;
  if (this->has_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_account(), output);
  }

  // .google.protobuf.BoolValue reset = 2;
  if (this->has_reset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_reset(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:nakama.api.ImportFacebookFriendsRequest)
}

::google::protobuf::uint8* ImportFacebookFriendsRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.ImportFacebookFriendsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .nakama.api.AccountFacebook account = 1;
  if (this->has_account()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_account(), deterministic, target);
  }

  // .google.protobuf.BoolValue reset = 2;
  if (this->has_reset()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_reset(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.ImportFacebookFriendsRequest)
  return target;
}

size_t ImportFacebookFriendsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.ImportFacebookFriendsRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .nakama.api.AccountFacebook account = 1;
  if (this->has_account()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *account_);
  }

  // .google.protobuf.BoolValue reset = 2;
  if (this->has_reset()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *reset_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ImportFacebookFriendsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.ImportFacebookFriendsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ImportFacebookFriendsRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ImportFacebookFriendsRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.ImportFacebookFriendsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.ImportFacebookFriendsRequest)
    MergeFrom(*source);
  }
}

void ImportFacebookFriendsRequest::MergeFrom(const ImportFacebookFriendsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.ImportFacebookFriendsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_account()) {
    mutable_account()->::nakama::api::AccountFacebook::MergeFrom(from.account());
  }
  if (from.has_reset()) {
    mutable_reset()->::google::protobuf::BoolValue::MergeFrom(from.reset());
  }
}

void ImportFacebookFriendsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.ImportFacebookFriendsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImportFacebookFriendsRequest::CopyFrom(const ImportFacebookFriendsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.ImportFacebookFriendsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImportFacebookFriendsRequest::IsInitialized() const {
  return true;
}

void ImportFacebookFriendsRequest::Swap(ImportFacebookFriendsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ImportFacebookFriendsRequest::InternalSwap(ImportFacebookFriendsRequest* other) {
  using std::swap;
  swap(account_, other->account_);
  swap(reset_, other->reset_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ImportFacebookFriendsRequest::GetMetadata() const {
  protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void JoinGroupRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int JoinGroupRequest::kGroupIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

JoinGroupRequest::JoinGroupRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_JoinGroupRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:nakama.api.JoinGroupRequest)
}
JoinGroupRequest::JoinGroupRequest(const JoinGroupRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.group_id().size() > 0) {
    group_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.group_id_);
  }
  // @@protoc_insertion_point(copy_constructor:nakama.api.JoinGroupRequest)
}

void JoinGroupRequest::SharedCtor() {
  group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

JoinGroupRequest::~JoinGroupRequest() {
  // @@protoc_insertion_point(destructor:nakama.api.JoinGroupRequest)
  SharedDtor();
}

void JoinGroupRequest::SharedDtor() {
  group_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void JoinGroupRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* JoinGroupRequest::descriptor() {
  ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const JoinGroupRequest& JoinGroupRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_JoinGroupRequest.base);
  return *internal_default_instance();
}


void JoinGroupRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.JoinGroupRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  group_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool JoinGroupRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nakama.api.JoinGroupRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string group_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->group_id().data(), static_cast<int>(this->group_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nakama.api.JoinGroupRequest.group_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nakama.api.JoinGroupRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nakama.api.JoinGroupRequest)
  return false;
#undef DO_
}

void JoinGroupRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nakama.api.JoinGroupRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string group_id = 1;
  if (this->group_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->group_id().data(), static_cast<int>(this->group_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.JoinGroupRequest.group_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->group_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:nakama.api.JoinGroupRequest)
}

::google::protobuf::uint8* JoinGroupRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.JoinGroupRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string group_id = 1;
  if (this->group_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->group_id().data(), static_cast<int>(this->group_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.JoinGroupRequest.group_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->group_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.JoinGroupRequest)
  return target;
}

size_t JoinGroupRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.JoinGroupRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string group_id = 1;
  if (this->group_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->group_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JoinGroupRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.JoinGroupRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const JoinGroupRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const JoinGroupRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.JoinGroupRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.JoinGroupRequest)
    MergeFrom(*source);
  }
}

void JoinGroupRequest::MergeFrom(const JoinGroupRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.JoinGroupRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.group_id().size() > 0) {

    group_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.group_id_);
  }
}

void JoinGroupRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.JoinGroupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JoinGroupRequest::CopyFrom(const JoinGroupRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.JoinGroupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoinGroupRequest::IsInitialized() const {
  return true;
}

void JoinGroupRequest::Swap(JoinGroupRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void JoinGroupRequest::InternalSwap(JoinGroupRequest* other) {
  using std::swap;
  group_id_.Swap(&other->group_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata JoinGroupRequest::GetMetadata() const {
  protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void JoinTournamentRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int JoinTournamentRequest::kTournamentIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

JoinTournamentRequest::JoinTournamentRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_JoinTournamentRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:nakama.api.JoinTournamentRequest)
}
JoinTournamentRequest::JoinTournamentRequest(const JoinTournamentRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tournament_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.tournament_id().size() > 0) {
    tournament_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tournament_id_);
  }
  // @@protoc_insertion_point(copy_constructor:nakama.api.JoinTournamentRequest)
}

void JoinTournamentRequest::SharedCtor() {
  tournament_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

JoinTournamentRequest::~JoinTournamentRequest() {
  // @@protoc_insertion_point(destructor:nakama.api.JoinTournamentRequest)
  SharedDtor();
}

void JoinTournamentRequest::SharedDtor() {
  tournament_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void JoinTournamentRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* JoinTournamentRequest::descriptor() {
  ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const JoinTournamentRequest& JoinTournamentRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_JoinTournamentRequest.base);
  return *internal_default_instance();
}


void JoinTournamentRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.JoinTournamentRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tournament_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool JoinTournamentRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nakama.api.JoinTournamentRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string tournament_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tournament_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tournament_id().data(), static_cast<int>(this->tournament_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nakama.api.JoinTournamentRequest.tournament_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nakama.api.JoinTournamentRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nakama.api.JoinTournamentRequest)
  return false;
#undef DO_
}

void JoinTournamentRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nakama.api.JoinTournamentRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tournament_id = 1;
  if (this->tournament_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tournament_id().data(), static_cast<int>(this->tournament_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.JoinTournamentRequest.tournament_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->tournament_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:nakama.api.JoinTournamentRequest)
}

::google::protobuf::uint8* JoinTournamentRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.JoinTournamentRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tournament_id = 1;
  if (this->tournament_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tournament_id().data(), static_cast<int>(this->tournament_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.JoinTournamentRequest.tournament_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->tournament_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.JoinTournamentRequest)
  return target;
}

size_t JoinTournamentRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.JoinTournamentRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string tournament_id = 1;
  if (this->tournament_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tournament_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JoinTournamentRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.JoinTournamentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const JoinTournamentRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const JoinTournamentRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.JoinTournamentRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.JoinTournamentRequest)
    MergeFrom(*source);
  }
}

void JoinTournamentRequest::MergeFrom(const JoinTournamentRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.JoinTournamentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.tournament_id().size() > 0) {

    tournament_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tournament_id_);
  }
}

void JoinTournamentRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.JoinTournamentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JoinTournamentRequest::CopyFrom(const JoinTournamentRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.JoinTournamentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoinTournamentRequest::IsInitialized() const {
  return true;
}

void JoinTournamentRequest::Swap(JoinTournamentRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void JoinTournamentRequest::InternalSwap(JoinTournamentRequest* other) {
  using std::swap;
  tournament_id_.Swap(&other->tournament_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata JoinTournamentRequest::GetMetadata() const {
  protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void KickGroupUsersRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KickGroupUsersRequest::kGroupIdFieldNumber;
const int KickGroupUsersRequest::kUserIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KickGroupUsersRequest::KickGroupUsersRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_KickGroupUsersRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:nakama.api.KickGroupUsersRequest)
}
KickGroupUsersRequest::KickGroupUsersRequest(const KickGroupUsersRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      user_ids_(from.user_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.group_id().size() > 0) {
    group_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.group_id_);
  }
  // @@protoc_insertion_point(copy_constructor:nakama.api.KickGroupUsersRequest)
}

void KickGroupUsersRequest::SharedCtor() {
  group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

KickGroupUsersRequest::~KickGroupUsersRequest() {
  // @@protoc_insertion_point(destructor:nakama.api.KickGroupUsersRequest)
  SharedDtor();
}

void KickGroupUsersRequest::SharedDtor() {
  group_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void KickGroupUsersRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* KickGroupUsersRequest::descriptor() {
  ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const KickGroupUsersRequest& KickGroupUsersRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_KickGroupUsersRequest.base);
  return *internal_default_instance();
}


void KickGroupUsersRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.KickGroupUsersRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_ids_.Clear();
  group_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool KickGroupUsersRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nakama.api.KickGroupUsersRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string group_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->group_id().data(), static_cast<int>(this->group_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nakama.api.KickGroupUsersRequest.group_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string user_ids = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_user_ids()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user_ids(this->user_ids_size() - 1).data(),
            static_cast<int>(this->user_ids(this->user_ids_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nakama.api.KickGroupUsersRequest.user_ids"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nakama.api.KickGroupUsersRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nakama.api.KickGroupUsersRequest)
  return false;
#undef DO_
}

void KickGroupUsersRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nakama.api.KickGroupUsersRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string group_id = 1;
  if (this->group_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->group_id().data(), static_cast<int>(this->group_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.KickGroupUsersRequest.group_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->group_id(), output);
  }

  // repeated string user_ids = 2;
  for (int i = 0, n = this->user_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_ids(i).data(), static_cast<int>(this->user_ids(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.KickGroupUsersRequest.user_ids");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->user_ids(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:nakama.api.KickGroupUsersRequest)
}

::google::protobuf::uint8* KickGroupUsersRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.KickGroupUsersRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string group_id = 1;
  if (this->group_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->group_id().data(), static_cast<int>(this->group_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.KickGroupUsersRequest.group_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->group_id(), target);
  }

  // repeated string user_ids = 2;
  for (int i = 0, n = this->user_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_ids(i).data(), static_cast<int>(this->user_ids(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.KickGroupUsersRequest.user_ids");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->user_ids(i), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.KickGroupUsersRequest)
  return target;
}

size_t KickGroupUsersRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.KickGroupUsersRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string user_ids = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->user_ids_size());
  for (int i = 0, n = this->user_ids_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->user_ids(i));
  }

  // string group_id = 1;
  if (this->group_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->group_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KickGroupUsersRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.KickGroupUsersRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const KickGroupUsersRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const KickGroupUsersRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.KickGroupUsersRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.KickGroupUsersRequest)
    MergeFrom(*source);
  }
}

void KickGroupUsersRequest::MergeFrom(const KickGroupUsersRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.KickGroupUsersRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  user_ids_.MergeFrom(from.user_ids_);
  if (from.group_id().size() > 0) {

    group_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.group_id_);
  }
}

void KickGroupUsersRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.KickGroupUsersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KickGroupUsersRequest::CopyFrom(const KickGroupUsersRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.KickGroupUsersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KickGroupUsersRequest::IsInitialized() const {
  return true;
}

void KickGroupUsersRequest::Swap(KickGroupUsersRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KickGroupUsersRequest::InternalSwap(KickGroupUsersRequest* other) {
  using std::swap;
  user_ids_.InternalSwap(CastToBase(&other->user_ids_));
  group_id_.Swap(&other->group_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata KickGroupUsersRequest::GetMetadata() const {
  protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LeaderboardRecord::InitAsDefaultInstance() {
  ::nakama::api::_LeaderboardRecord_default_instance_._instance.get_mutable()->username_ = const_cast< ::google::protobuf::StringValue*>(
      ::google::protobuf::StringValue::internal_default_instance());
  ::nakama::api::_LeaderboardRecord_default_instance_._instance.get_mutable()->create_time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  ::nakama::api::_LeaderboardRecord_default_instance_._instance.get_mutable()->update_time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  ::nakama::api::_LeaderboardRecord_default_instance_._instance.get_mutable()->expiry_time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
}
void LeaderboardRecord::clear_username() {
  if (GetArenaNoVirtual() == NULL && username_ != NULL) {
    delete username_;
  }
  username_ = NULL;
}
void LeaderboardRecord::clear_create_time() {
  if (GetArenaNoVirtual() == NULL && create_time_ != NULL) {
    delete create_time_;
  }
  create_time_ = NULL;
}
void LeaderboardRecord::clear_update_time() {
  if (GetArenaNoVirtual() == NULL && update_time_ != NULL) {
    delete update_time_;
  }
  update_time_ = NULL;
}
void LeaderboardRecord::clear_expiry_time() {
  if (GetArenaNoVirtual() == NULL && expiry_time_ != NULL) {
    delete expiry_time_;
  }
  expiry_time_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LeaderboardRecord::kLeaderboardIdFieldNumber;
const int LeaderboardRecord::kOwnerIdFieldNumber;
const int LeaderboardRecord::kUsernameFieldNumber;
const int LeaderboardRecord::kScoreFieldNumber;
const int LeaderboardRecord::kSubscoreFieldNumber;
const int LeaderboardRecord::kNumScoreFieldNumber;
const int LeaderboardRecord::kMetadataFieldNumber;
const int LeaderboardRecord::kCreateTimeFieldNumber;
const int LeaderboardRecord::kUpdateTimeFieldNumber;
const int LeaderboardRecord::kExpiryTimeFieldNumber;
const int LeaderboardRecord::kRankFieldNumber;
const int LeaderboardRecord::kMaxNumScoreFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LeaderboardRecord::LeaderboardRecord()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_LeaderboardRecord.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:nakama.api.LeaderboardRecord)
}
LeaderboardRecord::LeaderboardRecord(const LeaderboardRecord& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  leaderboard_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.leaderboard_id().size() > 0) {
    leaderboard_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.leaderboard_id_);
  }
  owner_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.owner_id().size() > 0) {
    owner_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.owner_id_);
  }
  metadata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.metadata().size() > 0) {
    metadata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.metadata_);
  }
  if (from.has_username()) {
    username_ = new ::google::protobuf::StringValue(*from.username_);
  } else {
    username_ = NULL;
  }
  if (from.has_create_time()) {
    create_time_ = new ::google::protobuf::Timestamp(*from.create_time_);
  } else {
    create_time_ = NULL;
  }
  if (from.has_update_time()) {
    update_time_ = new ::google::protobuf::Timestamp(*from.update_time_);
  } else {
    update_time_ = NULL;
  }
  if (from.has_expiry_time()) {
    expiry_time_ = new ::google::protobuf::Timestamp(*from.expiry_time_);
  } else {
    expiry_time_ = NULL;
  }
  ::memcpy(&score_, &from.score_,
    static_cast<size_t>(reinterpret_cast<char*>(&rank_) -
    reinterpret_cast<char*>(&score_)) + sizeof(rank_));
  // @@protoc_insertion_point(copy_constructor:nakama.api.LeaderboardRecord)
}

void LeaderboardRecord::SharedCtor() {
  leaderboard_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  owner_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  metadata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&username_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rank_) -
      reinterpret_cast<char*>(&username_)) + sizeof(rank_));
}

LeaderboardRecord::~LeaderboardRecord() {
  // @@protoc_insertion_point(destructor:nakama.api.LeaderboardRecord)
  SharedDtor();
}

void LeaderboardRecord::SharedDtor() {
  leaderboard_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  owner_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  metadata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete username_;
  if (this != internal_default_instance()) delete create_time_;
  if (this != internal_default_instance()) delete update_time_;
  if (this != internal_default_instance()) delete expiry_time_;
}

void LeaderboardRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LeaderboardRecord::descriptor() {
  ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LeaderboardRecord& LeaderboardRecord::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_LeaderboardRecord.base);
  return *internal_default_instance();
}


void LeaderboardRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.LeaderboardRecord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  leaderboard_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  owner_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  metadata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && username_ != NULL) {
    delete username_;
  }
  username_ = NULL;
  if (GetArenaNoVirtual() == NULL && create_time_ != NULL) {
    delete create_time_;
  }
  create_time_ = NULL;
  if (GetArenaNoVirtual() == NULL && update_time_ != NULL) {
    delete update_time_;
  }
  update_time_ = NULL;
  if (GetArenaNoVirtual() == NULL && expiry_time_ != NULL) {
    delete expiry_time_;
  }
  expiry_time_ = NULL;
  ::memset(&score_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rank_) -
      reinterpret_cast<char*>(&score_)) + sizeof(rank_));
  _internal_metadata_.Clear();
}

bool LeaderboardRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nakama.api.LeaderboardRecord)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string leaderboard_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_leaderboard_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->leaderboard_id().data(), static_cast<int>(this->leaderboard_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nakama.api.LeaderboardRecord.leaderboard_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string owner_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_owner_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->owner_id().data(), static_cast<int>(this->owner_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nakama.api.LeaderboardRecord.owner_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.StringValue username = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_username()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 score = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 subscore = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &subscore_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 num_score = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string metadata = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_metadata()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->metadata().data(), static_cast<int>(this->metadata().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nakama.api.LeaderboardRecord.metadata"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp create_time = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_create_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp update_time = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_update_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp expiry_time = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_expiry_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 rank = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &rank_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 max_num_score = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_num_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nakama.api.LeaderboardRecord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nakama.api.LeaderboardRecord)
  return false;
#undef DO_
}

void LeaderboardRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nakama.api.LeaderboardRecord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string leaderboard_id = 1;
  if (this->leaderboard_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->leaderboard_id().data(), static_cast<int>(this->leaderboard_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.LeaderboardRecord.leaderboard_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->leaderboard_id(), output);
  }

  // string owner_id = 2;
  if (this->owner_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->owner_id().data(), static_cast<int>(this->owner_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.LeaderboardRecord.owner_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->owner_id(), output);
  }

  // .google.protobuf.StringValue username = 3;
  if (this->has_username()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_username(), output);
  }

  // int64 score = 4;
  if (this->score() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->score(), output);
  }

  // int64 subscore = 5;
  if (this->subscore() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->subscore(), output);
  }

  // int32 num_score = 6;
  if (this->num_score() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->num_score(), output);
  }

  // string metadata = 7;
  if (this->metadata().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->metadata().data(), static_cast<int>(this->metadata().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.LeaderboardRecord.metadata");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->metadata(), output);
  }

  // .google.protobuf.Timestamp create_time = 8;
  if (this->has_create_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->_internal_create_time(), output);
  }

  // .google.protobuf.Timestamp update_time = 9;
  if (this->has_update_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->_internal_update_time(), output);
  }

  // .google.protobuf.Timestamp expiry_time = 10;
  if (this->has_expiry_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->_internal_expiry_time(), output);
  }

  // int64 rank = 11;
  if (this->rank() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->rank(), output);
  }

  // uint32 max_num_score = 12;
  if (this->max_num_score() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->max_num_score(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:nakama.api.LeaderboardRecord)
}

::google::protobuf::uint8* LeaderboardRecord::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.LeaderboardRecord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string leaderboard_id = 1;
  if (this->leaderboard_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->leaderboard_id().data(), static_cast<int>(this->leaderboard_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.LeaderboardRecord.leaderboard_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->leaderboard_id(), target);
  }

  // string owner_id = 2;
  if (this->owner_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->owner_id().data(), static_cast<int>(this->owner_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.LeaderboardRecord.owner_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->owner_id(), target);
  }

  // .google.protobuf.StringValue username = 3;
  if (this->has_username()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_username(), deterministic, target);
  }

  // int64 score = 4;
  if (this->score() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->score(), target);
  }

  // int64 subscore = 5;
  if (this->subscore() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->subscore(), target);
  }

  // int32 num_score = 6;
  if (this->num_score() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->num_score(), target);
  }

  // string metadata = 7;
  if (this->metadata().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->metadata().data(), static_cast<int>(this->metadata().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.LeaderboardRecord.metadata");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->metadata(), target);
  }

  // .google.protobuf.Timestamp create_time = 8;
  if (this->has_create_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->_internal_create_time(), deterministic, target);
  }

  // .google.protobuf.Timestamp update_time = 9;
  if (this->has_update_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->_internal_update_time(), deterministic, target);
  }

  // .google.protobuf.Timestamp expiry_time = 10;
  if (this->has_expiry_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->_internal_expiry_time(), deterministic, target);
  }

  // int64 rank = 11;
  if (this->rank() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->rank(), target);
  }

  // uint32 max_num_score = 12;
  if (this->max_num_score() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->max_num_score(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.LeaderboardRecord)
  return target;
}

size_t LeaderboardRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.LeaderboardRecord)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string leaderboard_id = 1;
  if (this->leaderboard_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->leaderboard_id());
  }

  // string owner_id = 2;
  if (this->owner_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->owner_id());
  }

  // string metadata = 7;
  if (this->metadata().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->metadata());
  }

  // .google.protobuf.StringValue username = 3;
  if (this->has_username()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *username_);
  }

  // .google.protobuf.Timestamp create_time = 8;
  if (this->has_create_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *create_time_);
  }

  // .google.protobuf.Timestamp update_time = 9;
  if (this->has_update_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *update_time_);
  }

  // .google.protobuf.Timestamp expiry_time = 10;
  if (this->has_expiry_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *expiry_time_);
  }

  // int64 score = 4;
  if (this->score() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->score());
  }

  // int64 subscore = 5;
  if (this->subscore() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->subscore());
  }

  // int32 num_score = 6;
  if (this->num_score() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_score());
  }

  // uint32 max_num_score = 12;
  if (this->max_num_score() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->max_num_score());
  }

  // int64 rank = 11;
  if (this->rank() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->rank());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LeaderboardRecord::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.LeaderboardRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const LeaderboardRecord* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LeaderboardRecord>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.LeaderboardRecord)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.LeaderboardRecord)
    MergeFrom(*source);
  }
}

void LeaderboardRecord::MergeFrom(const LeaderboardRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.LeaderboardRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.leaderboard_id().size() > 0) {

    leaderboard_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.leaderboard_id_);
  }
  if (from.owner_id().size() > 0) {

    owner_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.owner_id_);
  }
  if (from.metadata().size() > 0) {

    metadata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.metadata_);
  }
  if (from.has_username()) {
    mutable_username()->::google::protobuf::StringValue::MergeFrom(from.username());
  }
  if (from.has_create_time()) {
    mutable_create_time()->::google::protobuf::Timestamp::MergeFrom(from.create_time());
  }
  if (from.has_update_time()) {
    mutable_update_time()->::google::protobuf::Timestamp::MergeFrom(from.update_time());
  }
  if (from.has_expiry_time()) {
    mutable_expiry_time()->::google::protobuf::Timestamp::MergeFrom(from.expiry_time());
  }
  if (from.score() != 0) {
    set_score(from.score());
  }
  if (from.subscore() != 0) {
    set_subscore(from.subscore());
  }
  if (from.num_score() != 0) {
    set_num_score(from.num_score());
  }
  if (from.max_num_score() != 0) {
    set_max_num_score(from.max_num_score());
  }
  if (from.rank() != 0) {
    set_rank(from.rank());
  }
}

void LeaderboardRecord::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.LeaderboardRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LeaderboardRecord::CopyFrom(const LeaderboardRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.LeaderboardRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaderboardRecord::IsInitialized() const {
  return true;
}

void LeaderboardRecord::Swap(LeaderboardRecord* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LeaderboardRecord::InternalSwap(LeaderboardRecord* other) {
  using std::swap;
  leaderboard_id_.Swap(&other->leaderboard_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  owner_id_.Swap(&other->owner_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  metadata_.Swap(&other->metadata_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(username_, other->username_);
  swap(create_time_, other->create_time_);
  swap(update_time_, other->update_time_);
  swap(expiry_time_, other->expiry_time_);
  swap(score_, other->score_);
  swap(subscore_, other->subscore_);
  swap(num_score_, other->num_score_);
  swap(max_num_score_, other->max_num_score_);
  swap(rank_, other->rank_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LeaderboardRecord::GetMetadata() const {
  protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LeaderboardRecordList::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LeaderboardRecordList::kRecordsFieldNumber;
const int LeaderboardRecordList::kOwnerRecordsFieldNumber;
const int LeaderboardRecordList::kNextCursorFieldNumber;
const int LeaderboardRecordList::kPrevCursorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LeaderboardRecordList::LeaderboardRecordList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_LeaderboardRecordList.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:nakama.api.LeaderboardRecordList)
}
LeaderboardRecordList::LeaderboardRecordList(const LeaderboardRecordList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      records_(from.records_),
      owner_records_(from.owner_records_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  next_cursor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.next_cursor().size() > 0) {
    next_cursor_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.next_cursor_);
  }
  prev_cursor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.prev_cursor().size() > 0) {
    prev_cursor_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.prev_cursor_);
  }
  // @@protoc_insertion_point(copy_constructor:nakama.api.LeaderboardRecordList)
}

void LeaderboardRecordList::SharedCtor() {
  next_cursor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  prev_cursor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

LeaderboardRecordList::~LeaderboardRecordList() {
  // @@protoc_insertion_point(destructor:nakama.api.LeaderboardRecordList)
  SharedDtor();
}

void LeaderboardRecordList::SharedDtor() {
  next_cursor_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  prev_cursor_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LeaderboardRecordList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LeaderboardRecordList::descriptor() {
  ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LeaderboardRecordList& LeaderboardRecordList::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_LeaderboardRecordList.base);
  return *internal_default_instance();
}


void LeaderboardRecordList::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.LeaderboardRecordList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  records_.Clear();
  owner_records_.Clear();
  next_cursor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  prev_cursor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool LeaderboardRecordList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nakama.api.LeaderboardRecordList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .nakama.api.LeaderboardRecord records = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_records()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .nakama.api.LeaderboardRecord owner_records = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_owner_records()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string next_cursor = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_next_cursor()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->next_cursor().data(), static_cast<int>(this->next_cursor().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nakama.api.LeaderboardRecordList.next_cursor"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string prev_cursor = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_prev_cursor()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->prev_cursor().data(), static_cast<int>(this->prev_cursor().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nakama.api.LeaderboardRecordList.prev_cursor"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nakama.api.LeaderboardRecordList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nakama.api.LeaderboardRecordList)
  return false;
#undef DO_
}

void LeaderboardRecordList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nakama.api.LeaderboardRecordList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .nakama.api.LeaderboardRecord records = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->records_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->records(static_cast<int>(i)),
      output);
  }

  // repeated .nakama.api.LeaderboardRecord owner_records = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->owner_records_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->owner_records(static_cast<int>(i)),
      output);
  }

  // string next_cursor = 3;
  if (this->next_cursor().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->next_cursor().data(), static_cast<int>(this->next_cursor().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.LeaderboardRecordList.next_cursor");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->next_cursor(), output);
  }

  // string prev_cursor = 4;
  if (this->prev_cursor().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->prev_cursor().data(), static_cast<int>(this->prev_cursor().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.LeaderboardRecordList.prev_cursor");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->prev_cursor(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:nakama.api.LeaderboardRecordList)
}

::google::protobuf::uint8* LeaderboardRecordList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.LeaderboardRecordList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .nakama.api.LeaderboardRecord records = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->records_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->records(static_cast<int>(i)), deterministic, target);
  }

  // repeated .nakama.api.LeaderboardRecord owner_records = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->owner_records_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->owner_records(static_cast<int>(i)), deterministic, target);
  }

  // string next_cursor = 3;
  if (this->next_cursor().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->next_cursor().data(), static_cast<int>(this->next_cursor().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.LeaderboardRecordList.next_cursor");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->next_cursor(), target);
  }

  // string prev_cursor = 4;
  if (this->prev_cursor().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->prev_cursor().data(), static_cast<int>(this->prev_cursor().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.LeaderboardRecordList.prev_cursor");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->prev_cursor(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.LeaderboardRecordList)
  return target;
}

size_t LeaderboardRecordList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.LeaderboardRecordList)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .nakama.api.LeaderboardRecord records = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->records_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->records(static_cast<int>(i)));
    }
  }

  // repeated .nakama.api.LeaderboardRecord owner_records = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->owner_records_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->owner_records(static_cast<int>(i)));
    }
  }

  // string next_cursor = 3;
  if (this->next_cursor().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->next_cursor());
  }

  // string prev_cursor = 4;
  if (this->prev_cursor().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->prev_cursor());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LeaderboardRecordList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.LeaderboardRecordList)
  GOOGLE_DCHECK_NE(&from, this);
  const LeaderboardRecordList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LeaderboardRecordList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.LeaderboardRecordList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.LeaderboardRecordList)
    MergeFrom(*source);
  }
}

void LeaderboardRecordList::MergeFrom(const LeaderboardRecordList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.LeaderboardRecordList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  records_.MergeFrom(from.records_);
  owner_records_.MergeFrom(from.owner_records_);
  if (from.next_cursor().size() > 0) {

    next_cursor_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.next_cursor_);
  }
  if (from.prev_cursor().size() > 0) {

    prev_cursor_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.prev_cursor_);
  }
}

void LeaderboardRecordList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.LeaderboardRecordList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LeaderboardRecordList::CopyFrom(const LeaderboardRecordList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.LeaderboardRecordList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaderboardRecordList::IsInitialized() const {
  return true;
}

void LeaderboardRecordList::Swap(LeaderboardRecordList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LeaderboardRecordList::InternalSwap(LeaderboardRecordList* other) {
  using std::swap;
  CastToBase(&records_)->InternalSwap(CastToBase(&other->records_));
  CastToBase(&owner_records_)->InternalSwap(CastToBase(&other->owner_records_));
  next_cursor_.Swap(&other->next_cursor_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  prev_cursor_.Swap(&other->prev_cursor_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LeaderboardRecordList::GetMetadata() const {
  protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LeaveGroupRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LeaveGroupRequest::kGroupIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LeaveGroupRequest::LeaveGroupRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_LeaveGroupRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:nakama.api.LeaveGroupRequest)
}
LeaveGroupRequest::LeaveGroupRequest(const LeaveGroupRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.group_id().size() > 0) {
    group_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.group_id_);
  }
  // @@protoc_insertion_point(copy_constructor:nakama.api.LeaveGroupRequest)
}

void LeaveGroupRequest::SharedCtor() {
  group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

LeaveGroupRequest::~LeaveGroupRequest() {
  // @@protoc_insertion_point(destructor:nakama.api.LeaveGroupRequest)
  SharedDtor();
}

void LeaveGroupRequest::SharedDtor() {
  group_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LeaveGroupRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LeaveGroupRequest::descriptor() {
  ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LeaveGroupRequest& LeaveGroupRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_LeaveGroupRequest.base);
  return *internal_default_instance();
}


void LeaveGroupRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.LeaveGroupRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  group_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool LeaveGroupRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nakama.api.LeaveGroupRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string group_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->group_id().data(), static_cast<int>(this->group_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nakama.api.LeaveGroupRequest.group_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nakama.api.LeaveGroupRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nakama.api.LeaveGroupRequest)
  return false;
#undef DO_
}

void LeaveGroupRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nakama.api.LeaveGroupRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string group_id = 1;
  if (this->group_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->group_id().data(), static_cast<int>(this->group_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.LeaveGroupRequest.group_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->group_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:nakama.api.LeaveGroupRequest)
}

::google::protobuf::uint8* LeaveGroupRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.LeaveGroupRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string group_id = 1;
  if (this->group_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->group_id().data(), static_cast<int>(this->group_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.LeaveGroupRequest.group_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->group_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.LeaveGroupRequest)
  return target;
}

size_t LeaveGroupRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.LeaveGroupRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string group_id = 1;
  if (this->group_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->group_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LeaveGroupRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.LeaveGroupRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const LeaveGroupRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LeaveGroupRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.LeaveGroupRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.LeaveGroupRequest)
    MergeFrom(*source);
  }
}

void LeaveGroupRequest::MergeFrom(const LeaveGroupRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.LeaveGroupRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.group_id().size() > 0) {

    group_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.group_id_);
  }
}

void LeaveGroupRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.LeaveGroupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LeaveGroupRequest::CopyFrom(const LeaveGroupRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.LeaveGroupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaveGroupRequest::IsInitialized() const {
  return true;
}

void LeaveGroupRequest::Swap(LeaveGroupRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LeaveGroupRequest::InternalSwap(LeaveGroupRequest* other) {
  using std::swap;
  group_id_.Swap(&other->group_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LeaveGroupRequest::GetMetadata() const {
  protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LinkFacebookRequest::InitAsDefaultInstance() {
  ::nakama::api::_LinkFacebookRequest_default_instance_._instance.get_mutable()->account_ = const_cast< ::nakama::api::AccountFacebook*>(
      ::nakama::api::AccountFacebook::internal_default_instance());
  ::nakama::api::_LinkFacebookRequest_default_instance_._instance.get_mutable()->import_ = const_cast< ::google::protobuf::BoolValue*>(
      ::google::protobuf::BoolValue::internal_default_instance());
}
void LinkFacebookRequest::clear_import() {
  if (GetArenaNoVirtual() == NULL && import_ != NULL) {
    delete import_;
  }
  import_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LinkFacebookRequest::kAccountFieldNumber;
const int LinkFacebookRequest::kImportFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LinkFacebookRequest::LinkFacebookRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_LinkFacebookRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:nakama.api.LinkFacebookRequest)
}
LinkFacebookRequest::LinkFacebookRequest(const LinkFacebookRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_account()) {
    account_ = new ::nakama::api::AccountFacebook(*from.account_);
  } else {
    account_ = NULL;
  }
  if (from.has_import()) {
    import_ = new ::google::protobuf::BoolValue(*from.import_);
  } else {
    import_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:nakama.api.LinkFacebookRequest)
}

void LinkFacebookRequest::SharedCtor() {
  ::memset(&account_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&import_) -
      reinterpret_cast<char*>(&account_)) + sizeof(import_));
}

LinkFacebookRequest::~LinkFacebookRequest() {
  // @@protoc_insertion_point(destructor:nakama.api.LinkFacebookRequest)
  SharedDtor();
}

void LinkFacebookRequest::SharedDtor() {
  if (this != internal_default_instance()) delete account_;
  if (this != internal_default_instance()) delete import_;
}

void LinkFacebookRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LinkFacebookRequest::descriptor() {
  ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LinkFacebookRequest& LinkFacebookRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_LinkFacebookRequest.base);
  return *internal_default_instance();
}


void LinkFacebookRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.LinkFacebookRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && account_ != NULL) {
    delete account_;
  }
  account_ = NULL;
  if (GetArenaNoVirtual() == NULL && import_ != NULL) {
    delete import_;
  }
  import_ = NULL;
  _internal_metadata_.Clear();
}

bool LinkFacebookRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nakama.api.LinkFacebookRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .nakama.api.AccountFacebook account = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_account()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.BoolValue import = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_import()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nakama.api.LinkFacebookRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nakama.api.LinkFacebookRequest)
  return false;
#undef DO_
}

void LinkFacebookRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nakama.api.LinkFacebookRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .nakama.api.AccountFacebook account = 1;
  if (this->has_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_account(), output);
  }

  // .google.protobuf.BoolValue import = 4;
  if (this->has_import()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_import(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:nakama.api.LinkFacebookRequest)
}

::google::protobuf::uint8* LinkFacebookRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.LinkFacebookRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .nakama.api.AccountFacebook account = 1;
  if (this->has_account()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_account(), deterministic, target);
  }

  // .google.protobuf.BoolValue import = 4;
  if (this->has_import()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_import(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.LinkFacebookRequest)
  return target;
}

size_t LinkFacebookRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.LinkFacebookRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .nakama.api.AccountFacebook account = 1;
  if (this->has_account()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *account_);
  }

  // .google.protobuf.BoolValue import = 4;
  if (this->has_import()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *import_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LinkFacebookRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.LinkFacebookRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const LinkFacebookRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LinkFacebookRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.LinkFacebookRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.LinkFacebookRequest)
    MergeFrom(*source);
  }
}

void LinkFacebookRequest::MergeFrom(const LinkFacebookRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.LinkFacebookRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_account()) {
    mutable_account()->::nakama::api::AccountFacebook::MergeFrom(from.account());
  }
  if (from.has_import()) {
    mutable_import()->::google::protobuf::BoolValue::MergeFrom(from.import());
  }
}

void LinkFacebookRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.LinkFacebookRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LinkFacebookRequest::CopyFrom(const LinkFacebookRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.LinkFacebookRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LinkFacebookRequest::IsInitialized() const {
  return true;
}

void LinkFacebookRequest::Swap(LinkFacebookRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LinkFacebookRequest::InternalSwap(LinkFacebookRequest* other) {
  using std::swap;
  swap(account_, other->account_);
  swap(import_, other->import_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LinkFacebookRequest::GetMetadata() const {
  protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ListChannelMessagesRequest::InitAsDefaultInstance() {
  ::nakama::api::_ListChannelMessagesRequest_default_instance_._instance.get_mutable()->limit_ = const_cast< ::google::protobuf::Int32Value*>(
      ::google::protobuf::Int32Value::internal_default_instance());
  ::nakama::api::_ListChannelMessagesRequest_default_instance_._instance.get_mutable()->forward_ = const_cast< ::google::protobuf::BoolValue*>(
      ::google::protobuf::BoolValue::internal_default_instance());
}
void ListChannelMessagesRequest::clear_limit() {
  if (GetArenaNoVirtual() == NULL && limit_ != NULL) {
    delete limit_;
  }
  limit_ = NULL;
}
void ListChannelMessagesRequest::clear_forward() {
  if (GetArenaNoVirtual() == NULL && forward_ != NULL) {
    delete forward_;
  }
  forward_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListChannelMessagesRequest::kChannelIdFieldNumber;
const int ListChannelMessagesRequest::kLimitFieldNumber;
const int ListChannelMessagesRequest::kForwardFieldNumber;
const int ListChannelMessagesRequest::kCursorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListChannelMessagesRequest::ListChannelMessagesRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_ListChannelMessagesRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:nakama.api.ListChannelMessagesRequest)
}
ListChannelMessagesRequest::ListChannelMessagesRequest(const ListChannelMessagesRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  channel_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.channel_id().size() > 0) {
    channel_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.channel_id_);
  }
  cursor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cursor().size() > 0) {
    cursor_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cursor_);
  }
  if (from.has_limit()) {
    limit_ = new ::google::protobuf::Int32Value(*from.limit_);
  } else {
    limit_ = NULL;
  }
  if (from.has_forward()) {
    forward_ = new ::google::protobuf::BoolValue(*from.forward_);
  } else {
    forward_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:nakama.api.ListChannelMessagesRequest)
}

void ListChannelMessagesRequest::SharedCtor() {
  channel_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cursor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&limit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&forward_) -
      reinterpret_cast<char*>(&limit_)) + sizeof(forward_));
}

ListChannelMessagesRequest::~ListChannelMessagesRequest() {
  // @@protoc_insertion_point(destructor:nakama.api.ListChannelMessagesRequest)
  SharedDtor();
}

void ListChannelMessagesRequest::SharedDtor() {
  channel_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cursor_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete limit_;
  if (this != internal_default_instance()) delete forward_;
}

void ListChannelMessagesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ListChannelMessagesRequest::descriptor() {
  ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ListChannelMessagesRequest& ListChannelMessagesRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_ListChannelMessagesRequest.base);
  return *internal_default_instance();
}


void ListChannelMessagesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.ListChannelMessagesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channel_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cursor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && limit_ != NULL) {
    delete limit_;
  }
  limit_ = NULL;
  if (GetArenaNoVirtual() == NULL && forward_ != NULL) {
    delete forward_;
  }
  forward_ = NULL;
  _internal_metadata_.Clear();
}

bool ListChannelMessagesRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nakama.api.ListChannelMessagesRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string channel_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->channel_id().data(), static_cast<int>(this->channel_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nakama.api.ListChannelMessagesRequest.channel_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Int32Value limit = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_limit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.BoolValue forward = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_forward()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cursor = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cursor()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cursor().data(), static_cast<int>(this->cursor().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nakama.api.ListChannelMessagesRequest.cursor"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nakama.api.ListChannelMessagesRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nakama.api.ListChannelMessagesRequest)
  return false;
#undef DO_
}

void ListChannelMessagesRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nakama.api.ListChannelMessagesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string channel_id = 1;
  if (this->channel_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->channel_id().data(), static_cast<int>(this->channel_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.ListChannelMessagesRequest.channel_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->channel_id(), output);
  }

  // .google.protobuf.Int32Value limit = 2;
  if (this->has_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_limit(), output);
  }

  // .google.protobuf.BoolValue forward = 3;
  if (this->has_forward()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_forward(), output);
  }

  // string cursor = 4;
  if (this->cursor().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cursor().data(), static_cast<int>(this->cursor().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.ListChannelMessagesRequest.cursor");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->cursor(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:nakama.api.ListChannelMessagesRequest)
}

::google::protobuf::uint8* ListChannelMessagesRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.ListChannelMessagesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string channel_id = 1;
  if (this->channel_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->channel_id().data(), static_cast<int>(this->channel_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.ListChannelMessagesRequest.channel_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->channel_id(), target);
  }

  // .google.protobuf.Int32Value limit = 2;
  if (this->has_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_limit(), deterministic, target);
  }

  // .google.protobuf.BoolValue forward = 3;
  if (this->has_forward()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_forward(), deterministic, target);
  }

  // string cursor = 4;
  if (this->cursor().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cursor().data(), static_cast<int>(this->cursor().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.ListChannelMessagesRequest.cursor");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->cursor(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.ListChannelMessagesRequest)
  return target;
}

size_t ListChannelMessagesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.ListChannelMessagesRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string channel_id = 1;
  if (this->channel_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->channel_id());
  }

  // string cursor = 4;
  if (this->cursor().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cursor());
  }

  // .google.protobuf.Int32Value limit = 2;
  if (this->has_limit()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *limit_);
  }

  // .google.protobuf.BoolValue forward = 3;
  if (this->has_forward()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *forward_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListChannelMessagesRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.ListChannelMessagesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListChannelMessagesRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ListChannelMessagesRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.ListChannelMessagesRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.ListChannelMessagesRequest)
    MergeFrom(*source);
  }
}

void ListChannelMessagesRequest::MergeFrom(const ListChannelMessagesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.ListChannelMessagesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.channel_id().size() > 0) {

    channel_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.channel_id_);
  }
  if (from.cursor().size() > 0) {

    cursor_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cursor_);
  }
  if (from.has_limit()) {
    mutable_limit()->::google::protobuf::Int32Value::MergeFrom(from.limit());
  }
  if (from.has_forward()) {
    mutable_forward()->::google::protobuf::BoolValue::MergeFrom(from.forward());
  }
}

void ListChannelMessagesRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.ListChannelMessagesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListChannelMessagesRequest::CopyFrom(const ListChannelMessagesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.ListChannelMessagesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListChannelMessagesRequest::IsInitialized() const {
  return true;
}

void ListChannelMessagesRequest::Swap(ListChannelMessagesRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListChannelMessagesRequest::InternalSwap(ListChannelMessagesRequest* other) {
  using std::swap;
  channel_id_.Swap(&other->channel_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  cursor_.Swap(&other->cursor_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(limit_, other->limit_);
  swap(forward_, other->forward_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ListChannelMessagesRequest::GetMetadata() const {
  protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ListGroupsRequest::InitAsDefaultInstance() {
  ::nakama::api::_ListGroupsRequest_default_instance_._instance.get_mutable()->limit_ = const_cast< ::google::protobuf::Int32Value*>(
      ::google::protobuf::Int32Value::internal_default_instance());
}
void ListGroupsRequest::clear_limit() {
  if (GetArenaNoVirtual() == NULL && limit_ != NULL) {
    delete limit_;
  }
  limit_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListGroupsRequest::kNameFieldNumber;
const int ListGroupsRequest::kCursorFieldNumber;
const int ListGroupsRequest::kLimitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListGroupsRequest::ListGroupsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_ListGroupsRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:nakama.api.ListGroupsRequest)
}
ListGroupsRequest::ListGroupsRequest(const ListGroupsRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  cursor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cursor().size() > 0) {
    cursor_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cursor_);
  }
  if (from.has_limit()) {
    limit_ = new ::google::protobuf::Int32Value(*from.limit_);
  } else {
    limit_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:nakama.api.ListGroupsRequest)
}

void ListGroupsRequest::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cursor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  limit_ = NULL;
}

ListGroupsRequest::~ListGroupsRequest() {
  // @@protoc_insertion_point(destructor:nakama.api.ListGroupsRequest)
  SharedDtor();
}

void ListGroupsRequest::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cursor_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete limit_;
}

void ListGroupsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ListGroupsRequest::descriptor() {
  ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ListGroupsRequest& ListGroupsRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_ListGroupsRequest.base);
  return *internal_default_instance();
}


void ListGroupsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.ListGroupsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cursor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && limit_ != NULL) {
    delete limit_;
  }
  limit_ = NULL;
  _internal_metadata_.Clear();
}

bool ListGroupsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nakama.api.ListGroupsRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nakama.api.ListGroupsRequest.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cursor = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cursor()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cursor().data(), static_cast<int>(this->cursor().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nakama.api.ListGroupsRequest.cursor"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Int32Value limit = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_limit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nakama.api.ListGroupsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nakama.api.ListGroupsRequest)
  return false;
#undef DO_
}

void ListGroupsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nakama.api.ListGroupsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.ListGroupsRequest.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // string cursor = 2;
  if (this->cursor().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cursor().data(), static_cast<int>(this->cursor().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.ListGroupsRequest.cursor");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->cursor(), output);
  }

  // .google.protobuf.Int32Value limit = 3;
  if (this->has_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_limit(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:nakama.api.ListGroupsRequest)
}

::google::protobuf::uint8* ListGroupsRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.ListGroupsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.ListGroupsRequest.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // string cursor = 2;
  if (this->cursor().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cursor().data(), static_cast<int>(this->cursor().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.ListGroupsRequest.cursor");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->cursor(), target);
  }

  // .google.protobuf.Int32Value limit = 3;
  if (this->has_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_limit(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.ListGroupsRequest)
  return target;
}

size_t ListGroupsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.ListGroupsRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string cursor = 2;
  if (this->cursor().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cursor());
  }

  // .google.protobuf.Int32Value limit = 3;
  if (this->has_limit()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *limit_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListGroupsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.ListGroupsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListGroupsRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ListGroupsRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.ListGroupsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.ListGroupsRequest)
    MergeFrom(*source);
  }
}

void ListGroupsRequest::MergeFrom(const ListGroupsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.ListGroupsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.cursor().size() > 0) {

    cursor_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cursor_);
  }
  if (from.has_limit()) {
    mutable_limit()->::google::protobuf::Int32Value::MergeFrom(from.limit());
  }
}

void ListGroupsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.ListGroupsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListGroupsRequest::CopyFrom(const ListGroupsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.ListGroupsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListGroupsRequest::IsInitialized() const {
  return true;
}

void ListGroupsRequest::Swap(ListGroupsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListGroupsRequest::InternalSwap(ListGroupsRequest* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  cursor_.Swap(&other->cursor_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(limit_, other->limit_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ListGroupsRequest::GetMetadata() const {
  protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ListGroupUsersRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListGroupUsersRequest::kGroupIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListGroupUsersRequest::ListGroupUsersRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_ListGroupUsersRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:nakama.api.ListGroupUsersRequest)
}
ListGroupUsersRequest::ListGroupUsersRequest(const ListGroupUsersRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.group_id().size() > 0) {
    group_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.group_id_);
  }
  // @@protoc_insertion_point(copy_constructor:nakama.api.ListGroupUsersRequest)
}

void ListGroupUsersRequest::SharedCtor() {
  group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ListGroupUsersRequest::~ListGroupUsersRequest() {
  // @@protoc_insertion_point(destructor:nakama.api.ListGroupUsersRequest)
  SharedDtor();
}

void ListGroupUsersRequest::SharedDtor() {
  group_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ListGroupUsersRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ListGroupUsersRequest::descriptor() {
  ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ListGroupUsersRequest& ListGroupUsersRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_ListGroupUsersRequest.base);
  return *internal_default_instance();
}


void ListGroupUsersRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.ListGroupUsersRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  group_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool ListGroupUsersRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nakama.api.ListGroupUsersRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string group_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->group_id().data(), static_cast<int>(this->group_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nakama.api.ListGroupUsersRequest.group_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nakama.api.ListGroupUsersRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nakama.api.ListGroupUsersRequest)
  return false;
#undef DO_
}

void ListGroupUsersRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nakama.api.ListGroupUsersRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string group_id = 1;
  if (this->group_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->group_id().data(), static_cast<int>(this->group_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.ListGroupUsersRequest.group_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->group_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:nakama.api.ListGroupUsersRequest)
}

::google::protobuf::uint8* ListGroupUsersRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.ListGroupUsersRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string group_id = 1;
  if (this->group_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->group_id().data(), static_cast<int>(this->group_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.ListGroupUsersRequest.group_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->group_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.ListGroupUsersRequest)
  return target;
}

size_t ListGroupUsersRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.ListGroupUsersRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string group_id = 1;
  if (this->group_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->group_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListGroupUsersRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.ListGroupUsersRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListGroupUsersRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ListGroupUsersRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.ListGroupUsersRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.ListGroupUsersRequest)
    MergeFrom(*source);
  }
}

void ListGroupUsersRequest::MergeFrom(const ListGroupUsersRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.ListGroupUsersRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.group_id().size() > 0) {

    group_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.group_id_);
  }
}

void ListGroupUsersRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.ListGroupUsersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListGroupUsersRequest::CopyFrom(const ListGroupUsersRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.ListGroupUsersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListGroupUsersRequest::IsInitialized() const {
  return true;
}

void ListGroupUsersRequest::Swap(ListGroupUsersRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListGroupUsersRequest::InternalSwap(ListGroupUsersRequest* other) {
  using std::swap;
  group_id_.Swap(&other->group_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ListGroupUsersRequest::GetMetadata() const {
  protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ListLeaderboardRecordsAroundOwnerRequest::InitAsDefaultInstance() {
  ::nakama::api::_ListLeaderboardRecordsAroundOwnerRequest_default_instance_._instance.get_mutable()->limit_ = const_cast< ::google::protobuf::UInt32Value*>(
      ::google::protobuf::UInt32Value::internal_default_instance());
}
void ListLeaderboardRecordsAroundOwnerRequest::clear_limit() {
  if (GetArenaNoVirtual() == NULL && limit_ != NULL) {
    delete limit_;
  }
  limit_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListLeaderboardRecordsAroundOwnerRequest::kLeaderboardIdFieldNumber;
const int ListLeaderboardRecordsAroundOwnerRequest::kLimitFieldNumber;
const int ListLeaderboardRecordsAroundOwnerRequest::kOwnerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListLeaderboardRecordsAroundOwnerRequest::ListLeaderboardRecordsAroundOwnerRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_ListLeaderboardRecordsAroundOwnerRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:nakama.api.ListLeaderboardRecordsAroundOwnerRequest)
}
ListLeaderboardRecordsAroundOwnerRequest::ListLeaderboardRecordsAroundOwnerRequest(const ListLeaderboardRecordsAroundOwnerRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  leaderboard_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.leaderboard_id().size() > 0) {
    leaderboard_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.leaderboard_id_);
  }
  owner_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.owner_id().size() > 0) {
    owner_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.owner_id_);
  }
  if (from.has_limit()) {
    limit_ = new ::google::protobuf::UInt32Value(*from.limit_);
  } else {
    limit_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:nakama.api.ListLeaderboardRecordsAroundOwnerRequest)
}

void ListLeaderboardRecordsAroundOwnerRequest::SharedCtor() {
  leaderboard_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  owner_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  limit_ = NULL;
}

ListLeaderboardRecordsAroundOwnerRequest::~ListLeaderboardRecordsAroundOwnerRequest() {
  // @@protoc_insertion_point(destructor:nakama.api.ListLeaderboardRecordsAroundOwnerRequest)
  SharedDtor();
}

void ListLeaderboardRecordsAroundOwnerRequest::SharedDtor() {
  leaderboard_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  owner_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete limit_;
}

void ListLeaderboardRecordsAroundOwnerRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ListLeaderboardRecordsAroundOwnerRequest::descriptor() {
  ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ListLeaderboardRecordsAroundOwnerRequest& ListLeaderboardRecordsAroundOwnerRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_ListLeaderboardRecordsAroundOwnerRequest.base);
  return *internal_default_instance();
}


void ListLeaderboardRecordsAroundOwnerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.ListLeaderboardRecordsAroundOwnerRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  leaderboard_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  owner_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && limit_ != NULL) {
    delete limit_;
  }
  limit_ = NULL;
  _internal_metadata_.Clear();
}

bool ListLeaderboardRecordsAroundOwnerRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nakama.api.ListLeaderboardRecordsAroundOwnerRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string leaderboard_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_leaderboard_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->leaderboard_id().data(), static_cast<int>(this->leaderboard_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nakama.api.ListLeaderboardRecordsAroundOwnerRequest.leaderboard_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.UInt32Value limit = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_limit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string owner_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_owner_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->owner_id().data(), static_cast<int>(this->owner_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nakama.api.ListLeaderboardRecordsAroundOwnerRequest.owner_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nakama.api.ListLeaderboardRecordsAroundOwnerRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nakama.api.ListLeaderboardRecordsAroundOwnerRequest)
  return false;
#undef DO_
}

void ListLeaderboardRecordsAroundOwnerRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nakama.api.ListLeaderboardRecordsAroundOwnerRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string leaderboard_id = 1;
  if (this->leaderboard_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->leaderboard_id().data(), static_cast<int>(this->leaderboard_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.ListLeaderboardRecordsAroundOwnerRequest.leaderboard_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->leaderboard_id(), output);
  }

  // .google.protobuf.UInt32Value limit = 2;
  if (this->has_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_limit(), output);
  }

  // string owner_id = 3;
  if (this->owner_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->owner_id().data(), static_cast<int>(this->owner_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.ListLeaderboardRecordsAroundOwnerRequest.owner_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->owner_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:nakama.api.ListLeaderboardRecordsAroundOwnerRequest)
}

::google::protobuf::uint8* ListLeaderboardRecordsAroundOwnerRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.ListLeaderboardRecordsAroundOwnerRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string leaderboard_id = 1;
  if (this->leaderboard_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->leaderboard_id().data(), static_cast<int>(this->leaderboard_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.ListLeaderboardRecordsAroundOwnerRequest.leaderboard_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->leaderboard_id(), target);
  }

  // .google.protobuf.UInt32Value limit = 2;
  if (this->has_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_limit(), deterministic, target);
  }

  // string owner_id = 3;
  if (this->owner_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->owner_id().data(), static_cast<int>(this->owner_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.ListLeaderboardRecordsAroundOwnerRequest.owner_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->owner_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.ListLeaderboardRecordsAroundOwnerRequest)
  return target;
}

size_t ListLeaderboardRecordsAroundOwnerRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.ListLeaderboardRecordsAroundOwnerRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string leaderboard_id = 1;
  if (this->leaderboard_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->leaderboard_id());
  }

  // string owner_id = 3;
  if (this->owner_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->owner_id());
  }

  // .google.protobuf.UInt32Value limit = 2;
  if (this->has_limit()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *limit_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListLeaderboardRecordsAroundOwnerRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.ListLeaderboardRecordsAroundOwnerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListLeaderboardRecordsAroundOwnerRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ListLeaderboardRecordsAroundOwnerRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.ListLeaderboardRecordsAroundOwnerRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.ListLeaderboardRecordsAroundOwnerRequest)
    MergeFrom(*source);
  }
}

void ListLeaderboardRecordsAroundOwnerRequest::MergeFrom(const ListLeaderboardRecordsAroundOwnerRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.ListLeaderboardRecordsAroundOwnerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.leaderboard_id().size() > 0) {

    leaderboard_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.leaderboard_id_);
  }
  if (from.owner_id().size() > 0) {

    owner_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.owner_id_);
  }
  if (from.has_limit()) {
    mutable_limit()->::google::protobuf::UInt32Value::MergeFrom(from.limit());
  }
}

void ListLeaderboardRecordsAroundOwnerRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.ListLeaderboardRecordsAroundOwnerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListLeaderboardRecordsAroundOwnerRequest::CopyFrom(const ListLeaderboardRecordsAroundOwnerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.ListLeaderboardRecordsAroundOwnerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListLeaderboardRecordsAroundOwnerRequest::IsInitialized() const {
  return true;
}

void ListLeaderboardRecordsAroundOwnerRequest::Swap(ListLeaderboardRecordsAroundOwnerRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListLeaderboardRecordsAroundOwnerRequest::InternalSwap(ListLeaderboardRecordsAroundOwnerRequest* other) {
  using std::swap;
  leaderboard_id_.Swap(&other->leaderboard_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  owner_id_.Swap(&other->owner_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(limit_, other->limit_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ListLeaderboardRecordsAroundOwnerRequest::GetMetadata() const {
  protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ListLeaderboardRecordsRequest::InitAsDefaultInstance() {
  ::nakama::api::_ListLeaderboardRecordsRequest_default_instance_._instance.get_mutable()->limit_ = const_cast< ::google::protobuf::Int32Value*>(
      ::google::protobuf::Int32Value::internal_default_instance());
}
void ListLeaderboardRecordsRequest::clear_limit() {
  if (GetArenaNoVirtual() == NULL && limit_ != NULL) {
    delete limit_;
  }
  limit_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListLeaderboardRecordsRequest::kLeaderboardIdFieldNumber;
const int ListLeaderboardRecordsRequest::kOwnerIdsFieldNumber;
const int ListLeaderboardRecordsRequest::kLimitFieldNumber;
const int ListLeaderboardRecordsRequest::kCursorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListLeaderboardRecordsRequest::ListLeaderboardRecordsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_ListLeaderboardRecordsRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:nakama.api.ListLeaderboardRecordsRequest)
}
ListLeaderboardRecordsRequest::ListLeaderboardRecordsRequest(const ListLeaderboardRecordsRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      owner_ids_(from.owner_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  leaderboard_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.leaderboard_id().size() > 0) {
    leaderboard_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.leaderboard_id_);
  }
  cursor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cursor().size() > 0) {
    cursor_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cursor_);
  }
  if (from.has_limit()) {
    limit_ = new ::google::protobuf::Int32Value(*from.limit_);
  } else {
    limit_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:nakama.api.ListLeaderboardRecordsRequest)
}

void ListLeaderboardRecordsRequest::SharedCtor() {
  leaderboard_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cursor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  limit_ = NULL;
}

ListLeaderboardRecordsRequest::~ListLeaderboardRecordsRequest() {
  // @@protoc_insertion_point(destructor:nakama.api.ListLeaderboardRecordsRequest)
  SharedDtor();
}

void ListLeaderboardRecordsRequest::SharedDtor() {
  leaderboard_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cursor_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete limit_;
}

void ListLeaderboardRecordsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ListLeaderboardRecordsRequest::descriptor() {
  ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ListLeaderboardRecordsRequest& ListLeaderboardRecordsRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_ListLeaderboardRecordsRequest.base);
  return *internal_default_instance();
}


void ListLeaderboardRecordsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.ListLeaderboardRecordsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  owner_ids_.Clear();
  leaderboard_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cursor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && limit_ != NULL) {
    delete limit_;
  }
  limit_ = NULL;
  _internal_metadata_.Clear();
}

bool ListLeaderboardRecordsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nakama.api.ListLeaderboardRecordsRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string leaderboard_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_leaderboard_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->leaderboard_id().data(), static_cast<int>(this->leaderboard_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nakama.api.ListLeaderboardRecordsRequest.leaderboard_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string owner_ids = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_owner_ids()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->owner_ids(this->owner_ids_size() - 1).data(),
            static_cast<int>(this->owner_ids(this->owner_ids_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nakama.api.ListLeaderboardRecordsRequest.owner_ids"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Int32Value limit = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_limit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cursor = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cursor()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cursor().data(), static_cast<int>(this->cursor().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nakama.api.ListLeaderboardRecordsRequest.cursor"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nakama.api.ListLeaderboardRecordsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nakama.api.ListLeaderboardRecordsRequest)
  return false;
#undef DO_
}

void ListLeaderboardRecordsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nakama.api.ListLeaderboardRecordsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string leaderboard_id = 1;
  if (this->leaderboard_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->leaderboard_id().data(), static_cast<int>(this->leaderboard_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.ListLeaderboardRecordsRequest.leaderboard_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->leaderboard_id(), output);
  }

  // repeated string owner_ids = 2;
  for (int i = 0, n = this->owner_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->owner_ids(i).data(), static_cast<int>(this->owner_ids(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.ListLeaderboardRecordsRequest.owner_ids");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->owner_ids(i), output);
  }

  // .google.protobuf.Int32Value limit = 3;
  if (this->has_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_limit(), output);
  }

  // string cursor = 4;
  if (this->cursor().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cursor().data(), static_cast<int>(this->cursor().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.ListLeaderboardRecordsRequest.cursor");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->cursor(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:nakama.api.ListLeaderboardRecordsRequest)
}

::google::protobuf::uint8* ListLeaderboardRecordsRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.ListLeaderboardRecordsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string leaderboard_id = 1;
  if (this->leaderboard_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->leaderboard_id().data(), static_cast<int>(this->leaderboard_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.ListLeaderboardRecordsRequest.leaderboard_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->leaderboard_id(), target);
  }

  // repeated string owner_ids = 2;
  for (int i = 0, n = this->owner_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->owner_ids(i).data(), static_cast<int>(this->owner_ids(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.ListLeaderboardRecordsRequest.owner_ids");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->owner_ids(i), target);
  }

  // .google.protobuf.Int32Value limit = 3;
  if (this->has_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_limit(), deterministic, target);
  }

  // string cursor = 4;
  if (this->cursor().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cursor().data(), static_cast<int>(this->cursor().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.ListLeaderboardRecordsRequest.cursor");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->cursor(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.ListLeaderboardRecordsRequest)
  return target;
}

size_t ListLeaderboardRecordsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.ListLeaderboardRecordsRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string owner_ids = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->owner_ids_size());
  for (int i = 0, n = this->owner_ids_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->owner_ids(i));
  }

  // string leaderboard_id = 1;
  if (this->leaderboard_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->leaderboard_id());
  }

  // string cursor = 4;
  if (this->cursor().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cursor());
  }

  // .google.protobuf.Int32Value limit = 3;
  if (this->has_limit()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *limit_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListLeaderboardRecordsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.ListLeaderboardRecordsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListLeaderboardRecordsRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ListLeaderboardRecordsRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.ListLeaderboardRecordsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.ListLeaderboardRecordsRequest)
    MergeFrom(*source);
  }
}

void ListLeaderboardRecordsRequest::MergeFrom(const ListLeaderboardRecordsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.ListLeaderboardRecordsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  owner_ids_.MergeFrom(from.owner_ids_);
  if (from.leaderboard_id().size() > 0) {

    leaderboard_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.leaderboard_id_);
  }
  if (from.cursor().size() > 0) {

    cursor_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cursor_);
  }
  if (from.has_limit()) {
    mutable_limit()->::google::protobuf::Int32Value::MergeFrom(from.limit());
  }
}

void ListLeaderboardRecordsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.ListLeaderboardRecordsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListLeaderboardRecordsRequest::CopyFrom(const ListLeaderboardRecordsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.ListLeaderboardRecordsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListLeaderboardRecordsRequest::IsInitialized() const {
  return true;
}

void ListLeaderboardRecordsRequest::Swap(ListLeaderboardRecordsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListLeaderboardRecordsRequest::InternalSwap(ListLeaderboardRecordsRequest* other) {
  using std::swap;
  owner_ids_.InternalSwap(CastToBase(&other->owner_ids_));
  leaderboard_id_.Swap(&other->leaderboard_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  cursor_.Swap(&other->cursor_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(limit_, other->limit_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ListLeaderboardRecordsRequest::GetMetadata() const {
  protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ListMatchesRequest::InitAsDefaultInstance() {
  ::nakama::api::_ListMatchesRequest_default_instance_._instance.get_mutable()->limit_ = const_cast< ::google::protobuf::Int32Value*>(
      ::google::protobuf::Int32Value::internal_default_instance());
  ::nakama::api::_ListMatchesRequest_default_instance_._instance.get_mutable()->authoritative_ = const_cast< ::google::protobuf::BoolValue*>(
      ::google::protobuf::BoolValue::internal_default_instance());
  ::nakama::api::_ListMatchesRequest_default_instance_._instance.get_mutable()->label_ = const_cast< ::google::protobuf::StringValue*>(
      ::google::protobuf::StringValue::internal_default_instance());
  ::nakama::api::_ListMatchesRequest_default_instance_._instance.get_mutable()->min_size_ = const_cast< ::google::protobuf::Int32Value*>(
      ::google::protobuf::Int32Value::internal_default_instance());
  ::nakama::api::_ListMatchesRequest_default_instance_._instance.get_mutable()->max_size_ = const_cast< ::google::protobuf::Int32Value*>(
      ::google::protobuf::Int32Value::internal_default_instance());
  ::nakama::api::_ListMatchesRequest_default_instance_._instance.get_mutable()->query_ = const_cast< ::google::protobuf::StringValue*>(
      ::google::protobuf::StringValue::internal_default_instance());
}
void ListMatchesRequest::clear_limit() {
  if (GetArenaNoVirtual() == NULL && limit_ != NULL) {
    delete limit_;
  }
  limit_ = NULL;
}
void ListMatchesRequest::clear_authoritative() {
  if (GetArenaNoVirtual() == NULL && authoritative_ != NULL) {
    delete authoritative_;
  }
  authoritative_ = NULL;
}
void ListMatchesRequest::clear_label() {
  if (GetArenaNoVirtual() == NULL && label_ != NULL) {
    delete label_;
  }
  label_ = NULL;
}
void ListMatchesRequest::clear_min_size() {
  if (GetArenaNoVirtual() == NULL && min_size_ != NULL) {
    delete min_size_;
  }
  min_size_ = NULL;
}
void ListMatchesRequest::clear_max_size() {
  if (GetArenaNoVirtual() == NULL && max_size_ != NULL) {
    delete max_size_;
  }
  max_size_ = NULL;
}
void ListMatchesRequest::clear_query() {
  if (GetArenaNoVirtual() == NULL && query_ != NULL) {
    delete query_;
  }
  query_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListMatchesRequest::kLimitFieldNumber;
const int ListMatchesRequest::kAuthoritativeFieldNumber;
const int ListMatchesRequest::kLabelFieldNumber;
const int ListMatchesRequest::kMinSizeFieldNumber;
const int ListMatchesRequest::kMaxSizeFieldNumber;
const int ListMatchesRequest::kQueryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListMatchesRequest::ListMatchesRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_ListMatchesRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:nakama.api.ListMatchesRequest)
}
ListMatchesRequest::ListMatchesRequest(const ListMatchesRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_limit()) {
    limit_ = new ::google::protobuf::Int32Value(*from.limit_);
  } else {
    limit_ = NULL;
  }
  if (from.has_authoritative()) {
    authoritative_ = new ::google::protobuf::BoolValue(*from.authoritative_);
  } else {
    authoritative_ = NULL;
  }
  if (from.has_label()) {
    label_ = new ::google::protobuf::StringValue(*from.label_);
  } else {
    label_ = NULL;
  }
  if (from.has_min_size()) {
    min_size_ = new ::google::protobuf::Int32Value(*from.min_size_);
  } else {
    min_size_ = NULL;
  }
  if (from.has_max_size()) {
    max_size_ = new ::google::protobuf::Int32Value(*from.max_size_);
  } else {
    max_size_ = NULL;
  }
  if (from.has_query()) {
    query_ = new ::google::protobuf::StringValue(*from.query_);
  } else {
    query_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:nakama.api.ListMatchesRequest)
}

void ListMatchesRequest::SharedCtor() {
  ::memset(&limit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&query_) -
      reinterpret_cast<char*>(&limit_)) + sizeof(query_));
}

ListMatchesRequest::~ListMatchesRequest() {
  // @@protoc_insertion_point(destructor:nakama.api.ListMatchesRequest)
  SharedDtor();
}

void ListMatchesRequest::SharedDtor() {
  if (this != internal_default_instance()) delete limit_;
  if (this != internal_default_instance()) delete authoritative_;
  if (this != internal_default_instance()) delete label_;
  if (this != internal_default_instance()) delete min_size_;
  if (this != internal_default_instance()) delete max_size_;
  if (this != internal_default_instance()) delete query_;
}

void ListMatchesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ListMatchesRequest::descriptor() {
  ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ListMatchesRequest& ListMatchesRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_ListMatchesRequest.base);
  return *internal_default_instance();
}


void ListMatchesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.ListMatchesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && limit_ != NULL) {
    delete limit_;
  }
  limit_ = NULL;
  if (GetArenaNoVirtual() == NULL && authoritative_ != NULL) {
    delete authoritative_;
  }
  authoritative_ = NULL;
  if (GetArenaNoVirtual() == NULL && label_ != NULL) {
    delete label_;
  }
  label_ = NULL;
  if (GetArenaNoVirtual() == NULL && min_size_ != NULL) {
    delete min_size_;
  }
  min_size_ = NULL;
  if (GetArenaNoVirtual() == NULL && max_size_ != NULL) {
    delete max_size_;
  }
  max_size_ = NULL;
  if (GetArenaNoVirtual() == NULL && query_ != NULL) {
    delete query_;
  }
  query_ = NULL;
  _internal_metadata_.Clear();
}

bool ListMatchesRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nakama.api.ListMatchesRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.protobuf.Int32Value limit = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_limit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.BoolValue authoritative = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_authoritative()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.StringValue label = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_label()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Int32Value min_size = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_min_size()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Int32Value max_size = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_max_size()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.StringValue query = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_query()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nakama.api.ListMatchesRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nakama.api.ListMatchesRequest)
  return false;
#undef DO_
}

void ListMatchesRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nakama.api.ListMatchesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Int32Value limit = 1;
  if (this->has_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_limit(), output);
  }

  // .google.protobuf.BoolValue authoritative = 2;
  if (this->has_authoritative()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_authoritative(), output);
  }

  // .google.protobuf.StringValue label = 3;
  if (this->has_label()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_label(), output);
  }

  // .google.protobuf.Int32Value min_size = 4;
  if (this->has_min_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_min_size(), output);
  }

  // .google.protobuf.Int32Value max_size = 5;
  if (this->has_max_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_max_size(), output);
  }

  // .google.protobuf.StringValue query = 6;
  if (this->has_query()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_query(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:nakama.api.ListMatchesRequest)
}

::google::protobuf::uint8* ListMatchesRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.ListMatchesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Int32Value limit = 1;
  if (this->has_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_limit(), deterministic, target);
  }

  // .google.protobuf.BoolValue authoritative = 2;
  if (this->has_authoritative()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_authoritative(), deterministic, target);
  }

  // .google.protobuf.StringValue label = 3;
  if (this->has_label()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_label(), deterministic, target);
  }

  // .google.protobuf.Int32Value min_size = 4;
  if (this->has_min_size()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_min_size(), deterministic, target);
  }

  // .google.protobuf.Int32Value max_size = 5;
  if (this->has_max_size()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_max_size(), deterministic, target);
  }

  // .google.protobuf.StringValue query = 6;
  if (this->has_query()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_query(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.ListMatchesRequest)
  return target;
}

size_t ListMatchesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.ListMatchesRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .google.protobuf.Int32Value limit = 1;
  if (this->has_limit()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *limit_);
  }

  // .google.protobuf.BoolValue authoritative = 2;
  if (this->has_authoritative()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *authoritative_);
  }

  // .google.protobuf.StringValue label = 3;
  if (this->has_label()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *label_);
  }

  // .google.protobuf.Int32Value min_size = 4;
  if (this->has_min_size()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *min_size_);
  }

  // .google.protobuf.Int32Value max_size = 5;
  if (this->has_max_size()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *max_size_);
  }

  // .google.protobuf.StringValue query = 6;
  if (this->has_query()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *query_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListMatchesRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.ListMatchesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListMatchesRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ListMatchesRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.ListMatchesRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.ListMatchesRequest)
    MergeFrom(*source);
  }
}

void ListMatchesRequest::MergeFrom(const ListMatchesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.ListMatchesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_limit()) {
    mutable_limit()->::google::protobuf::Int32Value::MergeFrom(from.limit());
  }
  if (from.has_authoritative()) {
    mutable_authoritative()->::google::protobuf::BoolValue::MergeFrom(from.authoritative());
  }
  if (from.has_label()) {
    mutable_label()->::google::protobuf::StringValue::MergeFrom(from.label());
  }
  if (from.has_min_size()) {
    mutable_min_size()->::google::protobuf::Int32Value::MergeFrom(from.min_size());
  }
  if (from.has_max_size()) {
    mutable_max_size()->::google::protobuf::Int32Value::MergeFrom(from.max_size());
  }
  if (from.has_query()) {
    mutable_query()->::google::protobuf::StringValue::MergeFrom(from.query());
  }
}

void ListMatchesRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.ListMatchesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListMatchesRequest::CopyFrom(const ListMatchesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.ListMatchesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListMatchesRequest::IsInitialized() const {
  return true;
}

void ListMatchesRequest::Swap(ListMatchesRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListMatchesRequest::InternalSwap(ListMatchesRequest* other) {
  using std::swap;
  swap(limit_, other->limit_);
  swap(authoritative_, other->authoritative_);
  swap(label_, other->label_);
  swap(min_size_, other->min_size_);
  swap(max_size_, other->max_size_);
  swap(query_, other->query_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ListMatchesRequest::GetMetadata() const {
  protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ListNotificationsRequest::InitAsDefaultInstance() {
  ::nakama::api::_ListNotificationsRequest_default_instance_._instance.get_mutable()->limit_ = const_cast< ::google::protobuf::Int32Value*>(
      ::google::protobuf::Int32Value::internal_default_instance());
}
void ListNotificationsRequest::clear_limit() {
  if (GetArenaNoVirtual() == NULL && limit_ != NULL) {
    delete limit_;
  }
  limit_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListNotificationsRequest::kLimitFieldNumber;
const int ListNotificationsRequest::kCacheableCursorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListNotificationsRequest::ListNotificationsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_ListNotificationsRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:nakama.api.ListNotificationsRequest)
}
ListNotificationsRequest::ListNotificationsRequest(const ListNotificationsRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cacheable_cursor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cacheable_cursor().size() > 0) {
    cacheable_cursor_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cacheable_cursor_);
  }
  if (from.has_limit()) {
    limit_ = new ::google::protobuf::Int32Value(*from.limit_);
  } else {
    limit_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:nakama.api.ListNotificationsRequest)
}

void ListNotificationsRequest::SharedCtor() {
  cacheable_cursor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  limit_ = NULL;
}

ListNotificationsRequest::~ListNotificationsRequest() {
  // @@protoc_insertion_point(destructor:nakama.api.ListNotificationsRequest)
  SharedDtor();
}

void ListNotificationsRequest::SharedDtor() {
  cacheable_cursor_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete limit_;
}

void ListNotificationsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ListNotificationsRequest::descriptor() {
  ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ListNotificationsRequest& ListNotificationsRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_ListNotificationsRequest.base);
  return *internal_default_instance();
}


void ListNotificationsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.ListNotificationsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cacheable_cursor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && limit_ != NULL) {
    delete limit_;
  }
  limit_ = NULL;
  _internal_metadata_.Clear();
}

bool ListNotificationsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nakama.api.ListNotificationsRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.protobuf.Int32Value limit = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_limit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cacheable_cursor = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cacheable_cursor()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cacheable_cursor().data(), static_cast<int>(this->cacheable_cursor().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nakama.api.ListNotificationsRequest.cacheable_cursor"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nakama.api.ListNotificationsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nakama.api.ListNotificationsRequest)
  return false;
#undef DO_
}

void ListNotificationsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nakama.api.ListNotificationsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Int32Value limit = 1;
  if (this->has_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_limit(), output);
  }

  // string cacheable_cursor = 2;
  if (this->cacheable_cursor().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cacheable_cursor().data(), static_cast<int>(this->cacheable_cursor().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.ListNotificationsRequest.cacheable_cursor");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->cacheable_cursor(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:nakama.api.ListNotificationsRequest)
}

::google::protobuf::uint8* ListNotificationsRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.ListNotificationsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Int32Value limit = 1;
  if (this->has_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_limit(), deterministic, target);
  }

  // string cacheable_cursor = 2;
  if (this->cacheable_cursor().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cacheable_cursor().data(), static_cast<int>(this->cacheable_cursor().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.ListNotificationsRequest.cacheable_cursor");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->cacheable_cursor(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.ListNotificationsRequest)
  return target;
}

size_t ListNotificationsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.ListNotificationsRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string cacheable_cursor = 2;
  if (this->cacheable_cursor().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cacheable_cursor());
  }

  // .google.protobuf.Int32Value limit = 1;
  if (this->has_limit()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *limit_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListNotificationsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.ListNotificationsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListNotificationsRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ListNotificationsRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.ListNotificationsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.ListNotificationsRequest)
    MergeFrom(*source);
  }
}

void ListNotificationsRequest::MergeFrom(const ListNotificationsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.ListNotificationsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cacheable_cursor().size() > 0) {

    cacheable_cursor_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cacheable_cursor_);
  }
  if (from.has_limit()) {
    mutable_limit()->::google::protobuf::Int32Value::MergeFrom(from.limit());
  }
}

void ListNotificationsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.ListNotificationsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListNotificationsRequest::CopyFrom(const ListNotificationsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.ListNotificationsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListNotificationsRequest::IsInitialized() const {
  return true;
}

void ListNotificationsRequest::Swap(ListNotificationsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListNotificationsRequest::InternalSwap(ListNotificationsRequest* other) {
  using std::swap;
  cacheable_cursor_.Swap(&other->cacheable_cursor_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(limit_, other->limit_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ListNotificationsRequest::GetMetadata() const {
  protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ListStorageObjectsRequest::InitAsDefaultInstance() {
  ::nakama::api::_ListStorageObjectsRequest_default_instance_._instance.get_mutable()->limit_ = const_cast< ::google::protobuf::Int32Value*>(
      ::google::protobuf::Int32Value::internal_default_instance());
}
void ListStorageObjectsRequest::clear_limit() {
  if (GetArenaNoVirtual() == NULL && limit_ != NULL) {
    delete limit_;
  }
  limit_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListStorageObjectsRequest::kUserIdFieldNumber;
const int ListStorageObjectsRequest::kCollectionFieldNumber;
const int ListStorageObjectsRequest::kLimitFieldNumber;
const int ListStorageObjectsRequest::kCursorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListStorageObjectsRequest::ListStorageObjectsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_ListStorageObjectsRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:nakama.api.ListStorageObjectsRequest)
}
ListStorageObjectsRequest::ListStorageObjectsRequest(const ListStorageObjectsRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.user_id().size() > 0) {
    user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
  collection_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.collection().size() > 0) {
    collection_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.collection_);
  }
  cursor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cursor().size() > 0) {
    cursor_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cursor_);
  }
  if (from.has_limit()) {
    limit_ = new ::google::protobuf::Int32Value(*from.limit_);
  } else {
    limit_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:nakama.api.ListStorageObjectsRequest)
}

void ListStorageObjectsRequest::SharedCtor() {
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  collection_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cursor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  limit_ = NULL;
}

ListStorageObjectsRequest::~ListStorageObjectsRequest() {
  // @@protoc_insertion_point(destructor:nakama.api.ListStorageObjectsRequest)
  SharedDtor();
}

void ListStorageObjectsRequest::SharedDtor() {
  user_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  collection_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cursor_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete limit_;
}

void ListStorageObjectsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ListStorageObjectsRequest::descriptor() {
  ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ListStorageObjectsRequest& ListStorageObjectsRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_ListStorageObjectsRequest.base);
  return *internal_default_instance();
}


void ListStorageObjectsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.ListStorageObjectsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  collection_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cursor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && limit_ != NULL) {
    delete limit_;
  }
  limit_ = NULL;
  _internal_metadata_.Clear();
}

bool ListStorageObjectsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nakama.api.ListStorageObjectsRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string user_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user_id().data(), static_cast<int>(this->user_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nakama.api.ListStorageObjectsRequest.user_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string collection = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_collection()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->collection().data(), static_cast<int>(this->collection().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nakama.api.ListStorageObjectsRequest.collection"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Int32Value limit = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_limit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cursor = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cursor()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cursor().data(), static_cast<int>(this->cursor().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nakama.api.ListStorageObjectsRequest.cursor"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nakama.api.ListStorageObjectsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nakama.api.ListStorageObjectsRequest)
  return false;
#undef DO_
}

void ListStorageObjectsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nakama.api.ListStorageObjectsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_id = 1;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), static_cast<int>(this->user_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.ListStorageObjectsRequest.user_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->user_id(), output);
  }

  // string collection = 2;
  if (this->collection().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->collection().data(), static_cast<int>(this->collection().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.ListStorageObjectsRequest.collection");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->collection(), output);
  }

  // .google.protobuf.Int32Value limit = 3;
  if (this->has_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_limit(), output);
  }

  // string cursor = 4;
  if (this->cursor().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cursor().data(), static_cast<int>(this->cursor().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.ListStorageObjectsRequest.cursor");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->cursor(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:nakama.api.ListStorageObjectsRequest)
}

::google::protobuf::uint8* ListStorageObjectsRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.ListStorageObjectsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_id = 1;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), static_cast<int>(this->user_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.ListStorageObjectsRequest.user_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user_id(), target);
  }

  // string collection = 2;
  if (this->collection().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->collection().data(), static_cast<int>(this->collection().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.ListStorageObjectsRequest.collection");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->collection(), target);
  }

  // .google.protobuf.Int32Value limit = 3;
  if (this->has_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_limit(), deterministic, target);
  }

  // string cursor = 4;
  if (this->cursor().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cursor().data(), static_cast<int>(this->cursor().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.ListStorageObjectsRequest.cursor");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->cursor(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.ListStorageObjectsRequest)
  return target;
}

size_t ListStorageObjectsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.ListStorageObjectsRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string user_id = 1;
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_id());
  }

  // string collection = 2;
  if (this->collection().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->collection());
  }

  // string cursor = 4;
  if (this->cursor().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cursor());
  }

  // .google.protobuf.Int32Value limit = 3;
  if (this->has_limit()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *limit_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListStorageObjectsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.ListStorageObjectsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListStorageObjectsRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ListStorageObjectsRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.ListStorageObjectsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.ListStorageObjectsRequest)
    MergeFrom(*source);
  }
}

void ListStorageObjectsRequest::MergeFrom(const ListStorageObjectsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.ListStorageObjectsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_id().size() > 0) {

    user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
  if (from.collection().size() > 0) {

    collection_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.collection_);
  }
  if (from.cursor().size() > 0) {

    cursor_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cursor_);
  }
  if (from.has_limit()) {
    mutable_limit()->::google::protobuf::Int32Value::MergeFrom(from.limit());
  }
}

void ListStorageObjectsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.ListStorageObjectsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListStorageObjectsRequest::CopyFrom(const ListStorageObjectsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.ListStorageObjectsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListStorageObjectsRequest::IsInitialized() const {
  return true;
}

void ListStorageObjectsRequest::Swap(ListStorageObjectsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListStorageObjectsRequest::InternalSwap(ListStorageObjectsRequest* other) {
  using std::swap;
  user_id_.Swap(&other->user_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  collection_.Swap(&other->collection_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  cursor_.Swap(&other->cursor_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(limit_, other->limit_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ListStorageObjectsRequest::GetMetadata() const {
  protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ListTournamentRecordsAroundOwnerRequest::InitAsDefaultInstance() {
  ::nakama::api::_ListTournamentRecordsAroundOwnerRequest_default_instance_._instance.get_mutable()->limit_ = const_cast< ::google::protobuf::UInt32Value*>(
      ::google::protobuf::UInt32Value::internal_default_instance());
}
void ListTournamentRecordsAroundOwnerRequest::clear_limit() {
  if (GetArenaNoVirtual() == NULL && limit_ != NULL) {
    delete limit_;
  }
  limit_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListTournamentRecordsAroundOwnerRequest::kTournamentIdFieldNumber;
const int ListTournamentRecordsAroundOwnerRequest::kLimitFieldNumber;
const int ListTournamentRecordsAroundOwnerRequest::kOwnerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListTournamentRecordsAroundOwnerRequest::ListTournamentRecordsAroundOwnerRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_ListTournamentRecordsAroundOwnerRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:nakama.api.ListTournamentRecordsAroundOwnerRequest)
}
ListTournamentRecordsAroundOwnerRequest::ListTournamentRecordsAroundOwnerRequest(const ListTournamentRecordsAroundOwnerRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tournament_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.tournament_id().size() > 0) {
    tournament_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tournament_id_);
  }
  owner_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.owner_id().size() > 0) {
    owner_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.owner_id_);
  }
  if (from.has_limit()) {
    limit_ = new ::google::protobuf::UInt32Value(*from.limit_);
  } else {
    limit_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:nakama.api.ListTournamentRecordsAroundOwnerRequest)
}

void ListTournamentRecordsAroundOwnerRequest::SharedCtor() {
  tournament_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  owner_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  limit_ = NULL;
}

ListTournamentRecordsAroundOwnerRequest::~ListTournamentRecordsAroundOwnerRequest() {
  // @@protoc_insertion_point(destructor:nakama.api.ListTournamentRecordsAroundOwnerRequest)
  SharedDtor();
}

void ListTournamentRecordsAroundOwnerRequest::SharedDtor() {
  tournament_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  owner_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete limit_;
}

void ListTournamentRecordsAroundOwnerRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ListTournamentRecordsAroundOwnerRequest::descriptor() {
  ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ListTournamentRecordsAroundOwnerRequest& ListTournamentRecordsAroundOwnerRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_ListTournamentRecordsAroundOwnerRequest.base);
  return *internal_default_instance();
}


void ListTournamentRecordsAroundOwnerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.ListTournamentRecordsAroundOwnerRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tournament_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  owner_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && limit_ != NULL) {
    delete limit_;
  }
  limit_ = NULL;
  _internal_metadata_.Clear();
}

bool ListTournamentRecordsAroundOwnerRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nakama.api.ListTournamentRecordsAroundOwnerRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string tournament_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tournament_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tournament_id().data(), static_cast<int>(this->tournament_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nakama.api.ListTournamentRecordsAroundOwnerRequest.tournament_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.UInt32Value limit = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_limit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string owner_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_owner_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->owner_id().data(), static_cast<int>(this->owner_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nakama.api.ListTournamentRecordsAroundOwnerRequest.owner_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nakama.api.ListTournamentRecordsAroundOwnerRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nakama.api.ListTournamentRecordsAroundOwnerRequest)
  return false;
#undef DO_
}

void ListTournamentRecordsAroundOwnerRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nakama.api.ListTournamentRecordsAroundOwnerRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tournament_id = 1;
  if (this->tournament_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tournament_id().data(), static_cast<int>(this->tournament_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.ListTournamentRecordsAroundOwnerRequest.tournament_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->tournament_id(), output);
  }

  // .google.protobuf.UInt32Value limit = 2;
  if (this->has_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_limit(), output);
  }

  // string owner_id = 3;
  if (this->owner_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->owner_id().data(), static_cast<int>(this->owner_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.ListTournamentRecordsAroundOwnerRequest.owner_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->owner_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:nakama.api.ListTournamentRecordsAroundOwnerRequest)
}

::google::protobuf::uint8* ListTournamentRecordsAroundOwnerRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.ListTournamentRecordsAroundOwnerRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tournament_id = 1;
  if (this->tournament_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tournament_id().data(), static_cast<int>(this->tournament_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.ListTournamentRecordsAroundOwnerRequest.tournament_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->tournament_id(), target);
  }

  // .google.protobuf.UInt32Value limit = 2;
  if (this->has_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_limit(), deterministic, target);
  }

  // string owner_id = 3;
  if (this->owner_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->owner_id().data(), static_cast<int>(this->owner_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.ListTournamentRecordsAroundOwnerRequest.owner_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->owner_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.ListTournamentRecordsAroundOwnerRequest)
  return target;
}

size_t ListTournamentRecordsAroundOwnerRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.ListTournamentRecordsAroundOwnerRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string tournament_id = 1;
  if (this->tournament_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tournament_id());
  }

  // string owner_id = 3;
  if (this->owner_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->owner_id());
  }

  // .google.protobuf.UInt32Value limit = 2;
  if (this->has_limit()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *limit_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListTournamentRecordsAroundOwnerRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.ListTournamentRecordsAroundOwnerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListTournamentRecordsAroundOwnerRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ListTournamentRecordsAroundOwnerRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.ListTournamentRecordsAroundOwnerRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.ListTournamentRecordsAroundOwnerRequest)
    MergeFrom(*source);
  }
}

void ListTournamentRecordsAroundOwnerRequest::MergeFrom(const ListTournamentRecordsAroundOwnerRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.ListTournamentRecordsAroundOwnerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.tournament_id().size() > 0) {

    tournament_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tournament_id_);
  }
  if (from.owner_id().size() > 0) {

    owner_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.owner_id_);
  }
  if (from.has_limit()) {
    mutable_limit()->::google::protobuf::UInt32Value::MergeFrom(from.limit());
  }
}

void ListTournamentRecordsAroundOwnerRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.ListTournamentRecordsAroundOwnerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListTournamentRecordsAroundOwnerRequest::CopyFrom(const ListTournamentRecordsAroundOwnerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.ListTournamentRecordsAroundOwnerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListTournamentRecordsAroundOwnerRequest::IsInitialized() const {
  return true;
}

void ListTournamentRecordsAroundOwnerRequest::Swap(ListTournamentRecordsAroundOwnerRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListTournamentRecordsAroundOwnerRequest::InternalSwap(ListTournamentRecordsAroundOwnerRequest* other) {
  using std::swap;
  tournament_id_.Swap(&other->tournament_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  owner_id_.Swap(&other->owner_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(limit_, other->limit_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ListTournamentRecordsAroundOwnerRequest::GetMetadata() const {
  protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ListTournamentRecordsRequest::InitAsDefaultInstance() {
  ::nakama::api::_ListTournamentRecordsRequest_default_instance_._instance.get_mutable()->limit_ = const_cast< ::google::protobuf::Int32Value*>(
      ::google::protobuf::Int32Value::internal_default_instance());
}
void ListTournamentRecordsRequest::clear_limit() {
  if (GetArenaNoVirtual() == NULL && limit_ != NULL) {
    delete limit_;
  }
  limit_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListTournamentRecordsRequest::kTournamentIdFieldNumber;
const int ListTournamentRecordsRequest::kOwnerIdsFieldNumber;
const int ListTournamentRecordsRequest::kLimitFieldNumber;
const int ListTournamentRecordsRequest::kCursorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListTournamentRecordsRequest::ListTournamentRecordsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_ListTournamentRecordsRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:nakama.api.ListTournamentRecordsRequest)
}
ListTournamentRecordsRequest::ListTournamentRecordsRequest(const ListTournamentRecordsRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      owner_ids_(from.owner_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tournament_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.tournament_id().size() > 0) {
    tournament_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tournament_id_);
  }
  cursor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cursor().size() > 0) {
    cursor_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cursor_);
  }
  if (from.has_limit()) {
    limit_ = new ::google::protobuf::Int32Value(*from.limit_);
  } else {
    limit_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:nakama.api.ListTournamentRecordsRequest)
}

void ListTournamentRecordsRequest::SharedCtor() {
  tournament_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cursor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  limit_ = NULL;
}

ListTournamentRecordsRequest::~ListTournamentRecordsRequest() {
  // @@protoc_insertion_point(destructor:nakama.api.ListTournamentRecordsRequest)
  SharedDtor();
}

void ListTournamentRecordsRequest::SharedDtor() {
  tournament_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cursor_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete limit_;
}

void ListTournamentRecordsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ListTournamentRecordsRequest::descriptor() {
  ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ListTournamentRecordsRequest& ListTournamentRecordsRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_ListTournamentRecordsRequest.base);
  return *internal_default_instance();
}


void ListTournamentRecordsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.ListTournamentRecordsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  owner_ids_.Clear();
  tournament_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cursor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && limit_ != NULL) {
    delete limit_;
  }
  limit_ = NULL;
  _internal_metadata_.Clear();
}

bool ListTournamentRecordsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nakama.api.ListTournamentRecordsRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string tournament_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tournament_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tournament_id().data(), static_cast<int>(this->tournament_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nakama.api.ListTournamentRecordsRequest.tournament_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string owner_ids = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_owner_ids()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->owner_ids(this->owner_ids_size() - 1).data(),
            static_cast<int>(this->owner_ids(this->owner_ids_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nakama.api.ListTournamentRecordsRequest.owner_ids"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Int32Value limit = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_limit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cursor = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cursor()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cursor().data(), static_cast<int>(this->cursor().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nakama.api.ListTournamentRecordsRequest.cursor"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nakama.api.ListTournamentRecordsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nakama.api.ListTournamentRecordsRequest)
  return false;
#undef DO_
}

void ListTournamentRecordsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nakama.api.ListTournamentRecordsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tournament_id = 1;
  if (this->tournament_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tournament_id().data(), static_cast<int>(this->tournament_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.ListTournamentRecordsRequest.tournament_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->tournament_id(), output);
  }

  // repeated string owner_ids = 2;
  for (int i = 0, n = this->owner_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->owner_ids(i).data(), static_cast<int>(this->owner_ids(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.ListTournamentRecordsRequest.owner_ids");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->owner_ids(i), output);
  }

  // .google.protobuf.Int32Value limit = 3;
  if (this->has_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_limit(), output);
  }

  // string cursor = 4;
  if (this->cursor().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cursor().data(), static_cast<int>(this->cursor().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.ListTournamentRecordsRequest.cursor");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->cursor(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:nakama.api.ListTournamentRecordsRequest)
}

::google::protobuf::uint8* ListTournamentRecordsRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.ListTournamentRecordsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tournament_id = 1;
  if (this->tournament_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tournament_id().data(), static_cast<int>(this->tournament_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.ListTournamentRecordsRequest.tournament_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->tournament_id(), target);
  }

  // repeated string owner_ids = 2;
  for (int i = 0, n = this->owner_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->owner_ids(i).data(), static_cast<int>(this->owner_ids(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.ListTournamentRecordsRequest.owner_ids");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->owner_ids(i), target);
  }

  // .google.protobuf.Int32Value limit = 3;
  if (this->has_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_limit(), deterministic, target);
  }

  // string cursor = 4;
  if (this->cursor().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cursor().data(), static_cast<int>(this->cursor().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.ListTournamentRecordsRequest.cursor");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->cursor(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.ListTournamentRecordsRequest)
  return target;
}

size_t ListTournamentRecordsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.ListTournamentRecordsRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string owner_ids = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->owner_ids_size());
  for (int i = 0, n = this->owner_ids_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->owner_ids(i));
  }

  // string tournament_id = 1;
  if (this->tournament_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tournament_id());
  }

  // string cursor = 4;
  if (this->cursor().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cursor());
  }

  // .google.protobuf.Int32Value limit = 3;
  if (this->has_limit()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *limit_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListTournamentRecordsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.ListTournamentRecordsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListTournamentRecordsRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ListTournamentRecordsRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.ListTournamentRecordsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.ListTournamentRecordsRequest)
    MergeFrom(*source);
  }
}

void ListTournamentRecordsRequest::MergeFrom(const ListTournamentRecordsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.ListTournamentRecordsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  owner_ids_.MergeFrom(from.owner_ids_);
  if (from.tournament_id().size() > 0) {

    tournament_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tournament_id_);
  }
  if (from.cursor().size() > 0) {

    cursor_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cursor_);
  }
  if (from.has_limit()) {
    mutable_limit()->::google::protobuf::Int32Value::MergeFrom(from.limit());
  }
}

void ListTournamentRecordsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.ListTournamentRecordsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListTournamentRecordsRequest::CopyFrom(const ListTournamentRecordsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.ListTournamentRecordsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListTournamentRecordsRequest::IsInitialized() const {
  return true;
}

void ListTournamentRecordsRequest::Swap(ListTournamentRecordsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListTournamentRecordsRequest::InternalSwap(ListTournamentRecordsRequest* other) {
  using std::swap;
  owner_ids_.InternalSwap(CastToBase(&other->owner_ids_));
  tournament_id_.Swap(&other->tournament_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  cursor_.Swap(&other->cursor_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(limit_, other->limit_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ListTournamentRecordsRequest::GetMetadata() const {
  protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ListTournamentsRequest::InitAsDefaultInstance() {
  ::nakama::api::_ListTournamentsRequest_default_instance_._instance.get_mutable()->category_start_ = const_cast< ::google::protobuf::UInt32Value*>(
      ::google::protobuf::UInt32Value::internal_default_instance());
  ::nakama::api::_ListTournamentsRequest_default_instance_._instance.get_mutable()->category_end_ = const_cast< ::google::protobuf::UInt32Value*>(
      ::google::protobuf::UInt32Value::internal_default_instance());
  ::nakama::api::_ListTournamentsRequest_default_instance_._instance.get_mutable()->start_time_ = const_cast< ::google::protobuf::UInt32Value*>(
      ::google::protobuf::UInt32Value::internal_default_instance());
  ::nakama::api::_ListTournamentsRequest_default_instance_._instance.get_mutable()->end_time_ = const_cast< ::google::protobuf::UInt32Value*>(
      ::google::protobuf::UInt32Value::internal_default_instance());
  ::nakama::api::_ListTournamentsRequest_default_instance_._instance.get_mutable()->limit_ = const_cast< ::google::protobuf::Int32Value*>(
      ::google::protobuf::Int32Value::internal_default_instance());
}
void ListTournamentsRequest::clear_category_start() {
  if (GetArenaNoVirtual() == NULL && category_start_ != NULL) {
    delete category_start_;
  }
  category_start_ = NULL;
}
void ListTournamentsRequest::clear_category_end() {
  if (GetArenaNoVirtual() == NULL && category_end_ != NULL) {
    delete category_end_;
  }
  category_end_ = NULL;
}
void ListTournamentsRequest::clear_start_time() {
  if (GetArenaNoVirtual() == NULL && start_time_ != NULL) {
    delete start_time_;
  }
  start_time_ = NULL;
}
void ListTournamentsRequest::clear_end_time() {
  if (GetArenaNoVirtual() == NULL && end_time_ != NULL) {
    delete end_time_;
  }
  end_time_ = NULL;
}
void ListTournamentsRequest::clear_limit() {
  if (GetArenaNoVirtual() == NULL && limit_ != NULL) {
    delete limit_;
  }
  limit_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListTournamentsRequest::kCategoryStartFieldNumber;
const int ListTournamentsRequest::kCategoryEndFieldNumber;
const int ListTournamentsRequest::kStartTimeFieldNumber;
const int ListTournamentsRequest::kEndTimeFieldNumber;
const int ListTournamentsRequest::kLimitFieldNumber;
const int ListTournamentsRequest::kCursorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListTournamentsRequest::ListTournamentsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_ListTournamentsRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:nakama.api.ListTournamentsRequest)
}
ListTournamentsRequest::ListTournamentsRequest(const ListTournamentsRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cursor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cursor().size() > 0) {
    cursor_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cursor_);
  }
  if (from.has_category_start()) {
    category_start_ = new ::google::protobuf::UInt32Value(*from.category_start_);
  } else {
    category_start_ = NULL;
  }
  if (from.has_category_end()) {
    category_end_ = new ::google::protobuf::UInt32Value(*from.category_end_);
  } else {
    category_end_ = NULL;
  }
  if (from.has_start_time()) {
    start_time_ = new ::google::protobuf::UInt32Value(*from.start_time_);
  } else {
    start_time_ = NULL;
  }
  if (from.has_end_time()) {
    end_time_ = new ::google::protobuf::UInt32Value(*from.end_time_);
  } else {
    end_time_ = NULL;
  }
  if (from.has_limit()) {
    limit_ = new ::google::protobuf::Int32Value(*from.limit_);
  } else {
    limit_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:nakama.api.ListTournamentsRequest)
}

void ListTournamentsRequest::SharedCtor() {
  cursor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&category_start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&limit_) -
      reinterpret_cast<char*>(&category_start_)) + sizeof(limit_));
}

ListTournamentsRequest::~ListTournamentsRequest() {
  // @@protoc_insertion_point(destructor:nakama.api.ListTournamentsRequest)
  SharedDtor();
}

void ListTournamentsRequest::SharedDtor() {
  cursor_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete category_start_;
  if (this != internal_default_instance()) delete category_end_;
  if (this != internal_default_instance()) delete start_time_;
  if (this != internal_default_instance()) delete end_time_;
  if (this != internal_default_instance()) delete limit_;
}

void ListTournamentsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ListTournamentsRequest::descriptor() {
  ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ListTournamentsRequest& ListTournamentsRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_ListTournamentsRequest.base);
  return *internal_default_instance();
}


void ListTournamentsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.ListTournamentsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cursor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && category_start_ != NULL) {
    delete category_start_;
  }
  category_start_ = NULL;
  if (GetArenaNoVirtual() == NULL && category_end_ != NULL) {
    delete category_end_;
  }
  category_end_ = NULL;
  if (GetArenaNoVirtual() == NULL && start_time_ != NULL) {
    delete start_time_;
  }
  start_time_ = NULL;
  if (GetArenaNoVirtual() == NULL && end_time_ != NULL) {
    delete end_time_;
  }
  end_time_ = NULL;
  if (GetArenaNoVirtual() == NULL && limit_ != NULL) {
    delete limit_;
  }
  limit_ = NULL;
  _internal_metadata_.Clear();
}

bool ListTournamentsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nakama.api.ListTournamentsRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.protobuf.UInt32Value category_start = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_category_start()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.UInt32Value category_end = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_category_end()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.UInt32Value start_time = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_start_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.UInt32Value end_time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_end_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Int32Value limit = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_limit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cursor = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cursor()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cursor().data(), static_cast<int>(this->cursor().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nakama.api.ListTournamentsRequest.cursor"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nakama.api.ListTournamentsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nakama.api.ListTournamentsRequest)
  return false;
#undef DO_
}

void ListTournamentsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nakama.api.ListTournamentsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.UInt32Value category_start = 1;
  if (this->has_category_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_category_start(), output);
  }

  // .google.protobuf.UInt32Value category_end = 2;
  if (this->has_category_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_category_end(), output);
  }

  // .google.protobuf.UInt32Value start_time = 3;
  if (this->has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_start_time(), output);
  }

  // .google.protobuf.UInt32Value end_time = 4;
  if (this->has_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_end_time(), output);
  }

  // .google.protobuf.Int32Value limit = 6;
  if (this->has_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_limit(), output);
  }

  // string cursor = 8;
  if (this->cursor().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cursor().data(), static_cast<int>(this->cursor().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.ListTournamentsRequest.cursor");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->cursor(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:nakama.api.ListTournamentsRequest)
}

::google::protobuf::uint8* ListTournamentsRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.ListTournamentsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.UInt32Value category_start = 1;
  if (this->has_category_start()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_category_start(), deterministic, target);
  }

  // .google.protobuf.UInt32Value category_end = 2;
  if (this->has_category_end()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_category_end(), deterministic, target);
  }

  // .google.protobuf.UInt32Value start_time = 3;
  if (this->has_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_start_time(), deterministic, target);
  }

  // .google.protobuf.UInt32Value end_time = 4;
  if (this->has_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_end_time(), deterministic, target);
  }

  // .google.protobuf.Int32Value limit = 6;
  if (this->has_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_limit(), deterministic, target);
  }

  // string cursor = 8;
  if (this->cursor().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cursor().data(), static_cast<int>(this->cursor().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.ListTournamentsRequest.cursor");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->cursor(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.ListTournamentsRequest)
  return target;
}

size_t ListTournamentsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.ListTournamentsRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string cursor = 8;
  if (this->cursor().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cursor());
  }

  // .google.protobuf.UInt32Value category_start = 1;
  if (this->has_category_start()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *category_start_);
  }

  // .google.protobuf.UInt32Value category_end = 2;
  if (this->has_category_end()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *category_end_);
  }

  // .google.protobuf.UInt32Value start_time = 3;
  if (this->has_start_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *start_time_);
  }

  // .google.protobuf.UInt32Value end_time = 4;
  if (this->has_end_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *end_time_);
  }

  // .google.protobuf.Int32Value limit = 6;
  if (this->has_limit()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *limit_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListTournamentsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.ListTournamentsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListTournamentsRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ListTournamentsRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.ListTournamentsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.ListTournamentsRequest)
    MergeFrom(*source);
  }
}

void ListTournamentsRequest::MergeFrom(const ListTournamentsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.ListTournamentsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cursor().size() > 0) {

    cursor_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cursor_);
  }
  if (from.has_category_start()) {
    mutable_category_start()->::google::protobuf::UInt32Value::MergeFrom(from.category_start());
  }
  if (from.has_category_end()) {
    mutable_category_end()->::google::protobuf::UInt32Value::MergeFrom(from.category_end());
  }
  if (from.has_start_time()) {
    mutable_start_time()->::google::protobuf::UInt32Value::MergeFrom(from.start_time());
  }
  if (from.has_end_time()) {
    mutable_end_time()->::google::protobuf::UInt32Value::MergeFrom(from.end_time());
  }
  if (from.has_limit()) {
    mutable_limit()->::google::protobuf::Int32Value::MergeFrom(from.limit());
  }
}

void ListTournamentsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.ListTournamentsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListTournamentsRequest::CopyFrom(const ListTournamentsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.ListTournamentsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListTournamentsRequest::IsInitialized() const {
  return true;
}

void ListTournamentsRequest::Swap(ListTournamentsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListTournamentsRequest::InternalSwap(ListTournamentsRequest* other) {
  using std::swap;
  cursor_.Swap(&other->cursor_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(category_start_, other->category_start_);
  swap(category_end_, other->category_end_);
  swap(start_time_, other->start_time_);
  swap(end_time_, other->end_time_);
  swap(limit_, other->limit_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ListTournamentsRequest::GetMetadata() const {
  protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ListUserGroupsRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListUserGroupsRequest::kUserIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListUserGroupsRequest::ListUserGroupsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_ListUserGroupsRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:nakama.api.ListUserGroupsRequest)
}
ListUserGroupsRequest::ListUserGroupsRequest(const ListUserGroupsRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.user_id().size() > 0) {
    user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
  // @@protoc_insertion_point(copy_constructor:nakama.api.ListUserGroupsRequest)
}

void ListUserGroupsRequest::SharedCtor() {
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ListUserGroupsRequest::~ListUserGroupsRequest() {
  // @@protoc_insertion_point(destructor:nakama.api.ListUserGroupsRequest)
  SharedDtor();
}

void ListUserGroupsRequest::SharedDtor() {
  user_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ListUserGroupsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ListUserGroupsRequest::descriptor() {
  ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ListUserGroupsRequest& ListUserGroupsRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_ListUserGroupsRequest.base);
  return *internal_default_instance();
}


void ListUserGroupsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.ListUserGroupsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool ListUserGroupsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nakama.api.ListUserGroupsRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string user_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user_id().data(), static_cast<int>(this->user_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nakama.api.ListUserGroupsRequest.user_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nakama.api.ListUserGroupsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nakama.api.ListUserGroupsRequest)
  return false;
#undef DO_
}

void ListUserGroupsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nakama.api.ListUserGroupsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_id = 1;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), static_cast<int>(this->user_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.ListUserGroupsRequest.user_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->user_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:nakama.api.ListUserGroupsRequest)
}

::google::protobuf::uint8* ListUserGroupsRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.ListUserGroupsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_id = 1;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), static_cast<int>(this->user_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.ListUserGroupsRequest.user_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.ListUserGroupsRequest)
  return target;
}

size_t ListUserGroupsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.ListUserGroupsRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string user_id = 1;
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListUserGroupsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.ListUserGroupsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListUserGroupsRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ListUserGroupsRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.ListUserGroupsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.ListUserGroupsRequest)
    MergeFrom(*source);
  }
}

void ListUserGroupsRequest::MergeFrom(const ListUserGroupsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.ListUserGroupsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_id().size() > 0) {

    user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
}

void ListUserGroupsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.ListUserGroupsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListUserGroupsRequest::CopyFrom(const ListUserGroupsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.ListUserGroupsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListUserGroupsRequest::IsInitialized() const {
  return true;
}

void ListUserGroupsRequest::Swap(ListUserGroupsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListUserGroupsRequest::InternalSwap(ListUserGroupsRequest* other) {
  using std::swap;
  user_id_.Swap(&other->user_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ListUserGroupsRequest::GetMetadata() const {
  protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Match::InitAsDefaultInstance() {
  ::nakama::api::_Match_default_instance_._instance.get_mutable()->label_ = const_cast< ::google::protobuf::StringValue*>(
      ::google::protobuf::StringValue::internal_default_instance());
}
void Match::clear_label() {
  if (GetArenaNoVirtual() == NULL && label_ != NULL) {
    delete label_;
  }
  label_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Match::kMatchIdFieldNumber;
const int Match::kAuthoritativeFieldNumber;
const int Match::kLabelFieldNumber;
const int Match::kSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Match::Match()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_Match.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:nakama.api.Match)
}
Match::Match(const Match& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  match_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.match_id().size() > 0) {
    match_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.match_id_);
  }
  if (from.has_label()) {
    label_ = new ::google::protobuf::StringValue(*from.label_);
  } else {
    label_ = NULL;
  }
  ::memcpy(&authoritative_, &from.authoritative_,
    static_cast<size_t>(reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&authoritative_)) + sizeof(size_));
  // @@protoc_insertion_point(copy_constructor:nakama.api.Match)
}

void Match::SharedCtor() {
  match_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&label_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&label_)) + sizeof(size_));
}

Match::~Match() {
  // @@protoc_insertion_point(destructor:nakama.api.Match)
  SharedDtor();
}

void Match::SharedDtor() {
  match_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete label_;
}

void Match::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Match::descriptor() {
  ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Match& Match::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_Match.base);
  return *internal_default_instance();
}


void Match::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.Match)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  match_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && label_ != NULL) {
    delete label_;
  }
  label_ = NULL;
  ::memset(&authoritative_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&authoritative_)) + sizeof(size_));
  _internal_metadata_.Clear();
}

bool Match::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nakama.api.Match)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string match_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_match_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->match_id().data(), static_cast<int>(this->match_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nakama.api.Match.match_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool authoritative = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &authoritative_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.StringValue label = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_label()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 size = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nakama.api.Match)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nakama.api.Match)
  return false;
#undef DO_
}

void Match::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nakama.api.Match)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string match_id = 1;
  if (this->match_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->match_id().data(), static_cast<int>(this->match_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.Match.match_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->match_id(), output);
  }

  // bool authoritative = 2;
  if (this->authoritative() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->authoritative(), output);
  }

  // .google.protobuf.StringValue label = 3;
  if (this->has_label()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_label(), output);
  }

  // int32 size = 4;
  if (this->size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->size(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:nakama.api.Match)
}

::google::protobuf::uint8* Match::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.Match)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string match_id = 1;
  if (this->match_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->match_id().data(), static_cast<int>(this->match_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.Match.match_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->match_id(), target);
  }

  // bool authoritative = 2;
  if (this->authoritative() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->authoritative(), target);
  }

  // .google.protobuf.StringValue label = 3;
  if (this->has_label()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_label(), deterministic, target);
  }

  // int32 size = 4;
  if (this->size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->size(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.Match)
  return target;
}

size_t Match::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.Match)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string match_id = 1;
  if (this->match_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->match_id());
  }

  // .google.protobuf.StringValue label = 3;
  if (this->has_label()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *label_);
  }

  // bool authoritative = 2;
  if (this->authoritative() != 0) {
    total_size += 1 + 1;
  }

  // int32 size = 4;
  if (this->size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Match::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.Match)
  GOOGLE_DCHECK_NE(&from, this);
  const Match* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Match>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.Match)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.Match)
    MergeFrom(*source);
  }
}

void Match::MergeFrom(const Match& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.Match)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.match_id().size() > 0) {

    match_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.match_id_);
  }
  if (from.has_label()) {
    mutable_label()->::google::protobuf::StringValue::MergeFrom(from.label());
  }
  if (from.authoritative() != 0) {
    set_authoritative(from.authoritative());
  }
  if (from.size() != 0) {
    set_size(from.size());
  }
}

void Match::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.Match)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Match::CopyFrom(const Match& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.Match)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Match::IsInitialized() const {
  return true;
}

void Match::Swap(Match* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Match::InternalSwap(Match* other) {
  using std::swap;
  match_id_.Swap(&other->match_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(label_, other->label_);
  swap(authoritative_, other->authoritative_);
  swap(size_, other->size_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Match::GetMetadata() const {
  protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MatchList::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MatchList::kMatchesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MatchList::MatchList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_MatchList.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:nakama.api.MatchList)
}
MatchList::MatchList(const MatchList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      matches_(from.matches_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:nakama.api.MatchList)
}

void MatchList::SharedCtor() {
}

MatchList::~MatchList() {
  // @@protoc_insertion_point(destructor:nakama.api.MatchList)
  SharedDtor();
}

void MatchList::SharedDtor() {
}

void MatchList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MatchList::descriptor() {
  ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MatchList& MatchList::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_MatchList.base);
  return *internal_default_instance();
}


void MatchList::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.MatchList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  matches_.Clear();
  _internal_metadata_.Clear();
}

bool MatchList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nakama.api.MatchList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .nakama.api.Match matches = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_matches()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nakama.api.MatchList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nakama.api.MatchList)
  return false;
#undef DO_
}

void MatchList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nakama.api.MatchList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .nakama.api.Match matches = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->matches_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->matches(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:nakama.api.MatchList)
}

::google::protobuf::uint8* MatchList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.MatchList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .nakama.api.Match matches = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->matches_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->matches(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.MatchList)
  return target;
}

size_t MatchList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.MatchList)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .nakama.api.Match matches = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->matches_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->matches(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MatchList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.MatchList)
  GOOGLE_DCHECK_NE(&from, this);
  const MatchList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MatchList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.MatchList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.MatchList)
    MergeFrom(*source);
  }
}

void MatchList::MergeFrom(const MatchList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.MatchList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  matches_.MergeFrom(from.matches_);
}

void MatchList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.MatchList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatchList::CopyFrom(const MatchList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.MatchList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchList::IsInitialized() const {
  return true;
}

void MatchList::Swap(MatchList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MatchList::InternalSwap(MatchList* other) {
  using std::swap;
  CastToBase(&matches_)->InternalSwap(CastToBase(&other->matches_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MatchList::GetMetadata() const {
  protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Notification::InitAsDefaultInstance() {
  ::nakama::api::_Notification_default_instance_._instance.get_mutable()->create_time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
}
void Notification::clear_create_time() {
  if (GetArenaNoVirtual() == NULL && create_time_ != NULL) {
    delete create_time_;
  }
  create_time_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Notification::kIdFieldNumber;
const int Notification::kSubjectFieldNumber;
const int Notification::kContentFieldNumber;
const int Notification::kCodeFieldNumber;
const int Notification::kSenderIdFieldNumber;
const int Notification::kCreateTimeFieldNumber;
const int Notification::kPersistentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Notification::Notification()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_Notification.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:nakama.api.Notification)
}
Notification::Notification(const Notification& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  subject_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.subject().size() > 0) {
    subject_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.subject_);
  }
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.content().size() > 0) {
    content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  sender_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sender_id().size() > 0) {
    sender_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sender_id_);
  }
  if (from.has_create_time()) {
    create_time_ = new ::google::protobuf::Timestamp(*from.create_time_);
  } else {
    create_time_ = NULL;
  }
  ::memcpy(&code_, &from.code_,
    static_cast<size_t>(reinterpret_cast<char*>(&persistent_) -
    reinterpret_cast<char*>(&code_)) + sizeof(persistent_));
  // @@protoc_insertion_point(copy_constructor:nakama.api.Notification)
}

void Notification::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  subject_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sender_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&create_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&persistent_) -
      reinterpret_cast<char*>(&create_time_)) + sizeof(persistent_));
}

Notification::~Notification() {
  // @@protoc_insertion_point(destructor:nakama.api.Notification)
  SharedDtor();
}

void Notification::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  subject_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sender_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete create_time_;
}

void Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Notification::descriptor() {
  ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Notification& Notification::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_Notification.base);
  return *internal_default_instance();
}


void Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  subject_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sender_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && create_time_ != NULL) {
    delete create_time_;
  }
  create_time_ = NULL;
  ::memset(&code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&persistent_) -
      reinterpret_cast<char*>(&code_)) + sizeof(persistent_));
  _internal_metadata_.Clear();
}

bool Notification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nakama.api.Notification)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nakama.api.Notification.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string subject = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_subject()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->subject().data(), static_cast<int>(this->subject().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nakama.api.Notification.subject"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string content = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->content().data(), static_cast<int>(this->content().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nakama.api.Notification.content"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 code = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sender_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sender_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sender_id().data(), static_cast<int>(this->sender_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nakama.api.Notification.sender_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp create_time = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_create_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool persistent = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &persistent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nakama.api.Notification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nakama.api.Notification)
  return false;
#undef DO_
}

void Notification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nakama.api.Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.Notification.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // string subject = 2;
  if (this->subject().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->subject().data(), static_cast<int>(this->subject().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.Notification.subject");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->subject(), output);
  }

  // string content = 3;
  if (this->content().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->content().data(), static_cast<int>(this->content().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.Notification.content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->content(), output);
  }

  // int32 code = 4;
  if (this->code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->code(), output);
  }

  // string sender_id = 5;
  if (this->sender_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sender_id().data(), static_cast<int>(this->sender_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.Notification.sender_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->sender_id(), output);
  }

  // .google.protobuf.Timestamp create_time = 6;
  if (this->has_create_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_create_time(), output);
  }

  // bool persistent = 7;
  if (this->persistent() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->persistent(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:nakama.api.Notification)
}

::google::protobuf::uint8* Notification::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.Notification.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // string subject = 2;
  if (this->subject().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->subject().data(), static_cast<int>(this->subject().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.Notification.subject");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->subject(), target);
  }

  // string content = 3;
  if (this->content().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->content().data(), static_cast<int>(this->content().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.Notification.content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->content(), target);
  }

  // int32 code = 4;
  if (this->code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->code(), target);
  }

  // string sender_id = 5;
  if (this->sender_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sender_id().data(), static_cast<int>(this->sender_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.Notification.sender_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->sender_id(), target);
  }

  // .google.protobuf.Timestamp create_time = 6;
  if (this->has_create_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_create_time(), deterministic, target);
  }

  // bool persistent = 7;
  if (this->persistent() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->persistent(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.Notification)
  return target;
}

size_t Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.Notification)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // string subject = 2;
  if (this->subject().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->subject());
  }

  // string content = 3;
  if (this->content().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->content());
  }

  // string sender_id = 5;
  if (this->sender_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sender_id());
  }

  // .google.protobuf.Timestamp create_time = 6;
  if (this->has_create_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *create_time_);
  }

  // int32 code = 4;
  if (this->code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->code());
  }

  // bool persistent = 7;
  if (this->persistent() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Notification::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.Notification)
  GOOGLE_DCHECK_NE(&from, this);
  const Notification* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Notification>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.Notification)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.Notification)
    MergeFrom(*source);
  }
}

void Notification::MergeFrom(const Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.Notification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.subject().size() > 0) {

    subject_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.subject_);
  }
  if (from.content().size() > 0) {

    content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  if (from.sender_id().size() > 0) {

    sender_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sender_id_);
  }
  if (from.has_create_time()) {
    mutable_create_time()->::google::protobuf::Timestamp::MergeFrom(from.create_time());
  }
  if (from.code() != 0) {
    set_code(from.code());
  }
  if (from.persistent() != 0) {
    set_persistent(from.persistent());
  }
}

void Notification::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Notification::CopyFrom(const Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Notification::IsInitialized() const {
  return true;
}

void Notification::Swap(Notification* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Notification::InternalSwap(Notification* other) {
  using std::swap;
  id_.Swap(&other->id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  subject_.Swap(&other->subject_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  content_.Swap(&other->content_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sender_id_.Swap(&other->sender_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(create_time_, other->create_time_);
  swap(code_, other->code_);
  swap(persistent_, other->persistent_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Notification::GetMetadata() const {
  protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void NotificationList::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NotificationList::kNotificationsFieldNumber;
const int NotificationList::kCacheableCursorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NotificationList::NotificationList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_NotificationList.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:nakama.api.NotificationList)
}
NotificationList::NotificationList(const NotificationList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      notifications_(from.notifications_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cacheable_cursor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cacheable_cursor().size() > 0) {
    cacheable_cursor_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cacheable_cursor_);
  }
  // @@protoc_insertion_point(copy_constructor:nakama.api.NotificationList)
}

void NotificationList::SharedCtor() {
  cacheable_cursor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

NotificationList::~NotificationList() {
  // @@protoc_insertion_point(destructor:nakama.api.NotificationList)
  SharedDtor();
}

void NotificationList::SharedDtor() {
  cacheable_cursor_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void NotificationList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* NotificationList::descriptor() {
  ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NotificationList& NotificationList::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_NotificationList.base);
  return *internal_default_instance();
}


void NotificationList::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.NotificationList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  notifications_.Clear();
  cacheable_cursor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool NotificationList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nakama.api.NotificationList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .nakama.api.Notification notifications = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_notifications()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cacheable_cursor = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cacheable_cursor()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cacheable_cursor().data(), static_cast<int>(this->cacheable_cursor().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nakama.api.NotificationList.cacheable_cursor"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nakama.api.NotificationList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nakama.api.NotificationList)
  return false;
#undef DO_
}

void NotificationList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nakama.api.NotificationList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .nakama.api.Notification notifications = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->notifications_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->notifications(static_cast<int>(i)),
      output);
  }

  // string cacheable_cursor = 2;
  if (this->cacheable_cursor().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cacheable_cursor().data(), static_cast<int>(this->cacheable_cursor().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.NotificationList.cacheable_cursor");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->cacheable_cursor(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:nakama.api.NotificationList)
}

::google::protobuf::uint8* NotificationList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.NotificationList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .nakama.api.Notification notifications = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->notifications_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->notifications(static_cast<int>(i)), deterministic, target);
  }

  // string cacheable_cursor = 2;
  if (this->cacheable_cursor().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cacheable_cursor().data(), static_cast<int>(this->cacheable_cursor().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.NotificationList.cacheable_cursor");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->cacheable_cursor(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.NotificationList)
  return target;
}

size_t NotificationList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.NotificationList)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .nakama.api.Notification notifications = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->notifications_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->notifications(static_cast<int>(i)));
    }
  }

  // string cacheable_cursor = 2;
  if (this->cacheable_cursor().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cacheable_cursor());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NotificationList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.NotificationList)
  GOOGLE_DCHECK_NE(&from, this);
  const NotificationList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NotificationList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.NotificationList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.NotificationList)
    MergeFrom(*source);
  }
}

void NotificationList::MergeFrom(const NotificationList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.NotificationList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  notifications_.MergeFrom(from.notifications_);
  if (from.cacheable_cursor().size() > 0) {

    cacheable_cursor_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cacheable_cursor_);
  }
}

void NotificationList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.NotificationList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotificationList::CopyFrom(const NotificationList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.NotificationList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotificationList::IsInitialized() const {
  return true;
}

void NotificationList::Swap(NotificationList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NotificationList::InternalSwap(NotificationList* other) {
  using std::swap;
  CastToBase(&notifications_)->InternalSwap(CastToBase(&other->notifications_));
  cacheable_cursor_.Swap(&other->cacheable_cursor_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata NotificationList::GetMetadata() const {
  protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PromoteGroupUsersRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PromoteGroupUsersRequest::kGroupIdFieldNumber;
const int PromoteGroupUsersRequest::kUserIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PromoteGroupUsersRequest::PromoteGroupUsersRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_PromoteGroupUsersRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:nakama.api.PromoteGroupUsersRequest)
}
PromoteGroupUsersRequest::PromoteGroupUsersRequest(const PromoteGroupUsersRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      user_ids_(from.user_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.group_id().size() > 0) {
    group_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.group_id_);
  }
  // @@protoc_insertion_point(copy_constructor:nakama.api.PromoteGroupUsersRequest)
}

void PromoteGroupUsersRequest::SharedCtor() {
  group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

PromoteGroupUsersRequest::~PromoteGroupUsersRequest() {
  // @@protoc_insertion_point(destructor:nakama.api.PromoteGroupUsersRequest)
  SharedDtor();
}

void PromoteGroupUsersRequest::SharedDtor() {
  group_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PromoteGroupUsersRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PromoteGroupUsersRequest::descriptor() {
  ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PromoteGroupUsersRequest& PromoteGroupUsersRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_PromoteGroupUsersRequest.base);
  return *internal_default_instance();
}


void PromoteGroupUsersRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.PromoteGroupUsersRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_ids_.Clear();
  group_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool PromoteGroupUsersRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nakama.api.PromoteGroupUsersRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string group_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->group_id().data(), static_cast<int>(this->group_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nakama.api.PromoteGroupUsersRequest.group_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string user_ids = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_user_ids()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user_ids(this->user_ids_size() - 1).data(),
            static_cast<int>(this->user_ids(this->user_ids_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nakama.api.PromoteGroupUsersRequest.user_ids"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nakama.api.PromoteGroupUsersRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nakama.api.PromoteGroupUsersRequest)
  return false;
#undef DO_
}

void PromoteGroupUsersRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nakama.api.PromoteGroupUsersRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string group_id = 1;
  if (this->group_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->group_id().data(), static_cast<int>(this->group_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.PromoteGroupUsersRequest.group_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->group_id(), output);
  }

  // repeated string user_ids = 2;
  for (int i = 0, n = this->user_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_ids(i).data(), static_cast<int>(this->user_ids(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.PromoteGroupUsersRequest.user_ids");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->user_ids(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:nakama.api.PromoteGroupUsersRequest)
}

::google::protobuf::uint8* PromoteGroupUsersRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.PromoteGroupUsersRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string group_id = 1;
  if (this->group_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->group_id().data(), static_cast<int>(this->group_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.PromoteGroupUsersRequest.group_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->group_id(), target);
  }

  // repeated string user_ids = 2;
  for (int i = 0, n = this->user_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_ids(i).data(), static_cast<int>(this->user_ids(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.PromoteGroupUsersRequest.user_ids");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->user_ids(i), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.PromoteGroupUsersRequest)
  return target;
}

size_t PromoteGroupUsersRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.PromoteGroupUsersRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string user_ids = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->user_ids_size());
  for (int i = 0, n = this->user_ids_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->user_ids(i));
  }

  // string group_id = 1;
  if (this->group_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->group_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PromoteGroupUsersRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.PromoteGroupUsersRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PromoteGroupUsersRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PromoteGroupUsersRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.PromoteGroupUsersRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.PromoteGroupUsersRequest)
    MergeFrom(*source);
  }
}

void PromoteGroupUsersRequest::MergeFrom(const PromoteGroupUsersRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.PromoteGroupUsersRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  user_ids_.MergeFrom(from.user_ids_);
  if (from.group_id().size() > 0) {

    group_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.group_id_);
  }
}

void PromoteGroupUsersRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.PromoteGroupUsersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PromoteGroupUsersRequest::CopyFrom(const PromoteGroupUsersRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.PromoteGroupUsersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PromoteGroupUsersRequest::IsInitialized() const {
  return true;
}

void PromoteGroupUsersRequest::Swap(PromoteGroupUsersRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PromoteGroupUsersRequest::InternalSwap(PromoteGroupUsersRequest* other) {
  using std::swap;
  user_ids_.InternalSwap(CastToBase(&other->user_ids_));
  group_id_.Swap(&other->group_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PromoteGroupUsersRequest::GetMetadata() const {
  protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReadStorageObjectId::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReadStorageObjectId::kCollectionFieldNumber;
const int ReadStorageObjectId::kKeyFieldNumber;
const int ReadStorageObjectId::kUserIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReadStorageObjectId::ReadStorageObjectId()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_ReadStorageObjectId.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:nakama.api.ReadStorageObjectId)
}
ReadStorageObjectId::ReadStorageObjectId(const ReadStorageObjectId& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  collection_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.collection().size() > 0) {
    collection_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.collection_);
  }
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.user_id().size() > 0) {
    user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
  // @@protoc_insertion_point(copy_constructor:nakama.api.ReadStorageObjectId)
}

void ReadStorageObjectId::SharedCtor() {
  collection_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ReadStorageObjectId::~ReadStorageObjectId() {
  // @@protoc_insertion_point(destructor:nakama.api.ReadStorageObjectId)
  SharedDtor();
}

void ReadStorageObjectId::SharedDtor() {
  collection_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ReadStorageObjectId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ReadStorageObjectId::descriptor() {
  ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReadStorageObjectId& ReadStorageObjectId::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_ReadStorageObjectId.base);
  return *internal_default_instance();
}


void ReadStorageObjectId::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.ReadStorageObjectId)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  collection_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool ReadStorageObjectId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nakama.api.ReadStorageObjectId)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string collection = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_collection()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->collection().data(), static_cast<int>(this->collection().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nakama.api.ReadStorageObjectId.collection"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string key = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->key().data(), static_cast<int>(this->key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nakama.api.ReadStorageObjectId.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string user_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user_id().data(), static_cast<int>(this->user_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nakama.api.ReadStorageObjectId.user_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nakama.api.ReadStorageObjectId)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nakama.api.ReadStorageObjectId)
  return false;
#undef DO_
}

void ReadStorageObjectId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nakama.api.ReadStorageObjectId)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string collection = 1;
  if (this->collection().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->collection().data(), static_cast<int>(this->collection().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.ReadStorageObjectId.collection");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->collection(), output);
  }

  // string key = 2;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.ReadStorageObjectId.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->key(), output);
  }

  // string user_id = 3;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), static_cast<int>(this->user_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.ReadStorageObjectId.user_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->user_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:nakama.api.ReadStorageObjectId)
}

::google::protobuf::uint8* ReadStorageObjectId::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.ReadStorageObjectId)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string collection = 1;
  if (this->collection().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->collection().data(), static_cast<int>(this->collection().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.ReadStorageObjectId.collection");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->collection(), target);
  }

  // string key = 2;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.ReadStorageObjectId.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->key(), target);
  }

  // string user_id = 3;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), static_cast<int>(this->user_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.ReadStorageObjectId.user_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->user_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.ReadStorageObjectId)
  return target;
}

size_t ReadStorageObjectId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.ReadStorageObjectId)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string collection = 1;
  if (this->collection().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->collection());
  }

  // string key = 2;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  // string user_id = 3;
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReadStorageObjectId::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.ReadStorageObjectId)
  GOOGLE_DCHECK_NE(&from, this);
  const ReadStorageObjectId* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReadStorageObjectId>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.ReadStorageObjectId)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.ReadStorageObjectId)
    MergeFrom(*source);
  }
}

void ReadStorageObjectId::MergeFrom(const ReadStorageObjectId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.ReadStorageObjectId)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.collection().size() > 0) {

    collection_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.collection_);
  }
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.user_id().size() > 0) {

    user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
}

void ReadStorageObjectId::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.ReadStorageObjectId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadStorageObjectId::CopyFrom(const ReadStorageObjectId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.ReadStorageObjectId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadStorageObjectId::IsInitialized() const {
  return true;
}

void ReadStorageObjectId::Swap(ReadStorageObjectId* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReadStorageObjectId::InternalSwap(ReadStorageObjectId* other) {
  using std::swap;
  collection_.Swap(&other->collection_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  key_.Swap(&other->key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  user_id_.Swap(&other->user_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ReadStorageObjectId::GetMetadata() const {
  protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReadStorageObjectsRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReadStorageObjectsRequest::kObjectIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReadStorageObjectsRequest::ReadStorageObjectsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_ReadStorageObjectsRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:nakama.api.ReadStorageObjectsRequest)
}
ReadStorageObjectsRequest::ReadStorageObjectsRequest(const ReadStorageObjectsRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      object_ids_(from.object_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:nakama.api.ReadStorageObjectsRequest)
}

void ReadStorageObjectsRequest::SharedCtor() {
}

ReadStorageObjectsRequest::~ReadStorageObjectsRequest() {
  // @@protoc_insertion_point(destructor:nakama.api.ReadStorageObjectsRequest)
  SharedDtor();
}

void ReadStorageObjectsRequest::SharedDtor() {
}

void ReadStorageObjectsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ReadStorageObjectsRequest::descriptor() {
  ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReadStorageObjectsRequest& ReadStorageObjectsRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_ReadStorageObjectsRequest.base);
  return *internal_default_instance();
}


void ReadStorageObjectsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.ReadStorageObjectsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  object_ids_.Clear();
  _internal_metadata_.Clear();
}

bool ReadStorageObjectsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nakama.api.ReadStorageObjectsRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .nakama.api.ReadStorageObjectId object_ids = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_object_ids()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nakama.api.ReadStorageObjectsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nakama.api.ReadStorageObjectsRequest)
  return false;
#undef DO_
}

void ReadStorageObjectsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nakama.api.ReadStorageObjectsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .nakama.api.ReadStorageObjectId object_ids = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->object_ids_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->object_ids(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:nakama.api.ReadStorageObjectsRequest)
}

::google::protobuf::uint8* ReadStorageObjectsRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.ReadStorageObjectsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .nakama.api.ReadStorageObjectId object_ids = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->object_ids_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->object_ids(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.ReadStorageObjectsRequest)
  return target;
}

size_t ReadStorageObjectsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.ReadStorageObjectsRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .nakama.api.ReadStorageObjectId object_ids = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->object_ids_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->object_ids(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReadStorageObjectsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.ReadStorageObjectsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ReadStorageObjectsRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReadStorageObjectsRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.ReadStorageObjectsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.ReadStorageObjectsRequest)
    MergeFrom(*source);
  }
}

void ReadStorageObjectsRequest::MergeFrom(const ReadStorageObjectsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.ReadStorageObjectsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  object_ids_.MergeFrom(from.object_ids_);
}

void ReadStorageObjectsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.ReadStorageObjectsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadStorageObjectsRequest::CopyFrom(const ReadStorageObjectsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.ReadStorageObjectsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadStorageObjectsRequest::IsInitialized() const {
  return true;
}

void ReadStorageObjectsRequest::Swap(ReadStorageObjectsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReadStorageObjectsRequest::InternalSwap(ReadStorageObjectsRequest* other) {
  using std::swap;
  CastToBase(&object_ids_)->InternalSwap(CastToBase(&other->object_ids_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ReadStorageObjectsRequest::GetMetadata() const {
  protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Rpc::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Rpc::kIdFieldNumber;
const int Rpc::kPayloadFieldNumber;
const int Rpc::kHttpKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Rpc::Rpc()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_Rpc.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:nakama.api.Rpc)
}
Rpc::Rpc(const Rpc& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  payload_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.payload().size() > 0) {
    payload_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.payload_);
  }
  http_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.http_key().size() > 0) {
    http_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.http_key_);
  }
  // @@protoc_insertion_point(copy_constructor:nakama.api.Rpc)
}

void Rpc::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  payload_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  http_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Rpc::~Rpc() {
  // @@protoc_insertion_point(destructor:nakama.api.Rpc)
  SharedDtor();
}

void Rpc::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  payload_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  http_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Rpc::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Rpc::descriptor() {
  ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Rpc& Rpc::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_Rpc.base);
  return *internal_default_instance();
}


void Rpc::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.Rpc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  payload_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  http_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool Rpc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nakama.api.Rpc)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nakama.api.Rpc.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string payload = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_payload()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->payload().data(), static_cast<int>(this->payload().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nakama.api.Rpc.payload"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string http_key = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_http_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->http_key().data(), static_cast<int>(this->http_key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nakama.api.Rpc.http_key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nakama.api.Rpc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nakama.api.Rpc)
  return false;
#undef DO_
}

void Rpc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nakama.api.Rpc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.Rpc.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // string payload = 2;
  if (this->payload().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->payload().data(), static_cast<int>(this->payload().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.Rpc.payload");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->payload(), output);
  }

  // string http_key = 3;
  if (this->http_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->http_key().data(), static_cast<int>(this->http_key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.Rpc.http_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->http_key(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:nakama.api.Rpc)
}

::google::protobuf::uint8* Rpc::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.Rpc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.Rpc.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // string payload = 2;
  if (this->payload().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->payload().data(), static_cast<int>(this->payload().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.Rpc.payload");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->payload(), target);
  }

  // string http_key = 3;
  if (this->http_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->http_key().data(), static_cast<int>(this->http_key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.Rpc.http_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->http_key(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.Rpc)
  return target;
}

size_t Rpc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.Rpc)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // string payload = 2;
  if (this->payload().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->payload());
  }

  // string http_key = 3;
  if (this->http_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->http_key());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Rpc::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.Rpc)
  GOOGLE_DCHECK_NE(&from, this);
  const Rpc* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Rpc>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.Rpc)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.Rpc)
    MergeFrom(*source);
  }
}

void Rpc::MergeFrom(const Rpc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.Rpc)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.payload().size() > 0) {

    payload_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.payload_);
  }
  if (from.http_key().size() > 0) {

    http_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.http_key_);
  }
}

void Rpc::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.Rpc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rpc::CopyFrom(const Rpc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.Rpc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rpc::IsInitialized() const {
  return true;
}

void Rpc::Swap(Rpc* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Rpc::InternalSwap(Rpc* other) {
  using std::swap;
  id_.Swap(&other->id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  payload_.Swap(&other->payload_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  http_key_.Swap(&other->http_key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Rpc::GetMetadata() const {
  protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Session::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Session::kCreatedFieldNumber;
const int Session::kTokenFieldNumber;
const int Session::kUdpTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Session::Session()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_Session.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:nakama.api.Session)
}
Session::Session(const Session& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.token().size() > 0) {
    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  udp_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.udp_token().size() > 0) {
    udp_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.udp_token_);
  }
  created_ = from.created_;
  // @@protoc_insertion_point(copy_constructor:nakama.api.Session)
}

void Session::SharedCtor() {
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  udp_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  created_ = false;
}

Session::~Session() {
  // @@protoc_insertion_point(destructor:nakama.api.Session)
  SharedDtor();
}

void Session::SharedDtor() {
  token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  udp_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Session::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Session::descriptor() {
  ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Session& Session::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_Session.base);
  return *internal_default_instance();
}


void Session::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.Session)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  udp_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  created_ = false;
  _internal_metadata_.Clear();
}

bool Session::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nakama.api.Session)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool created = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &created_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string token = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->token().data(), static_cast<int>(this->token().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nakama.api.Session.token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string udp_token = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_udp_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->udp_token().data(), static_cast<int>(this->udp_token().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nakama.api.Session.udp_token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nakama.api.Session)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nakama.api.Session)
  return false;
#undef DO_
}

void Session::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nakama.api.Session)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool created = 1;
  if (this->created() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->created(), output);
  }

  // string token = 2;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), static_cast<int>(this->token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.Session.token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->token(), output);
  }

  // string udp_token = 3;
  if (this->udp_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->udp_token().data(), static_cast<int>(this->udp_token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.Session.udp_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->udp_token(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:nakama.api.Session)
}

::google::protobuf::uint8* Session::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.Session)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool created = 1;
  if (this->created() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->created(), target);
  }

  // string token = 2;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), static_cast<int>(this->token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.Session.token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->token(), target);
  }

  // string udp_token = 3;
  if (this->udp_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->udp_token().data(), static_cast<int>(this->udp_token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.Session.udp_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->udp_token(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.Session)
  return target;
}

size_t Session::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.Session)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string token = 2;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->token());
  }

  // string udp_token = 3;
  if (this->udp_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->udp_token());
  }

  // bool created = 1;
  if (this->created() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Session::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.Session)
  GOOGLE_DCHECK_NE(&from, this);
  const Session* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Session>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.Session)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.Session)
    MergeFrom(*source);
  }
}

void Session::MergeFrom(const Session& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.Session)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.token().size() > 0) {

    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  if (from.udp_token().size() > 0) {

    udp_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.udp_token_);
  }
  if (from.created() != 0) {
    set_created(from.created());
  }
}

void Session::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.Session)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Session::CopyFrom(const Session& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.Session)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Session::IsInitialized() const {
  return true;
}

void Session::Swap(Session* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Session::InternalSwap(Session* other) {
  using std::swap;
  token_.Swap(&other->token_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  udp_token_.Swap(&other->udp_token_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(created_, other->created_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Session::GetMetadata() const {
  protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void StorageObject::InitAsDefaultInstance() {
  ::nakama::api::_StorageObject_default_instance_._instance.get_mutable()->create_time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  ::nakama::api::_StorageObject_default_instance_._instance.get_mutable()->update_time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
}
void StorageObject::clear_create_time() {
  if (GetArenaNoVirtual() == NULL && create_time_ != NULL) {
    delete create_time_;
  }
  create_time_ = NULL;
}
void StorageObject::clear_update_time() {
  if (GetArenaNoVirtual() == NULL && update_time_ != NULL) {
    delete update_time_;
  }
  update_time_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StorageObject::kCollectionFieldNumber;
const int StorageObject::kKeyFieldNumber;
const int StorageObject::kUserIdFieldNumber;
const int StorageObject::kValueFieldNumber;
const int StorageObject::kVersionFieldNumber;
const int StorageObject::kPermissionReadFieldNumber;
const int StorageObject::kPermissionWriteFieldNumber;
const int StorageObject::kCreateTimeFieldNumber;
const int StorageObject::kUpdateTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StorageObject::StorageObject()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_StorageObject.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:nakama.api.StorageObject)
}
StorageObject::StorageObject(const StorageObject& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  collection_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.collection().size() > 0) {
    collection_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.collection_);
  }
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.user_id().size() > 0) {
    user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.value().size() > 0) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.version().size() > 0) {
    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  if (from.has_create_time()) {
    create_time_ = new ::google::protobuf::Timestamp(*from.create_time_);
  } else {
    create_time_ = NULL;
  }
  if (from.has_update_time()) {
    update_time_ = new ::google::protobuf::Timestamp(*from.update_time_);
  } else {
    update_time_ = NULL;
  }
  ::memcpy(&permission_read_, &from.permission_read_,
    static_cast<size_t>(reinterpret_cast<char*>(&permission_write_) -
    reinterpret_cast<char*>(&permission_read_)) + sizeof(permission_write_));
  // @@protoc_insertion_point(copy_constructor:nakama.api.StorageObject)
}

void StorageObject::SharedCtor() {
  collection_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&create_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&permission_write_) -
      reinterpret_cast<char*>(&create_time_)) + sizeof(permission_write_));
}

StorageObject::~StorageObject() {
  // @@protoc_insertion_point(destructor:nakama.api.StorageObject)
  SharedDtor();
}

void StorageObject::SharedDtor() {
  collection_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete create_time_;
  if (this != internal_default_instance()) delete update_time_;
}

void StorageObject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* StorageObject::descriptor() {
  ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StorageObject& StorageObject::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_StorageObject.base);
  return *internal_default_instance();
}


void StorageObject::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.StorageObject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  collection_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && create_time_ != NULL) {
    delete create_time_;
  }
  create_time_ = NULL;
  if (GetArenaNoVirtual() == NULL && update_time_ != NULL) {
    delete update_time_;
  }
  update_time_ = NULL;
  ::memset(&permission_read_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&permission_write_) -
      reinterpret_cast<char*>(&permission_read_)) + sizeof(permission_write_));
  _internal_metadata_.Clear();
}

bool StorageObject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nakama.api.StorageObject)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string collection = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_collection()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->collection().data(), static_cast<int>(this->collection().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nakama.api.StorageObject.collection"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string key = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->key().data(), static_cast<int>(this->key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nakama.api.StorageObject.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string user_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user_id().data(), static_cast<int>(this->user_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nakama.api.StorageObject.user_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string value = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->value().data(), static_cast<int>(this->value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nakama.api.StorageObject.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string version = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->version().data(), static_cast<int>(this->version().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nakama.api.StorageObject.version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 permission_read = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &permission_read_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 permission_write = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &permission_write_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp create_time = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_create_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp update_time = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_update_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nakama.api.StorageObject)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nakama.api.StorageObject)
  return false;
#undef DO_
}

void StorageObject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nakama.api.StorageObject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string collection = 1;
  if (this->collection().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->collection().data(), static_cast<int>(this->collection().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.StorageObject.collection");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->collection(), output);
  }

  // string key = 2;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.StorageObject.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->key(), output);
  }

  // string user_id = 3;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), static_cast<int>(this->user_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.StorageObject.user_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->user_id(), output);
  }

  // string value = 4;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.StorageObject.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->value(), output);
  }

  // string version = 5;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), static_cast<int>(this->version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.StorageObject.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->version(), output);
  }

  // int32 permission_read = 6;
  if (this->permission_read() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->permission_read(), output);
  }

  // int32 permission_write = 7;
  if (this->permission_write() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->permission_write(), output);
  }

  // .google.protobuf.Timestamp create_time = 8;
  if (this->has_create_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->_internal_create_time(), output);
  }

  // .google.protobuf.Timestamp update_time = 9;
  if (this->has_update_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->_internal_update_time(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:nakama.api.StorageObject)
}

::google::protobuf::uint8* StorageObject::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.StorageObject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string collection = 1;
  if (this->collection().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->collection().data(), static_cast<int>(this->collection().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.StorageObject.collection");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->collection(), target);
  }

  // string key = 2;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.StorageObject.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->key(), target);
  }

  // string user_id = 3;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), static_cast<int>(this->user_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.StorageObject.user_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->user_id(), target);
  }

  // string value = 4;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.StorageObject.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->value(), target);
  }

  // string version = 5;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), static_cast<int>(this->version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.StorageObject.version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->version(), target);
  }

  // int32 permission_read = 6;
  if (this->permission_read() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->permission_read(), target);
  }

  // int32 permission_write = 7;
  if (this->permission_write() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->permission_write(), target);
  }

  // .google.protobuf.Timestamp create_time = 8;
  if (this->has_create_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->_internal_create_time(), deterministic, target);
  }

  // .google.protobuf.Timestamp update_time = 9;
  if (this->has_update_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->_internal_update_time(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.StorageObject)
  return target;
}

size_t StorageObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.StorageObject)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string collection = 1;
  if (this->collection().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->collection());
  }

  // string key = 2;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  // string user_id = 3;
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_id());
  }

  // string value = 4;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());
  }

  // string version = 5;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->version());
  }

  // .google.protobuf.Timestamp create_time = 8;
  if (this->has_create_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *create_time_);
  }

  // .google.protobuf.Timestamp update_time = 9;
  if (this->has_update_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *update_time_);
  }

  // int32 permission_read = 6;
  if (this->permission_read() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->permission_read());
  }

  // int32 permission_write = 7;
  if (this->permission_write() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->permission_write());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StorageObject::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.StorageObject)
  GOOGLE_DCHECK_NE(&from, this);
  const StorageObject* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StorageObject>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.StorageObject)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.StorageObject)
    MergeFrom(*source);
  }
}

void StorageObject::MergeFrom(const StorageObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.StorageObject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.collection().size() > 0) {

    collection_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.collection_);
  }
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.user_id().size() > 0) {

    user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from.version().size() > 0) {

    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  if (from.has_create_time()) {
    mutable_create_time()->::google::protobuf::Timestamp::MergeFrom(from.create_time());
  }
  if (from.has_update_time()) {
    mutable_update_time()->::google::protobuf::Timestamp::MergeFrom(from.update_time());
  }
  if (from.permission_read() != 0) {
    set_permission_read(from.permission_read());
  }
  if (from.permission_write() != 0) {
    set_permission_write(from.permission_write());
  }
}

void StorageObject::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.StorageObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StorageObject::CopyFrom(const StorageObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.StorageObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StorageObject::IsInitialized() const {
  return true;
}

void StorageObject::Swap(StorageObject* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StorageObject::InternalSwap(StorageObject* other) {
  using std::swap;
  collection_.Swap(&other->collection_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  key_.Swap(&other->key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  user_id_.Swap(&other->user_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  value_.Swap(&other->value_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  version_.Swap(&other->version_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(create_time_, other->create_time_);
  swap(update_time_, other->update_time_);
  swap(permission_read_, other->permission_read_);
  swap(permission_write_, other->permission_write_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata StorageObject::GetMetadata() const {
  protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void StorageObjectAck::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StorageObjectAck::kCollectionFieldNumber;
const int StorageObjectAck::kKeyFieldNumber;
const int StorageObjectAck::kVersionFieldNumber;
const int StorageObjectAck::kUserIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StorageObjectAck::StorageObjectAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_StorageObjectAck.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:nakama.api.StorageObjectAck)
}
StorageObjectAck::StorageObjectAck(const StorageObjectAck& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  collection_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.collection().size() > 0) {
    collection_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.collection_);
  }
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.version().size() > 0) {
    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.user_id().size() > 0) {
    user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
  // @@protoc_insertion_point(copy_constructor:nakama.api.StorageObjectAck)
}

void StorageObjectAck::SharedCtor() {
  collection_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

StorageObjectAck::~StorageObjectAck() {
  // @@protoc_insertion_point(destructor:nakama.api.StorageObjectAck)
  SharedDtor();
}

void StorageObjectAck::SharedDtor() {
  collection_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void StorageObjectAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* StorageObjectAck::descriptor() {
  ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StorageObjectAck& StorageObjectAck::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_StorageObjectAck.base);
  return *internal_default_instance();
}


void StorageObjectAck::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.StorageObjectAck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  collection_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool StorageObjectAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nakama.api.StorageObjectAck)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string collection = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_collection()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->collection().data(), static_cast<int>(this->collection().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nakama.api.StorageObjectAck.collection"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string key = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->key().data(), static_cast<int>(this->key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nakama.api.StorageObjectAck.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string version = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->version().data(), static_cast<int>(this->version().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nakama.api.StorageObjectAck.version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string user_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user_id().data(), static_cast<int>(this->user_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nakama.api.StorageObjectAck.user_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nakama.api.StorageObjectAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nakama.api.StorageObjectAck)
  return false;
#undef DO_
}

void StorageObjectAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nakama.api.StorageObjectAck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string collection = 1;
  if (this->collection().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->collection().data(), static_cast<int>(this->collection().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.StorageObjectAck.collection");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->collection(), output);
  }

  // string key = 2;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.StorageObjectAck.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->key(), output);
  }

  // string version = 3;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), static_cast<int>(this->version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.StorageObjectAck.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->version(), output);
  }

  // string user_id = 4;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), static_cast<int>(this->user_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.StorageObjectAck.user_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->user_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:nakama.api.StorageObjectAck)
}

::google::protobuf::uint8* StorageObjectAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.StorageObjectAck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string collection = 1;
  if (this->collection().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->collection().data(), static_cast<int>(this->collection().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.StorageObjectAck.collection");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->collection(), target);
  }

  // string key = 2;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.StorageObjectAck.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->key(), target);
  }

  // string version = 3;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), static_cast<int>(this->version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.StorageObjectAck.version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->version(), target);
  }

  // string user_id = 4;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), static_cast<int>(this->user_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.StorageObjectAck.user_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->user_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.StorageObjectAck)
  return target;
}

size_t StorageObjectAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.StorageObjectAck)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string collection = 1;
  if (this->collection().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->collection());
  }

  // string key = 2;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  // string version = 3;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->version());
  }

  // string user_id = 4;
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StorageObjectAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.StorageObjectAck)
  GOOGLE_DCHECK_NE(&from, this);
  const StorageObjectAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StorageObjectAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.StorageObjectAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.StorageObjectAck)
    MergeFrom(*source);
  }
}

void StorageObjectAck::MergeFrom(const StorageObjectAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.StorageObjectAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.collection().size() > 0) {

    collection_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.collection_);
  }
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.version().size() > 0) {

    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  if (from.user_id().size() > 0) {

    user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
}

void StorageObjectAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.StorageObjectAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StorageObjectAck::CopyFrom(const StorageObjectAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.StorageObjectAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StorageObjectAck::IsInitialized() const {
  return true;
}

void StorageObjectAck::Swap(StorageObjectAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StorageObjectAck::InternalSwap(StorageObjectAck* other) {
  using std::swap;
  collection_.Swap(&other->collection_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  key_.Swap(&other->key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  version_.Swap(&other->version_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  user_id_.Swap(&other->user_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata StorageObjectAck::GetMetadata() const {
  protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void StorageObjectAcks::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StorageObjectAcks::kAcksFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StorageObjectAcks::StorageObjectAcks()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_StorageObjectAcks.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:nakama.api.StorageObjectAcks)
}
StorageObjectAcks::StorageObjectAcks(const StorageObjectAcks& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      acks_(from.acks_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:nakama.api.StorageObjectAcks)
}

void StorageObjectAcks::SharedCtor() {
}

StorageObjectAcks::~StorageObjectAcks() {
  // @@protoc_insertion_point(destructor:nakama.api.StorageObjectAcks)
  SharedDtor();
}

void StorageObjectAcks::SharedDtor() {
}

void StorageObjectAcks::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* StorageObjectAcks::descriptor() {
  ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StorageObjectAcks& StorageObjectAcks::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_StorageObjectAcks.base);
  return *internal_default_instance();
}


void StorageObjectAcks::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.StorageObjectAcks)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  acks_.Clear();
  _internal_metadata_.Clear();
}

bool StorageObjectAcks::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nakama.api.StorageObjectAcks)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .nakama.api.StorageObjectAck acks = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_acks()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nakama.api.StorageObjectAcks)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nakama.api.StorageObjectAcks)
  return false;
#undef DO_
}

void StorageObjectAcks::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nakama.api.StorageObjectAcks)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .nakama.api.StorageObjectAck acks = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->acks_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->acks(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:nakama.api.StorageObjectAcks)
}

::google::protobuf::uint8* StorageObjectAcks::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.StorageObjectAcks)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .nakama.api.StorageObjectAck acks = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->acks_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->acks(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.StorageObjectAcks)
  return target;
}

size_t StorageObjectAcks::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.StorageObjectAcks)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .nakama.api.StorageObjectAck acks = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->acks_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->acks(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StorageObjectAcks::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.StorageObjectAcks)
  GOOGLE_DCHECK_NE(&from, this);
  const StorageObjectAcks* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StorageObjectAcks>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.StorageObjectAcks)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.StorageObjectAcks)
    MergeFrom(*source);
  }
}

void StorageObjectAcks::MergeFrom(const StorageObjectAcks& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.StorageObjectAcks)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  acks_.MergeFrom(from.acks_);
}

void StorageObjectAcks::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.StorageObjectAcks)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StorageObjectAcks::CopyFrom(const StorageObjectAcks& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.StorageObjectAcks)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StorageObjectAcks::IsInitialized() const {
  return true;
}

void StorageObjectAcks::Swap(StorageObjectAcks* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StorageObjectAcks::InternalSwap(StorageObjectAcks* other) {
  using std::swap;
  CastToBase(&acks_)->InternalSwap(CastToBase(&other->acks_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata StorageObjectAcks::GetMetadata() const {
  protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void StorageObjects::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StorageObjects::kObjectsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StorageObjects::StorageObjects()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_StorageObjects.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:nakama.api.StorageObjects)
}
StorageObjects::StorageObjects(const StorageObjects& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      objects_(from.objects_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:nakama.api.StorageObjects)
}

void StorageObjects::SharedCtor() {
}

StorageObjects::~StorageObjects() {
  // @@protoc_insertion_point(destructor:nakama.api.StorageObjects)
  SharedDtor();
}

void StorageObjects::SharedDtor() {
}

void StorageObjects::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* StorageObjects::descriptor() {
  ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StorageObjects& StorageObjects::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_StorageObjects.base);
  return *internal_default_instance();
}


void StorageObjects::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.StorageObjects)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  objects_.Clear();
  _internal_metadata_.Clear();
}

bool StorageObjects::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nakama.api.StorageObjects)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .nakama.api.StorageObject objects = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_objects()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nakama.api.StorageObjects)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nakama.api.StorageObjects)
  return false;
#undef DO_
}

void StorageObjects::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nakama.api.StorageObjects)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .nakama.api.StorageObject objects = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->objects_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->objects(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:nakama.api.StorageObjects)
}

::google::protobuf::uint8* StorageObjects::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.StorageObjects)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .nakama.api.StorageObject objects = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->objects_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->objects(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.StorageObjects)
  return target;
}

size_t StorageObjects::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.StorageObjects)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .nakama.api.StorageObject objects = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->objects_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->objects(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StorageObjects::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.StorageObjects)
  GOOGLE_DCHECK_NE(&from, this);
  const StorageObjects* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StorageObjects>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.StorageObjects)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.StorageObjects)
    MergeFrom(*source);
  }
}

void StorageObjects::MergeFrom(const StorageObjects& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.StorageObjects)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  objects_.MergeFrom(from.objects_);
}

void StorageObjects::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.StorageObjects)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StorageObjects::CopyFrom(const StorageObjects& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.StorageObjects)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StorageObjects::IsInitialized() const {
  return true;
}

void StorageObjects::Swap(StorageObjects* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StorageObjects::InternalSwap(StorageObjects* other) {
  using std::swap;
  CastToBase(&objects_)->InternalSwap(CastToBase(&other->objects_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata StorageObjects::GetMetadata() const {
  protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void StorageObjectList::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StorageObjectList::kObjectsFieldNumber;
const int StorageObjectList::kCursorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StorageObjectList::StorageObjectList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_StorageObjectList.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:nakama.api.StorageObjectList)
}
StorageObjectList::StorageObjectList(const StorageObjectList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      objects_(from.objects_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cursor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cursor().size() > 0) {
    cursor_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cursor_);
  }
  // @@protoc_insertion_point(copy_constructor:nakama.api.StorageObjectList)
}

void StorageObjectList::SharedCtor() {
  cursor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

StorageObjectList::~StorageObjectList() {
  // @@protoc_insertion_point(destructor:nakama.api.StorageObjectList)
  SharedDtor();
}

void StorageObjectList::SharedDtor() {
  cursor_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void StorageObjectList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* StorageObjectList::descriptor() {
  ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StorageObjectList& StorageObjectList::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_StorageObjectList.base);
  return *internal_default_instance();
}


void StorageObjectList::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.StorageObjectList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  objects_.Clear();
  cursor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool StorageObjectList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nakama.api.StorageObjectList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .nakama.api.StorageObject objects = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_objects()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cursor = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cursor()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cursor().data(), static_cast<int>(this->cursor().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nakama.api.StorageObjectList.cursor"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nakama.api.StorageObjectList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nakama.api.StorageObjectList)
  return false;
#undef DO_
}

void StorageObjectList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nakama.api.StorageObjectList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .nakama.api.StorageObject objects = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->objects_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->objects(static_cast<int>(i)),
      output);
  }

  // string cursor = 2;
  if (this->cursor().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cursor().data(), static_cast<int>(this->cursor().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.StorageObjectList.cursor");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->cursor(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:nakama.api.StorageObjectList)
}

::google::protobuf::uint8* StorageObjectList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.StorageObjectList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .nakama.api.StorageObject objects = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->objects_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->objects(static_cast<int>(i)), deterministic, target);
  }

  // string cursor = 2;
  if (this->cursor().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cursor().data(), static_cast<int>(this->cursor().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.StorageObjectList.cursor");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->cursor(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.StorageObjectList)
  return target;
}

size_t StorageObjectList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.StorageObjectList)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .nakama.api.StorageObject objects = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->objects_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->objects(static_cast<int>(i)));
    }
  }

  // string cursor = 2;
  if (this->cursor().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cursor());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StorageObjectList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.StorageObjectList)
  GOOGLE_DCHECK_NE(&from, this);
  const StorageObjectList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StorageObjectList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.StorageObjectList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.StorageObjectList)
    MergeFrom(*source);
  }
}

void StorageObjectList::MergeFrom(const StorageObjectList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.StorageObjectList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  objects_.MergeFrom(from.objects_);
  if (from.cursor().size() > 0) {

    cursor_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cursor_);
  }
}

void StorageObjectList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.StorageObjectList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StorageObjectList::CopyFrom(const StorageObjectList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.StorageObjectList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StorageObjectList::IsInitialized() const {
  return true;
}

void StorageObjectList::Swap(StorageObjectList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StorageObjectList::InternalSwap(StorageObjectList* other) {
  using std::swap;
  CastToBase(&objects_)->InternalSwap(CastToBase(&other->objects_));
  cursor_.Swap(&other->cursor_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata StorageObjectList::GetMetadata() const {
  protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Tournament::InitAsDefaultInstance() {
  ::nakama::api::_Tournament_default_instance_._instance.get_mutable()->create_time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  ::nakama::api::_Tournament_default_instance_._instance.get_mutable()->start_time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  ::nakama::api::_Tournament_default_instance_._instance.get_mutable()->end_time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
}
void Tournament::clear_create_time() {
  if (GetArenaNoVirtual() == NULL && create_time_ != NULL) {
    delete create_time_;
  }
  create_time_ = NULL;
}
void Tournament::clear_start_time() {
  if (GetArenaNoVirtual() == NULL && start_time_ != NULL) {
    delete start_time_;
  }
  start_time_ = NULL;
}
void Tournament::clear_end_time() {
  if (GetArenaNoVirtual() == NULL && end_time_ != NULL) {
    delete end_time_;
  }
  end_time_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Tournament::kIdFieldNumber;
const int Tournament::kTitleFieldNumber;
const int Tournament::kDescriptionFieldNumber;
const int Tournament::kCategoryFieldNumber;
const int Tournament::kSortOrderFieldNumber;
const int Tournament::kSizeFieldNumber;
const int Tournament::kMaxSizeFieldNumber;
const int Tournament::kMaxNumScoreFieldNumber;
const int Tournament::kCanEnterFieldNumber;
const int Tournament::kEndActiveFieldNumber;
const int Tournament::kNextResetFieldNumber;
const int Tournament::kMetadataFieldNumber;
const int Tournament::kCreateTimeFieldNumber;
const int Tournament::kStartTimeFieldNumber;
const int Tournament::kEndTimeFieldNumber;
const int Tournament::kDurationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Tournament::Tournament()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_Tournament.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:nakama.api.Tournament)
}
Tournament::Tournament(const Tournament& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.title().size() > 0) {
    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.description().size() > 0) {
    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  metadata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.metadata().size() > 0) {
    metadata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.metadata_);
  }
  if (from.has_create_time()) {
    create_time_ = new ::google::protobuf::Timestamp(*from.create_time_);
  } else {
    create_time_ = NULL;
  }
  if (from.has_start_time()) {
    start_time_ = new ::google::protobuf::Timestamp(*from.start_time_);
  } else {
    start_time_ = NULL;
  }
  if (from.has_end_time()) {
    end_time_ = new ::google::protobuf::Timestamp(*from.end_time_);
  } else {
    end_time_ = NULL;
  }
  ::memcpy(&category_, &from.category_,
    static_cast<size_t>(reinterpret_cast<char*>(&duration_) -
    reinterpret_cast<char*>(&category_)) + sizeof(duration_));
  // @@protoc_insertion_point(copy_constructor:nakama.api.Tournament)
}

void Tournament::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  metadata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&create_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&duration_) -
      reinterpret_cast<char*>(&create_time_)) + sizeof(duration_));
}

Tournament::~Tournament() {
  // @@protoc_insertion_point(destructor:nakama.api.Tournament)
  SharedDtor();
}

void Tournament::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  metadata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete create_time_;
  if (this != internal_default_instance()) delete start_time_;
  if (this != internal_default_instance()) delete end_time_;
}

void Tournament::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Tournament::descriptor() {
  ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Tournament& Tournament::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_Tournament.base);
  return *internal_default_instance();
}


void Tournament::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.Tournament)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  metadata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && create_time_ != NULL) {
    delete create_time_;
  }
  create_time_ = NULL;
  if (GetArenaNoVirtual() == NULL && start_time_ != NULL) {
    delete start_time_;
  }
  start_time_ = NULL;
  if (GetArenaNoVirtual() == NULL && end_time_ != NULL) {
    delete end_time_;
  }
  end_time_ = NULL;
  ::memset(&category_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&duration_) -
      reinterpret_cast<char*>(&category_)) + sizeof(duration_));
  _internal_metadata_.Clear();
}

bool Tournament::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nakama.api.Tournament)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nakama.api.Tournament.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string title = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->title().data(), static_cast<int>(this->title().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nakama.api.Tournament.title"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string description = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->description().data(), static_cast<int>(this->description().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nakama.api.Tournament.description"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 category = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &category_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 sort_order = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sort_order_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 size = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 max_size = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 max_num_score = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_num_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool can_enter = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &can_enter_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 end_active = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &end_active_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 next_reset = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &next_reset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string metadata = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_metadata()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->metadata().data(), static_cast<int>(this->metadata().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nakama.api.Tournament.metadata"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp create_time = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_create_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp start_time = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_start_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp end_time = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_end_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 duration = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nakama.api.Tournament)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nakama.api.Tournament)
  return false;
#undef DO_
}

void Tournament::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nakama.api.Tournament)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.Tournament.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // string title = 2;
  if (this->title().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.Tournament.title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->title(), output);
  }

  // string description = 3;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.Tournament.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->description(), output);
  }

  // uint32 category = 4;
  if (this->category() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->category(), output);
  }

  // uint32 sort_order = 5;
  if (this->sort_order() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->sort_order(), output);
  }

  // uint32 size = 6;
  if (this->size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->size(), output);
  }

  // uint32 max_size = 7;
  if (this->max_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->max_size(), output);
  }

  // uint32 max_num_score = 8;
  if (this->max_num_score() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->max_num_score(), output);
  }

  // bool can_enter = 9;
  if (this->can_enter() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->can_enter(), output);
  }

  // uint32 end_active = 10;
  if (this->end_active() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->end_active(), output);
  }

  // uint32 next_reset = 11;
  if (this->next_reset() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->next_reset(), output);
  }

  // string metadata = 12;
  if (this->metadata().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->metadata().data(), static_cast<int>(this->metadata().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.Tournament.metadata");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->metadata(), output);
  }

  // .google.protobuf.Timestamp create_time = 13;
  if (this->has_create_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->_internal_create_time(), output);
  }

  // .google.protobuf.Timestamp start_time = 14;
  if (this->has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->_internal_start_time(), output);
  }

  // .google.protobuf.Timestamp end_time = 15;
  if (this->has_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->_internal_end_time(), output);
  }

  // uint32 duration = 16;
  if (this->duration() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->duration(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:nakama.api.Tournament)
}

::google::protobuf::uint8* Tournament::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.Tournament)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.Tournament.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // string title = 2;
  if (this->title().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.Tournament.title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->title(), target);
  }

  // string description = 3;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.Tournament.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->description(), target);
  }

  // uint32 category = 4;
  if (this->category() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->category(), target);
  }

  // uint32 sort_order = 5;
  if (this->sort_order() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->sort_order(), target);
  }

  // uint32 size = 6;
  if (this->size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->size(), target);
  }

  // uint32 max_size = 7;
  if (this->max_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->max_size(), target);
  }

  // uint32 max_num_score = 8;
  if (this->max_num_score() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->max_num_score(), target);
  }

  // bool can_enter = 9;
  if (this->can_enter() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->can_enter(), target);
  }

  // uint32 end_active = 10;
  if (this->end_active() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->end_active(), target);
  }

  // uint32 next_reset = 11;
  if (this->next_reset() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->next_reset(), target);
  }

  // string metadata = 12;
  if (this->metadata().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->metadata().data(), static_cast<int>(this->metadata().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.Tournament.metadata");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->metadata(), target);
  }

  // .google.protobuf.Timestamp create_time = 13;
  if (this->has_create_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, this->_internal_create_time(), deterministic, target);
  }

  // .google.protobuf.Timestamp start_time = 14;
  if (this->has_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        14, this->_internal_start_time(), deterministic, target);
  }

  // .google.protobuf.Timestamp end_time = 15;
  if (this->has_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        15, this->_internal_end_time(), deterministic, target);
  }

  // uint32 duration = 16;
  if (this->duration() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->duration(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.Tournament)
  return target;
}

size_t Tournament::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.Tournament)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // string title = 2;
  if (this->title().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->title());
  }

  // string description = 3;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->description());
  }

  // string metadata = 12;
  if (this->metadata().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->metadata());
  }

  // .google.protobuf.Timestamp create_time = 13;
  if (this->has_create_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *create_time_);
  }

  // .google.protobuf.Timestamp start_time = 14;
  if (this->has_start_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *start_time_);
  }

  // .google.protobuf.Timestamp end_time = 15;
  if (this->has_end_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *end_time_);
  }

  // uint32 category = 4;
  if (this->category() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->category());
  }

  // uint32 sort_order = 5;
  if (this->sort_order() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sort_order());
  }

  // uint32 size = 6;
  if (this->size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->size());
  }

  // uint32 max_size = 7;
  if (this->max_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->max_size());
  }

  // uint32 max_num_score = 8;
  if (this->max_num_score() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->max_num_score());
  }

  // bool can_enter = 9;
  if (this->can_enter() != 0) {
    total_size += 1 + 1;
  }

  // uint32 end_active = 10;
  if (this->end_active() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->end_active());
  }

  // uint32 next_reset = 11;
  if (this->next_reset() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->next_reset());
  }

  // uint32 duration = 16;
  if (this->duration() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->duration());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Tournament::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.Tournament)
  GOOGLE_DCHECK_NE(&from, this);
  const Tournament* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Tournament>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.Tournament)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.Tournament)
    MergeFrom(*source);
  }
}

void Tournament::MergeFrom(const Tournament& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.Tournament)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.title().size() > 0) {

    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from.metadata().size() > 0) {

    metadata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.metadata_);
  }
  if (from.has_create_time()) {
    mutable_create_time()->::google::protobuf::Timestamp::MergeFrom(from.create_time());
  }
  if (from.has_start_time()) {
    mutable_start_time()->::google::protobuf::Timestamp::MergeFrom(from.start_time());
  }
  if (from.has_end_time()) {
    mutable_end_time()->::google::protobuf::Timestamp::MergeFrom(from.end_time());
  }
  if (from.category() != 0) {
    set_category(from.category());
  }
  if (from.sort_order() != 0) {
    set_sort_order(from.sort_order());
  }
  if (from.size() != 0) {
    set_size(from.size());
  }
  if (from.max_size() != 0) {
    set_max_size(from.max_size());
  }
  if (from.max_num_score() != 0) {
    set_max_num_score(from.max_num_score());
  }
  if (from.can_enter() != 0) {
    set_can_enter(from.can_enter());
  }
  if (from.end_active() != 0) {
    set_end_active(from.end_active());
  }
  if (from.next_reset() != 0) {
    set_next_reset(from.next_reset());
  }
  if (from.duration() != 0) {
    set_duration(from.duration());
  }
}

void Tournament::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.Tournament)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Tournament::CopyFrom(const Tournament& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.Tournament)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tournament::IsInitialized() const {
  return true;
}

void Tournament::Swap(Tournament* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Tournament::InternalSwap(Tournament* other) {
  using std::swap;
  id_.Swap(&other->id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  title_.Swap(&other->title_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  description_.Swap(&other->description_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  metadata_.Swap(&other->metadata_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(create_time_, other->create_time_);
  swap(start_time_, other->start_time_);
  swap(end_time_, other->end_time_);
  swap(category_, other->category_);
  swap(sort_order_, other->sort_order_);
  swap(size_, other->size_);
  swap(max_size_, other->max_size_);
  swap(max_num_score_, other->max_num_score_);
  swap(can_enter_, other->can_enter_);
  swap(end_active_, other->end_active_);
  swap(next_reset_, other->next_reset_);
  swap(duration_, other->duration_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Tournament::GetMetadata() const {
  protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TournamentList::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TournamentList::kTournamentsFieldNumber;
const int TournamentList::kCursorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TournamentList::TournamentList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_TournamentList.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:nakama.api.TournamentList)
}
TournamentList::TournamentList(const TournamentList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      tournaments_(from.tournaments_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cursor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cursor().size() > 0) {
    cursor_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cursor_);
  }
  // @@protoc_insertion_point(copy_constructor:nakama.api.TournamentList)
}

void TournamentList::SharedCtor() {
  cursor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

TournamentList::~TournamentList() {
  // @@protoc_insertion_point(destructor:nakama.api.TournamentList)
  SharedDtor();
}

void TournamentList::SharedDtor() {
  cursor_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TournamentList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TournamentList::descriptor() {
  ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TournamentList& TournamentList::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_TournamentList.base);
  return *internal_default_instance();
}


void TournamentList::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.TournamentList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tournaments_.Clear();
  cursor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool TournamentList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nakama.api.TournamentList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .nakama.api.Tournament tournaments = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_tournaments()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cursor = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cursor()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cursor().data(), static_cast<int>(this->cursor().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nakama.api.TournamentList.cursor"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nakama.api.TournamentList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nakama.api.TournamentList)
  return false;
#undef DO_
}

void TournamentList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nakama.api.TournamentList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .nakama.api.Tournament tournaments = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tournaments_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->tournaments(static_cast<int>(i)),
      output);
  }

  // string cursor = 2;
  if (this->cursor().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cursor().data(), static_cast<int>(this->cursor().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.TournamentList.cursor");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->cursor(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:nakama.api.TournamentList)
}

::google::protobuf::uint8* TournamentList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.TournamentList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .nakama.api.Tournament tournaments = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tournaments_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->tournaments(static_cast<int>(i)), deterministic, target);
  }

  // string cursor = 2;
  if (this->cursor().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cursor().data(), static_cast<int>(this->cursor().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.TournamentList.cursor");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->cursor(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.TournamentList)
  return target;
}

size_t TournamentList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.TournamentList)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .nakama.api.Tournament tournaments = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->tournaments_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->tournaments(static_cast<int>(i)));
    }
  }

  // string cursor = 2;
  if (this->cursor().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cursor());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TournamentList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.TournamentList)
  GOOGLE_DCHECK_NE(&from, this);
  const TournamentList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TournamentList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.TournamentList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.TournamentList)
    MergeFrom(*source);
  }
}

void TournamentList::MergeFrom(const TournamentList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.TournamentList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tournaments_.MergeFrom(from.tournaments_);
  if (from.cursor().size() > 0) {

    cursor_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cursor_);
  }
}

void TournamentList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.TournamentList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TournamentList::CopyFrom(const TournamentList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.TournamentList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TournamentList::IsInitialized() const {
  return true;
}

void TournamentList::Swap(TournamentList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TournamentList::InternalSwap(TournamentList* other) {
  using std::swap;
  CastToBase(&tournaments_)->InternalSwap(CastToBase(&other->tournaments_));
  cursor_.Swap(&other->cursor_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TournamentList::GetMetadata() const {
  protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TournamentRecordList::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TournamentRecordList::kRecordsFieldNumber;
const int TournamentRecordList::kOwnerRecordsFieldNumber;
const int TournamentRecordList::kNextCursorFieldNumber;
const int TournamentRecordList::kPrevCursorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TournamentRecordList::TournamentRecordList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_TournamentRecordList.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:nakama.api.TournamentRecordList)
}
TournamentRecordList::TournamentRecordList(const TournamentRecordList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      records_(from.records_),
      owner_records_(from.owner_records_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  next_cursor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.next_cursor().size() > 0) {
    next_cursor_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.next_cursor_);
  }
  prev_cursor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.prev_cursor().size() > 0) {
    prev_cursor_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.prev_cursor_);
  }
  // @@protoc_insertion_point(copy_constructor:nakama.api.TournamentRecordList)
}

void TournamentRecordList::SharedCtor() {
  next_cursor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  prev_cursor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

TournamentRecordList::~TournamentRecordList() {
  // @@protoc_insertion_point(destructor:nakama.api.TournamentRecordList)
  SharedDtor();
}

void TournamentRecordList::SharedDtor() {
  next_cursor_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  prev_cursor_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TournamentRecordList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TournamentRecordList::descriptor() {
  ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TournamentRecordList& TournamentRecordList::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_TournamentRecordList.base);
  return *internal_default_instance();
}


void TournamentRecordList::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.TournamentRecordList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  records_.Clear();
  owner_records_.Clear();
  next_cursor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  prev_cursor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool TournamentRecordList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nakama.api.TournamentRecordList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .nakama.api.LeaderboardRecord records = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_records()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .nakama.api.LeaderboardRecord owner_records = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_owner_records()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string next_cursor = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_next_cursor()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->next_cursor().data(), static_cast<int>(this->next_cursor().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nakama.api.TournamentRecordList.next_cursor"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string prev_cursor = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_prev_cursor()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->prev_cursor().data(), static_cast<int>(this->prev_cursor().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nakama.api.TournamentRecordList.prev_cursor"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nakama.api.TournamentRecordList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nakama.api.TournamentRecordList)
  return false;
#undef DO_
}

void TournamentRecordList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nakama.api.TournamentRecordList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .nakama.api.LeaderboardRecord records = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->records_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->records(static_cast<int>(i)),
      output);
  }

  // repeated .nakama.api.LeaderboardRecord owner_records = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->owner_records_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->owner_records(static_cast<int>(i)),
      output);
  }

  // string next_cursor = 3;
  if (this->next_cursor().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->next_cursor().data(), static_cast<int>(this->next_cursor().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.TournamentRecordList.next_cursor");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->next_cursor(), output);
  }

  // string prev_cursor = 4;
  if (this->prev_cursor().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->prev_cursor().data(), static_cast<int>(this->prev_cursor().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.TournamentRecordList.prev_cursor");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->prev_cursor(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:nakama.api.TournamentRecordList)
}

::google::protobuf::uint8* TournamentRecordList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.TournamentRecordList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .nakama.api.LeaderboardRecord records = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->records_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->records(static_cast<int>(i)), deterministic, target);
  }

  // repeated .nakama.api.LeaderboardRecord owner_records = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->owner_records_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->owner_records(static_cast<int>(i)), deterministic, target);
  }

  // string next_cursor = 3;
  if (this->next_cursor().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->next_cursor().data(), static_cast<int>(this->next_cursor().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.TournamentRecordList.next_cursor");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->next_cursor(), target);
  }

  // string prev_cursor = 4;
  if (this->prev_cursor().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->prev_cursor().data(), static_cast<int>(this->prev_cursor().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.TournamentRecordList.prev_cursor");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->prev_cursor(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.TournamentRecordList)
  return target;
}

size_t TournamentRecordList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.TournamentRecordList)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .nakama.api.LeaderboardRecord records = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->records_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->records(static_cast<int>(i)));
    }
  }

  // repeated .nakama.api.LeaderboardRecord owner_records = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->owner_records_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->owner_records(static_cast<int>(i)));
    }
  }

  // string next_cursor = 3;
  if (this->next_cursor().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->next_cursor());
  }

  // string prev_cursor = 4;
  if (this->prev_cursor().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->prev_cursor());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TournamentRecordList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.TournamentRecordList)
  GOOGLE_DCHECK_NE(&from, this);
  const TournamentRecordList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TournamentRecordList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.TournamentRecordList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.TournamentRecordList)
    MergeFrom(*source);
  }
}

void TournamentRecordList::MergeFrom(const TournamentRecordList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.TournamentRecordList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  records_.MergeFrom(from.records_);
  owner_records_.MergeFrom(from.owner_records_);
  if (from.next_cursor().size() > 0) {

    next_cursor_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.next_cursor_);
  }
  if (from.prev_cursor().size() > 0) {

    prev_cursor_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.prev_cursor_);
  }
}

void TournamentRecordList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.TournamentRecordList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TournamentRecordList::CopyFrom(const TournamentRecordList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.TournamentRecordList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TournamentRecordList::IsInitialized() const {
  return true;
}

void TournamentRecordList::Swap(TournamentRecordList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TournamentRecordList::InternalSwap(TournamentRecordList* other) {
  using std::swap;
  CastToBase(&records_)->InternalSwap(CastToBase(&other->records_));
  CastToBase(&owner_records_)->InternalSwap(CastToBase(&other->owner_records_));
  next_cursor_.Swap(&other->next_cursor_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  prev_cursor_.Swap(&other->prev_cursor_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TournamentRecordList::GetMetadata() const {
  protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UpdateAccountRequest::InitAsDefaultInstance() {
  ::nakama::api::_UpdateAccountRequest_default_instance_._instance.get_mutable()->username_ = const_cast< ::google::protobuf::StringValue*>(
      ::google::protobuf::StringValue::internal_default_instance());
  ::nakama::api::_UpdateAccountRequest_default_instance_._instance.get_mutable()->display_name_ = const_cast< ::google::protobuf::StringValue*>(
      ::google::protobuf::StringValue::internal_default_instance());
  ::nakama::api::_UpdateAccountRequest_default_instance_._instance.get_mutable()->avatar_url_ = const_cast< ::google::protobuf::StringValue*>(
      ::google::protobuf::StringValue::internal_default_instance());
  ::nakama::api::_UpdateAccountRequest_default_instance_._instance.get_mutable()->lang_tag_ = const_cast< ::google::protobuf::StringValue*>(
      ::google::protobuf::StringValue::internal_default_instance());
  ::nakama::api::_UpdateAccountRequest_default_instance_._instance.get_mutable()->location_ = const_cast< ::google::protobuf::StringValue*>(
      ::google::protobuf::StringValue::internal_default_instance());
  ::nakama::api::_UpdateAccountRequest_default_instance_._instance.get_mutable()->timezone_ = const_cast< ::google::protobuf::StringValue*>(
      ::google::protobuf::StringValue::internal_default_instance());
}
void UpdateAccountRequest::clear_username() {
  if (GetArenaNoVirtual() == NULL && username_ != NULL) {
    delete username_;
  }
  username_ = NULL;
}
void UpdateAccountRequest::clear_display_name() {
  if (GetArenaNoVirtual() == NULL && display_name_ != NULL) {
    delete display_name_;
  }
  display_name_ = NULL;
}
void UpdateAccountRequest::clear_avatar_url() {
  if (GetArenaNoVirtual() == NULL && avatar_url_ != NULL) {
    delete avatar_url_;
  }
  avatar_url_ = NULL;
}
void UpdateAccountRequest::clear_lang_tag() {
  if (GetArenaNoVirtual() == NULL && lang_tag_ != NULL) {
    delete lang_tag_;
  }
  lang_tag_ = NULL;
}
void UpdateAccountRequest::clear_location() {
  if (GetArenaNoVirtual() == NULL && location_ != NULL) {
    delete location_;
  }
  location_ = NULL;
}
void UpdateAccountRequest::clear_timezone() {
  if (GetArenaNoVirtual() == NULL && timezone_ != NULL) {
    delete timezone_;
  }
  timezone_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdateAccountRequest::kUsernameFieldNumber;
const int UpdateAccountRequest::kDisplayNameFieldNumber;
const int UpdateAccountRequest::kAvatarUrlFieldNumber;
const int UpdateAccountRequest::kLangTagFieldNumber;
const int UpdateAccountRequest::kLocationFieldNumber;
const int UpdateAccountRequest::kTimezoneFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdateAccountRequest::UpdateAccountRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_UpdateAccountRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:nakama.api.UpdateAccountRequest)
}
UpdateAccountRequest::UpdateAccountRequest(const UpdateAccountRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_username()) {
    username_ = new ::google::protobuf::StringValue(*from.username_);
  } else {
    username_ = NULL;
  }
  if (from.has_display_name()) {
    display_name_ = new ::google::protobuf::StringValue(*from.display_name_);
  } else {
    display_name_ = NULL;
  }
  if (from.has_avatar_url()) {
    avatar_url_ = new ::google::protobuf::StringValue(*from.avatar_url_);
  } else {
    avatar_url_ = NULL;
  }
  if (from.has_lang_tag()) {
    lang_tag_ = new ::google::protobuf::StringValue(*from.lang_tag_);
  } else {
    lang_tag_ = NULL;
  }
  if (from.has_location()) {
    location_ = new ::google::protobuf::StringValue(*from.location_);
  } else {
    location_ = NULL;
  }
  if (from.has_timezone()) {
    timezone_ = new ::google::protobuf::StringValue(*from.timezone_);
  } else {
    timezone_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:nakama.api.UpdateAccountRequest)
}

void UpdateAccountRequest::SharedCtor() {
  ::memset(&username_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timezone_) -
      reinterpret_cast<char*>(&username_)) + sizeof(timezone_));
}

UpdateAccountRequest::~UpdateAccountRequest() {
  // @@protoc_insertion_point(destructor:nakama.api.UpdateAccountRequest)
  SharedDtor();
}

void UpdateAccountRequest::SharedDtor() {
  if (this != internal_default_instance()) delete username_;
  if (this != internal_default_instance()) delete display_name_;
  if (this != internal_default_instance()) delete avatar_url_;
  if (this != internal_default_instance()) delete lang_tag_;
  if (this != internal_default_instance()) delete location_;
  if (this != internal_default_instance()) delete timezone_;
}

void UpdateAccountRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UpdateAccountRequest::descriptor() {
  ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UpdateAccountRequest& UpdateAccountRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_UpdateAccountRequest.base);
  return *internal_default_instance();
}


void UpdateAccountRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.UpdateAccountRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && username_ != NULL) {
    delete username_;
  }
  username_ = NULL;
  if (GetArenaNoVirtual() == NULL && display_name_ != NULL) {
    delete display_name_;
  }
  display_name_ = NULL;
  if (GetArenaNoVirtual() == NULL && avatar_url_ != NULL) {
    delete avatar_url_;
  }
  avatar_url_ = NULL;
  if (GetArenaNoVirtual() == NULL && lang_tag_ != NULL) {
    delete lang_tag_;
  }
  lang_tag_ = NULL;
  if (GetArenaNoVirtual() == NULL && location_ != NULL) {
    delete location_;
  }
  location_ = NULL;
  if (GetArenaNoVirtual() == NULL && timezone_ != NULL) {
    delete timezone_;
  }
  timezone_ = NULL;
  _internal_metadata_.Clear();
}

bool UpdateAccountRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nakama.api.UpdateAccountRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.protobuf.StringValue username = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_username()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.StringValue display_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_display_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.StringValue avatar_url = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_avatar_url()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.StringValue lang_tag = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_lang_tag()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.StringValue location = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.StringValue timezone = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_timezone()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nakama.api.UpdateAccountRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nakama.api.UpdateAccountRequest)
  return false;
#undef DO_
}

void UpdateAccountRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nakama.api.UpdateAccountRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.StringValue username = 1;
  if (this->has_username()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_username(), output);
  }

  // .google.protobuf.StringValue display_name = 2;
  if (this->has_display_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_display_name(), output);
  }

  // .google.protobuf.StringValue avatar_url = 3;
  if (this->has_avatar_url()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_avatar_url(), output);
  }

  // .google.protobuf.StringValue lang_tag = 4;
  if (this->has_lang_tag()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_lang_tag(), output);
  }

  // .google.protobuf.StringValue location = 5;
  if (this->has_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_location(), output);
  }

  // .google.protobuf.StringValue timezone = 6;
  if (this->has_timezone()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_timezone(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:nakama.api.UpdateAccountRequest)
}

::google::protobuf::uint8* UpdateAccountRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.UpdateAccountRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.StringValue username = 1;
  if (this->has_username()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_username(), deterministic, target);
  }

  // .google.protobuf.StringValue display_name = 2;
  if (this->has_display_name()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_display_name(), deterministic, target);
  }

  // .google.protobuf.StringValue avatar_url = 3;
  if (this->has_avatar_url()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_avatar_url(), deterministic, target);
  }

  // .google.protobuf.StringValue lang_tag = 4;
  if (this->has_lang_tag()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_lang_tag(), deterministic, target);
  }

  // .google.protobuf.StringValue location = 5;
  if (this->has_location()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_location(), deterministic, target);
  }

  // .google.protobuf.StringValue timezone = 6;
  if (this->has_timezone()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_timezone(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.UpdateAccountRequest)
  return target;
}

size_t UpdateAccountRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.UpdateAccountRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .google.protobuf.StringValue username = 1;
  if (this->has_username()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *username_);
  }

  // .google.protobuf.StringValue display_name = 2;
  if (this->has_display_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *display_name_);
  }

  // .google.protobuf.StringValue avatar_url = 3;
  if (this->has_avatar_url()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *avatar_url_);
  }

  // .google.protobuf.StringValue lang_tag = 4;
  if (this->has_lang_tag()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *lang_tag_);
  }

  // .google.protobuf.StringValue location = 5;
  if (this->has_location()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *location_);
  }

  // .google.protobuf.StringValue timezone = 6;
  if (this->has_timezone()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *timezone_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateAccountRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.UpdateAccountRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateAccountRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UpdateAccountRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.UpdateAccountRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.UpdateAccountRequest)
    MergeFrom(*source);
  }
}

void UpdateAccountRequest::MergeFrom(const UpdateAccountRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.UpdateAccountRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_username()) {
    mutable_username()->::google::protobuf::StringValue::MergeFrom(from.username());
  }
  if (from.has_display_name()) {
    mutable_display_name()->::google::protobuf::StringValue::MergeFrom(from.display_name());
  }
  if (from.has_avatar_url()) {
    mutable_avatar_url()->::google::protobuf::StringValue::MergeFrom(from.avatar_url());
  }
  if (from.has_lang_tag()) {
    mutable_lang_tag()->::google::protobuf::StringValue::MergeFrom(from.lang_tag());
  }
  if (from.has_location()) {
    mutable_location()->::google::protobuf::StringValue::MergeFrom(from.location());
  }
  if (from.has_timezone()) {
    mutable_timezone()->::google::protobuf::StringValue::MergeFrom(from.timezone());
  }
}

void UpdateAccountRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.UpdateAccountRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateAccountRequest::CopyFrom(const UpdateAccountRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.UpdateAccountRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateAccountRequest::IsInitialized() const {
  return true;
}

void UpdateAccountRequest::Swap(UpdateAccountRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpdateAccountRequest::InternalSwap(UpdateAccountRequest* other) {
  using std::swap;
  swap(username_, other->username_);
  swap(display_name_, other->display_name_);
  swap(avatar_url_, other->avatar_url_);
  swap(lang_tag_, other->lang_tag_);
  swap(location_, other->location_);
  swap(timezone_, other->timezone_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UpdateAccountRequest::GetMetadata() const {
  protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UpdateGroupRequest::InitAsDefaultInstance() {
  ::nakama::api::_UpdateGroupRequest_default_instance_._instance.get_mutable()->name_ = const_cast< ::google::protobuf::StringValue*>(
      ::google::protobuf::StringValue::internal_default_instance());
  ::nakama::api::_UpdateGroupRequest_default_instance_._instance.get_mutable()->description_ = const_cast< ::google::protobuf::StringValue*>(
      ::google::protobuf::StringValue::internal_default_instance());
  ::nakama::api::_UpdateGroupRequest_default_instance_._instance.get_mutable()->lang_tag_ = const_cast< ::google::protobuf::StringValue*>(
      ::google::protobuf::StringValue::internal_default_instance());
  ::nakama::api::_UpdateGroupRequest_default_instance_._instance.get_mutable()->avatar_url_ = const_cast< ::google::protobuf::StringValue*>(
      ::google::protobuf::StringValue::internal_default_instance());
  ::nakama::api::_UpdateGroupRequest_default_instance_._instance.get_mutable()->open_ = const_cast< ::google::protobuf::BoolValue*>(
      ::google::protobuf::BoolValue::internal_default_instance());
}
void UpdateGroupRequest::clear_name() {
  if (GetArenaNoVirtual() == NULL && name_ != NULL) {
    delete name_;
  }
  name_ = NULL;
}
void UpdateGroupRequest::clear_description() {
  if (GetArenaNoVirtual() == NULL && description_ != NULL) {
    delete description_;
  }
  description_ = NULL;
}
void UpdateGroupRequest::clear_lang_tag() {
  if (GetArenaNoVirtual() == NULL && lang_tag_ != NULL) {
    delete lang_tag_;
  }
  lang_tag_ = NULL;
}
void UpdateGroupRequest::clear_avatar_url() {
  if (GetArenaNoVirtual() == NULL && avatar_url_ != NULL) {
    delete avatar_url_;
  }
  avatar_url_ = NULL;
}
void UpdateGroupRequest::clear_open() {
  if (GetArenaNoVirtual() == NULL && open_ != NULL) {
    delete open_;
  }
  open_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdateGroupRequest::kGroupIdFieldNumber;
const int UpdateGroupRequest::kNameFieldNumber;
const int UpdateGroupRequest::kDescriptionFieldNumber;
const int UpdateGroupRequest::kLangTagFieldNumber;
const int UpdateGroupRequest::kAvatarUrlFieldNumber;
const int UpdateGroupRequest::kOpenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdateGroupRequest::UpdateGroupRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_UpdateGroupRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:nakama.api.UpdateGroupRequest)
}
UpdateGroupRequest::UpdateGroupRequest(const UpdateGroupRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.group_id().size() > 0) {
    group_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.group_id_);
  }
  if (from.has_name()) {
    name_ = new ::google::protobuf::StringValue(*from.name_);
  } else {
    name_ = NULL;
  }
  if (from.has_description()) {
    description_ = new ::google::protobuf::StringValue(*from.description_);
  } else {
    description_ = NULL;
  }
  if (from.has_lang_tag()) {
    lang_tag_ = new ::google::protobuf::StringValue(*from.lang_tag_);
  } else {
    lang_tag_ = NULL;
  }
  if (from.has_avatar_url()) {
    avatar_url_ = new ::google::protobuf::StringValue(*from.avatar_url_);
  } else {
    avatar_url_ = NULL;
  }
  if (from.has_open()) {
    open_ = new ::google::protobuf::BoolValue(*from.open_);
  } else {
    open_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:nakama.api.UpdateGroupRequest)
}

void UpdateGroupRequest::SharedCtor() {
  group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&name_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&open_) -
      reinterpret_cast<char*>(&name_)) + sizeof(open_));
}

UpdateGroupRequest::~UpdateGroupRequest() {
  // @@protoc_insertion_point(destructor:nakama.api.UpdateGroupRequest)
  SharedDtor();
}

void UpdateGroupRequest::SharedDtor() {
  group_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete name_;
  if (this != internal_default_instance()) delete description_;
  if (this != internal_default_instance()) delete lang_tag_;
  if (this != internal_default_instance()) delete avatar_url_;
  if (this != internal_default_instance()) delete open_;
}

void UpdateGroupRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UpdateGroupRequest::descriptor() {
  ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UpdateGroupRequest& UpdateGroupRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_UpdateGroupRequest.base);
  return *internal_default_instance();
}


void UpdateGroupRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.UpdateGroupRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  group_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && name_ != NULL) {
    delete name_;
  }
  name_ = NULL;
  if (GetArenaNoVirtual() == NULL && description_ != NULL) {
    delete description_;
  }
  description_ = NULL;
  if (GetArenaNoVirtual() == NULL && lang_tag_ != NULL) {
    delete lang_tag_;
  }
  lang_tag_ = NULL;
  if (GetArenaNoVirtual() == NULL && avatar_url_ != NULL) {
    delete avatar_url_;
  }
  avatar_url_ = NULL;
  if (GetArenaNoVirtual() == NULL && open_ != NULL) {
    delete open_;
  }
  open_ = NULL;
  _internal_metadata_.Clear();
}

bool UpdateGroupRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nakama.api.UpdateGroupRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string group_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->group_id().data(), static_cast<int>(this->group_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nakama.api.UpdateGroupRequest.group_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.StringValue name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.StringValue description = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_description()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.StringValue lang_tag = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_lang_tag()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.StringValue avatar_url = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_avatar_url()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.BoolValue open = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_open()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nakama.api.UpdateGroupRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nakama.api.UpdateGroupRequest)
  return false;
#undef DO_
}

void UpdateGroupRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nakama.api.UpdateGroupRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string group_id = 1;
  if (this->group_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->group_id().data(), static_cast<int>(this->group_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.UpdateGroupRequest.group_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->group_id(), output);
  }

  // .google.protobuf.StringValue name = 2;
  if (this->has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_name(), output);
  }

  // .google.protobuf.StringValue description = 3;
  if (this->has_description()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_description(), output);
  }

  // .google.protobuf.StringValue lang_tag = 4;
  if (this->has_lang_tag()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_lang_tag(), output);
  }

  // .google.protobuf.StringValue avatar_url = 5;
  if (this->has_avatar_url()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_avatar_url(), output);
  }

  // .google.protobuf.BoolValue open = 6;
  if (this->has_open()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_open(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:nakama.api.UpdateGroupRequest)
}

::google::protobuf::uint8* UpdateGroupRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.UpdateGroupRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string group_id = 1;
  if (this->group_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->group_id().data(), static_cast<int>(this->group_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.UpdateGroupRequest.group_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->group_id(), target);
  }

  // .google.protobuf.StringValue name = 2;
  if (this->has_name()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_name(), deterministic, target);
  }

  // .google.protobuf.StringValue description = 3;
  if (this->has_description()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_description(), deterministic, target);
  }

  // .google.protobuf.StringValue lang_tag = 4;
  if (this->has_lang_tag()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_lang_tag(), deterministic, target);
  }

  // .google.protobuf.StringValue avatar_url = 5;
  if (this->has_avatar_url()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_avatar_url(), deterministic, target);
  }

  // .google.protobuf.BoolValue open = 6;
  if (this->has_open()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_open(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.UpdateGroupRequest)
  return target;
}

size_t UpdateGroupRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.UpdateGroupRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string group_id = 1;
  if (this->group_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->group_id());
  }

  // .google.protobuf.StringValue name = 2;
  if (this->has_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *name_);
  }

  // .google.protobuf.StringValue description = 3;
  if (this->has_description()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *description_);
  }

  // .google.protobuf.StringValue lang_tag = 4;
  if (this->has_lang_tag()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *lang_tag_);
  }

  // .google.protobuf.StringValue avatar_url = 5;
  if (this->has_avatar_url()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *avatar_url_);
  }

  // .google.protobuf.BoolValue open = 6;
  if (this->has_open()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *open_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateGroupRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.UpdateGroupRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateGroupRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UpdateGroupRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.UpdateGroupRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.UpdateGroupRequest)
    MergeFrom(*source);
  }
}

void UpdateGroupRequest::MergeFrom(const UpdateGroupRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.UpdateGroupRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.group_id().size() > 0) {

    group_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.group_id_);
  }
  if (from.has_name()) {
    mutable_name()->::google::protobuf::StringValue::MergeFrom(from.name());
  }
  if (from.has_description()) {
    mutable_description()->::google::protobuf::StringValue::MergeFrom(from.description());
  }
  if (from.has_lang_tag()) {
    mutable_lang_tag()->::google::protobuf::StringValue::MergeFrom(from.lang_tag());
  }
  if (from.has_avatar_url()) {
    mutable_avatar_url()->::google::protobuf::StringValue::MergeFrom(from.avatar_url());
  }
  if (from.has_open()) {
    mutable_open()->::google::protobuf::BoolValue::MergeFrom(from.open());
  }
}

void UpdateGroupRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.UpdateGroupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateGroupRequest::CopyFrom(const UpdateGroupRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.UpdateGroupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateGroupRequest::IsInitialized() const {
  return true;
}

void UpdateGroupRequest::Swap(UpdateGroupRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpdateGroupRequest::InternalSwap(UpdateGroupRequest* other) {
  using std::swap;
  group_id_.Swap(&other->group_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(name_, other->name_);
  swap(description_, other->description_);
  swap(lang_tag_, other->lang_tag_);
  swap(avatar_url_, other->avatar_url_);
  swap(open_, other->open_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UpdateGroupRequest::GetMetadata() const {
  protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void User::InitAsDefaultInstance() {
  ::nakama::api::_User_default_instance_._instance.get_mutable()->create_time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  ::nakama::api::_User_default_instance_._instance.get_mutable()->update_time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
}
void User::clear_create_time() {
  if (GetArenaNoVirtual() == NULL && create_time_ != NULL) {
    delete create_time_;
  }
  create_time_ = NULL;
}
void User::clear_update_time() {
  if (GetArenaNoVirtual() == NULL && update_time_ != NULL) {
    delete update_time_;
  }
  update_time_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int User::kIdFieldNumber;
const int User::kUsernameFieldNumber;
const int User::kDisplayNameFieldNumber;
const int User::kAvatarUrlFieldNumber;
const int User::kLangTagFieldNumber;
const int User::kLocationFieldNumber;
const int User::kTimezoneFieldNumber;
const int User::kMetadataFieldNumber;
const int User::kFacebookIdFieldNumber;
const int User::kGoogleIdFieldNumber;
const int User::kGamecenterIdFieldNumber;
const int User::kSteamIdFieldNumber;
const int User::kOnlineFieldNumber;
const int User::kEdgeCountFieldNumber;
const int User::kCreateTimeFieldNumber;
const int User::kUpdateTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

User::User()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_User.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:nakama.api.User)
}
User::User(const User& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.username().size() > 0) {
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  display_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.display_name().size() > 0) {
    display_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.display_name_);
  }
  avatar_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.avatar_url().size() > 0) {
    avatar_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.avatar_url_);
  }
  lang_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.lang_tag().size() > 0) {
    lang_tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lang_tag_);
  }
  location_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.location().size() > 0) {
    location_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.location_);
  }
  timezone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.timezone().size() > 0) {
    timezone_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.timezone_);
  }
  metadata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.metadata().size() > 0) {
    metadata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.metadata_);
  }
  facebook_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.facebook_id().size() > 0) {
    facebook_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.facebook_id_);
  }
  google_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.google_id().size() > 0) {
    google_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.google_id_);
  }
  gamecenter_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.gamecenter_id().size() > 0) {
    gamecenter_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gamecenter_id_);
  }
  steam_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.steam_id().size() > 0) {
    steam_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.steam_id_);
  }
  if (from.has_create_time()) {
    create_time_ = new ::google::protobuf::Timestamp(*from.create_time_);
  } else {
    create_time_ = NULL;
  }
  if (from.has_update_time()) {
    update_time_ = new ::google::protobuf::Timestamp(*from.update_time_);
  } else {
    update_time_ = NULL;
  }
  ::memcpy(&online_, &from.online_,
    static_cast<size_t>(reinterpret_cast<char*>(&edge_count_) -
    reinterpret_cast<char*>(&online_)) + sizeof(edge_count_));
  // @@protoc_insertion_point(copy_constructor:nakama.api.User)
}

void User::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  display_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  avatar_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lang_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  location_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timezone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  metadata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  facebook_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  google_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gamecenter_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  steam_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&create_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&edge_count_) -
      reinterpret_cast<char*>(&create_time_)) + sizeof(edge_count_));
}

User::~User() {
  // @@protoc_insertion_point(destructor:nakama.api.User)
  SharedDtor();
}

void User::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  display_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  avatar_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lang_tag_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  location_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timezone_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  metadata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  facebook_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  google_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gamecenter_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  steam_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete create_time_;
  if (this != internal_default_instance()) delete update_time_;
}

void User::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* User::descriptor() {
  ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const User& User::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_User.base);
  return *internal_default_instance();
}


void User::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.User)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  display_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  avatar_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lang_tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  location_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timezone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  metadata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  facebook_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  google_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gamecenter_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  steam_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && create_time_ != NULL) {
    delete create_time_;
  }
  create_time_ = NULL;
  if (GetArenaNoVirtual() == NULL && update_time_ != NULL) {
    delete update_time_;
  }
  update_time_ = NULL;
  ::memset(&online_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&edge_count_) -
      reinterpret_cast<char*>(&online_)) + sizeof(edge_count_));
  _internal_metadata_.Clear();
}

bool User::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nakama.api.User)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nakama.api.User.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string username = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->username().data(), static_cast<int>(this->username().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nakama.api.User.username"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string display_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_display_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->display_name().data(), static_cast<int>(this->display_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nakama.api.User.display_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string avatar_url = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_avatar_url()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->avatar_url().data(), static_cast<int>(this->avatar_url().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nakama.api.User.avatar_url"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string lang_tag = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lang_tag()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->lang_tag().data(), static_cast<int>(this->lang_tag().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nakama.api.User.lang_tag"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string location = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_location()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->location().data(), static_cast<int>(this->location().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nakama.api.User.location"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string timezone = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timezone()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->timezone().data(), static_cast<int>(this->timezone().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nakama.api.User.timezone"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string metadata = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_metadata()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->metadata().data(), static_cast<int>(this->metadata().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nakama.api.User.metadata"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string facebook_id = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_facebook_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->facebook_id().data(), static_cast<int>(this->facebook_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nakama.api.User.facebook_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string google_id = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_google_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->google_id().data(), static_cast<int>(this->google_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nakama.api.User.google_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string gamecenter_id = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gamecenter_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->gamecenter_id().data(), static_cast<int>(this->gamecenter_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nakama.api.User.gamecenter_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string steam_id = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_steam_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->steam_id().data(), static_cast<int>(this->steam_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nakama.api.User.steam_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool online = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &online_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 edge_count = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &edge_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp create_time = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_create_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp update_time = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_update_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nakama.api.User)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nakama.api.User)
  return false;
#undef DO_
}

void User::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nakama.api.User)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.User.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // string username = 2;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.User.username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->username(), output);
  }

  // string display_name = 3;
  if (this->display_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->display_name().data(), static_cast<int>(this->display_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.User.display_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->display_name(), output);
  }

  // string avatar_url = 4;
  if (this->avatar_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->avatar_url().data(), static_cast<int>(this->avatar_url().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.User.avatar_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->avatar_url(), output);
  }

  // string lang_tag = 5;
  if (this->lang_tag().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lang_tag().data(), static_cast<int>(this->lang_tag().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.User.lang_tag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->lang_tag(), output);
  }

  // string location = 6;
  if (this->location().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->location().data(), static_cast<int>(this->location().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.User.location");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->location(), output);
  }

  // string timezone = 7;
  if (this->timezone().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->timezone().data(), static_cast<int>(this->timezone().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.User.timezone");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->timezone(), output);
  }

  // string metadata = 8;
  if (this->metadata().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->metadata().data(), static_cast<int>(this->metadata().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.User.metadata");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->metadata(), output);
  }

  // string facebook_id = 9;
  if (this->facebook_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->facebook_id().data(), static_cast<int>(this->facebook_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.User.facebook_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->facebook_id(), output);
  }

  // string google_id = 10;
  if (this->google_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->google_id().data(), static_cast<int>(this->google_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.User.google_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->google_id(), output);
  }

  // string gamecenter_id = 11;
  if (this->gamecenter_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gamecenter_id().data(), static_cast<int>(this->gamecenter_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.User.gamecenter_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->gamecenter_id(), output);
  }

  // string steam_id = 12;
  if (this->steam_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->steam_id().data(), static_cast<int>(this->steam_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.User.steam_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->steam_id(), output);
  }

  // bool online = 13;
  if (this->online() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->online(), output);
  }

  // int32 edge_count = 14;
  if (this->edge_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->edge_count(), output);
  }

  // .google.protobuf.Timestamp create_time = 15;
  if (this->has_create_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->_internal_create_time(), output);
  }

  // .google.protobuf.Timestamp update_time = 16;
  if (this->has_update_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->_internal_update_time(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:nakama.api.User)
}

::google::protobuf::uint8* User::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.User)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.User.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // string username = 2;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.User.username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->username(), target);
  }

  // string display_name = 3;
  if (this->display_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->display_name().data(), static_cast<int>(this->display_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.User.display_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->display_name(), target);
  }

  // string avatar_url = 4;
  if (this->avatar_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->avatar_url().data(), static_cast<int>(this->avatar_url().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.User.avatar_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->avatar_url(), target);
  }

  // string lang_tag = 5;
  if (this->lang_tag().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lang_tag().data(), static_cast<int>(this->lang_tag().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.User.lang_tag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->lang_tag(), target);
  }

  // string location = 6;
  if (this->location().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->location().data(), static_cast<int>(this->location().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.User.location");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->location(), target);
  }

  // string timezone = 7;
  if (this->timezone().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->timezone().data(), static_cast<int>(this->timezone().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.User.timezone");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->timezone(), target);
  }

  // string metadata = 8;
  if (this->metadata().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->metadata().data(), static_cast<int>(this->metadata().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.User.metadata");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->metadata(), target);
  }

  // string facebook_id = 9;
  if (this->facebook_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->facebook_id().data(), static_cast<int>(this->facebook_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.User.facebook_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->facebook_id(), target);
  }

  // string google_id = 10;
  if (this->google_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->google_id().data(), static_cast<int>(this->google_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.User.google_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->google_id(), target);
  }

  // string gamecenter_id = 11;
  if (this->gamecenter_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gamecenter_id().data(), static_cast<int>(this->gamecenter_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.User.gamecenter_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->gamecenter_id(), target);
  }

  // string steam_id = 12;
  if (this->steam_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->steam_id().data(), static_cast<int>(this->steam_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.User.steam_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->steam_id(), target);
  }

  // bool online = 13;
  if (this->online() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->online(), target);
  }

  // int32 edge_count = 14;
  if (this->edge_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->edge_count(), target);
  }

  // .google.protobuf.Timestamp create_time = 15;
  if (this->has_create_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        15, this->_internal_create_time(), deterministic, target);
  }

  // .google.protobuf.Timestamp update_time = 16;
  if (this->has_update_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        16, this->_internal_update_time(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.User)
  return target;
}

size_t User::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.User)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // string username = 2;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->username());
  }

  // string display_name = 3;
  if (this->display_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->display_name());
  }

  // string avatar_url = 4;
  if (this->avatar_url().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->avatar_url());
  }

  // string lang_tag = 5;
  if (this->lang_tag().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->lang_tag());
  }

  // string location = 6;
  if (this->location().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->location());
  }

  // string timezone = 7;
  if (this->timezone().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->timezone());
  }

  // string metadata = 8;
  if (this->metadata().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->metadata());
  }

  // string facebook_id = 9;
  if (this->facebook_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->facebook_id());
  }

  // string google_id = 10;
  if (this->google_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->google_id());
  }

  // string gamecenter_id = 11;
  if (this->gamecenter_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->gamecenter_id());
  }

  // string steam_id = 12;
  if (this->steam_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->steam_id());
  }

  // .google.protobuf.Timestamp create_time = 15;
  if (this->has_create_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *create_time_);
  }

  // .google.protobuf.Timestamp update_time = 16;
  if (this->has_update_time()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *update_time_);
  }

  // bool online = 13;
  if (this->online() != 0) {
    total_size += 1 + 1;
  }

  // int32 edge_count = 14;
  if (this->edge_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->edge_count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void User::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.User)
  GOOGLE_DCHECK_NE(&from, this);
  const User* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const User>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.User)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.User)
    MergeFrom(*source);
  }
}

void User::MergeFrom(const User& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.User)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.username().size() > 0) {

    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  if (from.display_name().size() > 0) {

    display_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.display_name_);
  }
  if (from.avatar_url().size() > 0) {

    avatar_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.avatar_url_);
  }
  if (from.lang_tag().size() > 0) {

    lang_tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lang_tag_);
  }
  if (from.location().size() > 0) {

    location_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.location_);
  }
  if (from.timezone().size() > 0) {

    timezone_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.timezone_);
  }
  if (from.metadata().size() > 0) {

    metadata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.metadata_);
  }
  if (from.facebook_id().size() > 0) {

    facebook_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.facebook_id_);
  }
  if (from.google_id().size() > 0) {

    google_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.google_id_);
  }
  if (from.gamecenter_id().size() > 0) {

    gamecenter_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gamecenter_id_);
  }
  if (from.steam_id().size() > 0) {

    steam_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.steam_id_);
  }
  if (from.has_create_time()) {
    mutable_create_time()->::google::protobuf::Timestamp::MergeFrom(from.create_time());
  }
  if (from.has_update_time()) {
    mutable_update_time()->::google::protobuf::Timestamp::MergeFrom(from.update_time());
  }
  if (from.online() != 0) {
    set_online(from.online());
  }
  if (from.edge_count() != 0) {
    set_edge_count(from.edge_count());
  }
}

void User::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.User)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void User::CopyFrom(const User& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.User)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool User::IsInitialized() const {
  return true;
}

void User::Swap(User* other) {
  if (other == this) return;
  InternalSwap(other);
}
void User::InternalSwap(User* other) {
  using std::swap;
  id_.Swap(&other->id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  username_.Swap(&other->username_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  display_name_.Swap(&other->display_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  avatar_url_.Swap(&other->avatar_url_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  lang_tag_.Swap(&other->lang_tag_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  location_.Swap(&other->location_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  timezone_.Swap(&other->timezone_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  metadata_.Swap(&other->metadata_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  facebook_id_.Swap(&other->facebook_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  google_id_.Swap(&other->google_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  gamecenter_id_.Swap(&other->gamecenter_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  steam_id_.Swap(&other->steam_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(create_time_, other->create_time_);
  swap(update_time_, other->update_time_);
  swap(online_, other->online_);
  swap(edge_count_, other->edge_count_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata User::GetMetadata() const {
  protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UserGroupList_UserGroup::InitAsDefaultInstance() {
  ::nakama::api::_UserGroupList_UserGroup_default_instance_._instance.get_mutable()->group_ = const_cast< ::nakama::api::Group*>(
      ::nakama::api::Group::internal_default_instance());
  ::nakama::api::_UserGroupList_UserGroup_default_instance_._instance.get_mutable()->state_ = const_cast< ::google::protobuf::Int32Value*>(
      ::google::protobuf::Int32Value::internal_default_instance());
}
void UserGroupList_UserGroup::clear_state() {
  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserGroupList_UserGroup::kGroupFieldNumber;
const int UserGroupList_UserGroup::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserGroupList_UserGroup::UserGroupList_UserGroup()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_UserGroupList_UserGroup.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:nakama.api.UserGroupList.UserGroup)
}
UserGroupList_UserGroup::UserGroupList_UserGroup(const UserGroupList_UserGroup& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_group()) {
    group_ = new ::nakama::api::Group(*from.group_);
  } else {
    group_ = NULL;
  }
  if (from.has_state()) {
    state_ = new ::google::protobuf::Int32Value(*from.state_);
  } else {
    state_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:nakama.api.UserGroupList.UserGroup)
}

void UserGroupList_UserGroup::SharedCtor() {
  ::memset(&group_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&group_)) + sizeof(state_));
}

UserGroupList_UserGroup::~UserGroupList_UserGroup() {
  // @@protoc_insertion_point(destructor:nakama.api.UserGroupList.UserGroup)
  SharedDtor();
}

void UserGroupList_UserGroup::SharedDtor() {
  if (this != internal_default_instance()) delete group_;
  if (this != internal_default_instance()) delete state_;
}

void UserGroupList_UserGroup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UserGroupList_UserGroup::descriptor() {
  ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserGroupList_UserGroup& UserGroupList_UserGroup::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_UserGroupList_UserGroup.base);
  return *internal_default_instance();
}


void UserGroupList_UserGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.UserGroupList.UserGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && group_ != NULL) {
    delete group_;
  }
  group_ = NULL;
  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
  _internal_metadata_.Clear();
}

bool UserGroupList_UserGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nakama.api.UserGroupList.UserGroup)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .nakama.api.Group group = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_group()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Int32Value state = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nakama.api.UserGroupList.UserGroup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nakama.api.UserGroupList.UserGroup)
  return false;
#undef DO_
}

void UserGroupList_UserGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nakama.api.UserGroupList.UserGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .nakama.api.Group group = 1;
  if (this->has_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_group(), output);
  }

  // .google.protobuf.Int32Value state = 2;
  if (this->has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_state(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:nakama.api.UserGroupList.UserGroup)
}

::google::protobuf::uint8* UserGroupList_UserGroup::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.UserGroupList.UserGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .nakama.api.Group group = 1;
  if (this->has_group()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_group(), deterministic, target);
  }

  // .google.protobuf.Int32Value state = 2;
  if (this->has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_state(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.UserGroupList.UserGroup)
  return target;
}

size_t UserGroupList_UserGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.UserGroupList.UserGroup)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .nakama.api.Group group = 1;
  if (this->has_group()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *group_);
  }

  // .google.protobuf.Int32Value state = 2;
  if (this->has_state()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *state_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserGroupList_UserGroup::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.UserGroupList.UserGroup)
  GOOGLE_DCHECK_NE(&from, this);
  const UserGroupList_UserGroup* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserGroupList_UserGroup>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.UserGroupList.UserGroup)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.UserGroupList.UserGroup)
    MergeFrom(*source);
  }
}

void UserGroupList_UserGroup::MergeFrom(const UserGroupList_UserGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.UserGroupList.UserGroup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_group()) {
    mutable_group()->::nakama::api::Group::MergeFrom(from.group());
  }
  if (from.has_state()) {
    mutable_state()->::google::protobuf::Int32Value::MergeFrom(from.state());
  }
}

void UserGroupList_UserGroup::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.UserGroupList.UserGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserGroupList_UserGroup::CopyFrom(const UserGroupList_UserGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.UserGroupList.UserGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserGroupList_UserGroup::IsInitialized() const {
  return true;
}

void UserGroupList_UserGroup::Swap(UserGroupList_UserGroup* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserGroupList_UserGroup::InternalSwap(UserGroupList_UserGroup* other) {
  using std::swap;
  swap(group_, other->group_);
  swap(state_, other->state_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UserGroupList_UserGroup::GetMetadata() const {
  protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UserGroupList::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserGroupList::kUserGroupsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserGroupList::UserGroupList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_UserGroupList.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:nakama.api.UserGroupList)
}
UserGroupList::UserGroupList(const UserGroupList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      user_groups_(from.user_groups_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:nakama.api.UserGroupList)
}

void UserGroupList::SharedCtor() {
}

UserGroupList::~UserGroupList() {
  // @@protoc_insertion_point(destructor:nakama.api.UserGroupList)
  SharedDtor();
}

void UserGroupList::SharedDtor() {
}

void UserGroupList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UserGroupList::descriptor() {
  ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserGroupList& UserGroupList::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_UserGroupList.base);
  return *internal_default_instance();
}


void UserGroupList::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.UserGroupList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_groups_.Clear();
  _internal_metadata_.Clear();
}

bool UserGroupList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nakama.api.UserGroupList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .nakama.api.UserGroupList.UserGroup user_groups = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_user_groups()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nakama.api.UserGroupList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nakama.api.UserGroupList)
  return false;
#undef DO_
}

void UserGroupList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nakama.api.UserGroupList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .nakama.api.UserGroupList.UserGroup user_groups = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->user_groups_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->user_groups(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:nakama.api.UserGroupList)
}

::google::protobuf::uint8* UserGroupList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.UserGroupList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .nakama.api.UserGroupList.UserGroup user_groups = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->user_groups_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->user_groups(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.UserGroupList)
  return target;
}

size_t UserGroupList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.UserGroupList)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .nakama.api.UserGroupList.UserGroup user_groups = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->user_groups_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->user_groups(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserGroupList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.UserGroupList)
  GOOGLE_DCHECK_NE(&from, this);
  const UserGroupList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserGroupList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.UserGroupList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.UserGroupList)
    MergeFrom(*source);
  }
}

void UserGroupList::MergeFrom(const UserGroupList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.UserGroupList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  user_groups_.MergeFrom(from.user_groups_);
}

void UserGroupList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.UserGroupList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserGroupList::CopyFrom(const UserGroupList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.UserGroupList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserGroupList::IsInitialized() const {
  return true;
}

void UserGroupList::Swap(UserGroupList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserGroupList::InternalSwap(UserGroupList* other) {
  using std::swap;
  CastToBase(&user_groups_)->InternalSwap(CastToBase(&other->user_groups_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UserGroupList::GetMetadata() const {
  protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Users::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Users::kUsersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Users::Users()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_Users.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:nakama.api.Users)
}
Users::Users(const Users& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      users_(from.users_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:nakama.api.Users)
}

void Users::SharedCtor() {
}

Users::~Users() {
  // @@protoc_insertion_point(destructor:nakama.api.Users)
  SharedDtor();
}

void Users::SharedDtor() {
}

void Users::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Users::descriptor() {
  ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Users& Users::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_Users.base);
  return *internal_default_instance();
}


void Users::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.Users)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  users_.Clear();
  _internal_metadata_.Clear();
}

bool Users::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nakama.api.Users)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .nakama.api.User users = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_users()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nakama.api.Users)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nakama.api.Users)
  return false;
#undef DO_
}

void Users::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nakama.api.Users)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .nakama.api.User users = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->users_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->users(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:nakama.api.Users)
}

::google::protobuf::uint8* Users::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.Users)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .nakama.api.User users = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->users_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->users(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.Users)
  return target;
}

size_t Users::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.Users)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .nakama.api.User users = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->users_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->users(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Users::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.Users)
  GOOGLE_DCHECK_NE(&from, this);
  const Users* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Users>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.Users)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.Users)
    MergeFrom(*source);
  }
}

void Users::MergeFrom(const Users& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.Users)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  users_.MergeFrom(from.users_);
}

void Users::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.Users)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Users::CopyFrom(const Users& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.Users)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Users::IsInitialized() const {
  return true;
}

void Users::Swap(Users* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Users::InternalSwap(Users* other) {
  using std::swap;
  CastToBase(&users_)->InternalSwap(CastToBase(&other->users_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Users::GetMetadata() const {
  protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void WriteLeaderboardRecordRequest_LeaderboardRecordWrite::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WriteLeaderboardRecordRequest_LeaderboardRecordWrite::kScoreFieldNumber;
const int WriteLeaderboardRecordRequest_LeaderboardRecordWrite::kSubscoreFieldNumber;
const int WriteLeaderboardRecordRequest_LeaderboardRecordWrite::kMetadataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WriteLeaderboardRecordRequest_LeaderboardRecordWrite::WriteLeaderboardRecordRequest_LeaderboardRecordWrite()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_WriteLeaderboardRecordRequest_LeaderboardRecordWrite.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:nakama.api.WriteLeaderboardRecordRequest.LeaderboardRecordWrite)
}
WriteLeaderboardRecordRequest_LeaderboardRecordWrite::WriteLeaderboardRecordRequest_LeaderboardRecordWrite(const WriteLeaderboardRecordRequest_LeaderboardRecordWrite& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  metadata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.metadata().size() > 0) {
    metadata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.metadata_);
  }
  ::memcpy(&score_, &from.score_,
    static_cast<size_t>(reinterpret_cast<char*>(&subscore_) -
    reinterpret_cast<char*>(&score_)) + sizeof(subscore_));
  // @@protoc_insertion_point(copy_constructor:nakama.api.WriteLeaderboardRecordRequest.LeaderboardRecordWrite)
}

void WriteLeaderboardRecordRequest_LeaderboardRecordWrite::SharedCtor() {
  metadata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&score_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&subscore_) -
      reinterpret_cast<char*>(&score_)) + sizeof(subscore_));
}

WriteLeaderboardRecordRequest_LeaderboardRecordWrite::~WriteLeaderboardRecordRequest_LeaderboardRecordWrite() {
  // @@protoc_insertion_point(destructor:nakama.api.WriteLeaderboardRecordRequest.LeaderboardRecordWrite)
  SharedDtor();
}

void WriteLeaderboardRecordRequest_LeaderboardRecordWrite::SharedDtor() {
  metadata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void WriteLeaderboardRecordRequest_LeaderboardRecordWrite::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* WriteLeaderboardRecordRequest_LeaderboardRecordWrite::descriptor() {
  ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WriteLeaderboardRecordRequest_LeaderboardRecordWrite& WriteLeaderboardRecordRequest_LeaderboardRecordWrite::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_WriteLeaderboardRecordRequest_LeaderboardRecordWrite.base);
  return *internal_default_instance();
}


void WriteLeaderboardRecordRequest_LeaderboardRecordWrite::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.WriteLeaderboardRecordRequest.LeaderboardRecordWrite)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  metadata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&score_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&subscore_) -
      reinterpret_cast<char*>(&score_)) + sizeof(subscore_));
  _internal_metadata_.Clear();
}

bool WriteLeaderboardRecordRequest_LeaderboardRecordWrite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nakama.api.WriteLeaderboardRecordRequest.LeaderboardRecordWrite)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 score = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 subscore = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &subscore_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string metadata = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_metadata()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->metadata().data(), static_cast<int>(this->metadata().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nakama.api.WriteLeaderboardRecordRequest.LeaderboardRecordWrite.metadata"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nakama.api.WriteLeaderboardRecordRequest.LeaderboardRecordWrite)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nakama.api.WriteLeaderboardRecordRequest.LeaderboardRecordWrite)
  return false;
#undef DO_
}

void WriteLeaderboardRecordRequest_LeaderboardRecordWrite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nakama.api.WriteLeaderboardRecordRequest.LeaderboardRecordWrite)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 score = 1;
  if (this->score() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->score(), output);
  }

  // int64 subscore = 2;
  if (this->subscore() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->subscore(), output);
  }

  // string metadata = 3;
  if (this->metadata().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->metadata().data(), static_cast<int>(this->metadata().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.WriteLeaderboardRecordRequest.LeaderboardRecordWrite.metadata");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->metadata(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:nakama.api.WriteLeaderboardRecordRequest.LeaderboardRecordWrite)
}

::google::protobuf::uint8* WriteLeaderboardRecordRequest_LeaderboardRecordWrite::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.WriteLeaderboardRecordRequest.LeaderboardRecordWrite)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 score = 1;
  if (this->score() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->score(), target);
  }

  // int64 subscore = 2;
  if (this->subscore() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->subscore(), target);
  }

  // string metadata = 3;
  if (this->metadata().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->metadata().data(), static_cast<int>(this->metadata().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.WriteLeaderboardRecordRequest.LeaderboardRecordWrite.metadata");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->metadata(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.WriteLeaderboardRecordRequest.LeaderboardRecordWrite)
  return target;
}

size_t WriteLeaderboardRecordRequest_LeaderboardRecordWrite::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.WriteLeaderboardRecordRequest.LeaderboardRecordWrite)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string metadata = 3;
  if (this->metadata().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->metadata());
  }

  // int64 score = 1;
  if (this->score() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->score());
  }

  // int64 subscore = 2;
  if (this->subscore() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->subscore());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WriteLeaderboardRecordRequest_LeaderboardRecordWrite::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.WriteLeaderboardRecordRequest.LeaderboardRecordWrite)
  GOOGLE_DCHECK_NE(&from, this);
  const WriteLeaderboardRecordRequest_LeaderboardRecordWrite* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WriteLeaderboardRecordRequest_LeaderboardRecordWrite>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.WriteLeaderboardRecordRequest.LeaderboardRecordWrite)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.WriteLeaderboardRecordRequest.LeaderboardRecordWrite)
    MergeFrom(*source);
  }
}

void WriteLeaderboardRecordRequest_LeaderboardRecordWrite::MergeFrom(const WriteLeaderboardRecordRequest_LeaderboardRecordWrite& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.WriteLeaderboardRecordRequest.LeaderboardRecordWrite)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.metadata().size() > 0) {

    metadata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.metadata_);
  }
  if (from.score() != 0) {
    set_score(from.score());
  }
  if (from.subscore() != 0) {
    set_subscore(from.subscore());
  }
}

void WriteLeaderboardRecordRequest_LeaderboardRecordWrite::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.WriteLeaderboardRecordRequest.LeaderboardRecordWrite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WriteLeaderboardRecordRequest_LeaderboardRecordWrite::CopyFrom(const WriteLeaderboardRecordRequest_LeaderboardRecordWrite& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.WriteLeaderboardRecordRequest.LeaderboardRecordWrite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WriteLeaderboardRecordRequest_LeaderboardRecordWrite::IsInitialized() const {
  return true;
}

void WriteLeaderboardRecordRequest_LeaderboardRecordWrite::Swap(WriteLeaderboardRecordRequest_LeaderboardRecordWrite* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WriteLeaderboardRecordRequest_LeaderboardRecordWrite::InternalSwap(WriteLeaderboardRecordRequest_LeaderboardRecordWrite* other) {
  using std::swap;
  metadata_.Swap(&other->metadata_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(score_, other->score_);
  swap(subscore_, other->subscore_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata WriteLeaderboardRecordRequest_LeaderboardRecordWrite::GetMetadata() const {
  protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void WriteLeaderboardRecordRequest::InitAsDefaultInstance() {
  ::nakama::api::_WriteLeaderboardRecordRequest_default_instance_._instance.get_mutable()->record_ = const_cast< ::nakama::api::WriteLeaderboardRecordRequest_LeaderboardRecordWrite*>(
      ::nakama::api::WriteLeaderboardRecordRequest_LeaderboardRecordWrite::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WriteLeaderboardRecordRequest::kLeaderboardIdFieldNumber;
const int WriteLeaderboardRecordRequest::kRecordFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WriteLeaderboardRecordRequest::WriteLeaderboardRecordRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_WriteLeaderboardRecordRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:nakama.api.WriteLeaderboardRecordRequest)
}
WriteLeaderboardRecordRequest::WriteLeaderboardRecordRequest(const WriteLeaderboardRecordRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  leaderboard_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.leaderboard_id().size() > 0) {
    leaderboard_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.leaderboard_id_);
  }
  if (from.has_record()) {
    record_ = new ::nakama::api::WriteLeaderboardRecordRequest_LeaderboardRecordWrite(*from.record_);
  } else {
    record_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:nakama.api.WriteLeaderboardRecordRequest)
}

void WriteLeaderboardRecordRequest::SharedCtor() {
  leaderboard_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  record_ = NULL;
}

WriteLeaderboardRecordRequest::~WriteLeaderboardRecordRequest() {
  // @@protoc_insertion_point(destructor:nakama.api.WriteLeaderboardRecordRequest)
  SharedDtor();
}

void WriteLeaderboardRecordRequest::SharedDtor() {
  leaderboard_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete record_;
}

void WriteLeaderboardRecordRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* WriteLeaderboardRecordRequest::descriptor() {
  ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WriteLeaderboardRecordRequest& WriteLeaderboardRecordRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_WriteLeaderboardRecordRequest.base);
  return *internal_default_instance();
}


void WriteLeaderboardRecordRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.WriteLeaderboardRecordRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  leaderboard_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && record_ != NULL) {
    delete record_;
  }
  record_ = NULL;
  _internal_metadata_.Clear();
}

bool WriteLeaderboardRecordRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nakama.api.WriteLeaderboardRecordRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string leaderboard_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_leaderboard_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->leaderboard_id().data(), static_cast<int>(this->leaderboard_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nakama.api.WriteLeaderboardRecordRequest.leaderboard_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .nakama.api.WriteLeaderboardRecordRequest.LeaderboardRecordWrite record = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_record()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nakama.api.WriteLeaderboardRecordRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nakama.api.WriteLeaderboardRecordRequest)
  return false;
#undef DO_
}

void WriteLeaderboardRecordRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nakama.api.WriteLeaderboardRecordRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string leaderboard_id = 1;
  if (this->leaderboard_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->leaderboard_id().data(), static_cast<int>(this->leaderboard_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.WriteLeaderboardRecordRequest.leaderboard_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->leaderboard_id(), output);
  }

  // .nakama.api.WriteLeaderboardRecordRequest.LeaderboardRecordWrite record = 2;
  if (this->has_record()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_record(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:nakama.api.WriteLeaderboardRecordRequest)
}

::google::protobuf::uint8* WriteLeaderboardRecordRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.WriteLeaderboardRecordRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string leaderboard_id = 1;
  if (this->leaderboard_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->leaderboard_id().data(), static_cast<int>(this->leaderboard_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.WriteLeaderboardRecordRequest.leaderboard_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->leaderboard_id(), target);
  }

  // .nakama.api.WriteLeaderboardRecordRequest.LeaderboardRecordWrite record = 2;
  if (this->has_record()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_record(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.WriteLeaderboardRecordRequest)
  return target;
}

size_t WriteLeaderboardRecordRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.WriteLeaderboardRecordRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string leaderboard_id = 1;
  if (this->leaderboard_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->leaderboard_id());
  }

  // .nakama.api.WriteLeaderboardRecordRequest.LeaderboardRecordWrite record = 2;
  if (this->has_record()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *record_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WriteLeaderboardRecordRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.WriteLeaderboardRecordRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const WriteLeaderboardRecordRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WriteLeaderboardRecordRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.WriteLeaderboardRecordRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.WriteLeaderboardRecordRequest)
    MergeFrom(*source);
  }
}

void WriteLeaderboardRecordRequest::MergeFrom(const WriteLeaderboardRecordRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.WriteLeaderboardRecordRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.leaderboard_id().size() > 0) {

    leaderboard_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.leaderboard_id_);
  }
  if (from.has_record()) {
    mutable_record()->::nakama::api::WriteLeaderboardRecordRequest_LeaderboardRecordWrite::MergeFrom(from.record());
  }
}

void WriteLeaderboardRecordRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.WriteLeaderboardRecordRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WriteLeaderboardRecordRequest::CopyFrom(const WriteLeaderboardRecordRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.WriteLeaderboardRecordRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WriteLeaderboardRecordRequest::IsInitialized() const {
  return true;
}

void WriteLeaderboardRecordRequest::Swap(WriteLeaderboardRecordRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WriteLeaderboardRecordRequest::InternalSwap(WriteLeaderboardRecordRequest* other) {
  using std::swap;
  leaderboard_id_.Swap(&other->leaderboard_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(record_, other->record_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata WriteLeaderboardRecordRequest::GetMetadata() const {
  protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void WriteStorageObject::InitAsDefaultInstance() {
  ::nakama::api::_WriteStorageObject_default_instance_._instance.get_mutable()->permission_read_ = const_cast< ::google::protobuf::Int32Value*>(
      ::google::protobuf::Int32Value::internal_default_instance());
  ::nakama::api::_WriteStorageObject_default_instance_._instance.get_mutable()->permission_write_ = const_cast< ::google::protobuf::Int32Value*>(
      ::google::protobuf::Int32Value::internal_default_instance());
}
void WriteStorageObject::clear_permission_read() {
  if (GetArenaNoVirtual() == NULL && permission_read_ != NULL) {
    delete permission_read_;
  }
  permission_read_ = NULL;
}
void WriteStorageObject::clear_permission_write() {
  if (GetArenaNoVirtual() == NULL && permission_write_ != NULL) {
    delete permission_write_;
  }
  permission_write_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WriteStorageObject::kCollectionFieldNumber;
const int WriteStorageObject::kKeyFieldNumber;
const int WriteStorageObject::kValueFieldNumber;
const int WriteStorageObject::kVersionFieldNumber;
const int WriteStorageObject::kPermissionReadFieldNumber;
const int WriteStorageObject::kPermissionWriteFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WriteStorageObject::WriteStorageObject()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_WriteStorageObject.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:nakama.api.WriteStorageObject)
}
WriteStorageObject::WriteStorageObject(const WriteStorageObject& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  collection_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.collection().size() > 0) {
    collection_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.collection_);
  }
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.value().size() > 0) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.version().size() > 0) {
    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  if (from.has_permission_read()) {
    permission_read_ = new ::google::protobuf::Int32Value(*from.permission_read_);
  } else {
    permission_read_ = NULL;
  }
  if (from.has_permission_write()) {
    permission_write_ = new ::google::protobuf::Int32Value(*from.permission_write_);
  } else {
    permission_write_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:nakama.api.WriteStorageObject)
}

void WriteStorageObject::SharedCtor() {
  collection_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&permission_read_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&permission_write_) -
      reinterpret_cast<char*>(&permission_read_)) + sizeof(permission_write_));
}

WriteStorageObject::~WriteStorageObject() {
  // @@protoc_insertion_point(destructor:nakama.api.WriteStorageObject)
  SharedDtor();
}

void WriteStorageObject::SharedDtor() {
  collection_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete permission_read_;
  if (this != internal_default_instance()) delete permission_write_;
}

void WriteStorageObject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* WriteStorageObject::descriptor() {
  ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WriteStorageObject& WriteStorageObject::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_WriteStorageObject.base);
  return *internal_default_instance();
}


void WriteStorageObject::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.WriteStorageObject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  collection_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && permission_read_ != NULL) {
    delete permission_read_;
  }
  permission_read_ = NULL;
  if (GetArenaNoVirtual() == NULL && permission_write_ != NULL) {
    delete permission_write_;
  }
  permission_write_ = NULL;
  _internal_metadata_.Clear();
}

bool WriteStorageObject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nakama.api.WriteStorageObject)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string collection = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_collection()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->collection().data(), static_cast<int>(this->collection().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nakama.api.WriteStorageObject.collection"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string key = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->key().data(), static_cast<int>(this->key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nakama.api.WriteStorageObject.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string value = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->value().data(), static_cast<int>(this->value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nakama.api.WriteStorageObject.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string version = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->version().data(), static_cast<int>(this->version().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nakama.api.WriteStorageObject.version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Int32Value permission_read = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_permission_read()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Int32Value permission_write = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_permission_write()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nakama.api.WriteStorageObject)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nakama.api.WriteStorageObject)
  return false;
#undef DO_
}

void WriteStorageObject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nakama.api.WriteStorageObject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string collection = 1;
  if (this->collection().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->collection().data(), static_cast<int>(this->collection().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.WriteStorageObject.collection");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->collection(), output);
  }

  // string key = 2;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.WriteStorageObject.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->key(), output);
  }

  // string value = 3;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.WriteStorageObject.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->value(), output);
  }

  // string version = 4;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), static_cast<int>(this->version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.WriteStorageObject.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->version(), output);
  }

  // .google.protobuf.Int32Value permission_read = 5;
  if (this->has_permission_read()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_permission_read(), output);
  }

  // .google.protobuf.Int32Value permission_write = 6;
  if (this->has_permission_write()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_permission_write(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:nakama.api.WriteStorageObject)
}

::google::protobuf::uint8* WriteStorageObject::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.WriteStorageObject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string collection = 1;
  if (this->collection().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->collection().data(), static_cast<int>(this->collection().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.WriteStorageObject.collection");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->collection(), target);
  }

  // string key = 2;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.WriteStorageObject.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->key(), target);
  }

  // string value = 3;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.WriteStorageObject.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->value(), target);
  }

  // string version = 4;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), static_cast<int>(this->version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.WriteStorageObject.version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->version(), target);
  }

  // .google.protobuf.Int32Value permission_read = 5;
  if (this->has_permission_read()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_permission_read(), deterministic, target);
  }

  // .google.protobuf.Int32Value permission_write = 6;
  if (this->has_permission_write()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_permission_write(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.WriteStorageObject)
  return target;
}

size_t WriteStorageObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.WriteStorageObject)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string collection = 1;
  if (this->collection().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->collection());
  }

  // string key = 2;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  // string value = 3;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());
  }

  // string version = 4;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->version());
  }

  // .google.protobuf.Int32Value permission_read = 5;
  if (this->has_permission_read()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *permission_read_);
  }

  // .google.protobuf.Int32Value permission_write = 6;
  if (this->has_permission_write()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *permission_write_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WriteStorageObject::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.WriteStorageObject)
  GOOGLE_DCHECK_NE(&from, this);
  const WriteStorageObject* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WriteStorageObject>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.WriteStorageObject)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.WriteStorageObject)
    MergeFrom(*source);
  }
}

void WriteStorageObject::MergeFrom(const WriteStorageObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.WriteStorageObject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.collection().size() > 0) {

    collection_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.collection_);
  }
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from.version().size() > 0) {

    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  if (from.has_permission_read()) {
    mutable_permission_read()->::google::protobuf::Int32Value::MergeFrom(from.permission_read());
  }
  if (from.has_permission_write()) {
    mutable_permission_write()->::google::protobuf::Int32Value::MergeFrom(from.permission_write());
  }
}

void WriteStorageObject::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.WriteStorageObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WriteStorageObject::CopyFrom(const WriteStorageObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.WriteStorageObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WriteStorageObject::IsInitialized() const {
  return true;
}

void WriteStorageObject::Swap(WriteStorageObject* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WriteStorageObject::InternalSwap(WriteStorageObject* other) {
  using std::swap;
  collection_.Swap(&other->collection_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  key_.Swap(&other->key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  value_.Swap(&other->value_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  version_.Swap(&other->version_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(permission_read_, other->permission_read_);
  swap(permission_write_, other->permission_write_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata WriteStorageObject::GetMetadata() const {
  protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void WriteStorageObjectsRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WriteStorageObjectsRequest::kObjectsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WriteStorageObjectsRequest::WriteStorageObjectsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_WriteStorageObjectsRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:nakama.api.WriteStorageObjectsRequest)
}
WriteStorageObjectsRequest::WriteStorageObjectsRequest(const WriteStorageObjectsRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      objects_(from.objects_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:nakama.api.WriteStorageObjectsRequest)
}

void WriteStorageObjectsRequest::SharedCtor() {
}

WriteStorageObjectsRequest::~WriteStorageObjectsRequest() {
  // @@protoc_insertion_point(destructor:nakama.api.WriteStorageObjectsRequest)
  SharedDtor();
}

void WriteStorageObjectsRequest::SharedDtor() {
}

void WriteStorageObjectsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* WriteStorageObjectsRequest::descriptor() {
  ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WriteStorageObjectsRequest& WriteStorageObjectsRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_WriteStorageObjectsRequest.base);
  return *internal_default_instance();
}


void WriteStorageObjectsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.WriteStorageObjectsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  objects_.Clear();
  _internal_metadata_.Clear();
}

bool WriteStorageObjectsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nakama.api.WriteStorageObjectsRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .nakama.api.WriteStorageObject objects = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_objects()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nakama.api.WriteStorageObjectsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nakama.api.WriteStorageObjectsRequest)
  return false;
#undef DO_
}

void WriteStorageObjectsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nakama.api.WriteStorageObjectsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .nakama.api.WriteStorageObject objects = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->objects_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->objects(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:nakama.api.WriteStorageObjectsRequest)
}

::google::protobuf::uint8* WriteStorageObjectsRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.WriteStorageObjectsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .nakama.api.WriteStorageObject objects = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->objects_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->objects(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.WriteStorageObjectsRequest)
  return target;
}

size_t WriteStorageObjectsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.WriteStorageObjectsRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .nakama.api.WriteStorageObject objects = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->objects_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->objects(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WriteStorageObjectsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.WriteStorageObjectsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const WriteStorageObjectsRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WriteStorageObjectsRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.WriteStorageObjectsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.WriteStorageObjectsRequest)
    MergeFrom(*source);
  }
}

void WriteStorageObjectsRequest::MergeFrom(const WriteStorageObjectsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.WriteStorageObjectsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  objects_.MergeFrom(from.objects_);
}

void WriteStorageObjectsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.WriteStorageObjectsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WriteStorageObjectsRequest::CopyFrom(const WriteStorageObjectsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.WriteStorageObjectsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WriteStorageObjectsRequest::IsInitialized() const {
  return true;
}

void WriteStorageObjectsRequest::Swap(WriteStorageObjectsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WriteStorageObjectsRequest::InternalSwap(WriteStorageObjectsRequest* other) {
  using std::swap;
  CastToBase(&objects_)->InternalSwap(CastToBase(&other->objects_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata WriteStorageObjectsRequest::GetMetadata() const {
  protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void WriteTournamentRecordRequest_TournamentRecordWrite::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WriteTournamentRecordRequest_TournamentRecordWrite::kScoreFieldNumber;
const int WriteTournamentRecordRequest_TournamentRecordWrite::kSubscoreFieldNumber;
const int WriteTournamentRecordRequest_TournamentRecordWrite::kMetadataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WriteTournamentRecordRequest_TournamentRecordWrite::WriteTournamentRecordRequest_TournamentRecordWrite()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_WriteTournamentRecordRequest_TournamentRecordWrite.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:nakama.api.WriteTournamentRecordRequest.TournamentRecordWrite)
}
WriteTournamentRecordRequest_TournamentRecordWrite::WriteTournamentRecordRequest_TournamentRecordWrite(const WriteTournamentRecordRequest_TournamentRecordWrite& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  metadata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.metadata().size() > 0) {
    metadata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.metadata_);
  }
  ::memcpy(&score_, &from.score_,
    static_cast<size_t>(reinterpret_cast<char*>(&subscore_) -
    reinterpret_cast<char*>(&score_)) + sizeof(subscore_));
  // @@protoc_insertion_point(copy_constructor:nakama.api.WriteTournamentRecordRequest.TournamentRecordWrite)
}

void WriteTournamentRecordRequest_TournamentRecordWrite::SharedCtor() {
  metadata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&score_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&subscore_) -
      reinterpret_cast<char*>(&score_)) + sizeof(subscore_));
}

WriteTournamentRecordRequest_TournamentRecordWrite::~WriteTournamentRecordRequest_TournamentRecordWrite() {
  // @@protoc_insertion_point(destructor:nakama.api.WriteTournamentRecordRequest.TournamentRecordWrite)
  SharedDtor();
}

void WriteTournamentRecordRequest_TournamentRecordWrite::SharedDtor() {
  metadata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void WriteTournamentRecordRequest_TournamentRecordWrite::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* WriteTournamentRecordRequest_TournamentRecordWrite::descriptor() {
  ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WriteTournamentRecordRequest_TournamentRecordWrite& WriteTournamentRecordRequest_TournamentRecordWrite::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_WriteTournamentRecordRequest_TournamentRecordWrite.base);
  return *internal_default_instance();
}


void WriteTournamentRecordRequest_TournamentRecordWrite::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.WriteTournamentRecordRequest.TournamentRecordWrite)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  metadata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&score_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&subscore_) -
      reinterpret_cast<char*>(&score_)) + sizeof(subscore_));
  _internal_metadata_.Clear();
}

bool WriteTournamentRecordRequest_TournamentRecordWrite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nakama.api.WriteTournamentRecordRequest.TournamentRecordWrite)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 score = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 subscore = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &subscore_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string metadata = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_metadata()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->metadata().data(), static_cast<int>(this->metadata().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nakama.api.WriteTournamentRecordRequest.TournamentRecordWrite.metadata"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nakama.api.WriteTournamentRecordRequest.TournamentRecordWrite)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nakama.api.WriteTournamentRecordRequest.TournamentRecordWrite)
  return false;
#undef DO_
}

void WriteTournamentRecordRequest_TournamentRecordWrite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nakama.api.WriteTournamentRecordRequest.TournamentRecordWrite)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 score = 1;
  if (this->score() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->score(), output);
  }

  // int64 subscore = 2;
  if (this->subscore() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->subscore(), output);
  }

  // string metadata = 3;
  if (this->metadata().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->metadata().data(), static_cast<int>(this->metadata().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.WriteTournamentRecordRequest.TournamentRecordWrite.metadata");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->metadata(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:nakama.api.WriteTournamentRecordRequest.TournamentRecordWrite)
}

::google::protobuf::uint8* WriteTournamentRecordRequest_TournamentRecordWrite::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.WriteTournamentRecordRequest.TournamentRecordWrite)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 score = 1;
  if (this->score() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->score(), target);
  }

  // int64 subscore = 2;
  if (this->subscore() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->subscore(), target);
  }

  // string metadata = 3;
  if (this->metadata().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->metadata().data(), static_cast<int>(this->metadata().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.WriteTournamentRecordRequest.TournamentRecordWrite.metadata");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->metadata(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.WriteTournamentRecordRequest.TournamentRecordWrite)
  return target;
}

size_t WriteTournamentRecordRequest_TournamentRecordWrite::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.WriteTournamentRecordRequest.TournamentRecordWrite)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string metadata = 3;
  if (this->metadata().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->metadata());
  }

  // int64 score = 1;
  if (this->score() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->score());
  }

  // int64 subscore = 2;
  if (this->subscore() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->subscore());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WriteTournamentRecordRequest_TournamentRecordWrite::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.WriteTournamentRecordRequest.TournamentRecordWrite)
  GOOGLE_DCHECK_NE(&from, this);
  const WriteTournamentRecordRequest_TournamentRecordWrite* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WriteTournamentRecordRequest_TournamentRecordWrite>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.WriteTournamentRecordRequest.TournamentRecordWrite)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.WriteTournamentRecordRequest.TournamentRecordWrite)
    MergeFrom(*source);
  }
}

void WriteTournamentRecordRequest_TournamentRecordWrite::MergeFrom(const WriteTournamentRecordRequest_TournamentRecordWrite& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.WriteTournamentRecordRequest.TournamentRecordWrite)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.metadata().size() > 0) {

    metadata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.metadata_);
  }
  if (from.score() != 0) {
    set_score(from.score());
  }
  if (from.subscore() != 0) {
    set_subscore(from.subscore());
  }
}

void WriteTournamentRecordRequest_TournamentRecordWrite::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.WriteTournamentRecordRequest.TournamentRecordWrite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WriteTournamentRecordRequest_TournamentRecordWrite::CopyFrom(const WriteTournamentRecordRequest_TournamentRecordWrite& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.WriteTournamentRecordRequest.TournamentRecordWrite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WriteTournamentRecordRequest_TournamentRecordWrite::IsInitialized() const {
  return true;
}

void WriteTournamentRecordRequest_TournamentRecordWrite::Swap(WriteTournamentRecordRequest_TournamentRecordWrite* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WriteTournamentRecordRequest_TournamentRecordWrite::InternalSwap(WriteTournamentRecordRequest_TournamentRecordWrite* other) {
  using std::swap;
  metadata_.Swap(&other->metadata_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(score_, other->score_);
  swap(subscore_, other->subscore_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata WriteTournamentRecordRequest_TournamentRecordWrite::GetMetadata() const {
  protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void WriteTournamentRecordRequest::InitAsDefaultInstance() {
  ::nakama::api::_WriteTournamentRecordRequest_default_instance_._instance.get_mutable()->record_ = const_cast< ::nakama::api::WriteTournamentRecordRequest_TournamentRecordWrite*>(
      ::nakama::api::WriteTournamentRecordRequest_TournamentRecordWrite::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WriteTournamentRecordRequest::kTournamentIdFieldNumber;
const int WriteTournamentRecordRequest::kRecordFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WriteTournamentRecordRequest::WriteTournamentRecordRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_WriteTournamentRecordRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:nakama.api.WriteTournamentRecordRequest)
}
WriteTournamentRecordRequest::WriteTournamentRecordRequest(const WriteTournamentRecordRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tournament_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.tournament_id().size() > 0) {
    tournament_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tournament_id_);
  }
  if (from.has_record()) {
    record_ = new ::nakama::api::WriteTournamentRecordRequest_TournamentRecordWrite(*from.record_);
  } else {
    record_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:nakama.api.WriteTournamentRecordRequest)
}

void WriteTournamentRecordRequest::SharedCtor() {
  tournament_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  record_ = NULL;
}

WriteTournamentRecordRequest::~WriteTournamentRecordRequest() {
  // @@protoc_insertion_point(destructor:nakama.api.WriteTournamentRecordRequest)
  SharedDtor();
}

void WriteTournamentRecordRequest::SharedDtor() {
  tournament_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete record_;
}

void WriteTournamentRecordRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* WriteTournamentRecordRequest::descriptor() {
  ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WriteTournamentRecordRequest& WriteTournamentRecordRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::scc_info_WriteTournamentRecordRequest.base);
  return *internal_default_instance();
}


void WriteTournamentRecordRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.WriteTournamentRecordRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tournament_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && record_ != NULL) {
    delete record_;
  }
  record_ = NULL;
  _internal_metadata_.Clear();
}

bool WriteTournamentRecordRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nakama.api.WriteTournamentRecordRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string tournament_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tournament_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tournament_id().data(), static_cast<int>(this->tournament_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nakama.api.WriteTournamentRecordRequest.tournament_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .nakama.api.WriteTournamentRecordRequest.TournamentRecordWrite record = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_record()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nakama.api.WriteTournamentRecordRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nakama.api.WriteTournamentRecordRequest)
  return false;
#undef DO_
}

void WriteTournamentRecordRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nakama.api.WriteTournamentRecordRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tournament_id = 1;
  if (this->tournament_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tournament_id().data(), static_cast<int>(this->tournament_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.WriteTournamentRecordRequest.tournament_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->tournament_id(), output);
  }

  // .nakama.api.WriteTournamentRecordRequest.TournamentRecordWrite record = 2;
  if (this->has_record()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_record(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:nakama.api.WriteTournamentRecordRequest)
}

::google::protobuf::uint8* WriteTournamentRecordRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.WriteTournamentRecordRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tournament_id = 1;
  if (this->tournament_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tournament_id().data(), static_cast<int>(this->tournament_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nakama.api.WriteTournamentRecordRequest.tournament_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->tournament_id(), target);
  }

  // .nakama.api.WriteTournamentRecordRequest.TournamentRecordWrite record = 2;
  if (this->has_record()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_record(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.WriteTournamentRecordRequest)
  return target;
}

size_t WriteTournamentRecordRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.WriteTournamentRecordRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string tournament_id = 1;
  if (this->tournament_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tournament_id());
  }

  // .nakama.api.WriteTournamentRecordRequest.TournamentRecordWrite record = 2;
  if (this->has_record()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *record_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WriteTournamentRecordRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.WriteTournamentRecordRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const WriteTournamentRecordRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WriteTournamentRecordRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.WriteTournamentRecordRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.WriteTournamentRecordRequest)
    MergeFrom(*source);
  }
}

void WriteTournamentRecordRequest::MergeFrom(const WriteTournamentRecordRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.WriteTournamentRecordRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.tournament_id().size() > 0) {

    tournament_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tournament_id_);
  }
  if (from.has_record()) {
    mutable_record()->::nakama::api::WriteTournamentRecordRequest_TournamentRecordWrite::MergeFrom(from.record());
  }
}

void WriteTournamentRecordRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.WriteTournamentRecordRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WriteTournamentRecordRequest::CopyFrom(const WriteTournamentRecordRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.WriteTournamentRecordRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WriteTournamentRecordRequest::IsInitialized() const {
  return true;
}

void WriteTournamentRecordRequest::Swap(WriteTournamentRecordRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WriteTournamentRecordRequest::InternalSwap(WriteTournamentRecordRequest* other) {
  using std::swap;
  tournament_id_.Swap(&other->tournament_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(record_, other->record_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata WriteTournamentRecordRequest::GetMetadata() const {
  protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_github_2ecom_2fheroiclabs_2fnakama_2fapi_2fapi_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace api
}  // namespace nakama
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::nakama::api::Account* Arena::CreateMaybeMessage< ::nakama::api::Account >(Arena* arena) {
  return Arena::CreateInternal< ::nakama::api::Account >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::nakama::api::AccountCustom* Arena::CreateMaybeMessage< ::nakama::api::AccountCustom >(Arena* arena) {
  return Arena::CreateInternal< ::nakama::api::AccountCustom >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::nakama::api::AccountDevice* Arena::CreateMaybeMessage< ::nakama::api::AccountDevice >(Arena* arena) {
  return Arena::CreateInternal< ::nakama::api::AccountDevice >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::nakama::api::AccountEmail* Arena::CreateMaybeMessage< ::nakama::api::AccountEmail >(Arena* arena) {
  return Arena::CreateInternal< ::nakama::api::AccountEmail >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::nakama::api::AccountFacebook* Arena::CreateMaybeMessage< ::nakama::api::AccountFacebook >(Arena* arena) {
  return Arena::CreateInternal< ::nakama::api::AccountFacebook >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::nakama::api::AccountGameCenter* Arena::CreateMaybeMessage< ::nakama::api::AccountGameCenter >(Arena* arena) {
  return Arena::CreateInternal< ::nakama::api::AccountGameCenter >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::nakama::api::AccountGoogle* Arena::CreateMaybeMessage< ::nakama::api::AccountGoogle >(Arena* arena) {
  return Arena::CreateInternal< ::nakama::api::AccountGoogle >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::nakama::api::AccountSteam* Arena::CreateMaybeMessage< ::nakama::api::AccountSteam >(Arena* arena) {
  return Arena::CreateInternal< ::nakama::api::AccountSteam >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::nakama::api::AddFriendsRequest* Arena::CreateMaybeMessage< ::nakama::api::AddFriendsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::nakama::api::AddFriendsRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::nakama::api::AddGroupUsersRequest* Arena::CreateMaybeMessage< ::nakama::api::AddGroupUsersRequest >(Arena* arena) {
  return Arena::CreateInternal< ::nakama::api::AddGroupUsersRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::nakama::api::AuthenticateCustomRequest* Arena::CreateMaybeMessage< ::nakama::api::AuthenticateCustomRequest >(Arena* arena) {
  return Arena::CreateInternal< ::nakama::api::AuthenticateCustomRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::nakama::api::AuthenticateDeviceRequest* Arena::CreateMaybeMessage< ::nakama::api::AuthenticateDeviceRequest >(Arena* arena) {
  return Arena::CreateInternal< ::nakama::api::AuthenticateDeviceRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::nakama::api::AuthenticateEmailRequest* Arena::CreateMaybeMessage< ::nakama::api::AuthenticateEmailRequest >(Arena* arena) {
  return Arena::CreateInternal< ::nakama::api::AuthenticateEmailRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::nakama::api::AuthenticateFacebookRequest* Arena::CreateMaybeMessage< ::nakama::api::AuthenticateFacebookRequest >(Arena* arena) {
  return Arena::CreateInternal< ::nakama::api::AuthenticateFacebookRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::nakama::api::AuthenticateGameCenterRequest* Arena::CreateMaybeMessage< ::nakama::api::AuthenticateGameCenterRequest >(Arena* arena) {
  return Arena::CreateInternal< ::nakama::api::AuthenticateGameCenterRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::nakama::api::AuthenticateGoogleRequest* Arena::CreateMaybeMessage< ::nakama::api::AuthenticateGoogleRequest >(Arena* arena) {
  return Arena::CreateInternal< ::nakama::api::AuthenticateGoogleRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::nakama::api::AuthenticateSteamRequest* Arena::CreateMaybeMessage< ::nakama::api::AuthenticateSteamRequest >(Arena* arena) {
  return Arena::CreateInternal< ::nakama::api::AuthenticateSteamRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::nakama::api::BlockFriendsRequest* Arena::CreateMaybeMessage< ::nakama::api::BlockFriendsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::nakama::api::BlockFriendsRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::nakama::api::ChannelMessage* Arena::CreateMaybeMessage< ::nakama::api::ChannelMessage >(Arena* arena) {
  return Arena::CreateInternal< ::nakama::api::ChannelMessage >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::nakama::api::ChannelMessageList* Arena::CreateMaybeMessage< ::nakama::api::ChannelMessageList >(Arena* arena) {
  return Arena::CreateInternal< ::nakama::api::ChannelMessageList >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::nakama::api::CreateGroupRequest* Arena::CreateMaybeMessage< ::nakama::api::CreateGroupRequest >(Arena* arena) {
  return Arena::CreateInternal< ::nakama::api::CreateGroupRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::nakama::api::DeleteFriendsRequest* Arena::CreateMaybeMessage< ::nakama::api::DeleteFriendsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::nakama::api::DeleteFriendsRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::nakama::api::DeleteGroupRequest* Arena::CreateMaybeMessage< ::nakama::api::DeleteGroupRequest >(Arena* arena) {
  return Arena::CreateInternal< ::nakama::api::DeleteGroupRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::nakama::api::DeleteLeaderboardRecordRequest* Arena::CreateMaybeMessage< ::nakama::api::DeleteLeaderboardRecordRequest >(Arena* arena) {
  return Arena::CreateInternal< ::nakama::api::DeleteLeaderboardRecordRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::nakama::api::DeleteNotificationsRequest* Arena::CreateMaybeMessage< ::nakama::api::DeleteNotificationsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::nakama::api::DeleteNotificationsRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::nakama::api::DeleteStorageObjectId* Arena::CreateMaybeMessage< ::nakama::api::DeleteStorageObjectId >(Arena* arena) {
  return Arena::CreateInternal< ::nakama::api::DeleteStorageObjectId >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::nakama::api::DeleteStorageObjectsRequest* Arena::CreateMaybeMessage< ::nakama::api::DeleteStorageObjectsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::nakama::api::DeleteStorageObjectsRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::nakama::api::Friend* Arena::CreateMaybeMessage< ::nakama::api::Friend >(Arena* arena) {
  return Arena::CreateInternal< ::nakama::api::Friend >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::nakama::api::Friends* Arena::CreateMaybeMessage< ::nakama::api::Friends >(Arena* arena) {
  return Arena::CreateInternal< ::nakama::api::Friends >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::nakama::api::GetUsersRequest* Arena::CreateMaybeMessage< ::nakama::api::GetUsersRequest >(Arena* arena) {
  return Arena::CreateInternal< ::nakama::api::GetUsersRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::nakama::api::Group* Arena::CreateMaybeMessage< ::nakama::api::Group >(Arena* arena) {
  return Arena::CreateInternal< ::nakama::api::Group >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::nakama::api::GroupList* Arena::CreateMaybeMessage< ::nakama::api::GroupList >(Arena* arena) {
  return Arena::CreateInternal< ::nakama::api::GroupList >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::nakama::api::GroupUserList_GroupUser* Arena::CreateMaybeMessage< ::nakama::api::GroupUserList_GroupUser >(Arena* arena) {
  return Arena::CreateInternal< ::nakama::api::GroupUserList_GroupUser >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::nakama::api::GroupUserList* Arena::CreateMaybeMessage< ::nakama::api::GroupUserList >(Arena* arena) {
  return Arena::CreateInternal< ::nakama::api::GroupUserList >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::nakama::api::ImportFacebookFriendsRequest* Arena::CreateMaybeMessage< ::nakama::api::ImportFacebookFriendsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::nakama::api::ImportFacebookFriendsRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::nakama::api::JoinGroupRequest* Arena::CreateMaybeMessage< ::nakama::api::JoinGroupRequest >(Arena* arena) {
  return Arena::CreateInternal< ::nakama::api::JoinGroupRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::nakama::api::JoinTournamentRequest* Arena::CreateMaybeMessage< ::nakama::api::JoinTournamentRequest >(Arena* arena) {
  return Arena::CreateInternal< ::nakama::api::JoinTournamentRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::nakama::api::KickGroupUsersRequest* Arena::CreateMaybeMessage< ::nakama::api::KickGroupUsersRequest >(Arena* arena) {
  return Arena::CreateInternal< ::nakama::api::KickGroupUsersRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::nakama::api::LeaderboardRecord* Arena::CreateMaybeMessage< ::nakama::api::LeaderboardRecord >(Arena* arena) {
  return Arena::CreateInternal< ::nakama::api::LeaderboardRecord >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::nakama::api::LeaderboardRecordList* Arena::CreateMaybeMessage< ::nakama::api::LeaderboardRecordList >(Arena* arena) {
  return Arena::CreateInternal< ::nakama::api::LeaderboardRecordList >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::nakama::api::LeaveGroupRequest* Arena::CreateMaybeMessage< ::nakama::api::LeaveGroupRequest >(Arena* arena) {
  return Arena::CreateInternal< ::nakama::api::LeaveGroupRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::nakama::api::LinkFacebookRequest* Arena::CreateMaybeMessage< ::nakama::api::LinkFacebookRequest >(Arena* arena) {
  return Arena::CreateInternal< ::nakama::api::LinkFacebookRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::nakama::api::ListChannelMessagesRequest* Arena::CreateMaybeMessage< ::nakama::api::ListChannelMessagesRequest >(Arena* arena) {
  return Arena::CreateInternal< ::nakama::api::ListChannelMessagesRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::nakama::api::ListGroupsRequest* Arena::CreateMaybeMessage< ::nakama::api::ListGroupsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::nakama::api::ListGroupsRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::nakama::api::ListGroupUsersRequest* Arena::CreateMaybeMessage< ::nakama::api::ListGroupUsersRequest >(Arena* arena) {
  return Arena::CreateInternal< ::nakama::api::ListGroupUsersRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::nakama::api::ListLeaderboardRecordsAroundOwnerRequest* Arena::CreateMaybeMessage< ::nakama::api::ListLeaderboardRecordsAroundOwnerRequest >(Arena* arena) {
  return Arena::CreateInternal< ::nakama::api::ListLeaderboardRecordsAroundOwnerRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::nakama::api::ListLeaderboardRecordsRequest* Arena::CreateMaybeMessage< ::nakama::api::ListLeaderboardRecordsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::nakama::api::ListLeaderboardRecordsRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::nakama::api::ListMatchesRequest* Arena::CreateMaybeMessage< ::nakama::api::ListMatchesRequest >(Arena* arena) {
  return Arena::CreateInternal< ::nakama::api::ListMatchesRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::nakama::api::ListNotificationsRequest* Arena::CreateMaybeMessage< ::nakama::api::ListNotificationsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::nakama::api::ListNotificationsRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::nakama::api::ListStorageObjectsRequest* Arena::CreateMaybeMessage< ::nakama::api::ListStorageObjectsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::nakama::api::ListStorageObjectsRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::nakama::api::ListTournamentRecordsAroundOwnerRequest* Arena::CreateMaybeMessage< ::nakama::api::ListTournamentRecordsAroundOwnerRequest >(Arena* arena) {
  return Arena::CreateInternal< ::nakama::api::ListTournamentRecordsAroundOwnerRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::nakama::api::ListTournamentRecordsRequest* Arena::CreateMaybeMessage< ::nakama::api::ListTournamentRecordsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::nakama::api::ListTournamentRecordsRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::nakama::api::ListTournamentsRequest* Arena::CreateMaybeMessage< ::nakama::api::ListTournamentsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::nakama::api::ListTournamentsRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::nakama::api::ListUserGroupsRequest* Arena::CreateMaybeMessage< ::nakama::api::ListUserGroupsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::nakama::api::ListUserGroupsRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::nakama::api::Match* Arena::CreateMaybeMessage< ::nakama::api::Match >(Arena* arena) {
  return Arena::CreateInternal< ::nakama::api::Match >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::nakama::api::MatchList* Arena::CreateMaybeMessage< ::nakama::api::MatchList >(Arena* arena) {
  return Arena::CreateInternal< ::nakama::api::MatchList >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::nakama::api::Notification* Arena::CreateMaybeMessage< ::nakama::api::Notification >(Arena* arena) {
  return Arena::CreateInternal< ::nakama::api::Notification >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::nakama::api::NotificationList* Arena::CreateMaybeMessage< ::nakama::api::NotificationList >(Arena* arena) {
  return Arena::CreateInternal< ::nakama::api::NotificationList >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::nakama::api::PromoteGroupUsersRequest* Arena::CreateMaybeMessage< ::nakama::api::PromoteGroupUsersRequest >(Arena* arena) {
  return Arena::CreateInternal< ::nakama::api::PromoteGroupUsersRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::nakama::api::ReadStorageObjectId* Arena::CreateMaybeMessage< ::nakama::api::ReadStorageObjectId >(Arena* arena) {
  return Arena::CreateInternal< ::nakama::api::ReadStorageObjectId >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::nakama::api::ReadStorageObjectsRequest* Arena::CreateMaybeMessage< ::nakama::api::ReadStorageObjectsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::nakama::api::ReadStorageObjectsRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::nakama::api::Rpc* Arena::CreateMaybeMessage< ::nakama::api::Rpc >(Arena* arena) {
  return Arena::CreateInternal< ::nakama::api::Rpc >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::nakama::api::Session* Arena::CreateMaybeMessage< ::nakama::api::Session >(Arena* arena) {
  return Arena::CreateInternal< ::nakama::api::Session >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::nakama::api::StorageObject* Arena::CreateMaybeMessage< ::nakama::api::StorageObject >(Arena* arena) {
  return Arena::CreateInternal< ::nakama::api::StorageObject >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::nakama::api::StorageObjectAck* Arena::CreateMaybeMessage< ::nakama::api::StorageObjectAck >(Arena* arena) {
  return Arena::CreateInternal< ::nakama::api::StorageObjectAck >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::nakama::api::StorageObjectAcks* Arena::CreateMaybeMessage< ::nakama::api::StorageObjectAcks >(Arena* arena) {
  return Arena::CreateInternal< ::nakama::api::StorageObjectAcks >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::nakama::api::StorageObjects* Arena::CreateMaybeMessage< ::nakama::api::StorageObjects >(Arena* arena) {
  return Arena::CreateInternal< ::nakama::api::StorageObjects >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::nakama::api::StorageObjectList* Arena::CreateMaybeMessage< ::nakama::api::StorageObjectList >(Arena* arena) {
  return Arena::CreateInternal< ::nakama::api::StorageObjectList >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::nakama::api::Tournament* Arena::CreateMaybeMessage< ::nakama::api::Tournament >(Arena* arena) {
  return Arena::CreateInternal< ::nakama::api::Tournament >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::nakama::api::TournamentList* Arena::CreateMaybeMessage< ::nakama::api::TournamentList >(Arena* arena) {
  return Arena::CreateInternal< ::nakama::api::TournamentList >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::nakama::api::TournamentRecordList* Arena::CreateMaybeMessage< ::nakama::api::TournamentRecordList >(Arena* arena) {
  return Arena::CreateInternal< ::nakama::api::TournamentRecordList >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::nakama::api::UpdateAccountRequest* Arena::CreateMaybeMessage< ::nakama::api::UpdateAccountRequest >(Arena* arena) {
  return Arena::CreateInternal< ::nakama::api::UpdateAccountRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::nakama::api::UpdateGroupRequest* Arena::CreateMaybeMessage< ::nakama::api::UpdateGroupRequest >(Arena* arena) {
  return Arena::CreateInternal< ::nakama::api::UpdateGroupRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::nakama::api::User* Arena::CreateMaybeMessage< ::nakama::api::User >(Arena* arena) {
  return Arena::CreateInternal< ::nakama::api::User >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::nakama::api::UserGroupList_UserGroup* Arena::CreateMaybeMessage< ::nakama::api::UserGroupList_UserGroup >(Arena* arena) {
  return Arena::CreateInternal< ::nakama::api::UserGroupList_UserGroup >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::nakama::api::UserGroupList* Arena::CreateMaybeMessage< ::nakama::api::UserGroupList >(Arena* arena) {
  return Arena::CreateInternal< ::nakama::api::UserGroupList >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::nakama::api::Users* Arena::CreateMaybeMessage< ::nakama::api::Users >(Arena* arena) {
  return Arena::CreateInternal< ::nakama::api::Users >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::nakama::api::WriteLeaderboardRecordRequest_LeaderboardRecordWrite* Arena::CreateMaybeMessage< ::nakama::api::WriteLeaderboardRecordRequest_LeaderboardRecordWrite >(Arena* arena) {
  return Arena::CreateInternal< ::nakama::api::WriteLeaderboardRecordRequest_LeaderboardRecordWrite >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::nakama::api::WriteLeaderboardRecordRequest* Arena::CreateMaybeMessage< ::nakama::api::WriteLeaderboardRecordRequest >(Arena* arena) {
  return Arena::CreateInternal< ::nakama::api::WriteLeaderboardRecordRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::nakama::api::WriteStorageObject* Arena::CreateMaybeMessage< ::nakama::api::WriteStorageObject >(Arena* arena) {
  return Arena::CreateInternal< ::nakama::api::WriteStorageObject >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::nakama::api::WriteStorageObjectsRequest* Arena::CreateMaybeMessage< ::nakama::api::WriteStorageObjectsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::nakama::api::WriteStorageObjectsRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::nakama::api::WriteTournamentRecordRequest_TournamentRecordWrite* Arena::CreateMaybeMessage< ::nakama::api::WriteTournamentRecordRequest_TournamentRecordWrite >(Arena* arena) {
  return Arena::CreateInternal< ::nakama::api::WriteTournamentRecordRequest_TournamentRecordWrite >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::nakama::api::WriteTournamentRecordRequest* Arena::CreateMaybeMessage< ::nakama::api::WriteTournamentRecordRequest >(Arena* arena) {
  return Arena::CreateInternal< ::nakama::api::WriteTournamentRecordRequest >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
