// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: github.com/heroiclabs/nakama-common/api/api.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
#include <google/protobuf/wrappers.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[123]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto;
namespace nakama {
namespace api {
class Account;
class AccountDefaultTypeInternal;
extern AccountDefaultTypeInternal _Account_default_instance_;
class AccountApple;
class AccountAppleDefaultTypeInternal;
extern AccountAppleDefaultTypeInternal _AccountApple_default_instance_;
class AccountApple_VarsEntry_DoNotUse;
class AccountApple_VarsEntry_DoNotUseDefaultTypeInternal;
extern AccountApple_VarsEntry_DoNotUseDefaultTypeInternal _AccountApple_VarsEntry_DoNotUse_default_instance_;
class AccountCustom;
class AccountCustomDefaultTypeInternal;
extern AccountCustomDefaultTypeInternal _AccountCustom_default_instance_;
class AccountCustom_VarsEntry_DoNotUse;
class AccountCustom_VarsEntry_DoNotUseDefaultTypeInternal;
extern AccountCustom_VarsEntry_DoNotUseDefaultTypeInternal _AccountCustom_VarsEntry_DoNotUse_default_instance_;
class AccountDevice;
class AccountDeviceDefaultTypeInternal;
extern AccountDeviceDefaultTypeInternal _AccountDevice_default_instance_;
class AccountDevice_VarsEntry_DoNotUse;
class AccountDevice_VarsEntry_DoNotUseDefaultTypeInternal;
extern AccountDevice_VarsEntry_DoNotUseDefaultTypeInternal _AccountDevice_VarsEntry_DoNotUse_default_instance_;
class AccountEmail;
class AccountEmailDefaultTypeInternal;
extern AccountEmailDefaultTypeInternal _AccountEmail_default_instance_;
class AccountEmail_VarsEntry_DoNotUse;
class AccountEmail_VarsEntry_DoNotUseDefaultTypeInternal;
extern AccountEmail_VarsEntry_DoNotUseDefaultTypeInternal _AccountEmail_VarsEntry_DoNotUse_default_instance_;
class AccountFacebook;
class AccountFacebookDefaultTypeInternal;
extern AccountFacebookDefaultTypeInternal _AccountFacebook_default_instance_;
class AccountFacebookInstantGame;
class AccountFacebookInstantGameDefaultTypeInternal;
extern AccountFacebookInstantGameDefaultTypeInternal _AccountFacebookInstantGame_default_instance_;
class AccountFacebookInstantGame_VarsEntry_DoNotUse;
class AccountFacebookInstantGame_VarsEntry_DoNotUseDefaultTypeInternal;
extern AccountFacebookInstantGame_VarsEntry_DoNotUseDefaultTypeInternal _AccountFacebookInstantGame_VarsEntry_DoNotUse_default_instance_;
class AccountFacebook_VarsEntry_DoNotUse;
class AccountFacebook_VarsEntry_DoNotUseDefaultTypeInternal;
extern AccountFacebook_VarsEntry_DoNotUseDefaultTypeInternal _AccountFacebook_VarsEntry_DoNotUse_default_instance_;
class AccountGameCenter;
class AccountGameCenterDefaultTypeInternal;
extern AccountGameCenterDefaultTypeInternal _AccountGameCenter_default_instance_;
class AccountGameCenter_VarsEntry_DoNotUse;
class AccountGameCenter_VarsEntry_DoNotUseDefaultTypeInternal;
extern AccountGameCenter_VarsEntry_DoNotUseDefaultTypeInternal _AccountGameCenter_VarsEntry_DoNotUse_default_instance_;
class AccountGoogle;
class AccountGoogleDefaultTypeInternal;
extern AccountGoogleDefaultTypeInternal _AccountGoogle_default_instance_;
class AccountGoogle_VarsEntry_DoNotUse;
class AccountGoogle_VarsEntry_DoNotUseDefaultTypeInternal;
extern AccountGoogle_VarsEntry_DoNotUseDefaultTypeInternal _AccountGoogle_VarsEntry_DoNotUse_default_instance_;
class AccountRefresh;
class AccountRefreshDefaultTypeInternal;
extern AccountRefreshDefaultTypeInternal _AccountRefresh_default_instance_;
class AccountRefresh_VarsEntry_DoNotUse;
class AccountRefresh_VarsEntry_DoNotUseDefaultTypeInternal;
extern AccountRefresh_VarsEntry_DoNotUseDefaultTypeInternal _AccountRefresh_VarsEntry_DoNotUse_default_instance_;
class AccountSteam;
class AccountSteamDefaultTypeInternal;
extern AccountSteamDefaultTypeInternal _AccountSteam_default_instance_;
class AccountSteam_VarsEntry_DoNotUse;
class AccountSteam_VarsEntry_DoNotUseDefaultTypeInternal;
extern AccountSteam_VarsEntry_DoNotUseDefaultTypeInternal _AccountSteam_VarsEntry_DoNotUse_default_instance_;
class AddFriendsRequest;
class AddFriendsRequestDefaultTypeInternal;
extern AddFriendsRequestDefaultTypeInternal _AddFriendsRequest_default_instance_;
class AddGroupUsersRequest;
class AddGroupUsersRequestDefaultTypeInternal;
extern AddGroupUsersRequestDefaultTypeInternal _AddGroupUsersRequest_default_instance_;
class AuthenticateAppleRequest;
class AuthenticateAppleRequestDefaultTypeInternal;
extern AuthenticateAppleRequestDefaultTypeInternal _AuthenticateAppleRequest_default_instance_;
class AuthenticateCustomRequest;
class AuthenticateCustomRequestDefaultTypeInternal;
extern AuthenticateCustomRequestDefaultTypeInternal _AuthenticateCustomRequest_default_instance_;
class AuthenticateDeviceRequest;
class AuthenticateDeviceRequestDefaultTypeInternal;
extern AuthenticateDeviceRequestDefaultTypeInternal _AuthenticateDeviceRequest_default_instance_;
class AuthenticateEmailRequest;
class AuthenticateEmailRequestDefaultTypeInternal;
extern AuthenticateEmailRequestDefaultTypeInternal _AuthenticateEmailRequest_default_instance_;
class AuthenticateFacebookInstantGameRequest;
class AuthenticateFacebookInstantGameRequestDefaultTypeInternal;
extern AuthenticateFacebookInstantGameRequestDefaultTypeInternal _AuthenticateFacebookInstantGameRequest_default_instance_;
class AuthenticateFacebookRequest;
class AuthenticateFacebookRequestDefaultTypeInternal;
extern AuthenticateFacebookRequestDefaultTypeInternal _AuthenticateFacebookRequest_default_instance_;
class AuthenticateGameCenterRequest;
class AuthenticateGameCenterRequestDefaultTypeInternal;
extern AuthenticateGameCenterRequestDefaultTypeInternal _AuthenticateGameCenterRequest_default_instance_;
class AuthenticateGoogleRequest;
class AuthenticateGoogleRequestDefaultTypeInternal;
extern AuthenticateGoogleRequestDefaultTypeInternal _AuthenticateGoogleRequest_default_instance_;
class AuthenticateSteamRequest;
class AuthenticateSteamRequestDefaultTypeInternal;
extern AuthenticateSteamRequestDefaultTypeInternal _AuthenticateSteamRequest_default_instance_;
class BanGroupUsersRequest;
class BanGroupUsersRequestDefaultTypeInternal;
extern BanGroupUsersRequestDefaultTypeInternal _BanGroupUsersRequest_default_instance_;
class BlockFriendsRequest;
class BlockFriendsRequestDefaultTypeInternal;
extern BlockFriendsRequestDefaultTypeInternal _BlockFriendsRequest_default_instance_;
class ChannelMessage;
class ChannelMessageDefaultTypeInternal;
extern ChannelMessageDefaultTypeInternal _ChannelMessage_default_instance_;
class ChannelMessageList;
class ChannelMessageListDefaultTypeInternal;
extern ChannelMessageListDefaultTypeInternal _ChannelMessageList_default_instance_;
class CreateGroupRequest;
class CreateGroupRequestDefaultTypeInternal;
extern CreateGroupRequestDefaultTypeInternal _CreateGroupRequest_default_instance_;
class DeleteFriendsRequest;
class DeleteFriendsRequestDefaultTypeInternal;
extern DeleteFriendsRequestDefaultTypeInternal _DeleteFriendsRequest_default_instance_;
class DeleteGroupRequest;
class DeleteGroupRequestDefaultTypeInternal;
extern DeleteGroupRequestDefaultTypeInternal _DeleteGroupRequest_default_instance_;
class DeleteLeaderboardRecordRequest;
class DeleteLeaderboardRecordRequestDefaultTypeInternal;
extern DeleteLeaderboardRecordRequestDefaultTypeInternal _DeleteLeaderboardRecordRequest_default_instance_;
class DeleteNotificationsRequest;
class DeleteNotificationsRequestDefaultTypeInternal;
extern DeleteNotificationsRequestDefaultTypeInternal _DeleteNotificationsRequest_default_instance_;
class DeleteStorageObjectId;
class DeleteStorageObjectIdDefaultTypeInternal;
extern DeleteStorageObjectIdDefaultTypeInternal _DeleteStorageObjectId_default_instance_;
class DeleteStorageObjectsRequest;
class DeleteStorageObjectsRequestDefaultTypeInternal;
extern DeleteStorageObjectsRequestDefaultTypeInternal _DeleteStorageObjectsRequest_default_instance_;
class DemoteGroupUsersRequest;
class DemoteGroupUsersRequestDefaultTypeInternal;
extern DemoteGroupUsersRequestDefaultTypeInternal _DemoteGroupUsersRequest_default_instance_;
class Event;
class EventDefaultTypeInternal;
extern EventDefaultTypeInternal _Event_default_instance_;
class Event_PropertiesEntry_DoNotUse;
class Event_PropertiesEntry_DoNotUseDefaultTypeInternal;
extern Event_PropertiesEntry_DoNotUseDefaultTypeInternal _Event_PropertiesEntry_DoNotUse_default_instance_;
class Friend;
class FriendDefaultTypeInternal;
extern FriendDefaultTypeInternal _Friend_default_instance_;
class FriendList;
class FriendListDefaultTypeInternal;
extern FriendListDefaultTypeInternal _FriendList_default_instance_;
class GetSubscriptionRequest;
class GetSubscriptionRequestDefaultTypeInternal;
extern GetSubscriptionRequestDefaultTypeInternal _GetSubscriptionRequest_default_instance_;
class GetUsersRequest;
class GetUsersRequestDefaultTypeInternal;
extern GetUsersRequestDefaultTypeInternal _GetUsersRequest_default_instance_;
class Group;
class GroupDefaultTypeInternal;
extern GroupDefaultTypeInternal _Group_default_instance_;
class GroupList;
class GroupListDefaultTypeInternal;
extern GroupListDefaultTypeInternal _GroupList_default_instance_;
class GroupUserList;
class GroupUserListDefaultTypeInternal;
extern GroupUserListDefaultTypeInternal _GroupUserList_default_instance_;
class GroupUserList_GroupUser;
class GroupUserList_GroupUserDefaultTypeInternal;
extern GroupUserList_GroupUserDefaultTypeInternal _GroupUserList_GroupUser_default_instance_;
class ImportFacebookFriendsRequest;
class ImportFacebookFriendsRequestDefaultTypeInternal;
extern ImportFacebookFriendsRequestDefaultTypeInternal _ImportFacebookFriendsRequest_default_instance_;
class ImportSteamFriendsRequest;
class ImportSteamFriendsRequestDefaultTypeInternal;
extern ImportSteamFriendsRequestDefaultTypeInternal _ImportSteamFriendsRequest_default_instance_;
class JoinGroupRequest;
class JoinGroupRequestDefaultTypeInternal;
extern JoinGroupRequestDefaultTypeInternal _JoinGroupRequest_default_instance_;
class JoinTournamentRequest;
class JoinTournamentRequestDefaultTypeInternal;
extern JoinTournamentRequestDefaultTypeInternal _JoinTournamentRequest_default_instance_;
class KickGroupUsersRequest;
class KickGroupUsersRequestDefaultTypeInternal;
extern KickGroupUsersRequestDefaultTypeInternal _KickGroupUsersRequest_default_instance_;
class Leaderboard;
class LeaderboardDefaultTypeInternal;
extern LeaderboardDefaultTypeInternal _Leaderboard_default_instance_;
class LeaderboardList;
class LeaderboardListDefaultTypeInternal;
extern LeaderboardListDefaultTypeInternal _LeaderboardList_default_instance_;
class LeaderboardRecord;
class LeaderboardRecordDefaultTypeInternal;
extern LeaderboardRecordDefaultTypeInternal _LeaderboardRecord_default_instance_;
class LeaderboardRecordList;
class LeaderboardRecordListDefaultTypeInternal;
extern LeaderboardRecordListDefaultTypeInternal _LeaderboardRecordList_default_instance_;
class LeaveGroupRequest;
class LeaveGroupRequestDefaultTypeInternal;
extern LeaveGroupRequestDefaultTypeInternal _LeaveGroupRequest_default_instance_;
class LinkFacebookRequest;
class LinkFacebookRequestDefaultTypeInternal;
extern LinkFacebookRequestDefaultTypeInternal _LinkFacebookRequest_default_instance_;
class LinkSteamRequest;
class LinkSteamRequestDefaultTypeInternal;
extern LinkSteamRequestDefaultTypeInternal _LinkSteamRequest_default_instance_;
class ListChannelMessagesRequest;
class ListChannelMessagesRequestDefaultTypeInternal;
extern ListChannelMessagesRequestDefaultTypeInternal _ListChannelMessagesRequest_default_instance_;
class ListFriendsRequest;
class ListFriendsRequestDefaultTypeInternal;
extern ListFriendsRequestDefaultTypeInternal _ListFriendsRequest_default_instance_;
class ListGroupUsersRequest;
class ListGroupUsersRequestDefaultTypeInternal;
extern ListGroupUsersRequestDefaultTypeInternal _ListGroupUsersRequest_default_instance_;
class ListGroupsRequest;
class ListGroupsRequestDefaultTypeInternal;
extern ListGroupsRequestDefaultTypeInternal _ListGroupsRequest_default_instance_;
class ListLeaderboardRecordsAroundOwnerRequest;
class ListLeaderboardRecordsAroundOwnerRequestDefaultTypeInternal;
extern ListLeaderboardRecordsAroundOwnerRequestDefaultTypeInternal _ListLeaderboardRecordsAroundOwnerRequest_default_instance_;
class ListLeaderboardRecordsRequest;
class ListLeaderboardRecordsRequestDefaultTypeInternal;
extern ListLeaderboardRecordsRequestDefaultTypeInternal _ListLeaderboardRecordsRequest_default_instance_;
class ListMatchesRequest;
class ListMatchesRequestDefaultTypeInternal;
extern ListMatchesRequestDefaultTypeInternal _ListMatchesRequest_default_instance_;
class ListNotificationsRequest;
class ListNotificationsRequestDefaultTypeInternal;
extern ListNotificationsRequestDefaultTypeInternal _ListNotificationsRequest_default_instance_;
class ListStorageObjectsRequest;
class ListStorageObjectsRequestDefaultTypeInternal;
extern ListStorageObjectsRequestDefaultTypeInternal _ListStorageObjectsRequest_default_instance_;
class ListSubscriptionsRequest;
class ListSubscriptionsRequestDefaultTypeInternal;
extern ListSubscriptionsRequestDefaultTypeInternal _ListSubscriptionsRequest_default_instance_;
class ListTournamentRecordsAroundOwnerRequest;
class ListTournamentRecordsAroundOwnerRequestDefaultTypeInternal;
extern ListTournamentRecordsAroundOwnerRequestDefaultTypeInternal _ListTournamentRecordsAroundOwnerRequest_default_instance_;
class ListTournamentRecordsRequest;
class ListTournamentRecordsRequestDefaultTypeInternal;
extern ListTournamentRecordsRequestDefaultTypeInternal _ListTournamentRecordsRequest_default_instance_;
class ListTournamentsRequest;
class ListTournamentsRequestDefaultTypeInternal;
extern ListTournamentsRequestDefaultTypeInternal _ListTournamentsRequest_default_instance_;
class ListUserGroupsRequest;
class ListUserGroupsRequestDefaultTypeInternal;
extern ListUserGroupsRequestDefaultTypeInternal _ListUserGroupsRequest_default_instance_;
class Match;
class MatchDefaultTypeInternal;
extern MatchDefaultTypeInternal _Match_default_instance_;
class MatchList;
class MatchListDefaultTypeInternal;
extern MatchListDefaultTypeInternal _MatchList_default_instance_;
class Notification;
class NotificationDefaultTypeInternal;
extern NotificationDefaultTypeInternal _Notification_default_instance_;
class NotificationList;
class NotificationListDefaultTypeInternal;
extern NotificationListDefaultTypeInternal _NotificationList_default_instance_;
class PromoteGroupUsersRequest;
class PromoteGroupUsersRequestDefaultTypeInternal;
extern PromoteGroupUsersRequestDefaultTypeInternal _PromoteGroupUsersRequest_default_instance_;
class PurchaseList;
class PurchaseListDefaultTypeInternal;
extern PurchaseListDefaultTypeInternal _PurchaseList_default_instance_;
class ReadStorageObjectId;
class ReadStorageObjectIdDefaultTypeInternal;
extern ReadStorageObjectIdDefaultTypeInternal _ReadStorageObjectId_default_instance_;
class ReadStorageObjectsRequest;
class ReadStorageObjectsRequestDefaultTypeInternal;
extern ReadStorageObjectsRequestDefaultTypeInternal _ReadStorageObjectsRequest_default_instance_;
class Rpc;
class RpcDefaultTypeInternal;
extern RpcDefaultTypeInternal _Rpc_default_instance_;
class Session;
class SessionDefaultTypeInternal;
extern SessionDefaultTypeInternal _Session_default_instance_;
class SessionLogoutRequest;
class SessionLogoutRequestDefaultTypeInternal;
extern SessionLogoutRequestDefaultTypeInternal _SessionLogoutRequest_default_instance_;
class SessionRefreshRequest;
class SessionRefreshRequestDefaultTypeInternal;
extern SessionRefreshRequestDefaultTypeInternal _SessionRefreshRequest_default_instance_;
class SessionRefreshRequest_VarsEntry_DoNotUse;
class SessionRefreshRequest_VarsEntry_DoNotUseDefaultTypeInternal;
extern SessionRefreshRequest_VarsEntry_DoNotUseDefaultTypeInternal _SessionRefreshRequest_VarsEntry_DoNotUse_default_instance_;
class StorageObject;
class StorageObjectDefaultTypeInternal;
extern StorageObjectDefaultTypeInternal _StorageObject_default_instance_;
class StorageObjectAck;
class StorageObjectAckDefaultTypeInternal;
extern StorageObjectAckDefaultTypeInternal _StorageObjectAck_default_instance_;
class StorageObjectAcks;
class StorageObjectAcksDefaultTypeInternal;
extern StorageObjectAcksDefaultTypeInternal _StorageObjectAcks_default_instance_;
class StorageObjectList;
class StorageObjectListDefaultTypeInternal;
extern StorageObjectListDefaultTypeInternal _StorageObjectList_default_instance_;
class StorageObjects;
class StorageObjectsDefaultTypeInternal;
extern StorageObjectsDefaultTypeInternal _StorageObjects_default_instance_;
class SubscriptionList;
class SubscriptionListDefaultTypeInternal;
extern SubscriptionListDefaultTypeInternal _SubscriptionList_default_instance_;
class Tournament;
class TournamentDefaultTypeInternal;
extern TournamentDefaultTypeInternal _Tournament_default_instance_;
class TournamentList;
class TournamentListDefaultTypeInternal;
extern TournamentListDefaultTypeInternal _TournamentList_default_instance_;
class TournamentRecordList;
class TournamentRecordListDefaultTypeInternal;
extern TournamentRecordListDefaultTypeInternal _TournamentRecordList_default_instance_;
class UpdateAccountRequest;
class UpdateAccountRequestDefaultTypeInternal;
extern UpdateAccountRequestDefaultTypeInternal _UpdateAccountRequest_default_instance_;
class UpdateGroupRequest;
class UpdateGroupRequestDefaultTypeInternal;
extern UpdateGroupRequestDefaultTypeInternal _UpdateGroupRequest_default_instance_;
class User;
class UserDefaultTypeInternal;
extern UserDefaultTypeInternal _User_default_instance_;
class UserGroupList;
class UserGroupListDefaultTypeInternal;
extern UserGroupListDefaultTypeInternal _UserGroupList_default_instance_;
class UserGroupList_UserGroup;
class UserGroupList_UserGroupDefaultTypeInternal;
extern UserGroupList_UserGroupDefaultTypeInternal _UserGroupList_UserGroup_default_instance_;
class Users;
class UsersDefaultTypeInternal;
extern UsersDefaultTypeInternal _Users_default_instance_;
class ValidatePurchaseAppleRequest;
class ValidatePurchaseAppleRequestDefaultTypeInternal;
extern ValidatePurchaseAppleRequestDefaultTypeInternal _ValidatePurchaseAppleRequest_default_instance_;
class ValidatePurchaseGoogleRequest;
class ValidatePurchaseGoogleRequestDefaultTypeInternal;
extern ValidatePurchaseGoogleRequestDefaultTypeInternal _ValidatePurchaseGoogleRequest_default_instance_;
class ValidatePurchaseHuaweiRequest;
class ValidatePurchaseHuaweiRequestDefaultTypeInternal;
extern ValidatePurchaseHuaweiRequestDefaultTypeInternal _ValidatePurchaseHuaweiRequest_default_instance_;
class ValidatePurchaseResponse;
class ValidatePurchaseResponseDefaultTypeInternal;
extern ValidatePurchaseResponseDefaultTypeInternal _ValidatePurchaseResponse_default_instance_;
class ValidateSubscriptionAppleRequest;
class ValidateSubscriptionAppleRequestDefaultTypeInternal;
extern ValidateSubscriptionAppleRequestDefaultTypeInternal _ValidateSubscriptionAppleRequest_default_instance_;
class ValidateSubscriptionGoogleRequest;
class ValidateSubscriptionGoogleRequestDefaultTypeInternal;
extern ValidateSubscriptionGoogleRequestDefaultTypeInternal _ValidateSubscriptionGoogleRequest_default_instance_;
class ValidateSubscriptionResponse;
class ValidateSubscriptionResponseDefaultTypeInternal;
extern ValidateSubscriptionResponseDefaultTypeInternal _ValidateSubscriptionResponse_default_instance_;
class ValidatedPurchase;
class ValidatedPurchaseDefaultTypeInternal;
extern ValidatedPurchaseDefaultTypeInternal _ValidatedPurchase_default_instance_;
class ValidatedSubscription;
class ValidatedSubscriptionDefaultTypeInternal;
extern ValidatedSubscriptionDefaultTypeInternal _ValidatedSubscription_default_instance_;
class WriteLeaderboardRecordRequest;
class WriteLeaderboardRecordRequestDefaultTypeInternal;
extern WriteLeaderboardRecordRequestDefaultTypeInternal _WriteLeaderboardRecordRequest_default_instance_;
class WriteLeaderboardRecordRequest_LeaderboardRecordWrite;
class WriteLeaderboardRecordRequest_LeaderboardRecordWriteDefaultTypeInternal;
extern WriteLeaderboardRecordRequest_LeaderboardRecordWriteDefaultTypeInternal _WriteLeaderboardRecordRequest_LeaderboardRecordWrite_default_instance_;
class WriteStorageObject;
class WriteStorageObjectDefaultTypeInternal;
extern WriteStorageObjectDefaultTypeInternal _WriteStorageObject_default_instance_;
class WriteStorageObjectsRequest;
class WriteStorageObjectsRequestDefaultTypeInternal;
extern WriteStorageObjectsRequestDefaultTypeInternal _WriteStorageObjectsRequest_default_instance_;
class WriteTournamentRecordRequest;
class WriteTournamentRecordRequestDefaultTypeInternal;
extern WriteTournamentRecordRequestDefaultTypeInternal _WriteTournamentRecordRequest_default_instance_;
class WriteTournamentRecordRequest_TournamentRecordWrite;
class WriteTournamentRecordRequest_TournamentRecordWriteDefaultTypeInternal;
extern WriteTournamentRecordRequest_TournamentRecordWriteDefaultTypeInternal _WriteTournamentRecordRequest_TournamentRecordWrite_default_instance_;
}  // namespace api
}  // namespace nakama
PROTOBUF_NAMESPACE_OPEN
template<> ::nakama::api::Account* Arena::CreateMaybeMessage<::nakama::api::Account>(Arena*);
template<> ::nakama::api::AccountApple* Arena::CreateMaybeMessage<::nakama::api::AccountApple>(Arena*);
template<> ::nakama::api::AccountApple_VarsEntry_DoNotUse* Arena::CreateMaybeMessage<::nakama::api::AccountApple_VarsEntry_DoNotUse>(Arena*);
template<> ::nakama::api::AccountCustom* Arena::CreateMaybeMessage<::nakama::api::AccountCustom>(Arena*);
template<> ::nakama::api::AccountCustom_VarsEntry_DoNotUse* Arena::CreateMaybeMessage<::nakama::api::AccountCustom_VarsEntry_DoNotUse>(Arena*);
template<> ::nakama::api::AccountDevice* Arena::CreateMaybeMessage<::nakama::api::AccountDevice>(Arena*);
template<> ::nakama::api::AccountDevice_VarsEntry_DoNotUse* Arena::CreateMaybeMessage<::nakama::api::AccountDevice_VarsEntry_DoNotUse>(Arena*);
template<> ::nakama::api::AccountEmail* Arena::CreateMaybeMessage<::nakama::api::AccountEmail>(Arena*);
template<> ::nakama::api::AccountEmail_VarsEntry_DoNotUse* Arena::CreateMaybeMessage<::nakama::api::AccountEmail_VarsEntry_DoNotUse>(Arena*);
template<> ::nakama::api::AccountFacebook* Arena::CreateMaybeMessage<::nakama::api::AccountFacebook>(Arena*);
template<> ::nakama::api::AccountFacebookInstantGame* Arena::CreateMaybeMessage<::nakama::api::AccountFacebookInstantGame>(Arena*);
template<> ::nakama::api::AccountFacebookInstantGame_VarsEntry_DoNotUse* Arena::CreateMaybeMessage<::nakama::api::AccountFacebookInstantGame_VarsEntry_DoNotUse>(Arena*);
template<> ::nakama::api::AccountFacebook_VarsEntry_DoNotUse* Arena::CreateMaybeMessage<::nakama::api::AccountFacebook_VarsEntry_DoNotUse>(Arena*);
template<> ::nakama::api::AccountGameCenter* Arena::CreateMaybeMessage<::nakama::api::AccountGameCenter>(Arena*);
template<> ::nakama::api::AccountGameCenter_VarsEntry_DoNotUse* Arena::CreateMaybeMessage<::nakama::api::AccountGameCenter_VarsEntry_DoNotUse>(Arena*);
template<> ::nakama::api::AccountGoogle* Arena::CreateMaybeMessage<::nakama::api::AccountGoogle>(Arena*);
template<> ::nakama::api::AccountGoogle_VarsEntry_DoNotUse* Arena::CreateMaybeMessage<::nakama::api::AccountGoogle_VarsEntry_DoNotUse>(Arena*);
template<> ::nakama::api::AccountRefresh* Arena::CreateMaybeMessage<::nakama::api::AccountRefresh>(Arena*);
template<> ::nakama::api::AccountRefresh_VarsEntry_DoNotUse* Arena::CreateMaybeMessage<::nakama::api::AccountRefresh_VarsEntry_DoNotUse>(Arena*);
template<> ::nakama::api::AccountSteam* Arena::CreateMaybeMessage<::nakama::api::AccountSteam>(Arena*);
template<> ::nakama::api::AccountSteam_VarsEntry_DoNotUse* Arena::CreateMaybeMessage<::nakama::api::AccountSteam_VarsEntry_DoNotUse>(Arena*);
template<> ::nakama::api::AddFriendsRequest* Arena::CreateMaybeMessage<::nakama::api::AddFriendsRequest>(Arena*);
template<> ::nakama::api::AddGroupUsersRequest* Arena::CreateMaybeMessage<::nakama::api::AddGroupUsersRequest>(Arena*);
template<> ::nakama::api::AuthenticateAppleRequest* Arena::CreateMaybeMessage<::nakama::api::AuthenticateAppleRequest>(Arena*);
template<> ::nakama::api::AuthenticateCustomRequest* Arena::CreateMaybeMessage<::nakama::api::AuthenticateCustomRequest>(Arena*);
template<> ::nakama::api::AuthenticateDeviceRequest* Arena::CreateMaybeMessage<::nakama::api::AuthenticateDeviceRequest>(Arena*);
template<> ::nakama::api::AuthenticateEmailRequest* Arena::CreateMaybeMessage<::nakama::api::AuthenticateEmailRequest>(Arena*);
template<> ::nakama::api::AuthenticateFacebookInstantGameRequest* Arena::CreateMaybeMessage<::nakama::api::AuthenticateFacebookInstantGameRequest>(Arena*);
template<> ::nakama::api::AuthenticateFacebookRequest* Arena::CreateMaybeMessage<::nakama::api::AuthenticateFacebookRequest>(Arena*);
template<> ::nakama::api::AuthenticateGameCenterRequest* Arena::CreateMaybeMessage<::nakama::api::AuthenticateGameCenterRequest>(Arena*);
template<> ::nakama::api::AuthenticateGoogleRequest* Arena::CreateMaybeMessage<::nakama::api::AuthenticateGoogleRequest>(Arena*);
template<> ::nakama::api::AuthenticateSteamRequest* Arena::CreateMaybeMessage<::nakama::api::AuthenticateSteamRequest>(Arena*);
template<> ::nakama::api::BanGroupUsersRequest* Arena::CreateMaybeMessage<::nakama::api::BanGroupUsersRequest>(Arena*);
template<> ::nakama::api::BlockFriendsRequest* Arena::CreateMaybeMessage<::nakama::api::BlockFriendsRequest>(Arena*);
template<> ::nakama::api::ChannelMessage* Arena::CreateMaybeMessage<::nakama::api::ChannelMessage>(Arena*);
template<> ::nakama::api::ChannelMessageList* Arena::CreateMaybeMessage<::nakama::api::ChannelMessageList>(Arena*);
template<> ::nakama::api::CreateGroupRequest* Arena::CreateMaybeMessage<::nakama::api::CreateGroupRequest>(Arena*);
template<> ::nakama::api::DeleteFriendsRequest* Arena::CreateMaybeMessage<::nakama::api::DeleteFriendsRequest>(Arena*);
template<> ::nakama::api::DeleteGroupRequest* Arena::CreateMaybeMessage<::nakama::api::DeleteGroupRequest>(Arena*);
template<> ::nakama::api::DeleteLeaderboardRecordRequest* Arena::CreateMaybeMessage<::nakama::api::DeleteLeaderboardRecordRequest>(Arena*);
template<> ::nakama::api::DeleteNotificationsRequest* Arena::CreateMaybeMessage<::nakama::api::DeleteNotificationsRequest>(Arena*);
template<> ::nakama::api::DeleteStorageObjectId* Arena::CreateMaybeMessage<::nakama::api::DeleteStorageObjectId>(Arena*);
template<> ::nakama::api::DeleteStorageObjectsRequest* Arena::CreateMaybeMessage<::nakama::api::DeleteStorageObjectsRequest>(Arena*);
template<> ::nakama::api::DemoteGroupUsersRequest* Arena::CreateMaybeMessage<::nakama::api::DemoteGroupUsersRequest>(Arena*);
template<> ::nakama::api::Event* Arena::CreateMaybeMessage<::nakama::api::Event>(Arena*);
template<> ::nakama::api::Event_PropertiesEntry_DoNotUse* Arena::CreateMaybeMessage<::nakama::api::Event_PropertiesEntry_DoNotUse>(Arena*);
template<> ::nakama::api::Friend* Arena::CreateMaybeMessage<::nakama::api::Friend>(Arena*);
template<> ::nakama::api::FriendList* Arena::CreateMaybeMessage<::nakama::api::FriendList>(Arena*);
template<> ::nakama::api::GetSubscriptionRequest* Arena::CreateMaybeMessage<::nakama::api::GetSubscriptionRequest>(Arena*);
template<> ::nakama::api::GetUsersRequest* Arena::CreateMaybeMessage<::nakama::api::GetUsersRequest>(Arena*);
template<> ::nakama::api::Group* Arena::CreateMaybeMessage<::nakama::api::Group>(Arena*);
template<> ::nakama::api::GroupList* Arena::CreateMaybeMessage<::nakama::api::GroupList>(Arena*);
template<> ::nakama::api::GroupUserList* Arena::CreateMaybeMessage<::nakama::api::GroupUserList>(Arena*);
template<> ::nakama::api::GroupUserList_GroupUser* Arena::CreateMaybeMessage<::nakama::api::GroupUserList_GroupUser>(Arena*);
template<> ::nakama::api::ImportFacebookFriendsRequest* Arena::CreateMaybeMessage<::nakama::api::ImportFacebookFriendsRequest>(Arena*);
template<> ::nakama::api::ImportSteamFriendsRequest* Arena::CreateMaybeMessage<::nakama::api::ImportSteamFriendsRequest>(Arena*);
template<> ::nakama::api::JoinGroupRequest* Arena::CreateMaybeMessage<::nakama::api::JoinGroupRequest>(Arena*);
template<> ::nakama::api::JoinTournamentRequest* Arena::CreateMaybeMessage<::nakama::api::JoinTournamentRequest>(Arena*);
template<> ::nakama::api::KickGroupUsersRequest* Arena::CreateMaybeMessage<::nakama::api::KickGroupUsersRequest>(Arena*);
template<> ::nakama::api::Leaderboard* Arena::CreateMaybeMessage<::nakama::api::Leaderboard>(Arena*);
template<> ::nakama::api::LeaderboardList* Arena::CreateMaybeMessage<::nakama::api::LeaderboardList>(Arena*);
template<> ::nakama::api::LeaderboardRecord* Arena::CreateMaybeMessage<::nakama::api::LeaderboardRecord>(Arena*);
template<> ::nakama::api::LeaderboardRecordList* Arena::CreateMaybeMessage<::nakama::api::LeaderboardRecordList>(Arena*);
template<> ::nakama::api::LeaveGroupRequest* Arena::CreateMaybeMessage<::nakama::api::LeaveGroupRequest>(Arena*);
template<> ::nakama::api::LinkFacebookRequest* Arena::CreateMaybeMessage<::nakama::api::LinkFacebookRequest>(Arena*);
template<> ::nakama::api::LinkSteamRequest* Arena::CreateMaybeMessage<::nakama::api::LinkSteamRequest>(Arena*);
template<> ::nakama::api::ListChannelMessagesRequest* Arena::CreateMaybeMessage<::nakama::api::ListChannelMessagesRequest>(Arena*);
template<> ::nakama::api::ListFriendsRequest* Arena::CreateMaybeMessage<::nakama::api::ListFriendsRequest>(Arena*);
template<> ::nakama::api::ListGroupUsersRequest* Arena::CreateMaybeMessage<::nakama::api::ListGroupUsersRequest>(Arena*);
template<> ::nakama::api::ListGroupsRequest* Arena::CreateMaybeMessage<::nakama::api::ListGroupsRequest>(Arena*);
template<> ::nakama::api::ListLeaderboardRecordsAroundOwnerRequest* Arena::CreateMaybeMessage<::nakama::api::ListLeaderboardRecordsAroundOwnerRequest>(Arena*);
template<> ::nakama::api::ListLeaderboardRecordsRequest* Arena::CreateMaybeMessage<::nakama::api::ListLeaderboardRecordsRequest>(Arena*);
template<> ::nakama::api::ListMatchesRequest* Arena::CreateMaybeMessage<::nakama::api::ListMatchesRequest>(Arena*);
template<> ::nakama::api::ListNotificationsRequest* Arena::CreateMaybeMessage<::nakama::api::ListNotificationsRequest>(Arena*);
template<> ::nakama::api::ListStorageObjectsRequest* Arena::CreateMaybeMessage<::nakama::api::ListStorageObjectsRequest>(Arena*);
template<> ::nakama::api::ListSubscriptionsRequest* Arena::CreateMaybeMessage<::nakama::api::ListSubscriptionsRequest>(Arena*);
template<> ::nakama::api::ListTournamentRecordsAroundOwnerRequest* Arena::CreateMaybeMessage<::nakama::api::ListTournamentRecordsAroundOwnerRequest>(Arena*);
template<> ::nakama::api::ListTournamentRecordsRequest* Arena::CreateMaybeMessage<::nakama::api::ListTournamentRecordsRequest>(Arena*);
template<> ::nakama::api::ListTournamentsRequest* Arena::CreateMaybeMessage<::nakama::api::ListTournamentsRequest>(Arena*);
template<> ::nakama::api::ListUserGroupsRequest* Arena::CreateMaybeMessage<::nakama::api::ListUserGroupsRequest>(Arena*);
template<> ::nakama::api::Match* Arena::CreateMaybeMessage<::nakama::api::Match>(Arena*);
template<> ::nakama::api::MatchList* Arena::CreateMaybeMessage<::nakama::api::MatchList>(Arena*);
template<> ::nakama::api::Notification* Arena::CreateMaybeMessage<::nakama::api::Notification>(Arena*);
template<> ::nakama::api::NotificationList* Arena::CreateMaybeMessage<::nakama::api::NotificationList>(Arena*);
template<> ::nakama::api::PromoteGroupUsersRequest* Arena::CreateMaybeMessage<::nakama::api::PromoteGroupUsersRequest>(Arena*);
template<> ::nakama::api::PurchaseList* Arena::CreateMaybeMessage<::nakama::api::PurchaseList>(Arena*);
template<> ::nakama::api::ReadStorageObjectId* Arena::CreateMaybeMessage<::nakama::api::ReadStorageObjectId>(Arena*);
template<> ::nakama::api::ReadStorageObjectsRequest* Arena::CreateMaybeMessage<::nakama::api::ReadStorageObjectsRequest>(Arena*);
template<> ::nakama::api::Rpc* Arena::CreateMaybeMessage<::nakama::api::Rpc>(Arena*);
template<> ::nakama::api::Session* Arena::CreateMaybeMessage<::nakama::api::Session>(Arena*);
template<> ::nakama::api::SessionLogoutRequest* Arena::CreateMaybeMessage<::nakama::api::SessionLogoutRequest>(Arena*);
template<> ::nakama::api::SessionRefreshRequest* Arena::CreateMaybeMessage<::nakama::api::SessionRefreshRequest>(Arena*);
template<> ::nakama::api::SessionRefreshRequest_VarsEntry_DoNotUse* Arena::CreateMaybeMessage<::nakama::api::SessionRefreshRequest_VarsEntry_DoNotUse>(Arena*);
template<> ::nakama::api::StorageObject* Arena::CreateMaybeMessage<::nakama::api::StorageObject>(Arena*);
template<> ::nakama::api::StorageObjectAck* Arena::CreateMaybeMessage<::nakama::api::StorageObjectAck>(Arena*);
template<> ::nakama::api::StorageObjectAcks* Arena::CreateMaybeMessage<::nakama::api::StorageObjectAcks>(Arena*);
template<> ::nakama::api::StorageObjectList* Arena::CreateMaybeMessage<::nakama::api::StorageObjectList>(Arena*);
template<> ::nakama::api::StorageObjects* Arena::CreateMaybeMessage<::nakama::api::StorageObjects>(Arena*);
template<> ::nakama::api::SubscriptionList* Arena::CreateMaybeMessage<::nakama::api::SubscriptionList>(Arena*);
template<> ::nakama::api::Tournament* Arena::CreateMaybeMessage<::nakama::api::Tournament>(Arena*);
template<> ::nakama::api::TournamentList* Arena::CreateMaybeMessage<::nakama::api::TournamentList>(Arena*);
template<> ::nakama::api::TournamentRecordList* Arena::CreateMaybeMessage<::nakama::api::TournamentRecordList>(Arena*);
template<> ::nakama::api::UpdateAccountRequest* Arena::CreateMaybeMessage<::nakama::api::UpdateAccountRequest>(Arena*);
template<> ::nakama::api::UpdateGroupRequest* Arena::CreateMaybeMessage<::nakama::api::UpdateGroupRequest>(Arena*);
template<> ::nakama::api::User* Arena::CreateMaybeMessage<::nakama::api::User>(Arena*);
template<> ::nakama::api::UserGroupList* Arena::CreateMaybeMessage<::nakama::api::UserGroupList>(Arena*);
template<> ::nakama::api::UserGroupList_UserGroup* Arena::CreateMaybeMessage<::nakama::api::UserGroupList_UserGroup>(Arena*);
template<> ::nakama::api::Users* Arena::CreateMaybeMessage<::nakama::api::Users>(Arena*);
template<> ::nakama::api::ValidatePurchaseAppleRequest* Arena::CreateMaybeMessage<::nakama::api::ValidatePurchaseAppleRequest>(Arena*);
template<> ::nakama::api::ValidatePurchaseGoogleRequest* Arena::CreateMaybeMessage<::nakama::api::ValidatePurchaseGoogleRequest>(Arena*);
template<> ::nakama::api::ValidatePurchaseHuaweiRequest* Arena::CreateMaybeMessage<::nakama::api::ValidatePurchaseHuaweiRequest>(Arena*);
template<> ::nakama::api::ValidatePurchaseResponse* Arena::CreateMaybeMessage<::nakama::api::ValidatePurchaseResponse>(Arena*);
template<> ::nakama::api::ValidateSubscriptionAppleRequest* Arena::CreateMaybeMessage<::nakama::api::ValidateSubscriptionAppleRequest>(Arena*);
template<> ::nakama::api::ValidateSubscriptionGoogleRequest* Arena::CreateMaybeMessage<::nakama::api::ValidateSubscriptionGoogleRequest>(Arena*);
template<> ::nakama::api::ValidateSubscriptionResponse* Arena::CreateMaybeMessage<::nakama::api::ValidateSubscriptionResponse>(Arena*);
template<> ::nakama::api::ValidatedPurchase* Arena::CreateMaybeMessage<::nakama::api::ValidatedPurchase>(Arena*);
template<> ::nakama::api::ValidatedSubscription* Arena::CreateMaybeMessage<::nakama::api::ValidatedSubscription>(Arena*);
template<> ::nakama::api::WriteLeaderboardRecordRequest* Arena::CreateMaybeMessage<::nakama::api::WriteLeaderboardRecordRequest>(Arena*);
template<> ::nakama::api::WriteLeaderboardRecordRequest_LeaderboardRecordWrite* Arena::CreateMaybeMessage<::nakama::api::WriteLeaderboardRecordRequest_LeaderboardRecordWrite>(Arena*);
template<> ::nakama::api::WriteStorageObject* Arena::CreateMaybeMessage<::nakama::api::WriteStorageObject>(Arena*);
template<> ::nakama::api::WriteStorageObjectsRequest* Arena::CreateMaybeMessage<::nakama::api::WriteStorageObjectsRequest>(Arena*);
template<> ::nakama::api::WriteTournamentRecordRequest* Arena::CreateMaybeMessage<::nakama::api::WriteTournamentRecordRequest>(Arena*);
template<> ::nakama::api::WriteTournamentRecordRequest_TournamentRecordWrite* Arena::CreateMaybeMessage<::nakama::api::WriteTournamentRecordRequest_TournamentRecordWrite>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace nakama {
namespace api {

enum Friend_State : int {
  Friend_State_FRIEND = 0,
  Friend_State_INVITE_SENT = 1,
  Friend_State_INVITE_RECEIVED = 2,
  Friend_State_BLOCKED = 3,
  Friend_State_Friend_State_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Friend_State_Friend_State_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Friend_State_IsValid(int value);
constexpr Friend_State Friend_State_State_MIN = Friend_State_FRIEND;
constexpr Friend_State Friend_State_State_MAX = Friend_State_BLOCKED;
constexpr int Friend_State_State_ARRAYSIZE = Friend_State_State_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Friend_State_descriptor();
template<typename T>
inline const std::string& Friend_State_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Friend_State>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Friend_State_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Friend_State_descriptor(), enum_t_value);
}
inline bool Friend_State_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Friend_State* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Friend_State>(
    Friend_State_descriptor(), name, value);
}
enum GroupUserList_GroupUser_State : int {
  GroupUserList_GroupUser_State_SUPERADMIN = 0,
  GroupUserList_GroupUser_State_ADMIN = 1,
  GroupUserList_GroupUser_State_MEMBER = 2,
  GroupUserList_GroupUser_State_JOIN_REQUEST = 3,
  GroupUserList_GroupUser_State_GroupUserList_GroupUser_State_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  GroupUserList_GroupUser_State_GroupUserList_GroupUser_State_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool GroupUserList_GroupUser_State_IsValid(int value);
constexpr GroupUserList_GroupUser_State GroupUserList_GroupUser_State_State_MIN = GroupUserList_GroupUser_State_SUPERADMIN;
constexpr GroupUserList_GroupUser_State GroupUserList_GroupUser_State_State_MAX = GroupUserList_GroupUser_State_JOIN_REQUEST;
constexpr int GroupUserList_GroupUser_State_State_ARRAYSIZE = GroupUserList_GroupUser_State_State_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GroupUserList_GroupUser_State_descriptor();
template<typename T>
inline const std::string& GroupUserList_GroupUser_State_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GroupUserList_GroupUser_State>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GroupUserList_GroupUser_State_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GroupUserList_GroupUser_State_descriptor(), enum_t_value);
}
inline bool GroupUserList_GroupUser_State_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, GroupUserList_GroupUser_State* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GroupUserList_GroupUser_State>(
    GroupUserList_GroupUser_State_descriptor(), name, value);
}
enum UserGroupList_UserGroup_State : int {
  UserGroupList_UserGroup_State_SUPERADMIN = 0,
  UserGroupList_UserGroup_State_ADMIN = 1,
  UserGroupList_UserGroup_State_MEMBER = 2,
  UserGroupList_UserGroup_State_JOIN_REQUEST = 3,
  UserGroupList_UserGroup_State_UserGroupList_UserGroup_State_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  UserGroupList_UserGroup_State_UserGroupList_UserGroup_State_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool UserGroupList_UserGroup_State_IsValid(int value);
constexpr UserGroupList_UserGroup_State UserGroupList_UserGroup_State_State_MIN = UserGroupList_UserGroup_State_SUPERADMIN;
constexpr UserGroupList_UserGroup_State UserGroupList_UserGroup_State_State_MAX = UserGroupList_UserGroup_State_JOIN_REQUEST;
constexpr int UserGroupList_UserGroup_State_State_ARRAYSIZE = UserGroupList_UserGroup_State_State_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UserGroupList_UserGroup_State_descriptor();
template<typename T>
inline const std::string& UserGroupList_UserGroup_State_Name(T enum_t_value) {
  static_assert(::std::is_same<T, UserGroupList_UserGroup_State>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function UserGroupList_UserGroup_State_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    UserGroupList_UserGroup_State_descriptor(), enum_t_value);
}
inline bool UserGroupList_UserGroup_State_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, UserGroupList_UserGroup_State* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<UserGroupList_UserGroup_State>(
    UserGroupList_UserGroup_State_descriptor(), name, value);
}
enum StoreProvider : int {
  APPLE_APP_STORE = 0,
  GOOGLE_PLAY_STORE = 1,
  HUAWEI_APP_GALLERY = 2,
  StoreProvider_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  StoreProvider_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool StoreProvider_IsValid(int value);
constexpr StoreProvider StoreProvider_MIN = APPLE_APP_STORE;
constexpr StoreProvider StoreProvider_MAX = HUAWEI_APP_GALLERY;
constexpr int StoreProvider_ARRAYSIZE = StoreProvider_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StoreProvider_descriptor();
template<typename T>
inline const std::string& StoreProvider_Name(T enum_t_value) {
  static_assert(::std::is_same<T, StoreProvider>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function StoreProvider_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    StoreProvider_descriptor(), enum_t_value);
}
inline bool StoreProvider_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, StoreProvider* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<StoreProvider>(
    StoreProvider_descriptor(), name, value);
}
enum StoreEnvironment : int {
  UNKNOWN = 0,
  SANDBOX = 1,
  PRODUCTION = 2,
  StoreEnvironment_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  StoreEnvironment_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool StoreEnvironment_IsValid(int value);
constexpr StoreEnvironment StoreEnvironment_MIN = UNKNOWN;
constexpr StoreEnvironment StoreEnvironment_MAX = PRODUCTION;
constexpr int StoreEnvironment_ARRAYSIZE = StoreEnvironment_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StoreEnvironment_descriptor();
template<typename T>
inline const std::string& StoreEnvironment_Name(T enum_t_value) {
  static_assert(::std::is_same<T, StoreEnvironment>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function StoreEnvironment_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    StoreEnvironment_descriptor(), enum_t_value);
}
inline bool StoreEnvironment_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, StoreEnvironment* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<StoreEnvironment>(
    StoreEnvironment_descriptor(), name, value);
}
enum Operator : int {
  NO_OVERRIDE = 0,
  BEST = 1,
  SET = 2,
  INCREMENT = 3,
  DECREMENT = 4,
  Operator_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Operator_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Operator_IsValid(int value);
constexpr Operator Operator_MIN = NO_OVERRIDE;
constexpr Operator Operator_MAX = DECREMENT;
constexpr int Operator_ARRAYSIZE = Operator_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Operator_descriptor();
template<typename T>
inline const std::string& Operator_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Operator>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Operator_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Operator_descriptor(), enum_t_value);
}
inline bool Operator_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Operator* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Operator>(
    Operator_descriptor(), name, value);
}
// ===================================================================

class Account PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nakama.api.Account) */ {
 public:
  inline Account() : Account(nullptr) {}
  virtual ~Account();

  Account(const Account& from);
  Account(Account&& from) noexcept
    : Account() {
    *this = ::std::move(from);
  }

  inline Account& operator=(const Account& from) {
    CopyFrom(from);
    return *this;
  }
  inline Account& operator=(Account&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Account& default_instance();

  static inline const Account* internal_default_instance() {
    return reinterpret_cast<const Account*>(
               &_Account_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Account& a, Account& b) {
    a.Swap(&b);
  }
  inline void Swap(Account* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Account* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Account* New() const final {
    return CreateMaybeMessage<Account>(nullptr);
  }

  Account* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Account>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Account& from);
  void MergeFrom(const Account& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Account* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nakama.api.Account";
  }
  protected:
  explicit Account(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto);
    return ::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevicesFieldNumber = 4,
    kWalletFieldNumber = 2,
    kEmailFieldNumber = 3,
    kCustomIdFieldNumber = 5,
    kUserFieldNumber = 1,
    kVerifyTimeFieldNumber = 6,
    kDisableTimeFieldNumber = 7,
  };
  // repeated .nakama.api.AccountDevice devices = 4;
  int devices_size() const;
  private:
  int _internal_devices_size() const;
  public:
  void clear_devices();
  ::nakama::api::AccountDevice* mutable_devices(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nakama::api::AccountDevice >*
      mutable_devices();
  private:
  const ::nakama::api::AccountDevice& _internal_devices(int index) const;
  ::nakama::api::AccountDevice* _internal_add_devices();
  public:
  const ::nakama::api::AccountDevice& devices(int index) const;
  ::nakama::api::AccountDevice* add_devices();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nakama::api::AccountDevice >&
      devices() const;

  // string wallet = 2;
  void clear_wallet();
  const std::string& wallet() const;
  void set_wallet(const std::string& value);
  void set_wallet(std::string&& value);
  void set_wallet(const char* value);
  void set_wallet(const char* value, size_t size);
  std::string* mutable_wallet();
  std::string* release_wallet();
  void set_allocated_wallet(std::string* wallet);
  private:
  const std::string& _internal_wallet() const;
  void _internal_set_wallet(const std::string& value);
  std::string* _internal_mutable_wallet();
  public:

  // string email = 3;
  void clear_email();
  const std::string& email() const;
  void set_email(const std::string& value);
  void set_email(std::string&& value);
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  std::string* mutable_email();
  std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // string custom_id = 5;
  void clear_custom_id();
  const std::string& custom_id() const;
  void set_custom_id(const std::string& value);
  void set_custom_id(std::string&& value);
  void set_custom_id(const char* value);
  void set_custom_id(const char* value, size_t size);
  std::string* mutable_custom_id();
  std::string* release_custom_id();
  void set_allocated_custom_id(std::string* custom_id);
  private:
  const std::string& _internal_custom_id() const;
  void _internal_set_custom_id(const std::string& value);
  std::string* _internal_mutable_custom_id();
  public:

  // .nakama.api.User user = 1;
  bool has_user() const;
  private:
  bool _internal_has_user() const;
  public:
  void clear_user();
  const ::nakama::api::User& user() const;
  ::nakama::api::User* release_user();
  ::nakama::api::User* mutable_user();
  void set_allocated_user(::nakama::api::User* user);
  private:
  const ::nakama::api::User& _internal_user() const;
  ::nakama::api::User* _internal_mutable_user();
  public:
  void unsafe_arena_set_allocated_user(
      ::nakama::api::User* user);
  ::nakama::api::User* unsafe_arena_release_user();

  // .google.protobuf.Timestamp verify_time = 6;
  bool has_verify_time() const;
  private:
  bool _internal_has_verify_time() const;
  public:
  void clear_verify_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& verify_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_verify_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_verify_time();
  void set_allocated_verify_time(PROTOBUF_NAMESPACE_ID::Timestamp* verify_time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_verify_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_verify_time();
  public:
  void unsafe_arena_set_allocated_verify_time(
      PROTOBUF_NAMESPACE_ID::Timestamp* verify_time);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_verify_time();

  // .google.protobuf.Timestamp disable_time = 7;
  bool has_disable_time() const;
  private:
  bool _internal_has_disable_time() const;
  public:
  void clear_disable_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& disable_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_disable_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_disable_time();
  void set_allocated_disable_time(PROTOBUF_NAMESPACE_ID::Timestamp* disable_time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_disable_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_disable_time();
  public:
  void unsafe_arena_set_allocated_disable_time(
      PROTOBUF_NAMESPACE_ID::Timestamp* disable_time);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_disable_time();

  // @@protoc_insertion_point(class_scope:nakama.api.Account)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nakama::api::AccountDevice > devices_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr wallet_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr custom_id_;
  ::nakama::api::User* user_;
  PROTOBUF_NAMESPACE_ID::Timestamp* verify_time_;
  PROTOBUF_NAMESPACE_ID::Timestamp* disable_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto;
};
// -------------------------------------------------------------------

class AccountRefresh_VarsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<AccountRefresh_VarsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<AccountRefresh_VarsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  AccountRefresh_VarsEntry_DoNotUse();
  explicit AccountRefresh_VarsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const AccountRefresh_VarsEntry_DoNotUse& other);
  static const AccountRefresh_VarsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const AccountRefresh_VarsEntry_DoNotUse*>(&_AccountRefresh_VarsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "nakama.api.AccountRefresh.VarsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "nakama.api.AccountRefresh.VarsEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto);
    return ::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.file_level_metadata[1];
  }

  public:
};

// -------------------------------------------------------------------

class AccountRefresh PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nakama.api.AccountRefresh) */ {
 public:
  inline AccountRefresh() : AccountRefresh(nullptr) {}
  virtual ~AccountRefresh();

  AccountRefresh(const AccountRefresh& from);
  AccountRefresh(AccountRefresh&& from) noexcept
    : AccountRefresh() {
    *this = ::std::move(from);
  }

  inline AccountRefresh& operator=(const AccountRefresh& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccountRefresh& operator=(AccountRefresh&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AccountRefresh& default_instance();

  static inline const AccountRefresh* internal_default_instance() {
    return reinterpret_cast<const AccountRefresh*>(
               &_AccountRefresh_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AccountRefresh& a, AccountRefresh& b) {
    a.Swap(&b);
  }
  inline void Swap(AccountRefresh* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AccountRefresh* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AccountRefresh* New() const final {
    return CreateMaybeMessage<AccountRefresh>(nullptr);
  }

  AccountRefresh* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AccountRefresh>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AccountRefresh& from);
  void MergeFrom(const AccountRefresh& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccountRefresh* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nakama.api.AccountRefresh";
  }
  protected:
  explicit AccountRefresh(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto);
    return ::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kVarsFieldNumber = 2,
    kTokenFieldNumber = 1,
  };
  // map<string, string> vars = 2;
  int vars_size() const;
  private:
  int _internal_vars_size() const;
  public:
  void clear_vars();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_vars() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_vars();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      vars() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_vars();

  // string token = 1;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // @@protoc_insertion_point(class_scope:nakama.api.AccountRefresh)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      AccountRefresh_VarsEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> vars_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto;
};
// -------------------------------------------------------------------

class AccountApple_VarsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<AccountApple_VarsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<AccountApple_VarsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  AccountApple_VarsEntry_DoNotUse();
  explicit AccountApple_VarsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const AccountApple_VarsEntry_DoNotUse& other);
  static const AccountApple_VarsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const AccountApple_VarsEntry_DoNotUse*>(&_AccountApple_VarsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "nakama.api.AccountApple.VarsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "nakama.api.AccountApple.VarsEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto);
    return ::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.file_level_metadata[3];
  }

  public:
};

// -------------------------------------------------------------------

class AccountApple PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nakama.api.AccountApple) */ {
 public:
  inline AccountApple() : AccountApple(nullptr) {}
  virtual ~AccountApple();

  AccountApple(const AccountApple& from);
  AccountApple(AccountApple&& from) noexcept
    : AccountApple() {
    *this = ::std::move(from);
  }

  inline AccountApple& operator=(const AccountApple& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccountApple& operator=(AccountApple&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AccountApple& default_instance();

  static inline const AccountApple* internal_default_instance() {
    return reinterpret_cast<const AccountApple*>(
               &_AccountApple_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(AccountApple& a, AccountApple& b) {
    a.Swap(&b);
  }
  inline void Swap(AccountApple* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AccountApple* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AccountApple* New() const final {
    return CreateMaybeMessage<AccountApple>(nullptr);
  }

  AccountApple* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AccountApple>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AccountApple& from);
  void MergeFrom(const AccountApple& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccountApple* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nakama.api.AccountApple";
  }
  protected:
  explicit AccountApple(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto);
    return ::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kVarsFieldNumber = 2,
    kTokenFieldNumber = 1,
  };
  // map<string, string> vars = 2;
  int vars_size() const;
  private:
  int _internal_vars_size() const;
  public:
  void clear_vars();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_vars() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_vars();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      vars() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_vars();

  // string token = 1;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // @@protoc_insertion_point(class_scope:nakama.api.AccountApple)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      AccountApple_VarsEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> vars_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto;
};
// -------------------------------------------------------------------

class AccountCustom_VarsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<AccountCustom_VarsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<AccountCustom_VarsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  AccountCustom_VarsEntry_DoNotUse();
  explicit AccountCustom_VarsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const AccountCustom_VarsEntry_DoNotUse& other);
  static const AccountCustom_VarsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const AccountCustom_VarsEntry_DoNotUse*>(&_AccountCustom_VarsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "nakama.api.AccountCustom.VarsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "nakama.api.AccountCustom.VarsEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto);
    return ::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.file_level_metadata[5];
  }

  public:
};

// -------------------------------------------------------------------

class AccountCustom PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nakama.api.AccountCustom) */ {
 public:
  inline AccountCustom() : AccountCustom(nullptr) {}
  virtual ~AccountCustom();

  AccountCustom(const AccountCustom& from);
  AccountCustom(AccountCustom&& from) noexcept
    : AccountCustom() {
    *this = ::std::move(from);
  }

  inline AccountCustom& operator=(const AccountCustom& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccountCustom& operator=(AccountCustom&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AccountCustom& default_instance();

  static inline const AccountCustom* internal_default_instance() {
    return reinterpret_cast<const AccountCustom*>(
               &_AccountCustom_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(AccountCustom& a, AccountCustom& b) {
    a.Swap(&b);
  }
  inline void Swap(AccountCustom* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AccountCustom* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AccountCustom* New() const final {
    return CreateMaybeMessage<AccountCustom>(nullptr);
  }

  AccountCustom* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AccountCustom>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AccountCustom& from);
  void MergeFrom(const AccountCustom& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccountCustom* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nakama.api.AccountCustom";
  }
  protected:
  explicit AccountCustom(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto);
    return ::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kVarsFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // map<string, string> vars = 2;
  int vars_size() const;
  private:
  int _internal_vars_size() const;
  public:
  void clear_vars();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_vars() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_vars();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      vars() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_vars();

  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:nakama.api.AccountCustom)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      AccountCustom_VarsEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> vars_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto;
};
// -------------------------------------------------------------------

class AccountDevice_VarsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<AccountDevice_VarsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<AccountDevice_VarsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  AccountDevice_VarsEntry_DoNotUse();
  explicit AccountDevice_VarsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const AccountDevice_VarsEntry_DoNotUse& other);
  static const AccountDevice_VarsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const AccountDevice_VarsEntry_DoNotUse*>(&_AccountDevice_VarsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "nakama.api.AccountDevice.VarsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "nakama.api.AccountDevice.VarsEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto);
    return ::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.file_level_metadata[7];
  }

  public:
};

// -------------------------------------------------------------------

class AccountDevice PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nakama.api.AccountDevice) */ {
 public:
  inline AccountDevice() : AccountDevice(nullptr) {}
  virtual ~AccountDevice();

  AccountDevice(const AccountDevice& from);
  AccountDevice(AccountDevice&& from) noexcept
    : AccountDevice() {
    *this = ::std::move(from);
  }

  inline AccountDevice& operator=(const AccountDevice& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccountDevice& operator=(AccountDevice&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AccountDevice& default_instance();

  static inline const AccountDevice* internal_default_instance() {
    return reinterpret_cast<const AccountDevice*>(
               &_AccountDevice_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(AccountDevice& a, AccountDevice& b) {
    a.Swap(&b);
  }
  inline void Swap(AccountDevice* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AccountDevice* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AccountDevice* New() const final {
    return CreateMaybeMessage<AccountDevice>(nullptr);
  }

  AccountDevice* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AccountDevice>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AccountDevice& from);
  void MergeFrom(const AccountDevice& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccountDevice* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nakama.api.AccountDevice";
  }
  protected:
  explicit AccountDevice(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto);
    return ::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kVarsFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // map<string, string> vars = 2;
  int vars_size() const;
  private:
  int _internal_vars_size() const;
  public:
  void clear_vars();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_vars() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_vars();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      vars() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_vars();

  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:nakama.api.AccountDevice)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      AccountDevice_VarsEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> vars_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto;
};
// -------------------------------------------------------------------

class AccountEmail_VarsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<AccountEmail_VarsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<AccountEmail_VarsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  AccountEmail_VarsEntry_DoNotUse();
  explicit AccountEmail_VarsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const AccountEmail_VarsEntry_DoNotUse& other);
  static const AccountEmail_VarsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const AccountEmail_VarsEntry_DoNotUse*>(&_AccountEmail_VarsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "nakama.api.AccountEmail.VarsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "nakama.api.AccountEmail.VarsEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto);
    return ::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.file_level_metadata[9];
  }

  public:
};

// -------------------------------------------------------------------

class AccountEmail PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nakama.api.AccountEmail) */ {
 public:
  inline AccountEmail() : AccountEmail(nullptr) {}
  virtual ~AccountEmail();

  AccountEmail(const AccountEmail& from);
  AccountEmail(AccountEmail&& from) noexcept
    : AccountEmail() {
    *this = ::std::move(from);
  }

  inline AccountEmail& operator=(const AccountEmail& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccountEmail& operator=(AccountEmail&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AccountEmail& default_instance();

  static inline const AccountEmail* internal_default_instance() {
    return reinterpret_cast<const AccountEmail*>(
               &_AccountEmail_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(AccountEmail& a, AccountEmail& b) {
    a.Swap(&b);
  }
  inline void Swap(AccountEmail* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AccountEmail* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AccountEmail* New() const final {
    return CreateMaybeMessage<AccountEmail>(nullptr);
  }

  AccountEmail* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AccountEmail>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AccountEmail& from);
  void MergeFrom(const AccountEmail& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccountEmail* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nakama.api.AccountEmail";
  }
  protected:
  explicit AccountEmail(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto);
    return ::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kVarsFieldNumber = 3,
    kEmailFieldNumber = 1,
    kPasswordFieldNumber = 2,
  };
  // map<string, string> vars = 3;
  int vars_size() const;
  private:
  int _internal_vars_size() const;
  public:
  void clear_vars();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_vars() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_vars();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      vars() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_vars();

  // string email = 1;
  void clear_email();
  const std::string& email() const;
  void set_email(const std::string& value);
  void set_email(std::string&& value);
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  std::string* mutable_email();
  std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // string password = 2;
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // @@protoc_insertion_point(class_scope:nakama.api.AccountEmail)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      AccountEmail_VarsEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> vars_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto;
};
// -------------------------------------------------------------------

class AccountFacebook_VarsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<AccountFacebook_VarsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<AccountFacebook_VarsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  AccountFacebook_VarsEntry_DoNotUse();
  explicit AccountFacebook_VarsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const AccountFacebook_VarsEntry_DoNotUse& other);
  static const AccountFacebook_VarsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const AccountFacebook_VarsEntry_DoNotUse*>(&_AccountFacebook_VarsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "nakama.api.AccountFacebook.VarsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "nakama.api.AccountFacebook.VarsEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto);
    return ::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.file_level_metadata[11];
  }

  public:
};

// -------------------------------------------------------------------

class AccountFacebook PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nakama.api.AccountFacebook) */ {
 public:
  inline AccountFacebook() : AccountFacebook(nullptr) {}
  virtual ~AccountFacebook();

  AccountFacebook(const AccountFacebook& from);
  AccountFacebook(AccountFacebook&& from) noexcept
    : AccountFacebook() {
    *this = ::std::move(from);
  }

  inline AccountFacebook& operator=(const AccountFacebook& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccountFacebook& operator=(AccountFacebook&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AccountFacebook& default_instance();

  static inline const AccountFacebook* internal_default_instance() {
    return reinterpret_cast<const AccountFacebook*>(
               &_AccountFacebook_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(AccountFacebook& a, AccountFacebook& b) {
    a.Swap(&b);
  }
  inline void Swap(AccountFacebook* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AccountFacebook* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AccountFacebook* New() const final {
    return CreateMaybeMessage<AccountFacebook>(nullptr);
  }

  AccountFacebook* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AccountFacebook>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AccountFacebook& from);
  void MergeFrom(const AccountFacebook& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccountFacebook* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nakama.api.AccountFacebook";
  }
  protected:
  explicit AccountFacebook(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto);
    return ::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kVarsFieldNumber = 2,
    kTokenFieldNumber = 1,
  };
  // map<string, string> vars = 2;
  int vars_size() const;
  private:
  int _internal_vars_size() const;
  public:
  void clear_vars();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_vars() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_vars();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      vars() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_vars();

  // string token = 1;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // @@protoc_insertion_point(class_scope:nakama.api.AccountFacebook)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      AccountFacebook_VarsEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> vars_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto;
};
// -------------------------------------------------------------------

class AccountFacebookInstantGame_VarsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<AccountFacebookInstantGame_VarsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<AccountFacebookInstantGame_VarsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  AccountFacebookInstantGame_VarsEntry_DoNotUse();
  explicit AccountFacebookInstantGame_VarsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const AccountFacebookInstantGame_VarsEntry_DoNotUse& other);
  static const AccountFacebookInstantGame_VarsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const AccountFacebookInstantGame_VarsEntry_DoNotUse*>(&_AccountFacebookInstantGame_VarsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "nakama.api.AccountFacebookInstantGame.VarsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "nakama.api.AccountFacebookInstantGame.VarsEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto);
    return ::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.file_level_metadata[13];
  }

  public:
};

// -------------------------------------------------------------------

class AccountFacebookInstantGame PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nakama.api.AccountFacebookInstantGame) */ {
 public:
  inline AccountFacebookInstantGame() : AccountFacebookInstantGame(nullptr) {}
  virtual ~AccountFacebookInstantGame();

  AccountFacebookInstantGame(const AccountFacebookInstantGame& from);
  AccountFacebookInstantGame(AccountFacebookInstantGame&& from) noexcept
    : AccountFacebookInstantGame() {
    *this = ::std::move(from);
  }

  inline AccountFacebookInstantGame& operator=(const AccountFacebookInstantGame& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccountFacebookInstantGame& operator=(AccountFacebookInstantGame&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AccountFacebookInstantGame& default_instance();

  static inline const AccountFacebookInstantGame* internal_default_instance() {
    return reinterpret_cast<const AccountFacebookInstantGame*>(
               &_AccountFacebookInstantGame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(AccountFacebookInstantGame& a, AccountFacebookInstantGame& b) {
    a.Swap(&b);
  }
  inline void Swap(AccountFacebookInstantGame* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AccountFacebookInstantGame* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AccountFacebookInstantGame* New() const final {
    return CreateMaybeMessage<AccountFacebookInstantGame>(nullptr);
  }

  AccountFacebookInstantGame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AccountFacebookInstantGame>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AccountFacebookInstantGame& from);
  void MergeFrom(const AccountFacebookInstantGame& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccountFacebookInstantGame* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nakama.api.AccountFacebookInstantGame";
  }
  protected:
  explicit AccountFacebookInstantGame(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto);
    return ::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kVarsFieldNumber = 2,
    kSignedPlayerInfoFieldNumber = 1,
  };
  // map<string, string> vars = 2;
  int vars_size() const;
  private:
  int _internal_vars_size() const;
  public:
  void clear_vars();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_vars() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_vars();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      vars() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_vars();

  // string signed_player_info = 1;
  void clear_signed_player_info();
  const std::string& signed_player_info() const;
  void set_signed_player_info(const std::string& value);
  void set_signed_player_info(std::string&& value);
  void set_signed_player_info(const char* value);
  void set_signed_player_info(const char* value, size_t size);
  std::string* mutable_signed_player_info();
  std::string* release_signed_player_info();
  void set_allocated_signed_player_info(std::string* signed_player_info);
  private:
  const std::string& _internal_signed_player_info() const;
  void _internal_set_signed_player_info(const std::string& value);
  std::string* _internal_mutable_signed_player_info();
  public:

  // @@protoc_insertion_point(class_scope:nakama.api.AccountFacebookInstantGame)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      AccountFacebookInstantGame_VarsEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> vars_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signed_player_info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto;
};
// -------------------------------------------------------------------

class AccountGameCenter_VarsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<AccountGameCenter_VarsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<AccountGameCenter_VarsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  AccountGameCenter_VarsEntry_DoNotUse();
  explicit AccountGameCenter_VarsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const AccountGameCenter_VarsEntry_DoNotUse& other);
  static const AccountGameCenter_VarsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const AccountGameCenter_VarsEntry_DoNotUse*>(&_AccountGameCenter_VarsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "nakama.api.AccountGameCenter.VarsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "nakama.api.AccountGameCenter.VarsEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto);
    return ::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.file_level_metadata[15];
  }

  public:
};

// -------------------------------------------------------------------

class AccountGameCenter PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nakama.api.AccountGameCenter) */ {
 public:
  inline AccountGameCenter() : AccountGameCenter(nullptr) {}
  virtual ~AccountGameCenter();

  AccountGameCenter(const AccountGameCenter& from);
  AccountGameCenter(AccountGameCenter&& from) noexcept
    : AccountGameCenter() {
    *this = ::std::move(from);
  }

  inline AccountGameCenter& operator=(const AccountGameCenter& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccountGameCenter& operator=(AccountGameCenter&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AccountGameCenter& default_instance();

  static inline const AccountGameCenter* internal_default_instance() {
    return reinterpret_cast<const AccountGameCenter*>(
               &_AccountGameCenter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(AccountGameCenter& a, AccountGameCenter& b) {
    a.Swap(&b);
  }
  inline void Swap(AccountGameCenter* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AccountGameCenter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AccountGameCenter* New() const final {
    return CreateMaybeMessage<AccountGameCenter>(nullptr);
  }

  AccountGameCenter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AccountGameCenter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AccountGameCenter& from);
  void MergeFrom(const AccountGameCenter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccountGameCenter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nakama.api.AccountGameCenter";
  }
  protected:
  explicit AccountGameCenter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto);
    return ::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kVarsFieldNumber = 7,
    kPlayerIdFieldNumber = 1,
    kBundleIdFieldNumber = 2,
    kSaltFieldNumber = 4,
    kSignatureFieldNumber = 5,
    kPublicKeyUrlFieldNumber = 6,
    kTimestampSecondsFieldNumber = 3,
  };
  // map<string, string> vars = 7;
  int vars_size() const;
  private:
  int _internal_vars_size() const;
  public:
  void clear_vars();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_vars() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_vars();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      vars() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_vars();

  // string player_id = 1;
  void clear_player_id();
  const std::string& player_id() const;
  void set_player_id(const std::string& value);
  void set_player_id(std::string&& value);
  void set_player_id(const char* value);
  void set_player_id(const char* value, size_t size);
  std::string* mutable_player_id();
  std::string* release_player_id();
  void set_allocated_player_id(std::string* player_id);
  private:
  const std::string& _internal_player_id() const;
  void _internal_set_player_id(const std::string& value);
  std::string* _internal_mutable_player_id();
  public:

  // string bundle_id = 2;
  void clear_bundle_id();
  const std::string& bundle_id() const;
  void set_bundle_id(const std::string& value);
  void set_bundle_id(std::string&& value);
  void set_bundle_id(const char* value);
  void set_bundle_id(const char* value, size_t size);
  std::string* mutable_bundle_id();
  std::string* release_bundle_id();
  void set_allocated_bundle_id(std::string* bundle_id);
  private:
  const std::string& _internal_bundle_id() const;
  void _internal_set_bundle_id(const std::string& value);
  std::string* _internal_mutable_bundle_id();
  public:

  // string salt = 4;
  void clear_salt();
  const std::string& salt() const;
  void set_salt(const std::string& value);
  void set_salt(std::string&& value);
  void set_salt(const char* value);
  void set_salt(const char* value, size_t size);
  std::string* mutable_salt();
  std::string* release_salt();
  void set_allocated_salt(std::string* salt);
  private:
  const std::string& _internal_salt() const;
  void _internal_set_salt(const std::string& value);
  std::string* _internal_mutable_salt();
  public:

  // string signature = 5;
  void clear_signature();
  const std::string& signature() const;
  void set_signature(const std::string& value);
  void set_signature(std::string&& value);
  void set_signature(const char* value);
  void set_signature(const char* value, size_t size);
  std::string* mutable_signature();
  std::string* release_signature();
  void set_allocated_signature(std::string* signature);
  private:
  const std::string& _internal_signature() const;
  void _internal_set_signature(const std::string& value);
  std::string* _internal_mutable_signature();
  public:

  // string public_key_url = 6;
  void clear_public_key_url();
  const std::string& public_key_url() const;
  void set_public_key_url(const std::string& value);
  void set_public_key_url(std::string&& value);
  void set_public_key_url(const char* value);
  void set_public_key_url(const char* value, size_t size);
  std::string* mutable_public_key_url();
  std::string* release_public_key_url();
  void set_allocated_public_key_url(std::string* public_key_url);
  private:
  const std::string& _internal_public_key_url() const;
  void _internal_set_public_key_url(const std::string& value);
  std::string* _internal_mutable_public_key_url();
  public:

  // int64 timestamp_seconds = 3;
  void clear_timestamp_seconds();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_seconds() const;
  void set_timestamp_seconds(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_timestamp_seconds() const;
  void _internal_set_timestamp_seconds(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:nakama.api.AccountGameCenter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      AccountGameCenter_VarsEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> vars_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr player_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bundle_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr salt_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signature_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr public_key_url_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_seconds_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto;
};
// -------------------------------------------------------------------

class AccountGoogle_VarsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<AccountGoogle_VarsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<AccountGoogle_VarsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  AccountGoogle_VarsEntry_DoNotUse();
  explicit AccountGoogle_VarsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const AccountGoogle_VarsEntry_DoNotUse& other);
  static const AccountGoogle_VarsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const AccountGoogle_VarsEntry_DoNotUse*>(&_AccountGoogle_VarsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "nakama.api.AccountGoogle.VarsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "nakama.api.AccountGoogle.VarsEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto);
    return ::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.file_level_metadata[17];
  }

  public:
};

// -------------------------------------------------------------------

class AccountGoogle PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nakama.api.AccountGoogle) */ {
 public:
  inline AccountGoogle() : AccountGoogle(nullptr) {}
  virtual ~AccountGoogle();

  AccountGoogle(const AccountGoogle& from);
  AccountGoogle(AccountGoogle&& from) noexcept
    : AccountGoogle() {
    *this = ::std::move(from);
  }

  inline AccountGoogle& operator=(const AccountGoogle& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccountGoogle& operator=(AccountGoogle&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AccountGoogle& default_instance();

  static inline const AccountGoogle* internal_default_instance() {
    return reinterpret_cast<const AccountGoogle*>(
               &_AccountGoogle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(AccountGoogle& a, AccountGoogle& b) {
    a.Swap(&b);
  }
  inline void Swap(AccountGoogle* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AccountGoogle* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AccountGoogle* New() const final {
    return CreateMaybeMessage<AccountGoogle>(nullptr);
  }

  AccountGoogle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AccountGoogle>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AccountGoogle& from);
  void MergeFrom(const AccountGoogle& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccountGoogle* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nakama.api.AccountGoogle";
  }
  protected:
  explicit AccountGoogle(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto);
    return ::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kVarsFieldNumber = 2,
    kTokenFieldNumber = 1,
  };
  // map<string, string> vars = 2;
  int vars_size() const;
  private:
  int _internal_vars_size() const;
  public:
  void clear_vars();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_vars() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_vars();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      vars() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_vars();

  // string token = 1;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // @@protoc_insertion_point(class_scope:nakama.api.AccountGoogle)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      AccountGoogle_VarsEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> vars_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto;
};
// -------------------------------------------------------------------

class AccountSteam_VarsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<AccountSteam_VarsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<AccountSteam_VarsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  AccountSteam_VarsEntry_DoNotUse();
  explicit AccountSteam_VarsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const AccountSteam_VarsEntry_DoNotUse& other);
  static const AccountSteam_VarsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const AccountSteam_VarsEntry_DoNotUse*>(&_AccountSteam_VarsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "nakama.api.AccountSteam.VarsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "nakama.api.AccountSteam.VarsEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto);
    return ::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.file_level_metadata[19];
  }

  public:
};

// -------------------------------------------------------------------

class AccountSteam PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nakama.api.AccountSteam) */ {
 public:
  inline AccountSteam() : AccountSteam(nullptr) {}
  virtual ~AccountSteam();

  AccountSteam(const AccountSteam& from);
  AccountSteam(AccountSteam&& from) noexcept
    : AccountSteam() {
    *this = ::std::move(from);
  }

  inline AccountSteam& operator=(const AccountSteam& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccountSteam& operator=(AccountSteam&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AccountSteam& default_instance();

  static inline const AccountSteam* internal_default_instance() {
    return reinterpret_cast<const AccountSteam*>(
               &_AccountSteam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(AccountSteam& a, AccountSteam& b) {
    a.Swap(&b);
  }
  inline void Swap(AccountSteam* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AccountSteam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AccountSteam* New() const final {
    return CreateMaybeMessage<AccountSteam>(nullptr);
  }

  AccountSteam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AccountSteam>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AccountSteam& from);
  void MergeFrom(const AccountSteam& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccountSteam* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nakama.api.AccountSteam";
  }
  protected:
  explicit AccountSteam(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto);
    return ::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kVarsFieldNumber = 2,
    kTokenFieldNumber = 1,
  };
  // map<string, string> vars = 2;
  int vars_size() const;
  private:
  int _internal_vars_size() const;
  public:
  void clear_vars();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_vars() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_vars();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      vars() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_vars();

  // string token = 1;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // @@protoc_insertion_point(class_scope:nakama.api.AccountSteam)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      AccountSteam_VarsEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> vars_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto;
};
// -------------------------------------------------------------------

class AddFriendsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nakama.api.AddFriendsRequest) */ {
 public:
  inline AddFriendsRequest() : AddFriendsRequest(nullptr) {}
  virtual ~AddFriendsRequest();

  AddFriendsRequest(const AddFriendsRequest& from);
  AddFriendsRequest(AddFriendsRequest&& from) noexcept
    : AddFriendsRequest() {
    *this = ::std::move(from);
  }

  inline AddFriendsRequest& operator=(const AddFriendsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddFriendsRequest& operator=(AddFriendsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddFriendsRequest& default_instance();

  static inline const AddFriendsRequest* internal_default_instance() {
    return reinterpret_cast<const AddFriendsRequest*>(
               &_AddFriendsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(AddFriendsRequest& a, AddFriendsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AddFriendsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddFriendsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddFriendsRequest* New() const final {
    return CreateMaybeMessage<AddFriendsRequest>(nullptr);
  }

  AddFriendsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddFriendsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddFriendsRequest& from);
  void MergeFrom(const AddFriendsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddFriendsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nakama.api.AddFriendsRequest";
  }
  protected:
  explicit AddFriendsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto);
    return ::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdsFieldNumber = 1,
    kUsernamesFieldNumber = 2,
  };
  // repeated string ids = 1;
  int ids_size() const;
  private:
  int _internal_ids_size() const;
  public:
  void clear_ids();
  const std::string& ids(int index) const;
  std::string* mutable_ids(int index);
  void set_ids(int index, const std::string& value);
  void set_ids(int index, std::string&& value);
  void set_ids(int index, const char* value);
  void set_ids(int index, const char* value, size_t size);
  std::string* add_ids();
  void add_ids(const std::string& value);
  void add_ids(std::string&& value);
  void add_ids(const char* value);
  void add_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_ids();
  private:
  const std::string& _internal_ids(int index) const;
  std::string* _internal_add_ids();
  public:

  // repeated string usernames = 2;
  int usernames_size() const;
  private:
  int _internal_usernames_size() const;
  public:
  void clear_usernames();
  const std::string& usernames(int index) const;
  std::string* mutable_usernames(int index);
  void set_usernames(int index, const std::string& value);
  void set_usernames(int index, std::string&& value);
  void set_usernames(int index, const char* value);
  void set_usernames(int index, const char* value, size_t size);
  std::string* add_usernames();
  void add_usernames(const std::string& value);
  void add_usernames(std::string&& value);
  void add_usernames(const char* value);
  void add_usernames(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& usernames() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_usernames();
  private:
  const std::string& _internal_usernames(int index) const;
  std::string* _internal_add_usernames();
  public:

  // @@protoc_insertion_point(class_scope:nakama.api.AddFriendsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> ids_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> usernames_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto;
};
// -------------------------------------------------------------------

class AddGroupUsersRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nakama.api.AddGroupUsersRequest) */ {
 public:
  inline AddGroupUsersRequest() : AddGroupUsersRequest(nullptr) {}
  virtual ~AddGroupUsersRequest();

  AddGroupUsersRequest(const AddGroupUsersRequest& from);
  AddGroupUsersRequest(AddGroupUsersRequest&& from) noexcept
    : AddGroupUsersRequest() {
    *this = ::std::move(from);
  }

  inline AddGroupUsersRequest& operator=(const AddGroupUsersRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddGroupUsersRequest& operator=(AddGroupUsersRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddGroupUsersRequest& default_instance();

  static inline const AddGroupUsersRequest* internal_default_instance() {
    return reinterpret_cast<const AddGroupUsersRequest*>(
               &_AddGroupUsersRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(AddGroupUsersRequest& a, AddGroupUsersRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AddGroupUsersRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddGroupUsersRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddGroupUsersRequest* New() const final {
    return CreateMaybeMessage<AddGroupUsersRequest>(nullptr);
  }

  AddGroupUsersRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddGroupUsersRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddGroupUsersRequest& from);
  void MergeFrom(const AddGroupUsersRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddGroupUsersRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nakama.api.AddGroupUsersRequest";
  }
  protected:
  explicit AddGroupUsersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto);
    return ::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdsFieldNumber = 2,
    kGroupIdFieldNumber = 1,
  };
  // repeated string user_ids = 2;
  int user_ids_size() const;
  private:
  int _internal_user_ids_size() const;
  public:
  void clear_user_ids();
  const std::string& user_ids(int index) const;
  std::string* mutable_user_ids(int index);
  void set_user_ids(int index, const std::string& value);
  void set_user_ids(int index, std::string&& value);
  void set_user_ids(int index, const char* value);
  void set_user_ids(int index, const char* value, size_t size);
  std::string* add_user_ids();
  void add_user_ids(const std::string& value);
  void add_user_ids(std::string&& value);
  void add_user_ids(const char* value);
  void add_user_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& user_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_user_ids();
  private:
  const std::string& _internal_user_ids(int index) const;
  std::string* _internal_add_user_ids();
  public:

  // string group_id = 1;
  void clear_group_id();
  const std::string& group_id() const;
  void set_group_id(const std::string& value);
  void set_group_id(std::string&& value);
  void set_group_id(const char* value);
  void set_group_id(const char* value, size_t size);
  std::string* mutable_group_id();
  std::string* release_group_id();
  void set_allocated_group_id(std::string* group_id);
  private:
  const std::string& _internal_group_id() const;
  void _internal_set_group_id(const std::string& value);
  std::string* _internal_mutable_group_id();
  public:

  // @@protoc_insertion_point(class_scope:nakama.api.AddGroupUsersRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> user_ids_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr group_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto;
};
// -------------------------------------------------------------------

class SessionRefreshRequest_VarsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SessionRefreshRequest_VarsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SessionRefreshRequest_VarsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  SessionRefreshRequest_VarsEntry_DoNotUse();
  explicit SessionRefreshRequest_VarsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const SessionRefreshRequest_VarsEntry_DoNotUse& other);
  static const SessionRefreshRequest_VarsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const SessionRefreshRequest_VarsEntry_DoNotUse*>(&_SessionRefreshRequest_VarsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "nakama.api.SessionRefreshRequest.VarsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "nakama.api.SessionRefreshRequest.VarsEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto);
    return ::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.file_level_metadata[23];
  }

  public:
};

// -------------------------------------------------------------------

class SessionRefreshRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nakama.api.SessionRefreshRequest) */ {
 public:
  inline SessionRefreshRequest() : SessionRefreshRequest(nullptr) {}
  virtual ~SessionRefreshRequest();

  SessionRefreshRequest(const SessionRefreshRequest& from);
  SessionRefreshRequest(SessionRefreshRequest&& from) noexcept
    : SessionRefreshRequest() {
    *this = ::std::move(from);
  }

  inline SessionRefreshRequest& operator=(const SessionRefreshRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SessionRefreshRequest& operator=(SessionRefreshRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SessionRefreshRequest& default_instance();

  static inline const SessionRefreshRequest* internal_default_instance() {
    return reinterpret_cast<const SessionRefreshRequest*>(
               &_SessionRefreshRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(SessionRefreshRequest& a, SessionRefreshRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SessionRefreshRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SessionRefreshRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SessionRefreshRequest* New() const final {
    return CreateMaybeMessage<SessionRefreshRequest>(nullptr);
  }

  SessionRefreshRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SessionRefreshRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SessionRefreshRequest& from);
  void MergeFrom(const SessionRefreshRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SessionRefreshRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nakama.api.SessionRefreshRequest";
  }
  protected:
  explicit SessionRefreshRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto);
    return ::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kVarsFieldNumber = 2,
    kTokenFieldNumber = 1,
  };
  // map<string, string> vars = 2;
  int vars_size() const;
  private:
  int _internal_vars_size() const;
  public:
  void clear_vars();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_vars() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_vars();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      vars() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_vars();

  // string token = 1;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // @@protoc_insertion_point(class_scope:nakama.api.SessionRefreshRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      SessionRefreshRequest_VarsEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> vars_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto;
};
// -------------------------------------------------------------------

class SessionLogoutRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nakama.api.SessionLogoutRequest) */ {
 public:
  inline SessionLogoutRequest() : SessionLogoutRequest(nullptr) {}
  virtual ~SessionLogoutRequest();

  SessionLogoutRequest(const SessionLogoutRequest& from);
  SessionLogoutRequest(SessionLogoutRequest&& from) noexcept
    : SessionLogoutRequest() {
    *this = ::std::move(from);
  }

  inline SessionLogoutRequest& operator=(const SessionLogoutRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SessionLogoutRequest& operator=(SessionLogoutRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SessionLogoutRequest& default_instance();

  static inline const SessionLogoutRequest* internal_default_instance() {
    return reinterpret_cast<const SessionLogoutRequest*>(
               &_SessionLogoutRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(SessionLogoutRequest& a, SessionLogoutRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SessionLogoutRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SessionLogoutRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SessionLogoutRequest* New() const final {
    return CreateMaybeMessage<SessionLogoutRequest>(nullptr);
  }

  SessionLogoutRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SessionLogoutRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SessionLogoutRequest& from);
  void MergeFrom(const SessionLogoutRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SessionLogoutRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nakama.api.SessionLogoutRequest";
  }
  protected:
  explicit SessionLogoutRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto);
    return ::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
    kRefreshTokenFieldNumber = 2,
  };
  // string token = 1;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // string refresh_token = 2;
  void clear_refresh_token();
  const std::string& refresh_token() const;
  void set_refresh_token(const std::string& value);
  void set_refresh_token(std::string&& value);
  void set_refresh_token(const char* value);
  void set_refresh_token(const char* value, size_t size);
  std::string* mutable_refresh_token();
  std::string* release_refresh_token();
  void set_allocated_refresh_token(std::string* refresh_token);
  private:
  const std::string& _internal_refresh_token() const;
  void _internal_set_refresh_token(const std::string& value);
  std::string* _internal_mutable_refresh_token();
  public:

  // @@protoc_insertion_point(class_scope:nakama.api.SessionLogoutRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr refresh_token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto;
};
// -------------------------------------------------------------------

class AuthenticateAppleRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nakama.api.AuthenticateAppleRequest) */ {
 public:
  inline AuthenticateAppleRequest() : AuthenticateAppleRequest(nullptr) {}
  virtual ~AuthenticateAppleRequest();

  AuthenticateAppleRequest(const AuthenticateAppleRequest& from);
  AuthenticateAppleRequest(AuthenticateAppleRequest&& from) noexcept
    : AuthenticateAppleRequest() {
    *this = ::std::move(from);
  }

  inline AuthenticateAppleRequest& operator=(const AuthenticateAppleRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthenticateAppleRequest& operator=(AuthenticateAppleRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AuthenticateAppleRequest& default_instance();

  static inline const AuthenticateAppleRequest* internal_default_instance() {
    return reinterpret_cast<const AuthenticateAppleRequest*>(
               &_AuthenticateAppleRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(AuthenticateAppleRequest& a, AuthenticateAppleRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AuthenticateAppleRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AuthenticateAppleRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AuthenticateAppleRequest* New() const final {
    return CreateMaybeMessage<AuthenticateAppleRequest>(nullptr);
  }

  AuthenticateAppleRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AuthenticateAppleRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AuthenticateAppleRequest& from);
  void MergeFrom(const AuthenticateAppleRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthenticateAppleRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nakama.api.AuthenticateAppleRequest";
  }
  protected:
  explicit AuthenticateAppleRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto);
    return ::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 3,
    kAccountFieldNumber = 1,
    kCreateFieldNumber = 2,
  };
  // string username = 3;
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // .nakama.api.AccountApple account = 1;
  bool has_account() const;
  private:
  bool _internal_has_account() const;
  public:
  void clear_account();
  const ::nakama::api::AccountApple& account() const;
  ::nakama::api::AccountApple* release_account();
  ::nakama::api::AccountApple* mutable_account();
  void set_allocated_account(::nakama::api::AccountApple* account);
  private:
  const ::nakama::api::AccountApple& _internal_account() const;
  ::nakama::api::AccountApple* _internal_mutable_account();
  public:
  void unsafe_arena_set_allocated_account(
      ::nakama::api::AccountApple* account);
  ::nakama::api::AccountApple* unsafe_arena_release_account();

  // .google.protobuf.BoolValue create = 2;
  bool has_create() const;
  private:
  bool _internal_has_create() const;
  public:
  void clear_create();
  const PROTOBUF_NAMESPACE_ID::BoolValue& create() const;
  PROTOBUF_NAMESPACE_ID::BoolValue* release_create();
  PROTOBUF_NAMESPACE_ID::BoolValue* mutable_create();
  void set_allocated_create(PROTOBUF_NAMESPACE_ID::BoolValue* create);
  private:
  const PROTOBUF_NAMESPACE_ID::BoolValue& _internal_create() const;
  PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_create();
  public:
  void unsafe_arena_set_allocated_create(
      PROTOBUF_NAMESPACE_ID::BoolValue* create);
  PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_create();

  // @@protoc_insertion_point(class_scope:nakama.api.AuthenticateAppleRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::nakama::api::AccountApple* account_;
  PROTOBUF_NAMESPACE_ID::BoolValue* create_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto;
};
// -------------------------------------------------------------------

class AuthenticateCustomRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nakama.api.AuthenticateCustomRequest) */ {
 public:
  inline AuthenticateCustomRequest() : AuthenticateCustomRequest(nullptr) {}
  virtual ~AuthenticateCustomRequest();

  AuthenticateCustomRequest(const AuthenticateCustomRequest& from);
  AuthenticateCustomRequest(AuthenticateCustomRequest&& from) noexcept
    : AuthenticateCustomRequest() {
    *this = ::std::move(from);
  }

  inline AuthenticateCustomRequest& operator=(const AuthenticateCustomRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthenticateCustomRequest& operator=(AuthenticateCustomRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AuthenticateCustomRequest& default_instance();

  static inline const AuthenticateCustomRequest* internal_default_instance() {
    return reinterpret_cast<const AuthenticateCustomRequest*>(
               &_AuthenticateCustomRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(AuthenticateCustomRequest& a, AuthenticateCustomRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AuthenticateCustomRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AuthenticateCustomRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AuthenticateCustomRequest* New() const final {
    return CreateMaybeMessage<AuthenticateCustomRequest>(nullptr);
  }

  AuthenticateCustomRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AuthenticateCustomRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AuthenticateCustomRequest& from);
  void MergeFrom(const AuthenticateCustomRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthenticateCustomRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nakama.api.AuthenticateCustomRequest";
  }
  protected:
  explicit AuthenticateCustomRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto);
    return ::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 3,
    kAccountFieldNumber = 1,
    kCreateFieldNumber = 2,
  };
  // string username = 3;
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // .nakama.api.AccountCustom account = 1;
  bool has_account() const;
  private:
  bool _internal_has_account() const;
  public:
  void clear_account();
  const ::nakama::api::AccountCustom& account() const;
  ::nakama::api::AccountCustom* release_account();
  ::nakama::api::AccountCustom* mutable_account();
  void set_allocated_account(::nakama::api::AccountCustom* account);
  private:
  const ::nakama::api::AccountCustom& _internal_account() const;
  ::nakama::api::AccountCustom* _internal_mutable_account();
  public:
  void unsafe_arena_set_allocated_account(
      ::nakama::api::AccountCustom* account);
  ::nakama::api::AccountCustom* unsafe_arena_release_account();

  // .google.protobuf.BoolValue create = 2;
  bool has_create() const;
  private:
  bool _internal_has_create() const;
  public:
  void clear_create();
  const PROTOBUF_NAMESPACE_ID::BoolValue& create() const;
  PROTOBUF_NAMESPACE_ID::BoolValue* release_create();
  PROTOBUF_NAMESPACE_ID::BoolValue* mutable_create();
  void set_allocated_create(PROTOBUF_NAMESPACE_ID::BoolValue* create);
  private:
  const PROTOBUF_NAMESPACE_ID::BoolValue& _internal_create() const;
  PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_create();
  public:
  void unsafe_arena_set_allocated_create(
      PROTOBUF_NAMESPACE_ID::BoolValue* create);
  PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_create();

  // @@protoc_insertion_point(class_scope:nakama.api.AuthenticateCustomRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::nakama::api::AccountCustom* account_;
  PROTOBUF_NAMESPACE_ID::BoolValue* create_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto;
};
// -------------------------------------------------------------------

class AuthenticateDeviceRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nakama.api.AuthenticateDeviceRequest) */ {
 public:
  inline AuthenticateDeviceRequest() : AuthenticateDeviceRequest(nullptr) {}
  virtual ~AuthenticateDeviceRequest();

  AuthenticateDeviceRequest(const AuthenticateDeviceRequest& from);
  AuthenticateDeviceRequest(AuthenticateDeviceRequest&& from) noexcept
    : AuthenticateDeviceRequest() {
    *this = ::std::move(from);
  }

  inline AuthenticateDeviceRequest& operator=(const AuthenticateDeviceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthenticateDeviceRequest& operator=(AuthenticateDeviceRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AuthenticateDeviceRequest& default_instance();

  static inline const AuthenticateDeviceRequest* internal_default_instance() {
    return reinterpret_cast<const AuthenticateDeviceRequest*>(
               &_AuthenticateDeviceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(AuthenticateDeviceRequest& a, AuthenticateDeviceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AuthenticateDeviceRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AuthenticateDeviceRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AuthenticateDeviceRequest* New() const final {
    return CreateMaybeMessage<AuthenticateDeviceRequest>(nullptr);
  }

  AuthenticateDeviceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AuthenticateDeviceRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AuthenticateDeviceRequest& from);
  void MergeFrom(const AuthenticateDeviceRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthenticateDeviceRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nakama.api.AuthenticateDeviceRequest";
  }
  protected:
  explicit AuthenticateDeviceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto);
    return ::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 3,
    kAccountFieldNumber = 1,
    kCreateFieldNumber = 2,
  };
  // string username = 3;
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // .nakama.api.AccountDevice account = 1;
  bool has_account() const;
  private:
  bool _internal_has_account() const;
  public:
  void clear_account();
  const ::nakama::api::AccountDevice& account() const;
  ::nakama::api::AccountDevice* release_account();
  ::nakama::api::AccountDevice* mutable_account();
  void set_allocated_account(::nakama::api::AccountDevice* account);
  private:
  const ::nakama::api::AccountDevice& _internal_account() const;
  ::nakama::api::AccountDevice* _internal_mutable_account();
  public:
  void unsafe_arena_set_allocated_account(
      ::nakama::api::AccountDevice* account);
  ::nakama::api::AccountDevice* unsafe_arena_release_account();

  // .google.protobuf.BoolValue create = 2;
  bool has_create() const;
  private:
  bool _internal_has_create() const;
  public:
  void clear_create();
  const PROTOBUF_NAMESPACE_ID::BoolValue& create() const;
  PROTOBUF_NAMESPACE_ID::BoolValue* release_create();
  PROTOBUF_NAMESPACE_ID::BoolValue* mutable_create();
  void set_allocated_create(PROTOBUF_NAMESPACE_ID::BoolValue* create);
  private:
  const PROTOBUF_NAMESPACE_ID::BoolValue& _internal_create() const;
  PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_create();
  public:
  void unsafe_arena_set_allocated_create(
      PROTOBUF_NAMESPACE_ID::BoolValue* create);
  PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_create();

  // @@protoc_insertion_point(class_scope:nakama.api.AuthenticateDeviceRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::nakama::api::AccountDevice* account_;
  PROTOBUF_NAMESPACE_ID::BoolValue* create_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto;
};
// -------------------------------------------------------------------

class AuthenticateEmailRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nakama.api.AuthenticateEmailRequest) */ {
 public:
  inline AuthenticateEmailRequest() : AuthenticateEmailRequest(nullptr) {}
  virtual ~AuthenticateEmailRequest();

  AuthenticateEmailRequest(const AuthenticateEmailRequest& from);
  AuthenticateEmailRequest(AuthenticateEmailRequest&& from) noexcept
    : AuthenticateEmailRequest() {
    *this = ::std::move(from);
  }

  inline AuthenticateEmailRequest& operator=(const AuthenticateEmailRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthenticateEmailRequest& operator=(AuthenticateEmailRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AuthenticateEmailRequest& default_instance();

  static inline const AuthenticateEmailRequest* internal_default_instance() {
    return reinterpret_cast<const AuthenticateEmailRequest*>(
               &_AuthenticateEmailRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(AuthenticateEmailRequest& a, AuthenticateEmailRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AuthenticateEmailRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AuthenticateEmailRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AuthenticateEmailRequest* New() const final {
    return CreateMaybeMessage<AuthenticateEmailRequest>(nullptr);
  }

  AuthenticateEmailRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AuthenticateEmailRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AuthenticateEmailRequest& from);
  void MergeFrom(const AuthenticateEmailRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthenticateEmailRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nakama.api.AuthenticateEmailRequest";
  }
  protected:
  explicit AuthenticateEmailRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto);
    return ::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 3,
    kAccountFieldNumber = 1,
    kCreateFieldNumber = 2,
  };
  // string username = 3;
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // .nakama.api.AccountEmail account = 1;
  bool has_account() const;
  private:
  bool _internal_has_account() const;
  public:
  void clear_account();
  const ::nakama::api::AccountEmail& account() const;
  ::nakama::api::AccountEmail* release_account();
  ::nakama::api::AccountEmail* mutable_account();
  void set_allocated_account(::nakama::api::AccountEmail* account);
  private:
  const ::nakama::api::AccountEmail& _internal_account() const;
  ::nakama::api::AccountEmail* _internal_mutable_account();
  public:
  void unsafe_arena_set_allocated_account(
      ::nakama::api::AccountEmail* account);
  ::nakama::api::AccountEmail* unsafe_arena_release_account();

  // .google.protobuf.BoolValue create = 2;
  bool has_create() const;
  private:
  bool _internal_has_create() const;
  public:
  void clear_create();
  const PROTOBUF_NAMESPACE_ID::BoolValue& create() const;
  PROTOBUF_NAMESPACE_ID::BoolValue* release_create();
  PROTOBUF_NAMESPACE_ID::BoolValue* mutable_create();
  void set_allocated_create(PROTOBUF_NAMESPACE_ID::BoolValue* create);
  private:
  const PROTOBUF_NAMESPACE_ID::BoolValue& _internal_create() const;
  PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_create();
  public:
  void unsafe_arena_set_allocated_create(
      PROTOBUF_NAMESPACE_ID::BoolValue* create);
  PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_create();

  // @@protoc_insertion_point(class_scope:nakama.api.AuthenticateEmailRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::nakama::api::AccountEmail* account_;
  PROTOBUF_NAMESPACE_ID::BoolValue* create_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto;
};
// -------------------------------------------------------------------

class AuthenticateFacebookRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nakama.api.AuthenticateFacebookRequest) */ {
 public:
  inline AuthenticateFacebookRequest() : AuthenticateFacebookRequest(nullptr) {}
  virtual ~AuthenticateFacebookRequest();

  AuthenticateFacebookRequest(const AuthenticateFacebookRequest& from);
  AuthenticateFacebookRequest(AuthenticateFacebookRequest&& from) noexcept
    : AuthenticateFacebookRequest() {
    *this = ::std::move(from);
  }

  inline AuthenticateFacebookRequest& operator=(const AuthenticateFacebookRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthenticateFacebookRequest& operator=(AuthenticateFacebookRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AuthenticateFacebookRequest& default_instance();

  static inline const AuthenticateFacebookRequest* internal_default_instance() {
    return reinterpret_cast<const AuthenticateFacebookRequest*>(
               &_AuthenticateFacebookRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(AuthenticateFacebookRequest& a, AuthenticateFacebookRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AuthenticateFacebookRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AuthenticateFacebookRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AuthenticateFacebookRequest* New() const final {
    return CreateMaybeMessage<AuthenticateFacebookRequest>(nullptr);
  }

  AuthenticateFacebookRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AuthenticateFacebookRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AuthenticateFacebookRequest& from);
  void MergeFrom(const AuthenticateFacebookRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthenticateFacebookRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nakama.api.AuthenticateFacebookRequest";
  }
  protected:
  explicit AuthenticateFacebookRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto);
    return ::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 3,
    kAccountFieldNumber = 1,
    kCreateFieldNumber = 2,
    kSyncFieldNumber = 4,
  };
  // string username = 3;
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // .nakama.api.AccountFacebook account = 1;
  bool has_account() const;
  private:
  bool _internal_has_account() const;
  public:
  void clear_account();
  const ::nakama::api::AccountFacebook& account() const;
  ::nakama::api::AccountFacebook* release_account();
  ::nakama::api::AccountFacebook* mutable_account();
  void set_allocated_account(::nakama::api::AccountFacebook* account);
  private:
  const ::nakama::api::AccountFacebook& _internal_account() const;
  ::nakama::api::AccountFacebook* _internal_mutable_account();
  public:
  void unsafe_arena_set_allocated_account(
      ::nakama::api::AccountFacebook* account);
  ::nakama::api::AccountFacebook* unsafe_arena_release_account();

  // .google.protobuf.BoolValue create = 2;
  bool has_create() const;
  private:
  bool _internal_has_create() const;
  public:
  void clear_create();
  const PROTOBUF_NAMESPACE_ID::BoolValue& create() const;
  PROTOBUF_NAMESPACE_ID::BoolValue* release_create();
  PROTOBUF_NAMESPACE_ID::BoolValue* mutable_create();
  void set_allocated_create(PROTOBUF_NAMESPACE_ID::BoolValue* create);
  private:
  const PROTOBUF_NAMESPACE_ID::BoolValue& _internal_create() const;
  PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_create();
  public:
  void unsafe_arena_set_allocated_create(
      PROTOBUF_NAMESPACE_ID::BoolValue* create);
  PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_create();

  // .google.protobuf.BoolValue sync = 4;
  bool has_sync() const;
  private:
  bool _internal_has_sync() const;
  public:
  void clear_sync();
  const PROTOBUF_NAMESPACE_ID::BoolValue& sync() const;
  PROTOBUF_NAMESPACE_ID::BoolValue* release_sync();
  PROTOBUF_NAMESPACE_ID::BoolValue* mutable_sync();
  void set_allocated_sync(PROTOBUF_NAMESPACE_ID::BoolValue* sync);
  private:
  const PROTOBUF_NAMESPACE_ID::BoolValue& _internal_sync() const;
  PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_sync();
  public:
  void unsafe_arena_set_allocated_sync(
      PROTOBUF_NAMESPACE_ID::BoolValue* sync);
  PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_sync();

  // @@protoc_insertion_point(class_scope:nakama.api.AuthenticateFacebookRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::nakama::api::AccountFacebook* account_;
  PROTOBUF_NAMESPACE_ID::BoolValue* create_;
  PROTOBUF_NAMESPACE_ID::BoolValue* sync_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto;
};
// -------------------------------------------------------------------

class AuthenticateFacebookInstantGameRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nakama.api.AuthenticateFacebookInstantGameRequest) */ {
 public:
  inline AuthenticateFacebookInstantGameRequest() : AuthenticateFacebookInstantGameRequest(nullptr) {}
  virtual ~AuthenticateFacebookInstantGameRequest();

  AuthenticateFacebookInstantGameRequest(const AuthenticateFacebookInstantGameRequest& from);
  AuthenticateFacebookInstantGameRequest(AuthenticateFacebookInstantGameRequest&& from) noexcept
    : AuthenticateFacebookInstantGameRequest() {
    *this = ::std::move(from);
  }

  inline AuthenticateFacebookInstantGameRequest& operator=(const AuthenticateFacebookInstantGameRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthenticateFacebookInstantGameRequest& operator=(AuthenticateFacebookInstantGameRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AuthenticateFacebookInstantGameRequest& default_instance();

  static inline const AuthenticateFacebookInstantGameRequest* internal_default_instance() {
    return reinterpret_cast<const AuthenticateFacebookInstantGameRequest*>(
               &_AuthenticateFacebookInstantGameRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(AuthenticateFacebookInstantGameRequest& a, AuthenticateFacebookInstantGameRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AuthenticateFacebookInstantGameRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AuthenticateFacebookInstantGameRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AuthenticateFacebookInstantGameRequest* New() const final {
    return CreateMaybeMessage<AuthenticateFacebookInstantGameRequest>(nullptr);
  }

  AuthenticateFacebookInstantGameRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AuthenticateFacebookInstantGameRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AuthenticateFacebookInstantGameRequest& from);
  void MergeFrom(const AuthenticateFacebookInstantGameRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthenticateFacebookInstantGameRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nakama.api.AuthenticateFacebookInstantGameRequest";
  }
  protected:
  explicit AuthenticateFacebookInstantGameRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto);
    return ::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 3,
    kAccountFieldNumber = 1,
    kCreateFieldNumber = 2,
  };
  // string username = 3;
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // .nakama.api.AccountFacebookInstantGame account = 1;
  bool has_account() const;
  private:
  bool _internal_has_account() const;
  public:
  void clear_account();
  const ::nakama::api::AccountFacebookInstantGame& account() const;
  ::nakama::api::AccountFacebookInstantGame* release_account();
  ::nakama::api::AccountFacebookInstantGame* mutable_account();
  void set_allocated_account(::nakama::api::AccountFacebookInstantGame* account);
  private:
  const ::nakama::api::AccountFacebookInstantGame& _internal_account() const;
  ::nakama::api::AccountFacebookInstantGame* _internal_mutable_account();
  public:
  void unsafe_arena_set_allocated_account(
      ::nakama::api::AccountFacebookInstantGame* account);
  ::nakama::api::AccountFacebookInstantGame* unsafe_arena_release_account();

  // .google.protobuf.BoolValue create = 2;
  bool has_create() const;
  private:
  bool _internal_has_create() const;
  public:
  void clear_create();
  const PROTOBUF_NAMESPACE_ID::BoolValue& create() const;
  PROTOBUF_NAMESPACE_ID::BoolValue* release_create();
  PROTOBUF_NAMESPACE_ID::BoolValue* mutable_create();
  void set_allocated_create(PROTOBUF_NAMESPACE_ID::BoolValue* create);
  private:
  const PROTOBUF_NAMESPACE_ID::BoolValue& _internal_create() const;
  PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_create();
  public:
  void unsafe_arena_set_allocated_create(
      PROTOBUF_NAMESPACE_ID::BoolValue* create);
  PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_create();

  // @@protoc_insertion_point(class_scope:nakama.api.AuthenticateFacebookInstantGameRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::nakama::api::AccountFacebookInstantGame* account_;
  PROTOBUF_NAMESPACE_ID::BoolValue* create_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto;
};
// -------------------------------------------------------------------

class AuthenticateGameCenterRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nakama.api.AuthenticateGameCenterRequest) */ {
 public:
  inline AuthenticateGameCenterRequest() : AuthenticateGameCenterRequest(nullptr) {}
  virtual ~AuthenticateGameCenterRequest();

  AuthenticateGameCenterRequest(const AuthenticateGameCenterRequest& from);
  AuthenticateGameCenterRequest(AuthenticateGameCenterRequest&& from) noexcept
    : AuthenticateGameCenterRequest() {
    *this = ::std::move(from);
  }

  inline AuthenticateGameCenterRequest& operator=(const AuthenticateGameCenterRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthenticateGameCenterRequest& operator=(AuthenticateGameCenterRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AuthenticateGameCenterRequest& default_instance();

  static inline const AuthenticateGameCenterRequest* internal_default_instance() {
    return reinterpret_cast<const AuthenticateGameCenterRequest*>(
               &_AuthenticateGameCenterRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(AuthenticateGameCenterRequest& a, AuthenticateGameCenterRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AuthenticateGameCenterRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AuthenticateGameCenterRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AuthenticateGameCenterRequest* New() const final {
    return CreateMaybeMessage<AuthenticateGameCenterRequest>(nullptr);
  }

  AuthenticateGameCenterRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AuthenticateGameCenterRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AuthenticateGameCenterRequest& from);
  void MergeFrom(const AuthenticateGameCenterRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthenticateGameCenterRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nakama.api.AuthenticateGameCenterRequest";
  }
  protected:
  explicit AuthenticateGameCenterRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto);
    return ::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 3,
    kAccountFieldNumber = 1,
    kCreateFieldNumber = 2,
  };
  // string username = 3;
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // .nakama.api.AccountGameCenter account = 1;
  bool has_account() const;
  private:
  bool _internal_has_account() const;
  public:
  void clear_account();
  const ::nakama::api::AccountGameCenter& account() const;
  ::nakama::api::AccountGameCenter* release_account();
  ::nakama::api::AccountGameCenter* mutable_account();
  void set_allocated_account(::nakama::api::AccountGameCenter* account);
  private:
  const ::nakama::api::AccountGameCenter& _internal_account() const;
  ::nakama::api::AccountGameCenter* _internal_mutable_account();
  public:
  void unsafe_arena_set_allocated_account(
      ::nakama::api::AccountGameCenter* account);
  ::nakama::api::AccountGameCenter* unsafe_arena_release_account();

  // .google.protobuf.BoolValue create = 2;
  bool has_create() const;
  private:
  bool _internal_has_create() const;
  public:
  void clear_create();
  const PROTOBUF_NAMESPACE_ID::BoolValue& create() const;
  PROTOBUF_NAMESPACE_ID::BoolValue* release_create();
  PROTOBUF_NAMESPACE_ID::BoolValue* mutable_create();
  void set_allocated_create(PROTOBUF_NAMESPACE_ID::BoolValue* create);
  private:
  const PROTOBUF_NAMESPACE_ID::BoolValue& _internal_create() const;
  PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_create();
  public:
  void unsafe_arena_set_allocated_create(
      PROTOBUF_NAMESPACE_ID::BoolValue* create);
  PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_create();

  // @@protoc_insertion_point(class_scope:nakama.api.AuthenticateGameCenterRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::nakama::api::AccountGameCenter* account_;
  PROTOBUF_NAMESPACE_ID::BoolValue* create_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto;
};
// -------------------------------------------------------------------

class AuthenticateGoogleRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nakama.api.AuthenticateGoogleRequest) */ {
 public:
  inline AuthenticateGoogleRequest() : AuthenticateGoogleRequest(nullptr) {}
  virtual ~AuthenticateGoogleRequest();

  AuthenticateGoogleRequest(const AuthenticateGoogleRequest& from);
  AuthenticateGoogleRequest(AuthenticateGoogleRequest&& from) noexcept
    : AuthenticateGoogleRequest() {
    *this = ::std::move(from);
  }

  inline AuthenticateGoogleRequest& operator=(const AuthenticateGoogleRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthenticateGoogleRequest& operator=(AuthenticateGoogleRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AuthenticateGoogleRequest& default_instance();

  static inline const AuthenticateGoogleRequest* internal_default_instance() {
    return reinterpret_cast<const AuthenticateGoogleRequest*>(
               &_AuthenticateGoogleRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(AuthenticateGoogleRequest& a, AuthenticateGoogleRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AuthenticateGoogleRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AuthenticateGoogleRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AuthenticateGoogleRequest* New() const final {
    return CreateMaybeMessage<AuthenticateGoogleRequest>(nullptr);
  }

  AuthenticateGoogleRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AuthenticateGoogleRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AuthenticateGoogleRequest& from);
  void MergeFrom(const AuthenticateGoogleRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthenticateGoogleRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nakama.api.AuthenticateGoogleRequest";
  }
  protected:
  explicit AuthenticateGoogleRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto);
    return ::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 3,
    kAccountFieldNumber = 1,
    kCreateFieldNumber = 2,
  };
  // string username = 3;
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // .nakama.api.AccountGoogle account = 1;
  bool has_account() const;
  private:
  bool _internal_has_account() const;
  public:
  void clear_account();
  const ::nakama::api::AccountGoogle& account() const;
  ::nakama::api::AccountGoogle* release_account();
  ::nakama::api::AccountGoogle* mutable_account();
  void set_allocated_account(::nakama::api::AccountGoogle* account);
  private:
  const ::nakama::api::AccountGoogle& _internal_account() const;
  ::nakama::api::AccountGoogle* _internal_mutable_account();
  public:
  void unsafe_arena_set_allocated_account(
      ::nakama::api::AccountGoogle* account);
  ::nakama::api::AccountGoogle* unsafe_arena_release_account();

  // .google.protobuf.BoolValue create = 2;
  bool has_create() const;
  private:
  bool _internal_has_create() const;
  public:
  void clear_create();
  const PROTOBUF_NAMESPACE_ID::BoolValue& create() const;
  PROTOBUF_NAMESPACE_ID::BoolValue* release_create();
  PROTOBUF_NAMESPACE_ID::BoolValue* mutable_create();
  void set_allocated_create(PROTOBUF_NAMESPACE_ID::BoolValue* create);
  private:
  const PROTOBUF_NAMESPACE_ID::BoolValue& _internal_create() const;
  PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_create();
  public:
  void unsafe_arena_set_allocated_create(
      PROTOBUF_NAMESPACE_ID::BoolValue* create);
  PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_create();

  // @@protoc_insertion_point(class_scope:nakama.api.AuthenticateGoogleRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::nakama::api::AccountGoogle* account_;
  PROTOBUF_NAMESPACE_ID::BoolValue* create_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto;
};
// -------------------------------------------------------------------

class AuthenticateSteamRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nakama.api.AuthenticateSteamRequest) */ {
 public:
  inline AuthenticateSteamRequest() : AuthenticateSteamRequest(nullptr) {}
  virtual ~AuthenticateSteamRequest();

  AuthenticateSteamRequest(const AuthenticateSteamRequest& from);
  AuthenticateSteamRequest(AuthenticateSteamRequest&& from) noexcept
    : AuthenticateSteamRequest() {
    *this = ::std::move(from);
  }

  inline AuthenticateSteamRequest& operator=(const AuthenticateSteamRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthenticateSteamRequest& operator=(AuthenticateSteamRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AuthenticateSteamRequest& default_instance();

  static inline const AuthenticateSteamRequest* internal_default_instance() {
    return reinterpret_cast<const AuthenticateSteamRequest*>(
               &_AuthenticateSteamRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(AuthenticateSteamRequest& a, AuthenticateSteamRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AuthenticateSteamRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AuthenticateSteamRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AuthenticateSteamRequest* New() const final {
    return CreateMaybeMessage<AuthenticateSteamRequest>(nullptr);
  }

  AuthenticateSteamRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AuthenticateSteamRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AuthenticateSteamRequest& from);
  void MergeFrom(const AuthenticateSteamRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthenticateSteamRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nakama.api.AuthenticateSteamRequest";
  }
  protected:
  explicit AuthenticateSteamRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto);
    return ::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 3,
    kAccountFieldNumber = 1,
    kCreateFieldNumber = 2,
    kSyncFieldNumber = 4,
  };
  // string username = 3;
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // .nakama.api.AccountSteam account = 1;
  bool has_account() const;
  private:
  bool _internal_has_account() const;
  public:
  void clear_account();
  const ::nakama::api::AccountSteam& account() const;
  ::nakama::api::AccountSteam* release_account();
  ::nakama::api::AccountSteam* mutable_account();
  void set_allocated_account(::nakama::api::AccountSteam* account);
  private:
  const ::nakama::api::AccountSteam& _internal_account() const;
  ::nakama::api::AccountSteam* _internal_mutable_account();
  public:
  void unsafe_arena_set_allocated_account(
      ::nakama::api::AccountSteam* account);
  ::nakama::api::AccountSteam* unsafe_arena_release_account();

  // .google.protobuf.BoolValue create = 2;
  bool has_create() const;
  private:
  bool _internal_has_create() const;
  public:
  void clear_create();
  const PROTOBUF_NAMESPACE_ID::BoolValue& create() const;
  PROTOBUF_NAMESPACE_ID::BoolValue* release_create();
  PROTOBUF_NAMESPACE_ID::BoolValue* mutable_create();
  void set_allocated_create(PROTOBUF_NAMESPACE_ID::BoolValue* create);
  private:
  const PROTOBUF_NAMESPACE_ID::BoolValue& _internal_create() const;
  PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_create();
  public:
  void unsafe_arena_set_allocated_create(
      PROTOBUF_NAMESPACE_ID::BoolValue* create);
  PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_create();

  // .google.protobuf.BoolValue sync = 4;
  bool has_sync() const;
  private:
  bool _internal_has_sync() const;
  public:
  void clear_sync();
  const PROTOBUF_NAMESPACE_ID::BoolValue& sync() const;
  PROTOBUF_NAMESPACE_ID::BoolValue* release_sync();
  PROTOBUF_NAMESPACE_ID::BoolValue* mutable_sync();
  void set_allocated_sync(PROTOBUF_NAMESPACE_ID::BoolValue* sync);
  private:
  const PROTOBUF_NAMESPACE_ID::BoolValue& _internal_sync() const;
  PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_sync();
  public:
  void unsafe_arena_set_allocated_sync(
      PROTOBUF_NAMESPACE_ID::BoolValue* sync);
  PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_sync();

  // @@protoc_insertion_point(class_scope:nakama.api.AuthenticateSteamRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::nakama::api::AccountSteam* account_;
  PROTOBUF_NAMESPACE_ID::BoolValue* create_;
  PROTOBUF_NAMESPACE_ID::BoolValue* sync_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto;
};
// -------------------------------------------------------------------

class BanGroupUsersRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nakama.api.BanGroupUsersRequest) */ {
 public:
  inline BanGroupUsersRequest() : BanGroupUsersRequest(nullptr) {}
  virtual ~BanGroupUsersRequest();

  BanGroupUsersRequest(const BanGroupUsersRequest& from);
  BanGroupUsersRequest(BanGroupUsersRequest&& from) noexcept
    : BanGroupUsersRequest() {
    *this = ::std::move(from);
  }

  inline BanGroupUsersRequest& operator=(const BanGroupUsersRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BanGroupUsersRequest& operator=(BanGroupUsersRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BanGroupUsersRequest& default_instance();

  static inline const BanGroupUsersRequest* internal_default_instance() {
    return reinterpret_cast<const BanGroupUsersRequest*>(
               &_BanGroupUsersRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(BanGroupUsersRequest& a, BanGroupUsersRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(BanGroupUsersRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BanGroupUsersRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BanGroupUsersRequest* New() const final {
    return CreateMaybeMessage<BanGroupUsersRequest>(nullptr);
  }

  BanGroupUsersRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BanGroupUsersRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BanGroupUsersRequest& from);
  void MergeFrom(const BanGroupUsersRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BanGroupUsersRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nakama.api.BanGroupUsersRequest";
  }
  protected:
  explicit BanGroupUsersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto);
    return ::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdsFieldNumber = 2,
    kGroupIdFieldNumber = 1,
  };
  // repeated string user_ids = 2;
  int user_ids_size() const;
  private:
  int _internal_user_ids_size() const;
  public:
  void clear_user_ids();
  const std::string& user_ids(int index) const;
  std::string* mutable_user_ids(int index);
  void set_user_ids(int index, const std::string& value);
  void set_user_ids(int index, std::string&& value);
  void set_user_ids(int index, const char* value);
  void set_user_ids(int index, const char* value, size_t size);
  std::string* add_user_ids();
  void add_user_ids(const std::string& value);
  void add_user_ids(std::string&& value);
  void add_user_ids(const char* value);
  void add_user_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& user_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_user_ids();
  private:
  const std::string& _internal_user_ids(int index) const;
  std::string* _internal_add_user_ids();
  public:

  // string group_id = 1;
  void clear_group_id();
  const std::string& group_id() const;
  void set_group_id(const std::string& value);
  void set_group_id(std::string&& value);
  void set_group_id(const char* value);
  void set_group_id(const char* value, size_t size);
  std::string* mutable_group_id();
  std::string* release_group_id();
  void set_allocated_group_id(std::string* group_id);
  private:
  const std::string& _internal_group_id() const;
  void _internal_set_group_id(const std::string& value);
  std::string* _internal_mutable_group_id();
  public:

  // @@protoc_insertion_point(class_scope:nakama.api.BanGroupUsersRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> user_ids_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr group_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto;
};
// -------------------------------------------------------------------

class BlockFriendsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nakama.api.BlockFriendsRequest) */ {
 public:
  inline BlockFriendsRequest() : BlockFriendsRequest(nullptr) {}
  virtual ~BlockFriendsRequest();

  BlockFriendsRequest(const BlockFriendsRequest& from);
  BlockFriendsRequest(BlockFriendsRequest&& from) noexcept
    : BlockFriendsRequest() {
    *this = ::std::move(from);
  }

  inline BlockFriendsRequest& operator=(const BlockFriendsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlockFriendsRequest& operator=(BlockFriendsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BlockFriendsRequest& default_instance();

  static inline const BlockFriendsRequest* internal_default_instance() {
    return reinterpret_cast<const BlockFriendsRequest*>(
               &_BlockFriendsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(BlockFriendsRequest& a, BlockFriendsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(BlockFriendsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlockFriendsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BlockFriendsRequest* New() const final {
    return CreateMaybeMessage<BlockFriendsRequest>(nullptr);
  }

  BlockFriendsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BlockFriendsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BlockFriendsRequest& from);
  void MergeFrom(const BlockFriendsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlockFriendsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nakama.api.BlockFriendsRequest";
  }
  protected:
  explicit BlockFriendsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto);
    return ::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdsFieldNumber = 1,
    kUsernamesFieldNumber = 2,
  };
  // repeated string ids = 1;
  int ids_size() const;
  private:
  int _internal_ids_size() const;
  public:
  void clear_ids();
  const std::string& ids(int index) const;
  std::string* mutable_ids(int index);
  void set_ids(int index, const std::string& value);
  void set_ids(int index, std::string&& value);
  void set_ids(int index, const char* value);
  void set_ids(int index, const char* value, size_t size);
  std::string* add_ids();
  void add_ids(const std::string& value);
  void add_ids(std::string&& value);
  void add_ids(const char* value);
  void add_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_ids();
  private:
  const std::string& _internal_ids(int index) const;
  std::string* _internal_add_ids();
  public:

  // repeated string usernames = 2;
  int usernames_size() const;
  private:
  int _internal_usernames_size() const;
  public:
  void clear_usernames();
  const std::string& usernames(int index) const;
  std::string* mutable_usernames(int index);
  void set_usernames(int index, const std::string& value);
  void set_usernames(int index, std::string&& value);
  void set_usernames(int index, const char* value);
  void set_usernames(int index, const char* value, size_t size);
  std::string* add_usernames();
  void add_usernames(const std::string& value);
  void add_usernames(std::string&& value);
  void add_usernames(const char* value);
  void add_usernames(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& usernames() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_usernames();
  private:
  const std::string& _internal_usernames(int index) const;
  std::string* _internal_add_usernames();
  public:

  // @@protoc_insertion_point(class_scope:nakama.api.BlockFriendsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> ids_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> usernames_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto;
};
// -------------------------------------------------------------------

class ChannelMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nakama.api.ChannelMessage) */ {
 public:
  inline ChannelMessage() : ChannelMessage(nullptr) {}
  virtual ~ChannelMessage();

  ChannelMessage(const ChannelMessage& from);
  ChannelMessage(ChannelMessage&& from) noexcept
    : ChannelMessage() {
    *this = ::std::move(from);
  }

  inline ChannelMessage& operator=(const ChannelMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChannelMessage& operator=(ChannelMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChannelMessage& default_instance();

  static inline const ChannelMessage* internal_default_instance() {
    return reinterpret_cast<const ChannelMessage*>(
               &_ChannelMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(ChannelMessage& a, ChannelMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ChannelMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChannelMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChannelMessage* New() const final {
    return CreateMaybeMessage<ChannelMessage>(nullptr);
  }

  ChannelMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChannelMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChannelMessage& from);
  void MergeFrom(const ChannelMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChannelMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nakama.api.ChannelMessage";
  }
  protected:
  explicit ChannelMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto);
    return ::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelIdFieldNumber = 1,
    kMessageIdFieldNumber = 2,
    kSenderIdFieldNumber = 4,
    kUsernameFieldNumber = 5,
    kContentFieldNumber = 6,
    kRoomNameFieldNumber = 10,
    kGroupIdFieldNumber = 11,
    kUserIdOneFieldNumber = 12,
    kUserIdTwoFieldNumber = 13,
    kCodeFieldNumber = 3,
    kCreateTimeFieldNumber = 7,
    kUpdateTimeFieldNumber = 8,
    kPersistentFieldNumber = 9,
  };
  // string channel_id = 1;
  void clear_channel_id();
  const std::string& channel_id() const;
  void set_channel_id(const std::string& value);
  void set_channel_id(std::string&& value);
  void set_channel_id(const char* value);
  void set_channel_id(const char* value, size_t size);
  std::string* mutable_channel_id();
  std::string* release_channel_id();
  void set_allocated_channel_id(std::string* channel_id);
  private:
  const std::string& _internal_channel_id() const;
  void _internal_set_channel_id(const std::string& value);
  std::string* _internal_mutable_channel_id();
  public:

  // string message_id = 2;
  void clear_message_id();
  const std::string& message_id() const;
  void set_message_id(const std::string& value);
  void set_message_id(std::string&& value);
  void set_message_id(const char* value);
  void set_message_id(const char* value, size_t size);
  std::string* mutable_message_id();
  std::string* release_message_id();
  void set_allocated_message_id(std::string* message_id);
  private:
  const std::string& _internal_message_id() const;
  void _internal_set_message_id(const std::string& value);
  std::string* _internal_mutable_message_id();
  public:

  // string sender_id = 4;
  void clear_sender_id();
  const std::string& sender_id() const;
  void set_sender_id(const std::string& value);
  void set_sender_id(std::string&& value);
  void set_sender_id(const char* value);
  void set_sender_id(const char* value, size_t size);
  std::string* mutable_sender_id();
  std::string* release_sender_id();
  void set_allocated_sender_id(std::string* sender_id);
  private:
  const std::string& _internal_sender_id() const;
  void _internal_set_sender_id(const std::string& value);
  std::string* _internal_mutable_sender_id();
  public:

  // string username = 5;
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // string content = 6;
  void clear_content();
  const std::string& content() const;
  void set_content(const std::string& value);
  void set_content(std::string&& value);
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  std::string* mutable_content();
  std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // string room_name = 10;
  void clear_room_name();
  const std::string& room_name() const;
  void set_room_name(const std::string& value);
  void set_room_name(std::string&& value);
  void set_room_name(const char* value);
  void set_room_name(const char* value, size_t size);
  std::string* mutable_room_name();
  std::string* release_room_name();
  void set_allocated_room_name(std::string* room_name);
  private:
  const std::string& _internal_room_name() const;
  void _internal_set_room_name(const std::string& value);
  std::string* _internal_mutable_room_name();
  public:

  // string group_id = 11;
  void clear_group_id();
  const std::string& group_id() const;
  void set_group_id(const std::string& value);
  void set_group_id(std::string&& value);
  void set_group_id(const char* value);
  void set_group_id(const char* value, size_t size);
  std::string* mutable_group_id();
  std::string* release_group_id();
  void set_allocated_group_id(std::string* group_id);
  private:
  const std::string& _internal_group_id() const;
  void _internal_set_group_id(const std::string& value);
  std::string* _internal_mutable_group_id();
  public:

  // string user_id_one = 12;
  void clear_user_id_one();
  const std::string& user_id_one() const;
  void set_user_id_one(const std::string& value);
  void set_user_id_one(std::string&& value);
  void set_user_id_one(const char* value);
  void set_user_id_one(const char* value, size_t size);
  std::string* mutable_user_id_one();
  std::string* release_user_id_one();
  void set_allocated_user_id_one(std::string* user_id_one);
  private:
  const std::string& _internal_user_id_one() const;
  void _internal_set_user_id_one(const std::string& value);
  std::string* _internal_mutable_user_id_one();
  public:

  // string user_id_two = 13;
  void clear_user_id_two();
  const std::string& user_id_two() const;
  void set_user_id_two(const std::string& value);
  void set_user_id_two(std::string&& value);
  void set_user_id_two(const char* value);
  void set_user_id_two(const char* value, size_t size);
  std::string* mutable_user_id_two();
  std::string* release_user_id_two();
  void set_allocated_user_id_two(std::string* user_id_two);
  private:
  const std::string& _internal_user_id_two() const;
  void _internal_set_user_id_two(const std::string& value);
  std::string* _internal_mutable_user_id_two();
  public:

  // .google.protobuf.Int32Value code = 3;
  bool has_code() const;
  private:
  bool _internal_has_code() const;
  public:
  void clear_code();
  const PROTOBUF_NAMESPACE_ID::Int32Value& code() const;
  PROTOBUF_NAMESPACE_ID::Int32Value* release_code();
  PROTOBUF_NAMESPACE_ID::Int32Value* mutable_code();
  void set_allocated_code(PROTOBUF_NAMESPACE_ID::Int32Value* code);
  private:
  const PROTOBUF_NAMESPACE_ID::Int32Value& _internal_code() const;
  PROTOBUF_NAMESPACE_ID::Int32Value* _internal_mutable_code();
  public:
  void unsafe_arena_set_allocated_code(
      PROTOBUF_NAMESPACE_ID::Int32Value* code);
  PROTOBUF_NAMESPACE_ID::Int32Value* unsafe_arena_release_code();

  // .google.protobuf.Timestamp create_time = 7;
  bool has_create_time() const;
  private:
  bool _internal_has_create_time() const;
  public:
  void clear_create_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& create_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_create_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_create_time();
  void set_allocated_create_time(PROTOBUF_NAMESPACE_ID::Timestamp* create_time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_create_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_create_time();
  public:
  void unsafe_arena_set_allocated_create_time(
      PROTOBUF_NAMESPACE_ID::Timestamp* create_time);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_create_time();

  // .google.protobuf.Timestamp update_time = 8;
  bool has_update_time() const;
  private:
  bool _internal_has_update_time() const;
  public:
  void clear_update_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& update_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_update_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_update_time();
  void set_allocated_update_time(PROTOBUF_NAMESPACE_ID::Timestamp* update_time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_update_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_update_time();
  public:
  void unsafe_arena_set_allocated_update_time(
      PROTOBUF_NAMESPACE_ID::Timestamp* update_time);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_update_time();

  // .google.protobuf.BoolValue persistent = 9;
  bool has_persistent() const;
  private:
  bool _internal_has_persistent() const;
  public:
  void clear_persistent();
  const PROTOBUF_NAMESPACE_ID::BoolValue& persistent() const;
  PROTOBUF_NAMESPACE_ID::BoolValue* release_persistent();
  PROTOBUF_NAMESPACE_ID::BoolValue* mutable_persistent();
  void set_allocated_persistent(PROTOBUF_NAMESPACE_ID::BoolValue* persistent);
  private:
  const PROTOBUF_NAMESPACE_ID::BoolValue& _internal_persistent() const;
  PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_persistent();
  public:
  void unsafe_arena_set_allocated_persistent(
      PROTOBUF_NAMESPACE_ID::BoolValue* persistent);
  PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_persistent();

  // @@protoc_insertion_point(class_scope:nakama.api.ChannelMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr channel_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sender_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr room_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr group_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_one_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_two_;
  PROTOBUF_NAMESPACE_ID::Int32Value* code_;
  PROTOBUF_NAMESPACE_ID::Timestamp* create_time_;
  PROTOBUF_NAMESPACE_ID::Timestamp* update_time_;
  PROTOBUF_NAMESPACE_ID::BoolValue* persistent_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto;
};
// -------------------------------------------------------------------

class ChannelMessageList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nakama.api.ChannelMessageList) */ {
 public:
  inline ChannelMessageList() : ChannelMessageList(nullptr) {}
  virtual ~ChannelMessageList();

  ChannelMessageList(const ChannelMessageList& from);
  ChannelMessageList(ChannelMessageList&& from) noexcept
    : ChannelMessageList() {
    *this = ::std::move(from);
  }

  inline ChannelMessageList& operator=(const ChannelMessageList& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChannelMessageList& operator=(ChannelMessageList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChannelMessageList& default_instance();

  static inline const ChannelMessageList* internal_default_instance() {
    return reinterpret_cast<const ChannelMessageList*>(
               &_ChannelMessageList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(ChannelMessageList& a, ChannelMessageList& b) {
    a.Swap(&b);
  }
  inline void Swap(ChannelMessageList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChannelMessageList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChannelMessageList* New() const final {
    return CreateMaybeMessage<ChannelMessageList>(nullptr);
  }

  ChannelMessageList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChannelMessageList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChannelMessageList& from);
  void MergeFrom(const ChannelMessageList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChannelMessageList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nakama.api.ChannelMessageList";
  }
  protected:
  explicit ChannelMessageList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto);
    return ::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessagesFieldNumber = 1,
    kNextCursorFieldNumber = 2,
    kPrevCursorFieldNumber = 3,
    kCacheableCursorFieldNumber = 4,
  };
  // repeated .nakama.api.ChannelMessage messages = 1;
  int messages_size() const;
  private:
  int _internal_messages_size() const;
  public:
  void clear_messages();
  ::nakama::api::ChannelMessage* mutable_messages(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nakama::api::ChannelMessage >*
      mutable_messages();
  private:
  const ::nakama::api::ChannelMessage& _internal_messages(int index) const;
  ::nakama::api::ChannelMessage* _internal_add_messages();
  public:
  const ::nakama::api::ChannelMessage& messages(int index) const;
  ::nakama::api::ChannelMessage* add_messages();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nakama::api::ChannelMessage >&
      messages() const;

  // string next_cursor = 2;
  void clear_next_cursor();
  const std::string& next_cursor() const;
  void set_next_cursor(const std::string& value);
  void set_next_cursor(std::string&& value);
  void set_next_cursor(const char* value);
  void set_next_cursor(const char* value, size_t size);
  std::string* mutable_next_cursor();
  std::string* release_next_cursor();
  void set_allocated_next_cursor(std::string* next_cursor);
  private:
  const std::string& _internal_next_cursor() const;
  void _internal_set_next_cursor(const std::string& value);
  std::string* _internal_mutable_next_cursor();
  public:

  // string prev_cursor = 3;
  void clear_prev_cursor();
  const std::string& prev_cursor() const;
  void set_prev_cursor(const std::string& value);
  void set_prev_cursor(std::string&& value);
  void set_prev_cursor(const char* value);
  void set_prev_cursor(const char* value, size_t size);
  std::string* mutable_prev_cursor();
  std::string* release_prev_cursor();
  void set_allocated_prev_cursor(std::string* prev_cursor);
  private:
  const std::string& _internal_prev_cursor() const;
  void _internal_set_prev_cursor(const std::string& value);
  std::string* _internal_mutable_prev_cursor();
  public:

  // string cacheable_cursor = 4;
  void clear_cacheable_cursor();
  const std::string& cacheable_cursor() const;
  void set_cacheable_cursor(const std::string& value);
  void set_cacheable_cursor(std::string&& value);
  void set_cacheable_cursor(const char* value);
  void set_cacheable_cursor(const char* value, size_t size);
  std::string* mutable_cacheable_cursor();
  std::string* release_cacheable_cursor();
  void set_allocated_cacheable_cursor(std::string* cacheable_cursor);
  private:
  const std::string& _internal_cacheable_cursor() const;
  void _internal_set_cacheable_cursor(const std::string& value);
  std::string* _internal_mutable_cacheable_cursor();
  public:

  // @@protoc_insertion_point(class_scope:nakama.api.ChannelMessageList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nakama::api::ChannelMessage > messages_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_cursor_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prev_cursor_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cacheable_cursor_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto;
};
// -------------------------------------------------------------------

class CreateGroupRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nakama.api.CreateGroupRequest) */ {
 public:
  inline CreateGroupRequest() : CreateGroupRequest(nullptr) {}
  virtual ~CreateGroupRequest();

  CreateGroupRequest(const CreateGroupRequest& from);
  CreateGroupRequest(CreateGroupRequest&& from) noexcept
    : CreateGroupRequest() {
    *this = ::std::move(from);
  }

  inline CreateGroupRequest& operator=(const CreateGroupRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateGroupRequest& operator=(CreateGroupRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateGroupRequest& default_instance();

  static inline const CreateGroupRequest* internal_default_instance() {
    return reinterpret_cast<const CreateGroupRequest*>(
               &_CreateGroupRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(CreateGroupRequest& a, CreateGroupRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateGroupRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateGroupRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateGroupRequest* New() const final {
    return CreateMaybeMessage<CreateGroupRequest>(nullptr);
  }

  CreateGroupRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateGroupRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateGroupRequest& from);
  void MergeFrom(const CreateGroupRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateGroupRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nakama.api.CreateGroupRequest";
  }
  protected:
  explicit CreateGroupRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto);
    return ::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kDescriptionFieldNumber = 2,
    kLangTagFieldNumber = 3,
    kAvatarUrlFieldNumber = 4,
    kOpenFieldNumber = 5,
    kMaxCountFieldNumber = 6,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string description = 2;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // string lang_tag = 3;
  void clear_lang_tag();
  const std::string& lang_tag() const;
  void set_lang_tag(const std::string& value);
  void set_lang_tag(std::string&& value);
  void set_lang_tag(const char* value);
  void set_lang_tag(const char* value, size_t size);
  std::string* mutable_lang_tag();
  std::string* release_lang_tag();
  void set_allocated_lang_tag(std::string* lang_tag);
  private:
  const std::string& _internal_lang_tag() const;
  void _internal_set_lang_tag(const std::string& value);
  std::string* _internal_mutable_lang_tag();
  public:

  // string avatar_url = 4;
  void clear_avatar_url();
  const std::string& avatar_url() const;
  void set_avatar_url(const std::string& value);
  void set_avatar_url(std::string&& value);
  void set_avatar_url(const char* value);
  void set_avatar_url(const char* value, size_t size);
  std::string* mutable_avatar_url();
  std::string* release_avatar_url();
  void set_allocated_avatar_url(std::string* avatar_url);
  private:
  const std::string& _internal_avatar_url() const;
  void _internal_set_avatar_url(const std::string& value);
  std::string* _internal_mutable_avatar_url();
  public:

  // bool open = 5;
  void clear_open();
  bool open() const;
  void set_open(bool value);
  private:
  bool _internal_open() const;
  void _internal_set_open(bool value);
  public:

  // int32 max_count = 6;
  void clear_max_count();
  ::PROTOBUF_NAMESPACE_ID::int32 max_count() const;
  void set_max_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_max_count() const;
  void _internal_set_max_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:nakama.api.CreateGroupRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lang_tag_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr avatar_url_;
  bool open_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto;
};
// -------------------------------------------------------------------

class DeleteFriendsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nakama.api.DeleteFriendsRequest) */ {
 public:
  inline DeleteFriendsRequest() : DeleteFriendsRequest(nullptr) {}
  virtual ~DeleteFriendsRequest();

  DeleteFriendsRequest(const DeleteFriendsRequest& from);
  DeleteFriendsRequest(DeleteFriendsRequest&& from) noexcept
    : DeleteFriendsRequest() {
    *this = ::std::move(from);
  }

  inline DeleteFriendsRequest& operator=(const DeleteFriendsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteFriendsRequest& operator=(DeleteFriendsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteFriendsRequest& default_instance();

  static inline const DeleteFriendsRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteFriendsRequest*>(
               &_DeleteFriendsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(DeleteFriendsRequest& a, DeleteFriendsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteFriendsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteFriendsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteFriendsRequest* New() const final {
    return CreateMaybeMessage<DeleteFriendsRequest>(nullptr);
  }

  DeleteFriendsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteFriendsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteFriendsRequest& from);
  void MergeFrom(const DeleteFriendsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteFriendsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nakama.api.DeleteFriendsRequest";
  }
  protected:
  explicit DeleteFriendsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto);
    return ::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdsFieldNumber = 1,
    kUsernamesFieldNumber = 2,
  };
  // repeated string ids = 1;
  int ids_size() const;
  private:
  int _internal_ids_size() const;
  public:
  void clear_ids();
  const std::string& ids(int index) const;
  std::string* mutable_ids(int index);
  void set_ids(int index, const std::string& value);
  void set_ids(int index, std::string&& value);
  void set_ids(int index, const char* value);
  void set_ids(int index, const char* value, size_t size);
  std::string* add_ids();
  void add_ids(const std::string& value);
  void add_ids(std::string&& value);
  void add_ids(const char* value);
  void add_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_ids();
  private:
  const std::string& _internal_ids(int index) const;
  std::string* _internal_add_ids();
  public:

  // repeated string usernames = 2;
  int usernames_size() const;
  private:
  int _internal_usernames_size() const;
  public:
  void clear_usernames();
  const std::string& usernames(int index) const;
  std::string* mutable_usernames(int index);
  void set_usernames(int index, const std::string& value);
  void set_usernames(int index, std::string&& value);
  void set_usernames(int index, const char* value);
  void set_usernames(int index, const char* value, size_t size);
  std::string* add_usernames();
  void add_usernames(const std::string& value);
  void add_usernames(std::string&& value);
  void add_usernames(const char* value);
  void add_usernames(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& usernames() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_usernames();
  private:
  const std::string& _internal_usernames(int index) const;
  std::string* _internal_add_usernames();
  public:

  // @@protoc_insertion_point(class_scope:nakama.api.DeleteFriendsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> ids_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> usernames_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto;
};
// -------------------------------------------------------------------

class DeleteGroupRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nakama.api.DeleteGroupRequest) */ {
 public:
  inline DeleteGroupRequest() : DeleteGroupRequest(nullptr) {}
  virtual ~DeleteGroupRequest();

  DeleteGroupRequest(const DeleteGroupRequest& from);
  DeleteGroupRequest(DeleteGroupRequest&& from) noexcept
    : DeleteGroupRequest() {
    *this = ::std::move(from);
  }

  inline DeleteGroupRequest& operator=(const DeleteGroupRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteGroupRequest& operator=(DeleteGroupRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteGroupRequest& default_instance();

  static inline const DeleteGroupRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteGroupRequest*>(
               &_DeleteGroupRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(DeleteGroupRequest& a, DeleteGroupRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteGroupRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteGroupRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteGroupRequest* New() const final {
    return CreateMaybeMessage<DeleteGroupRequest>(nullptr);
  }

  DeleteGroupRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteGroupRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteGroupRequest& from);
  void MergeFrom(const DeleteGroupRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteGroupRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nakama.api.DeleteGroupRequest";
  }
  protected:
  explicit DeleteGroupRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto);
    return ::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupIdFieldNumber = 1,
  };
  // string group_id = 1;
  void clear_group_id();
  const std::string& group_id() const;
  void set_group_id(const std::string& value);
  void set_group_id(std::string&& value);
  void set_group_id(const char* value);
  void set_group_id(const char* value, size_t size);
  std::string* mutable_group_id();
  std::string* release_group_id();
  void set_allocated_group_id(std::string* group_id);
  private:
  const std::string& _internal_group_id() const;
  void _internal_set_group_id(const std::string& value);
  std::string* _internal_mutable_group_id();
  public:

  // @@protoc_insertion_point(class_scope:nakama.api.DeleteGroupRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr group_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto;
};
// -------------------------------------------------------------------

class DeleteLeaderboardRecordRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nakama.api.DeleteLeaderboardRecordRequest) */ {
 public:
  inline DeleteLeaderboardRecordRequest() : DeleteLeaderboardRecordRequest(nullptr) {}
  virtual ~DeleteLeaderboardRecordRequest();

  DeleteLeaderboardRecordRequest(const DeleteLeaderboardRecordRequest& from);
  DeleteLeaderboardRecordRequest(DeleteLeaderboardRecordRequest&& from) noexcept
    : DeleteLeaderboardRecordRequest() {
    *this = ::std::move(from);
  }

  inline DeleteLeaderboardRecordRequest& operator=(const DeleteLeaderboardRecordRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteLeaderboardRecordRequest& operator=(DeleteLeaderboardRecordRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteLeaderboardRecordRequest& default_instance();

  static inline const DeleteLeaderboardRecordRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteLeaderboardRecordRequest*>(
               &_DeleteLeaderboardRecordRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(DeleteLeaderboardRecordRequest& a, DeleteLeaderboardRecordRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteLeaderboardRecordRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteLeaderboardRecordRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteLeaderboardRecordRequest* New() const final {
    return CreateMaybeMessage<DeleteLeaderboardRecordRequest>(nullptr);
  }

  DeleteLeaderboardRecordRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteLeaderboardRecordRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteLeaderboardRecordRequest& from);
  void MergeFrom(const DeleteLeaderboardRecordRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteLeaderboardRecordRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nakama.api.DeleteLeaderboardRecordRequest";
  }
  protected:
  explicit DeleteLeaderboardRecordRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto);
    return ::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLeaderboardIdFieldNumber = 1,
  };
  // string leaderboard_id = 1;
  void clear_leaderboard_id();
  const std::string& leaderboard_id() const;
  void set_leaderboard_id(const std::string& value);
  void set_leaderboard_id(std::string&& value);
  void set_leaderboard_id(const char* value);
  void set_leaderboard_id(const char* value, size_t size);
  std::string* mutable_leaderboard_id();
  std::string* release_leaderboard_id();
  void set_allocated_leaderboard_id(std::string* leaderboard_id);
  private:
  const std::string& _internal_leaderboard_id() const;
  void _internal_set_leaderboard_id(const std::string& value);
  std::string* _internal_mutable_leaderboard_id();
  public:

  // @@protoc_insertion_point(class_scope:nakama.api.DeleteLeaderboardRecordRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr leaderboard_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto;
};
// -------------------------------------------------------------------

class DeleteNotificationsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nakama.api.DeleteNotificationsRequest) */ {
 public:
  inline DeleteNotificationsRequest() : DeleteNotificationsRequest(nullptr) {}
  virtual ~DeleteNotificationsRequest();

  DeleteNotificationsRequest(const DeleteNotificationsRequest& from);
  DeleteNotificationsRequest(DeleteNotificationsRequest&& from) noexcept
    : DeleteNotificationsRequest() {
    *this = ::std::move(from);
  }

  inline DeleteNotificationsRequest& operator=(const DeleteNotificationsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteNotificationsRequest& operator=(DeleteNotificationsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteNotificationsRequest& default_instance();

  static inline const DeleteNotificationsRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteNotificationsRequest*>(
               &_DeleteNotificationsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(DeleteNotificationsRequest& a, DeleteNotificationsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteNotificationsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteNotificationsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteNotificationsRequest* New() const final {
    return CreateMaybeMessage<DeleteNotificationsRequest>(nullptr);
  }

  DeleteNotificationsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteNotificationsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteNotificationsRequest& from);
  void MergeFrom(const DeleteNotificationsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteNotificationsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nakama.api.DeleteNotificationsRequest";
  }
  protected:
  explicit DeleteNotificationsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto);
    return ::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdsFieldNumber = 1,
  };
  // repeated string ids = 1;
  int ids_size() const;
  private:
  int _internal_ids_size() const;
  public:
  void clear_ids();
  const std::string& ids(int index) const;
  std::string* mutable_ids(int index);
  void set_ids(int index, const std::string& value);
  void set_ids(int index, std::string&& value);
  void set_ids(int index, const char* value);
  void set_ids(int index, const char* value, size_t size);
  std::string* add_ids();
  void add_ids(const std::string& value);
  void add_ids(std::string&& value);
  void add_ids(const char* value);
  void add_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_ids();
  private:
  const std::string& _internal_ids(int index) const;
  std::string* _internal_add_ids();
  public:

  // @@protoc_insertion_point(class_scope:nakama.api.DeleteNotificationsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> ids_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto;
};
// -------------------------------------------------------------------

class DeleteStorageObjectId PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nakama.api.DeleteStorageObjectId) */ {
 public:
  inline DeleteStorageObjectId() : DeleteStorageObjectId(nullptr) {}
  virtual ~DeleteStorageObjectId();

  DeleteStorageObjectId(const DeleteStorageObjectId& from);
  DeleteStorageObjectId(DeleteStorageObjectId&& from) noexcept
    : DeleteStorageObjectId() {
    *this = ::std::move(from);
  }

  inline DeleteStorageObjectId& operator=(const DeleteStorageObjectId& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteStorageObjectId& operator=(DeleteStorageObjectId&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteStorageObjectId& default_instance();

  static inline const DeleteStorageObjectId* internal_default_instance() {
    return reinterpret_cast<const DeleteStorageObjectId*>(
               &_DeleteStorageObjectId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(DeleteStorageObjectId& a, DeleteStorageObjectId& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteStorageObjectId* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteStorageObjectId* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteStorageObjectId* New() const final {
    return CreateMaybeMessage<DeleteStorageObjectId>(nullptr);
  }

  DeleteStorageObjectId* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteStorageObjectId>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteStorageObjectId& from);
  void MergeFrom(const DeleteStorageObjectId& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteStorageObjectId* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nakama.api.DeleteStorageObjectId";
  }
  protected:
  explicit DeleteStorageObjectId(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto);
    return ::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCollectionFieldNumber = 1,
    kKeyFieldNumber = 2,
    kVersionFieldNumber = 3,
  };
  // string collection = 1;
  void clear_collection();
  const std::string& collection() const;
  void set_collection(const std::string& value);
  void set_collection(std::string&& value);
  void set_collection(const char* value);
  void set_collection(const char* value, size_t size);
  std::string* mutable_collection();
  std::string* release_collection();
  void set_allocated_collection(std::string* collection);
  private:
  const std::string& _internal_collection() const;
  void _internal_set_collection(const std::string& value);
  std::string* _internal_mutable_collection();
  public:

  // string key = 2;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // string version = 3;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // @@protoc_insertion_point(class_scope:nakama.api.DeleteStorageObjectId)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr collection_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto;
};
// -------------------------------------------------------------------

class DeleteStorageObjectsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nakama.api.DeleteStorageObjectsRequest) */ {
 public:
  inline DeleteStorageObjectsRequest() : DeleteStorageObjectsRequest(nullptr) {}
  virtual ~DeleteStorageObjectsRequest();

  DeleteStorageObjectsRequest(const DeleteStorageObjectsRequest& from);
  DeleteStorageObjectsRequest(DeleteStorageObjectsRequest&& from) noexcept
    : DeleteStorageObjectsRequest() {
    *this = ::std::move(from);
  }

  inline DeleteStorageObjectsRequest& operator=(const DeleteStorageObjectsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteStorageObjectsRequest& operator=(DeleteStorageObjectsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteStorageObjectsRequest& default_instance();

  static inline const DeleteStorageObjectsRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteStorageObjectsRequest*>(
               &_DeleteStorageObjectsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(DeleteStorageObjectsRequest& a, DeleteStorageObjectsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteStorageObjectsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteStorageObjectsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteStorageObjectsRequest* New() const final {
    return CreateMaybeMessage<DeleteStorageObjectsRequest>(nullptr);
  }

  DeleteStorageObjectsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteStorageObjectsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteStorageObjectsRequest& from);
  void MergeFrom(const DeleteStorageObjectsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteStorageObjectsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nakama.api.DeleteStorageObjectsRequest";
  }
  protected:
  explicit DeleteStorageObjectsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto);
    return ::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectIdsFieldNumber = 1,
  };
  // repeated .nakama.api.DeleteStorageObjectId object_ids = 1;
  int object_ids_size() const;
  private:
  int _internal_object_ids_size() const;
  public:
  void clear_object_ids();
  ::nakama::api::DeleteStorageObjectId* mutable_object_ids(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nakama::api::DeleteStorageObjectId >*
      mutable_object_ids();
  private:
  const ::nakama::api::DeleteStorageObjectId& _internal_object_ids(int index) const;
  ::nakama::api::DeleteStorageObjectId* _internal_add_object_ids();
  public:
  const ::nakama::api::DeleteStorageObjectId& object_ids(int index) const;
  ::nakama::api::DeleteStorageObjectId* add_object_ids();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nakama::api::DeleteStorageObjectId >&
      object_ids() const;

  // @@protoc_insertion_point(class_scope:nakama.api.DeleteStorageObjectsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nakama::api::DeleteStorageObjectId > object_ids_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto;
};
// -------------------------------------------------------------------

class Event_PropertiesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Event_PropertiesEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Event_PropertiesEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  Event_PropertiesEntry_DoNotUse();
  explicit Event_PropertiesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Event_PropertiesEntry_DoNotUse& other);
  static const Event_PropertiesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Event_PropertiesEntry_DoNotUse*>(&_Event_PropertiesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "nakama.api.Event.PropertiesEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "nakama.api.Event.PropertiesEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto);
    return ::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.file_level_metadata[46];
  }

  public:
};

// -------------------------------------------------------------------

class Event PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nakama.api.Event) */ {
 public:
  inline Event() : Event(nullptr) {}
  virtual ~Event();

  Event(const Event& from);
  Event(Event&& from) noexcept
    : Event() {
    *this = ::std::move(from);
  }

  inline Event& operator=(const Event& from) {
    CopyFrom(from);
    return *this;
  }
  inline Event& operator=(Event&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Event& default_instance();

  static inline const Event* internal_default_instance() {
    return reinterpret_cast<const Event*>(
               &_Event_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(Event& a, Event& b) {
    a.Swap(&b);
  }
  inline void Swap(Event* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Event* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Event* New() const final {
    return CreateMaybeMessage<Event>(nullptr);
  }

  Event* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Event>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Event& from);
  void MergeFrom(const Event& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Event* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nakama.api.Event";
  }
  protected:
  explicit Event(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto);
    return ::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kPropertiesFieldNumber = 2,
    kNameFieldNumber = 1,
    kTimestampFieldNumber = 3,
    kExternalFieldNumber = 4,
  };
  // map<string, string> properties = 2;
  int properties_size() const;
  private:
  int _internal_properties_size() const;
  public:
  void clear_properties();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_properties() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_properties();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      properties() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_properties();

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .google.protobuf.Timestamp timestamp = 3;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  const PROTOBUF_NAMESPACE_ID::Timestamp& timestamp() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_timestamp();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_timestamp();
  void set_allocated_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_timestamp() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_timestamp();
  public:
  void unsafe_arena_set_allocated_timestamp(
      PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_timestamp();

  // bool external = 4;
  void clear_external();
  bool external() const;
  void set_external(bool value);
  private:
  bool _internal_external() const;
  void _internal_set_external(bool value);
  public:

  // @@protoc_insertion_point(class_scope:nakama.api.Event)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Event_PropertiesEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> properties_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  PROTOBUF_NAMESPACE_ID::Timestamp* timestamp_;
  bool external_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto;
};
// -------------------------------------------------------------------

class Friend PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nakama.api.Friend) */ {
 public:
  inline Friend() : Friend(nullptr) {}
  virtual ~Friend();

  Friend(const Friend& from);
  Friend(Friend&& from) noexcept
    : Friend() {
    *this = ::std::move(from);
  }

  inline Friend& operator=(const Friend& from) {
    CopyFrom(from);
    return *this;
  }
  inline Friend& operator=(Friend&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Friend& default_instance();

  static inline const Friend* internal_default_instance() {
    return reinterpret_cast<const Friend*>(
               &_Friend_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(Friend& a, Friend& b) {
    a.Swap(&b);
  }
  inline void Swap(Friend* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Friend* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Friend* New() const final {
    return CreateMaybeMessage<Friend>(nullptr);
  }

  Friend* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Friend>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Friend& from);
  void MergeFrom(const Friend& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Friend* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nakama.api.Friend";
  }
  protected:
  explicit Friend(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto);
    return ::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Friend_State State;
  static constexpr State FRIEND =
    Friend_State_FRIEND;
  static constexpr State INVITE_SENT =
    Friend_State_INVITE_SENT;
  static constexpr State INVITE_RECEIVED =
    Friend_State_INVITE_RECEIVED;
  static constexpr State BLOCKED =
    Friend_State_BLOCKED;
  static inline bool State_IsValid(int value) {
    return Friend_State_IsValid(value);
  }
  static constexpr State State_MIN =
    Friend_State_State_MIN;
  static constexpr State State_MAX =
    Friend_State_State_MAX;
  static constexpr int State_ARRAYSIZE =
    Friend_State_State_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  State_descriptor() {
    return Friend_State_descriptor();
  }
  template<typename T>
  static inline const std::string& State_Name(T enum_t_value) {
    static_assert(::std::is_same<T, State>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function State_Name.");
    return Friend_State_Name(enum_t_value);
  }
  static inline bool State_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      State* value) {
    return Friend_State_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kUserFieldNumber = 1,
    kStateFieldNumber = 2,
    kUpdateTimeFieldNumber = 3,
  };
  // .nakama.api.User user = 1;
  bool has_user() const;
  private:
  bool _internal_has_user() const;
  public:
  void clear_user();
  const ::nakama::api::User& user() const;
  ::nakama::api::User* release_user();
  ::nakama::api::User* mutable_user();
  void set_allocated_user(::nakama::api::User* user);
  private:
  const ::nakama::api::User& _internal_user() const;
  ::nakama::api::User* _internal_mutable_user();
  public:
  void unsafe_arena_set_allocated_user(
      ::nakama::api::User* user);
  ::nakama::api::User* unsafe_arena_release_user();

  // .google.protobuf.Int32Value state = 2;
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  const PROTOBUF_NAMESPACE_ID::Int32Value& state() const;
  PROTOBUF_NAMESPACE_ID::Int32Value* release_state();
  PROTOBUF_NAMESPACE_ID::Int32Value* mutable_state();
  void set_allocated_state(PROTOBUF_NAMESPACE_ID::Int32Value* state);
  private:
  const PROTOBUF_NAMESPACE_ID::Int32Value& _internal_state() const;
  PROTOBUF_NAMESPACE_ID::Int32Value* _internal_mutable_state();
  public:
  void unsafe_arena_set_allocated_state(
      PROTOBUF_NAMESPACE_ID::Int32Value* state);
  PROTOBUF_NAMESPACE_ID::Int32Value* unsafe_arena_release_state();

  // .google.protobuf.Timestamp update_time = 3;
  bool has_update_time() const;
  private:
  bool _internal_has_update_time() const;
  public:
  void clear_update_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& update_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_update_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_update_time();
  void set_allocated_update_time(PROTOBUF_NAMESPACE_ID::Timestamp* update_time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_update_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_update_time();
  public:
  void unsafe_arena_set_allocated_update_time(
      PROTOBUF_NAMESPACE_ID::Timestamp* update_time);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_update_time();

  // @@protoc_insertion_point(class_scope:nakama.api.Friend)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::nakama::api::User* user_;
  PROTOBUF_NAMESPACE_ID::Int32Value* state_;
  PROTOBUF_NAMESPACE_ID::Timestamp* update_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto;
};
// -------------------------------------------------------------------

class FriendList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nakama.api.FriendList) */ {
 public:
  inline FriendList() : FriendList(nullptr) {}
  virtual ~FriendList();

  FriendList(const FriendList& from);
  FriendList(FriendList&& from) noexcept
    : FriendList() {
    *this = ::std::move(from);
  }

  inline FriendList& operator=(const FriendList& from) {
    CopyFrom(from);
    return *this;
  }
  inline FriendList& operator=(FriendList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FriendList& default_instance();

  static inline const FriendList* internal_default_instance() {
    return reinterpret_cast<const FriendList*>(
               &_FriendList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(FriendList& a, FriendList& b) {
    a.Swap(&b);
  }
  inline void Swap(FriendList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FriendList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FriendList* New() const final {
    return CreateMaybeMessage<FriendList>(nullptr);
  }

  FriendList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FriendList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FriendList& from);
  void MergeFrom(const FriendList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FriendList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nakama.api.FriendList";
  }
  protected:
  explicit FriendList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto);
    return ::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFriendsFieldNumber = 1,
    kCursorFieldNumber = 2,
  };
  // repeated .nakama.api.Friend friends = 1;
  int friends_size() const;
  private:
  int _internal_friends_size() const;
  public:
  void clear_friends();
  ::nakama::api::Friend* mutable_friends(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nakama::api::Friend >*
      mutable_friends();
  private:
  const ::nakama::api::Friend& _internal_friends(int index) const;
  ::nakama::api::Friend* _internal_add_friends();
  public:
  const ::nakama::api::Friend& friends(int index) const;
  ::nakama::api::Friend* add_friends();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nakama::api::Friend >&
      friends() const;

  // string cursor = 2;
  void clear_cursor();
  const std::string& cursor() const;
  void set_cursor(const std::string& value);
  void set_cursor(std::string&& value);
  void set_cursor(const char* value);
  void set_cursor(const char* value, size_t size);
  std::string* mutable_cursor();
  std::string* release_cursor();
  void set_allocated_cursor(std::string* cursor);
  private:
  const std::string& _internal_cursor() const;
  void _internal_set_cursor(const std::string& value);
  std::string* _internal_mutable_cursor();
  public:

  // @@protoc_insertion_point(class_scope:nakama.api.FriendList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nakama::api::Friend > friends_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cursor_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto;
};
// -------------------------------------------------------------------

class GetUsersRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nakama.api.GetUsersRequest) */ {
 public:
  inline GetUsersRequest() : GetUsersRequest(nullptr) {}
  virtual ~GetUsersRequest();

  GetUsersRequest(const GetUsersRequest& from);
  GetUsersRequest(GetUsersRequest&& from) noexcept
    : GetUsersRequest() {
    *this = ::std::move(from);
  }

  inline GetUsersRequest& operator=(const GetUsersRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetUsersRequest& operator=(GetUsersRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetUsersRequest& default_instance();

  static inline const GetUsersRequest* internal_default_instance() {
    return reinterpret_cast<const GetUsersRequest*>(
               &_GetUsersRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(GetUsersRequest& a, GetUsersRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetUsersRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetUsersRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetUsersRequest* New() const final {
    return CreateMaybeMessage<GetUsersRequest>(nullptr);
  }

  GetUsersRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetUsersRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetUsersRequest& from);
  void MergeFrom(const GetUsersRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetUsersRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nakama.api.GetUsersRequest";
  }
  protected:
  explicit GetUsersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto);
    return ::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdsFieldNumber = 1,
    kUsernamesFieldNumber = 2,
    kFacebookIdsFieldNumber = 3,
  };
  // repeated string ids = 1;
  int ids_size() const;
  private:
  int _internal_ids_size() const;
  public:
  void clear_ids();
  const std::string& ids(int index) const;
  std::string* mutable_ids(int index);
  void set_ids(int index, const std::string& value);
  void set_ids(int index, std::string&& value);
  void set_ids(int index, const char* value);
  void set_ids(int index, const char* value, size_t size);
  std::string* add_ids();
  void add_ids(const std::string& value);
  void add_ids(std::string&& value);
  void add_ids(const char* value);
  void add_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_ids();
  private:
  const std::string& _internal_ids(int index) const;
  std::string* _internal_add_ids();
  public:

  // repeated string usernames = 2;
  int usernames_size() const;
  private:
  int _internal_usernames_size() const;
  public:
  void clear_usernames();
  const std::string& usernames(int index) const;
  std::string* mutable_usernames(int index);
  void set_usernames(int index, const std::string& value);
  void set_usernames(int index, std::string&& value);
  void set_usernames(int index, const char* value);
  void set_usernames(int index, const char* value, size_t size);
  std::string* add_usernames();
  void add_usernames(const std::string& value);
  void add_usernames(std::string&& value);
  void add_usernames(const char* value);
  void add_usernames(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& usernames() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_usernames();
  private:
  const std::string& _internal_usernames(int index) const;
  std::string* _internal_add_usernames();
  public:

  // repeated string facebook_ids = 3;
  int facebook_ids_size() const;
  private:
  int _internal_facebook_ids_size() const;
  public:
  void clear_facebook_ids();
  const std::string& facebook_ids(int index) const;
  std::string* mutable_facebook_ids(int index);
  void set_facebook_ids(int index, const std::string& value);
  void set_facebook_ids(int index, std::string&& value);
  void set_facebook_ids(int index, const char* value);
  void set_facebook_ids(int index, const char* value, size_t size);
  std::string* add_facebook_ids();
  void add_facebook_ids(const std::string& value);
  void add_facebook_ids(std::string&& value);
  void add_facebook_ids(const char* value);
  void add_facebook_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& facebook_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_facebook_ids();
  private:
  const std::string& _internal_facebook_ids(int index) const;
  std::string* _internal_add_facebook_ids();
  public:

  // @@protoc_insertion_point(class_scope:nakama.api.GetUsersRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> ids_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> usernames_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> facebook_ids_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto;
};
// -------------------------------------------------------------------

class GetSubscriptionRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nakama.api.GetSubscriptionRequest) */ {
 public:
  inline GetSubscriptionRequest() : GetSubscriptionRequest(nullptr) {}
  virtual ~GetSubscriptionRequest();

  GetSubscriptionRequest(const GetSubscriptionRequest& from);
  GetSubscriptionRequest(GetSubscriptionRequest&& from) noexcept
    : GetSubscriptionRequest() {
    *this = ::std::move(from);
  }

  inline GetSubscriptionRequest& operator=(const GetSubscriptionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSubscriptionRequest& operator=(GetSubscriptionRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetSubscriptionRequest& default_instance();

  static inline const GetSubscriptionRequest* internal_default_instance() {
    return reinterpret_cast<const GetSubscriptionRequest*>(
               &_GetSubscriptionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(GetSubscriptionRequest& a, GetSubscriptionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSubscriptionRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetSubscriptionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetSubscriptionRequest* New() const final {
    return CreateMaybeMessage<GetSubscriptionRequest>(nullptr);
  }

  GetSubscriptionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetSubscriptionRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetSubscriptionRequest& from);
  void MergeFrom(const GetSubscriptionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSubscriptionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nakama.api.GetSubscriptionRequest";
  }
  protected:
  explicit GetSubscriptionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto);
    return ::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProductIdFieldNumber = 1,
  };
  // string product_id = 1;
  void clear_product_id();
  const std::string& product_id() const;
  void set_product_id(const std::string& value);
  void set_product_id(std::string&& value);
  void set_product_id(const char* value);
  void set_product_id(const char* value, size_t size);
  std::string* mutable_product_id();
  std::string* release_product_id();
  void set_allocated_product_id(std::string* product_id);
  private:
  const std::string& _internal_product_id() const;
  void _internal_set_product_id(const std::string& value);
  std::string* _internal_mutable_product_id();
  public:

  // @@protoc_insertion_point(class_scope:nakama.api.GetSubscriptionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr product_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto;
};
// -------------------------------------------------------------------

class Group PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nakama.api.Group) */ {
 public:
  inline Group() : Group(nullptr) {}
  virtual ~Group();

  Group(const Group& from);
  Group(Group&& from) noexcept
    : Group() {
    *this = ::std::move(from);
  }

  inline Group& operator=(const Group& from) {
    CopyFrom(from);
    return *this;
  }
  inline Group& operator=(Group&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Group& default_instance();

  static inline const Group* internal_default_instance() {
    return reinterpret_cast<const Group*>(
               &_Group_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(Group& a, Group& b) {
    a.Swap(&b);
  }
  inline void Swap(Group* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Group* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Group* New() const final {
    return CreateMaybeMessage<Group>(nullptr);
  }

  Group* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Group>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Group& from);
  void MergeFrom(const Group& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Group* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nakama.api.Group";
  }
  protected:
  explicit Group(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto);
    return ::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kCreatorIdFieldNumber = 2,
    kNameFieldNumber = 3,
    kDescriptionFieldNumber = 4,
    kLangTagFieldNumber = 5,
    kMetadataFieldNumber = 6,
    kAvatarUrlFieldNumber = 7,
    kOpenFieldNumber = 8,
    kCreateTimeFieldNumber = 11,
    kUpdateTimeFieldNumber = 12,
    kEdgeCountFieldNumber = 9,
    kMaxCountFieldNumber = 10,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string creator_id = 2;
  void clear_creator_id();
  const std::string& creator_id() const;
  void set_creator_id(const std::string& value);
  void set_creator_id(std::string&& value);
  void set_creator_id(const char* value);
  void set_creator_id(const char* value, size_t size);
  std::string* mutable_creator_id();
  std::string* release_creator_id();
  void set_allocated_creator_id(std::string* creator_id);
  private:
  const std::string& _internal_creator_id() const;
  void _internal_set_creator_id(const std::string& value);
  std::string* _internal_mutable_creator_id();
  public:

  // string name = 3;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string description = 4;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // string lang_tag = 5;
  void clear_lang_tag();
  const std::string& lang_tag() const;
  void set_lang_tag(const std::string& value);
  void set_lang_tag(std::string&& value);
  void set_lang_tag(const char* value);
  void set_lang_tag(const char* value, size_t size);
  std::string* mutable_lang_tag();
  std::string* release_lang_tag();
  void set_allocated_lang_tag(std::string* lang_tag);
  private:
  const std::string& _internal_lang_tag() const;
  void _internal_set_lang_tag(const std::string& value);
  std::string* _internal_mutable_lang_tag();
  public:

  // string metadata = 6;
  void clear_metadata();
  const std::string& metadata() const;
  void set_metadata(const std::string& value);
  void set_metadata(std::string&& value);
  void set_metadata(const char* value);
  void set_metadata(const char* value, size_t size);
  std::string* mutable_metadata();
  std::string* release_metadata();
  void set_allocated_metadata(std::string* metadata);
  private:
  const std::string& _internal_metadata() const;
  void _internal_set_metadata(const std::string& value);
  std::string* _internal_mutable_metadata();
  public:

  // string avatar_url = 7;
  void clear_avatar_url();
  const std::string& avatar_url() const;
  void set_avatar_url(const std::string& value);
  void set_avatar_url(std::string&& value);
  void set_avatar_url(const char* value);
  void set_avatar_url(const char* value, size_t size);
  std::string* mutable_avatar_url();
  std::string* release_avatar_url();
  void set_allocated_avatar_url(std::string* avatar_url);
  private:
  const std::string& _internal_avatar_url() const;
  void _internal_set_avatar_url(const std::string& value);
  std::string* _internal_mutable_avatar_url();
  public:

  // .google.protobuf.BoolValue open = 8;
  bool has_open() const;
  private:
  bool _internal_has_open() const;
  public:
  void clear_open();
  const PROTOBUF_NAMESPACE_ID::BoolValue& open() const;
  PROTOBUF_NAMESPACE_ID::BoolValue* release_open();
  PROTOBUF_NAMESPACE_ID::BoolValue* mutable_open();
  void set_allocated_open(PROTOBUF_NAMESPACE_ID::BoolValue* open);
  private:
  const PROTOBUF_NAMESPACE_ID::BoolValue& _internal_open() const;
  PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_open();
  public:
  void unsafe_arena_set_allocated_open(
      PROTOBUF_NAMESPACE_ID::BoolValue* open);
  PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_open();

  // .google.protobuf.Timestamp create_time = 11;
  bool has_create_time() const;
  private:
  bool _internal_has_create_time() const;
  public:
  void clear_create_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& create_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_create_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_create_time();
  void set_allocated_create_time(PROTOBUF_NAMESPACE_ID::Timestamp* create_time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_create_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_create_time();
  public:
  void unsafe_arena_set_allocated_create_time(
      PROTOBUF_NAMESPACE_ID::Timestamp* create_time);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_create_time();

  // .google.protobuf.Timestamp update_time = 12;
  bool has_update_time() const;
  private:
  bool _internal_has_update_time() const;
  public:
  void clear_update_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& update_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_update_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_update_time();
  void set_allocated_update_time(PROTOBUF_NAMESPACE_ID::Timestamp* update_time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_update_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_update_time();
  public:
  void unsafe_arena_set_allocated_update_time(
      PROTOBUF_NAMESPACE_ID::Timestamp* update_time);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_update_time();

  // int32 edge_count = 9;
  void clear_edge_count();
  ::PROTOBUF_NAMESPACE_ID::int32 edge_count() const;
  void set_edge_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_edge_count() const;
  void _internal_set_edge_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 max_count = 10;
  void clear_max_count();
  ::PROTOBUF_NAMESPACE_ID::int32 max_count() const;
  void set_max_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_max_count() const;
  void _internal_set_max_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:nakama.api.Group)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr creator_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lang_tag_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr avatar_url_;
  PROTOBUF_NAMESPACE_ID::BoolValue* open_;
  PROTOBUF_NAMESPACE_ID::Timestamp* create_time_;
  PROTOBUF_NAMESPACE_ID::Timestamp* update_time_;
  ::PROTOBUF_NAMESPACE_ID::int32 edge_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto;
};
// -------------------------------------------------------------------

class GroupList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nakama.api.GroupList) */ {
 public:
  inline GroupList() : GroupList(nullptr) {}
  virtual ~GroupList();

  GroupList(const GroupList& from);
  GroupList(GroupList&& from) noexcept
    : GroupList() {
    *this = ::std::move(from);
  }

  inline GroupList& operator=(const GroupList& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupList& operator=(GroupList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GroupList& default_instance();

  static inline const GroupList* internal_default_instance() {
    return reinterpret_cast<const GroupList*>(
               &_GroupList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(GroupList& a, GroupList& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GroupList* New() const final {
    return CreateMaybeMessage<GroupList>(nullptr);
  }

  GroupList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GroupList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GroupList& from);
  void MergeFrom(const GroupList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GroupList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nakama.api.GroupList";
  }
  protected:
  explicit GroupList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto);
    return ::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupsFieldNumber = 1,
    kCursorFieldNumber = 2,
  };
  // repeated .nakama.api.Group groups = 1;
  int groups_size() const;
  private:
  int _internal_groups_size() const;
  public:
  void clear_groups();
  ::nakama::api::Group* mutable_groups(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nakama::api::Group >*
      mutable_groups();
  private:
  const ::nakama::api::Group& _internal_groups(int index) const;
  ::nakama::api::Group* _internal_add_groups();
  public:
  const ::nakama::api::Group& groups(int index) const;
  ::nakama::api::Group* add_groups();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nakama::api::Group >&
      groups() const;

  // string cursor = 2;
  void clear_cursor();
  const std::string& cursor() const;
  void set_cursor(const std::string& value);
  void set_cursor(std::string&& value);
  void set_cursor(const char* value);
  void set_cursor(const char* value, size_t size);
  std::string* mutable_cursor();
  std::string* release_cursor();
  void set_allocated_cursor(std::string* cursor);
  private:
  const std::string& _internal_cursor() const;
  void _internal_set_cursor(const std::string& value);
  std::string* _internal_mutable_cursor();
  public:

  // @@protoc_insertion_point(class_scope:nakama.api.GroupList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nakama::api::Group > groups_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cursor_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto;
};
// -------------------------------------------------------------------

class GroupUserList_GroupUser PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nakama.api.GroupUserList.GroupUser) */ {
 public:
  inline GroupUserList_GroupUser() : GroupUserList_GroupUser(nullptr) {}
  virtual ~GroupUserList_GroupUser();

  GroupUserList_GroupUser(const GroupUserList_GroupUser& from);
  GroupUserList_GroupUser(GroupUserList_GroupUser&& from) noexcept
    : GroupUserList_GroupUser() {
    *this = ::std::move(from);
  }

  inline GroupUserList_GroupUser& operator=(const GroupUserList_GroupUser& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupUserList_GroupUser& operator=(GroupUserList_GroupUser&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GroupUserList_GroupUser& default_instance();

  static inline const GroupUserList_GroupUser* internal_default_instance() {
    return reinterpret_cast<const GroupUserList_GroupUser*>(
               &_GroupUserList_GroupUser_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(GroupUserList_GroupUser& a, GroupUserList_GroupUser& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupUserList_GroupUser* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupUserList_GroupUser* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GroupUserList_GroupUser* New() const final {
    return CreateMaybeMessage<GroupUserList_GroupUser>(nullptr);
  }

  GroupUserList_GroupUser* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GroupUserList_GroupUser>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GroupUserList_GroupUser& from);
  void MergeFrom(const GroupUserList_GroupUser& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GroupUserList_GroupUser* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nakama.api.GroupUserList.GroupUser";
  }
  protected:
  explicit GroupUserList_GroupUser(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto);
    return ::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef GroupUserList_GroupUser_State State;
  static constexpr State SUPERADMIN =
    GroupUserList_GroupUser_State_SUPERADMIN;
  static constexpr State ADMIN =
    GroupUserList_GroupUser_State_ADMIN;
  static constexpr State MEMBER =
    GroupUserList_GroupUser_State_MEMBER;
  static constexpr State JOIN_REQUEST =
    GroupUserList_GroupUser_State_JOIN_REQUEST;
  static inline bool State_IsValid(int value) {
    return GroupUserList_GroupUser_State_IsValid(value);
  }
  static constexpr State State_MIN =
    GroupUserList_GroupUser_State_State_MIN;
  static constexpr State State_MAX =
    GroupUserList_GroupUser_State_State_MAX;
  static constexpr int State_ARRAYSIZE =
    GroupUserList_GroupUser_State_State_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  State_descriptor() {
    return GroupUserList_GroupUser_State_descriptor();
  }
  template<typename T>
  static inline const std::string& State_Name(T enum_t_value) {
    static_assert(::std::is_same<T, State>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function State_Name.");
    return GroupUserList_GroupUser_State_Name(enum_t_value);
  }
  static inline bool State_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      State* value) {
    return GroupUserList_GroupUser_State_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kUserFieldNumber = 1,
    kStateFieldNumber = 2,
  };
  // .nakama.api.User user = 1;
  bool has_user() const;
  private:
  bool _internal_has_user() const;
  public:
  void clear_user();
  const ::nakama::api::User& user() const;
  ::nakama::api::User* release_user();
  ::nakama::api::User* mutable_user();
  void set_allocated_user(::nakama::api::User* user);
  private:
  const ::nakama::api::User& _internal_user() const;
  ::nakama::api::User* _internal_mutable_user();
  public:
  void unsafe_arena_set_allocated_user(
      ::nakama::api::User* user);
  ::nakama::api::User* unsafe_arena_release_user();

  // .google.protobuf.Int32Value state = 2;
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  const PROTOBUF_NAMESPACE_ID::Int32Value& state() const;
  PROTOBUF_NAMESPACE_ID::Int32Value* release_state();
  PROTOBUF_NAMESPACE_ID::Int32Value* mutable_state();
  void set_allocated_state(PROTOBUF_NAMESPACE_ID::Int32Value* state);
  private:
  const PROTOBUF_NAMESPACE_ID::Int32Value& _internal_state() const;
  PROTOBUF_NAMESPACE_ID::Int32Value* _internal_mutable_state();
  public:
  void unsafe_arena_set_allocated_state(
      PROTOBUF_NAMESPACE_ID::Int32Value* state);
  PROTOBUF_NAMESPACE_ID::Int32Value* unsafe_arena_release_state();

  // @@protoc_insertion_point(class_scope:nakama.api.GroupUserList.GroupUser)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::nakama::api::User* user_;
  PROTOBUF_NAMESPACE_ID::Int32Value* state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto;
};
// -------------------------------------------------------------------

class GroupUserList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nakama.api.GroupUserList) */ {
 public:
  inline GroupUserList() : GroupUserList(nullptr) {}
  virtual ~GroupUserList();

  GroupUserList(const GroupUserList& from);
  GroupUserList(GroupUserList&& from) noexcept
    : GroupUserList() {
    *this = ::std::move(from);
  }

  inline GroupUserList& operator=(const GroupUserList& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupUserList& operator=(GroupUserList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GroupUserList& default_instance();

  static inline const GroupUserList* internal_default_instance() {
    return reinterpret_cast<const GroupUserList*>(
               &_GroupUserList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(GroupUserList& a, GroupUserList& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupUserList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupUserList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GroupUserList* New() const final {
    return CreateMaybeMessage<GroupUserList>(nullptr);
  }

  GroupUserList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GroupUserList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GroupUserList& from);
  void MergeFrom(const GroupUserList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GroupUserList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nakama.api.GroupUserList";
  }
  protected:
  explicit GroupUserList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto);
    return ::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef GroupUserList_GroupUser GroupUser;

  // accessors -------------------------------------------------------

  enum : int {
    kGroupUsersFieldNumber = 1,
    kCursorFieldNumber = 2,
  };
  // repeated .nakama.api.GroupUserList.GroupUser group_users = 1;
  int group_users_size() const;
  private:
  int _internal_group_users_size() const;
  public:
  void clear_group_users();
  ::nakama::api::GroupUserList_GroupUser* mutable_group_users(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nakama::api::GroupUserList_GroupUser >*
      mutable_group_users();
  private:
  const ::nakama::api::GroupUserList_GroupUser& _internal_group_users(int index) const;
  ::nakama::api::GroupUserList_GroupUser* _internal_add_group_users();
  public:
  const ::nakama::api::GroupUserList_GroupUser& group_users(int index) const;
  ::nakama::api::GroupUserList_GroupUser* add_group_users();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nakama::api::GroupUserList_GroupUser >&
      group_users() const;

  // string cursor = 2;
  void clear_cursor();
  const std::string& cursor() const;
  void set_cursor(const std::string& value);
  void set_cursor(std::string&& value);
  void set_cursor(const char* value);
  void set_cursor(const char* value, size_t size);
  std::string* mutable_cursor();
  std::string* release_cursor();
  void set_allocated_cursor(std::string* cursor);
  private:
  const std::string& _internal_cursor() const;
  void _internal_set_cursor(const std::string& value);
  std::string* _internal_mutable_cursor();
  public:

  // @@protoc_insertion_point(class_scope:nakama.api.GroupUserList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nakama::api::GroupUserList_GroupUser > group_users_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cursor_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto;
};
// -------------------------------------------------------------------

class ImportFacebookFriendsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nakama.api.ImportFacebookFriendsRequest) */ {
 public:
  inline ImportFacebookFriendsRequest() : ImportFacebookFriendsRequest(nullptr) {}
  virtual ~ImportFacebookFriendsRequest();

  ImportFacebookFriendsRequest(const ImportFacebookFriendsRequest& from);
  ImportFacebookFriendsRequest(ImportFacebookFriendsRequest&& from) noexcept
    : ImportFacebookFriendsRequest() {
    *this = ::std::move(from);
  }

  inline ImportFacebookFriendsRequest& operator=(const ImportFacebookFriendsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImportFacebookFriendsRequest& operator=(ImportFacebookFriendsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ImportFacebookFriendsRequest& default_instance();

  static inline const ImportFacebookFriendsRequest* internal_default_instance() {
    return reinterpret_cast<const ImportFacebookFriendsRequest*>(
               &_ImportFacebookFriendsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(ImportFacebookFriendsRequest& a, ImportFacebookFriendsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ImportFacebookFriendsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImportFacebookFriendsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImportFacebookFriendsRequest* New() const final {
    return CreateMaybeMessage<ImportFacebookFriendsRequest>(nullptr);
  }

  ImportFacebookFriendsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImportFacebookFriendsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ImportFacebookFriendsRequest& from);
  void MergeFrom(const ImportFacebookFriendsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImportFacebookFriendsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nakama.api.ImportFacebookFriendsRequest";
  }
  protected:
  explicit ImportFacebookFriendsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto);
    return ::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 1,
    kResetFieldNumber = 2,
  };
  // .nakama.api.AccountFacebook account = 1;
  bool has_account() const;
  private:
  bool _internal_has_account() const;
  public:
  void clear_account();
  const ::nakama::api::AccountFacebook& account() const;
  ::nakama::api::AccountFacebook* release_account();
  ::nakama::api::AccountFacebook* mutable_account();
  void set_allocated_account(::nakama::api::AccountFacebook* account);
  private:
  const ::nakama::api::AccountFacebook& _internal_account() const;
  ::nakama::api::AccountFacebook* _internal_mutable_account();
  public:
  void unsafe_arena_set_allocated_account(
      ::nakama::api::AccountFacebook* account);
  ::nakama::api::AccountFacebook* unsafe_arena_release_account();

  // .google.protobuf.BoolValue reset = 2;
  bool has_reset() const;
  private:
  bool _internal_has_reset() const;
  public:
  void clear_reset();
  const PROTOBUF_NAMESPACE_ID::BoolValue& reset() const;
  PROTOBUF_NAMESPACE_ID::BoolValue* release_reset();
  PROTOBUF_NAMESPACE_ID::BoolValue* mutable_reset();
  void set_allocated_reset(PROTOBUF_NAMESPACE_ID::BoolValue* reset);
  private:
  const PROTOBUF_NAMESPACE_ID::BoolValue& _internal_reset() const;
  PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_reset();
  public:
  void unsafe_arena_set_allocated_reset(
      PROTOBUF_NAMESPACE_ID::BoolValue* reset);
  PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_reset();

  // @@protoc_insertion_point(class_scope:nakama.api.ImportFacebookFriendsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::nakama::api::AccountFacebook* account_;
  PROTOBUF_NAMESPACE_ID::BoolValue* reset_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto;
};
// -------------------------------------------------------------------

class ImportSteamFriendsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nakama.api.ImportSteamFriendsRequest) */ {
 public:
  inline ImportSteamFriendsRequest() : ImportSteamFriendsRequest(nullptr) {}
  virtual ~ImportSteamFriendsRequest();

  ImportSteamFriendsRequest(const ImportSteamFriendsRequest& from);
  ImportSteamFriendsRequest(ImportSteamFriendsRequest&& from) noexcept
    : ImportSteamFriendsRequest() {
    *this = ::std::move(from);
  }

  inline ImportSteamFriendsRequest& operator=(const ImportSteamFriendsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImportSteamFriendsRequest& operator=(ImportSteamFriendsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ImportSteamFriendsRequest& default_instance();

  static inline const ImportSteamFriendsRequest* internal_default_instance() {
    return reinterpret_cast<const ImportSteamFriendsRequest*>(
               &_ImportSteamFriendsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  friend void swap(ImportSteamFriendsRequest& a, ImportSteamFriendsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ImportSteamFriendsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImportSteamFriendsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImportSteamFriendsRequest* New() const final {
    return CreateMaybeMessage<ImportSteamFriendsRequest>(nullptr);
  }

  ImportSteamFriendsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImportSteamFriendsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ImportSteamFriendsRequest& from);
  void MergeFrom(const ImportSteamFriendsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImportSteamFriendsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nakama.api.ImportSteamFriendsRequest";
  }
  protected:
  explicit ImportSteamFriendsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto);
    return ::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 1,
    kResetFieldNumber = 2,
  };
  // .nakama.api.AccountSteam account = 1;
  bool has_account() const;
  private:
  bool _internal_has_account() const;
  public:
  void clear_account();
  const ::nakama::api::AccountSteam& account() const;
  ::nakama::api::AccountSteam* release_account();
  ::nakama::api::AccountSteam* mutable_account();
  void set_allocated_account(::nakama::api::AccountSteam* account);
  private:
  const ::nakama::api::AccountSteam& _internal_account() const;
  ::nakama::api::AccountSteam* _internal_mutable_account();
  public:
  void unsafe_arena_set_allocated_account(
      ::nakama::api::AccountSteam* account);
  ::nakama::api::AccountSteam* unsafe_arena_release_account();

  // .google.protobuf.BoolValue reset = 2;
  bool has_reset() const;
  private:
  bool _internal_has_reset() const;
  public:
  void clear_reset();
  const PROTOBUF_NAMESPACE_ID::BoolValue& reset() const;
  PROTOBUF_NAMESPACE_ID::BoolValue* release_reset();
  PROTOBUF_NAMESPACE_ID::BoolValue* mutable_reset();
  void set_allocated_reset(PROTOBUF_NAMESPACE_ID::BoolValue* reset);
  private:
  const PROTOBUF_NAMESPACE_ID::BoolValue& _internal_reset() const;
  PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_reset();
  public:
  void unsafe_arena_set_allocated_reset(
      PROTOBUF_NAMESPACE_ID::BoolValue* reset);
  PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_reset();

  // @@protoc_insertion_point(class_scope:nakama.api.ImportSteamFriendsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::nakama::api::AccountSteam* account_;
  PROTOBUF_NAMESPACE_ID::BoolValue* reset_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto;
};
// -------------------------------------------------------------------

class JoinGroupRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nakama.api.JoinGroupRequest) */ {
 public:
  inline JoinGroupRequest() : JoinGroupRequest(nullptr) {}
  virtual ~JoinGroupRequest();

  JoinGroupRequest(const JoinGroupRequest& from);
  JoinGroupRequest(JoinGroupRequest&& from) noexcept
    : JoinGroupRequest() {
    *this = ::std::move(from);
  }

  inline JoinGroupRequest& operator=(const JoinGroupRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline JoinGroupRequest& operator=(JoinGroupRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const JoinGroupRequest& default_instance();

  static inline const JoinGroupRequest* internal_default_instance() {
    return reinterpret_cast<const JoinGroupRequest*>(
               &_JoinGroupRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  friend void swap(JoinGroupRequest& a, JoinGroupRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(JoinGroupRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JoinGroupRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline JoinGroupRequest* New() const final {
    return CreateMaybeMessage<JoinGroupRequest>(nullptr);
  }

  JoinGroupRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<JoinGroupRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const JoinGroupRequest& from);
  void MergeFrom(const JoinGroupRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JoinGroupRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nakama.api.JoinGroupRequest";
  }
  protected:
  explicit JoinGroupRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto);
    return ::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupIdFieldNumber = 1,
  };
  // string group_id = 1;
  void clear_group_id();
  const std::string& group_id() const;
  void set_group_id(const std::string& value);
  void set_group_id(std::string&& value);
  void set_group_id(const char* value);
  void set_group_id(const char* value, size_t size);
  std::string* mutable_group_id();
  std::string* release_group_id();
  void set_allocated_group_id(std::string* group_id);
  private:
  const std::string& _internal_group_id() const;
  void _internal_set_group_id(const std::string& value);
  std::string* _internal_mutable_group_id();
  public:

  // @@protoc_insertion_point(class_scope:nakama.api.JoinGroupRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr group_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto;
};
// -------------------------------------------------------------------

class JoinTournamentRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nakama.api.JoinTournamentRequest) */ {
 public:
  inline JoinTournamentRequest() : JoinTournamentRequest(nullptr) {}
  virtual ~JoinTournamentRequest();

  JoinTournamentRequest(const JoinTournamentRequest& from);
  JoinTournamentRequest(JoinTournamentRequest&& from) noexcept
    : JoinTournamentRequest() {
    *this = ::std::move(from);
  }

  inline JoinTournamentRequest& operator=(const JoinTournamentRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline JoinTournamentRequest& operator=(JoinTournamentRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const JoinTournamentRequest& default_instance();

  static inline const JoinTournamentRequest* internal_default_instance() {
    return reinterpret_cast<const JoinTournamentRequest*>(
               &_JoinTournamentRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  friend void swap(JoinTournamentRequest& a, JoinTournamentRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(JoinTournamentRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JoinTournamentRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline JoinTournamentRequest* New() const final {
    return CreateMaybeMessage<JoinTournamentRequest>(nullptr);
  }

  JoinTournamentRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<JoinTournamentRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const JoinTournamentRequest& from);
  void MergeFrom(const JoinTournamentRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JoinTournamentRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nakama.api.JoinTournamentRequest";
  }
  protected:
  explicit JoinTournamentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto);
    return ::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTournamentIdFieldNumber = 1,
  };
  // string tournament_id = 1;
  void clear_tournament_id();
  const std::string& tournament_id() const;
  void set_tournament_id(const std::string& value);
  void set_tournament_id(std::string&& value);
  void set_tournament_id(const char* value);
  void set_tournament_id(const char* value, size_t size);
  std::string* mutable_tournament_id();
  std::string* release_tournament_id();
  void set_allocated_tournament_id(std::string* tournament_id);
  private:
  const std::string& _internal_tournament_id() const;
  void _internal_set_tournament_id(const std::string& value);
  std::string* _internal_mutable_tournament_id();
  public:

  // @@protoc_insertion_point(class_scope:nakama.api.JoinTournamentRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tournament_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto;
};
// -------------------------------------------------------------------

class KickGroupUsersRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nakama.api.KickGroupUsersRequest) */ {
 public:
  inline KickGroupUsersRequest() : KickGroupUsersRequest(nullptr) {}
  virtual ~KickGroupUsersRequest();

  KickGroupUsersRequest(const KickGroupUsersRequest& from);
  KickGroupUsersRequest(KickGroupUsersRequest&& from) noexcept
    : KickGroupUsersRequest() {
    *this = ::std::move(from);
  }

  inline KickGroupUsersRequest& operator=(const KickGroupUsersRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline KickGroupUsersRequest& operator=(KickGroupUsersRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const KickGroupUsersRequest& default_instance();

  static inline const KickGroupUsersRequest* internal_default_instance() {
    return reinterpret_cast<const KickGroupUsersRequest*>(
               &_KickGroupUsersRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  friend void swap(KickGroupUsersRequest& a, KickGroupUsersRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(KickGroupUsersRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KickGroupUsersRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KickGroupUsersRequest* New() const final {
    return CreateMaybeMessage<KickGroupUsersRequest>(nullptr);
  }

  KickGroupUsersRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KickGroupUsersRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const KickGroupUsersRequest& from);
  void MergeFrom(const KickGroupUsersRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KickGroupUsersRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nakama.api.KickGroupUsersRequest";
  }
  protected:
  explicit KickGroupUsersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto);
    return ::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdsFieldNumber = 2,
    kGroupIdFieldNumber = 1,
  };
  // repeated string user_ids = 2;
  int user_ids_size() const;
  private:
  int _internal_user_ids_size() const;
  public:
  void clear_user_ids();
  const std::string& user_ids(int index) const;
  std::string* mutable_user_ids(int index);
  void set_user_ids(int index, const std::string& value);
  void set_user_ids(int index, std::string&& value);
  void set_user_ids(int index, const char* value);
  void set_user_ids(int index, const char* value, size_t size);
  std::string* add_user_ids();
  void add_user_ids(const std::string& value);
  void add_user_ids(std::string&& value);
  void add_user_ids(const char* value);
  void add_user_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& user_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_user_ids();
  private:
  const std::string& _internal_user_ids(int index) const;
  std::string* _internal_add_user_ids();
  public:

  // string group_id = 1;
  void clear_group_id();
  const std::string& group_id() const;
  void set_group_id(const std::string& value);
  void set_group_id(std::string&& value);
  void set_group_id(const char* value);
  void set_group_id(const char* value, size_t size);
  std::string* mutable_group_id();
  std::string* release_group_id();
  void set_allocated_group_id(std::string* group_id);
  private:
  const std::string& _internal_group_id() const;
  void _internal_set_group_id(const std::string& value);
  std::string* _internal_mutable_group_id();
  public:

  // @@protoc_insertion_point(class_scope:nakama.api.KickGroupUsersRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> user_ids_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr group_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto;
};
// -------------------------------------------------------------------

class Leaderboard PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nakama.api.Leaderboard) */ {
 public:
  inline Leaderboard() : Leaderboard(nullptr) {}
  virtual ~Leaderboard();

  Leaderboard(const Leaderboard& from);
  Leaderboard(Leaderboard&& from) noexcept
    : Leaderboard() {
    *this = ::std::move(from);
  }

  inline Leaderboard& operator=(const Leaderboard& from) {
    CopyFrom(from);
    return *this;
  }
  inline Leaderboard& operator=(Leaderboard&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Leaderboard& default_instance();

  static inline const Leaderboard* internal_default_instance() {
    return reinterpret_cast<const Leaderboard*>(
               &_Leaderboard_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    61;

  friend void swap(Leaderboard& a, Leaderboard& b) {
    a.Swap(&b);
  }
  inline void Swap(Leaderboard* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Leaderboard* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Leaderboard* New() const final {
    return CreateMaybeMessage<Leaderboard>(nullptr);
  }

  Leaderboard* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Leaderboard>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Leaderboard& from);
  void MergeFrom(const Leaderboard& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Leaderboard* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nakama.api.Leaderboard";
  }
  protected:
  explicit Leaderboard(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto);
    return ::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kMetadataFieldNumber = 6,
    kCreateTimeFieldNumber = 7,
    kSortOrderFieldNumber = 2,
    kOperatorFieldNumber = 3,
    kPrevResetFieldNumber = 4,
    kNextResetFieldNumber = 5,
    kAuthoritativeFieldNumber = 8,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string metadata = 6;
  void clear_metadata();
  const std::string& metadata() const;
  void set_metadata(const std::string& value);
  void set_metadata(std::string&& value);
  void set_metadata(const char* value);
  void set_metadata(const char* value, size_t size);
  std::string* mutable_metadata();
  std::string* release_metadata();
  void set_allocated_metadata(std::string* metadata);
  private:
  const std::string& _internal_metadata() const;
  void _internal_set_metadata(const std::string& value);
  std::string* _internal_mutable_metadata();
  public:

  // .google.protobuf.Timestamp create_time = 7;
  bool has_create_time() const;
  private:
  bool _internal_has_create_time() const;
  public:
  void clear_create_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& create_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_create_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_create_time();
  void set_allocated_create_time(PROTOBUF_NAMESPACE_ID::Timestamp* create_time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_create_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_create_time();
  public:
  void unsafe_arena_set_allocated_create_time(
      PROTOBUF_NAMESPACE_ID::Timestamp* create_time);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_create_time();

  // uint32 sort_order = 2;
  void clear_sort_order();
  ::PROTOBUF_NAMESPACE_ID::uint32 sort_order() const;
  void set_sort_order(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sort_order() const;
  void _internal_set_sort_order(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .nakama.api.Operator operator = 3;
  void clear_operator_();
  ::nakama::api::Operator operator_() const;
  void set_operator_(::nakama::api::Operator value);
  private:
  ::nakama::api::Operator _internal_operator_() const;
  void _internal_set_operator_(::nakama::api::Operator value);
  public:

  // uint32 prev_reset = 4;
  void clear_prev_reset();
  ::PROTOBUF_NAMESPACE_ID::uint32 prev_reset() const;
  void set_prev_reset(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_prev_reset() const;
  void _internal_set_prev_reset(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 next_reset = 5;
  void clear_next_reset();
  ::PROTOBUF_NAMESPACE_ID::uint32 next_reset() const;
  void set_next_reset(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_next_reset() const;
  void _internal_set_next_reset(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool authoritative = 8;
  void clear_authoritative();
  bool authoritative() const;
  void set_authoritative(bool value);
  private:
  bool _internal_authoritative() const;
  void _internal_set_authoritative(bool value);
  public:

  // @@protoc_insertion_point(class_scope:nakama.api.Leaderboard)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr metadata_;
  PROTOBUF_NAMESPACE_ID::Timestamp* create_time_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sort_order_;
  int operator__;
  ::PROTOBUF_NAMESPACE_ID::uint32 prev_reset_;
  ::PROTOBUF_NAMESPACE_ID::uint32 next_reset_;
  bool authoritative_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto;
};
// -------------------------------------------------------------------

class LeaderboardList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nakama.api.LeaderboardList) */ {
 public:
  inline LeaderboardList() : LeaderboardList(nullptr) {}
  virtual ~LeaderboardList();

  LeaderboardList(const LeaderboardList& from);
  LeaderboardList(LeaderboardList&& from) noexcept
    : LeaderboardList() {
    *this = ::std::move(from);
  }

  inline LeaderboardList& operator=(const LeaderboardList& from) {
    CopyFrom(from);
    return *this;
  }
  inline LeaderboardList& operator=(LeaderboardList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LeaderboardList& default_instance();

  static inline const LeaderboardList* internal_default_instance() {
    return reinterpret_cast<const LeaderboardList*>(
               &_LeaderboardList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    62;

  friend void swap(LeaderboardList& a, LeaderboardList& b) {
    a.Swap(&b);
  }
  inline void Swap(LeaderboardList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LeaderboardList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LeaderboardList* New() const final {
    return CreateMaybeMessage<LeaderboardList>(nullptr);
  }

  LeaderboardList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LeaderboardList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LeaderboardList& from);
  void MergeFrom(const LeaderboardList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LeaderboardList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nakama.api.LeaderboardList";
  }
  protected:
  explicit LeaderboardList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto);
    return ::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLeaderboardsFieldNumber = 1,
    kCursorFieldNumber = 2,
  };
  // repeated .nakama.api.Leaderboard leaderboards = 1;
  int leaderboards_size() const;
  private:
  int _internal_leaderboards_size() const;
  public:
  void clear_leaderboards();
  ::nakama::api::Leaderboard* mutable_leaderboards(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nakama::api::Leaderboard >*
      mutable_leaderboards();
  private:
  const ::nakama::api::Leaderboard& _internal_leaderboards(int index) const;
  ::nakama::api::Leaderboard* _internal_add_leaderboards();
  public:
  const ::nakama::api::Leaderboard& leaderboards(int index) const;
  ::nakama::api::Leaderboard* add_leaderboards();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nakama::api::Leaderboard >&
      leaderboards() const;

  // string cursor = 2;
  void clear_cursor();
  const std::string& cursor() const;
  void set_cursor(const std::string& value);
  void set_cursor(std::string&& value);
  void set_cursor(const char* value);
  void set_cursor(const char* value, size_t size);
  std::string* mutable_cursor();
  std::string* release_cursor();
  void set_allocated_cursor(std::string* cursor);
  private:
  const std::string& _internal_cursor() const;
  void _internal_set_cursor(const std::string& value);
  std::string* _internal_mutable_cursor();
  public:

  // @@protoc_insertion_point(class_scope:nakama.api.LeaderboardList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nakama::api::Leaderboard > leaderboards_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cursor_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto;
};
// -------------------------------------------------------------------

class LeaderboardRecord PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nakama.api.LeaderboardRecord) */ {
 public:
  inline LeaderboardRecord() : LeaderboardRecord(nullptr) {}
  virtual ~LeaderboardRecord();

  LeaderboardRecord(const LeaderboardRecord& from);
  LeaderboardRecord(LeaderboardRecord&& from) noexcept
    : LeaderboardRecord() {
    *this = ::std::move(from);
  }

  inline LeaderboardRecord& operator=(const LeaderboardRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline LeaderboardRecord& operator=(LeaderboardRecord&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LeaderboardRecord& default_instance();

  static inline const LeaderboardRecord* internal_default_instance() {
    return reinterpret_cast<const LeaderboardRecord*>(
               &_LeaderboardRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    63;

  friend void swap(LeaderboardRecord& a, LeaderboardRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(LeaderboardRecord* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LeaderboardRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LeaderboardRecord* New() const final {
    return CreateMaybeMessage<LeaderboardRecord>(nullptr);
  }

  LeaderboardRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LeaderboardRecord>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LeaderboardRecord& from);
  void MergeFrom(const LeaderboardRecord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LeaderboardRecord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nakama.api.LeaderboardRecord";
  }
  protected:
  explicit LeaderboardRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto);
    return ::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLeaderboardIdFieldNumber = 1,
    kOwnerIdFieldNumber = 2,
    kMetadataFieldNumber = 7,
    kUsernameFieldNumber = 3,
    kCreateTimeFieldNumber = 8,
    kUpdateTimeFieldNumber = 9,
    kExpiryTimeFieldNumber = 10,
    kScoreFieldNumber = 4,
    kSubscoreFieldNumber = 5,
    kNumScoreFieldNumber = 6,
    kMaxNumScoreFieldNumber = 12,
    kRankFieldNumber = 11,
  };
  // string leaderboard_id = 1;
  void clear_leaderboard_id();
  const std::string& leaderboard_id() const;
  void set_leaderboard_id(const std::string& value);
  void set_leaderboard_id(std::string&& value);
  void set_leaderboard_id(const char* value);
  void set_leaderboard_id(const char* value, size_t size);
  std::string* mutable_leaderboard_id();
  std::string* release_leaderboard_id();
  void set_allocated_leaderboard_id(std::string* leaderboard_id);
  private:
  const std::string& _internal_leaderboard_id() const;
  void _internal_set_leaderboard_id(const std::string& value);
  std::string* _internal_mutable_leaderboard_id();
  public:

  // string owner_id = 2;
  void clear_owner_id();
  const std::string& owner_id() const;
  void set_owner_id(const std::string& value);
  void set_owner_id(std::string&& value);
  void set_owner_id(const char* value);
  void set_owner_id(const char* value, size_t size);
  std::string* mutable_owner_id();
  std::string* release_owner_id();
  void set_allocated_owner_id(std::string* owner_id);
  private:
  const std::string& _internal_owner_id() const;
  void _internal_set_owner_id(const std::string& value);
  std::string* _internal_mutable_owner_id();
  public:

  // string metadata = 7;
  void clear_metadata();
  const std::string& metadata() const;
  void set_metadata(const std::string& value);
  void set_metadata(std::string&& value);
  void set_metadata(const char* value);
  void set_metadata(const char* value, size_t size);
  std::string* mutable_metadata();
  std::string* release_metadata();
  void set_allocated_metadata(std::string* metadata);
  private:
  const std::string& _internal_metadata() const;
  void _internal_set_metadata(const std::string& value);
  std::string* _internal_mutable_metadata();
  public:

  // .google.protobuf.StringValue username = 3;
  bool has_username() const;
  private:
  bool _internal_has_username() const;
  public:
  void clear_username();
  const PROTOBUF_NAMESPACE_ID::StringValue& username() const;
  PROTOBUF_NAMESPACE_ID::StringValue* release_username();
  PROTOBUF_NAMESPACE_ID::StringValue* mutable_username();
  void set_allocated_username(PROTOBUF_NAMESPACE_ID::StringValue* username);
  private:
  const PROTOBUF_NAMESPACE_ID::StringValue& _internal_username() const;
  PROTOBUF_NAMESPACE_ID::StringValue* _internal_mutable_username();
  public:
  void unsafe_arena_set_allocated_username(
      PROTOBUF_NAMESPACE_ID::StringValue* username);
  PROTOBUF_NAMESPACE_ID::StringValue* unsafe_arena_release_username();

  // .google.protobuf.Timestamp create_time = 8;
  bool has_create_time() const;
  private:
  bool _internal_has_create_time() const;
  public:
  void clear_create_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& create_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_create_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_create_time();
  void set_allocated_create_time(PROTOBUF_NAMESPACE_ID::Timestamp* create_time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_create_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_create_time();
  public:
  void unsafe_arena_set_allocated_create_time(
      PROTOBUF_NAMESPACE_ID::Timestamp* create_time);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_create_time();

  // .google.protobuf.Timestamp update_time = 9;
  bool has_update_time() const;
  private:
  bool _internal_has_update_time() const;
  public:
  void clear_update_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& update_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_update_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_update_time();
  void set_allocated_update_time(PROTOBUF_NAMESPACE_ID::Timestamp* update_time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_update_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_update_time();
  public:
  void unsafe_arena_set_allocated_update_time(
      PROTOBUF_NAMESPACE_ID::Timestamp* update_time);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_update_time();

  // .google.protobuf.Timestamp expiry_time = 10;
  bool has_expiry_time() const;
  private:
  bool _internal_has_expiry_time() const;
  public:
  void clear_expiry_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& expiry_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_expiry_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_expiry_time();
  void set_allocated_expiry_time(PROTOBUF_NAMESPACE_ID::Timestamp* expiry_time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_expiry_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_expiry_time();
  public:
  void unsafe_arena_set_allocated_expiry_time(
      PROTOBUF_NAMESPACE_ID::Timestamp* expiry_time);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_expiry_time();

  // int64 score = 4;
  void clear_score();
  ::PROTOBUF_NAMESPACE_ID::int64 score() const;
  void set_score(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_score() const;
  void _internal_set_score(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 subscore = 5;
  void clear_subscore();
  ::PROTOBUF_NAMESPACE_ID::int64 subscore() const;
  void set_subscore(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_subscore() const;
  void _internal_set_subscore(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 num_score = 6;
  void clear_num_score();
  ::PROTOBUF_NAMESPACE_ID::int32 num_score() const;
  void set_num_score(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num_score() const;
  void _internal_set_num_score(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint32 max_num_score = 12;
  void clear_max_num_score();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_num_score() const;
  void set_max_num_score(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_num_score() const;
  void _internal_set_max_num_score(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int64 rank = 11;
  void clear_rank();
  ::PROTOBUF_NAMESPACE_ID::int64 rank() const;
  void set_rank(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_rank() const;
  void _internal_set_rank(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:nakama.api.LeaderboardRecord)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr leaderboard_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr owner_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr metadata_;
  PROTOBUF_NAMESPACE_ID::StringValue* username_;
  PROTOBUF_NAMESPACE_ID::Timestamp* create_time_;
  PROTOBUF_NAMESPACE_ID::Timestamp* update_time_;
  PROTOBUF_NAMESPACE_ID::Timestamp* expiry_time_;
  ::PROTOBUF_NAMESPACE_ID::int64 score_;
  ::PROTOBUF_NAMESPACE_ID::int64 subscore_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_score_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_num_score_;
  ::PROTOBUF_NAMESPACE_ID::int64 rank_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto;
};
// -------------------------------------------------------------------

class LeaderboardRecordList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nakama.api.LeaderboardRecordList) */ {
 public:
  inline LeaderboardRecordList() : LeaderboardRecordList(nullptr) {}
  virtual ~LeaderboardRecordList();

  LeaderboardRecordList(const LeaderboardRecordList& from);
  LeaderboardRecordList(LeaderboardRecordList&& from) noexcept
    : LeaderboardRecordList() {
    *this = ::std::move(from);
  }

  inline LeaderboardRecordList& operator=(const LeaderboardRecordList& from) {
    CopyFrom(from);
    return *this;
  }
  inline LeaderboardRecordList& operator=(LeaderboardRecordList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LeaderboardRecordList& default_instance();

  static inline const LeaderboardRecordList* internal_default_instance() {
    return reinterpret_cast<const LeaderboardRecordList*>(
               &_LeaderboardRecordList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    64;

  friend void swap(LeaderboardRecordList& a, LeaderboardRecordList& b) {
    a.Swap(&b);
  }
  inline void Swap(LeaderboardRecordList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LeaderboardRecordList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LeaderboardRecordList* New() const final {
    return CreateMaybeMessage<LeaderboardRecordList>(nullptr);
  }

  LeaderboardRecordList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LeaderboardRecordList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LeaderboardRecordList& from);
  void MergeFrom(const LeaderboardRecordList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LeaderboardRecordList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nakama.api.LeaderboardRecordList";
  }
  protected:
  explicit LeaderboardRecordList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto);
    return ::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecordsFieldNumber = 1,
    kOwnerRecordsFieldNumber = 2,
    kNextCursorFieldNumber = 3,
    kPrevCursorFieldNumber = 4,
  };
  // repeated .nakama.api.LeaderboardRecord records = 1;
  int records_size() const;
  private:
  int _internal_records_size() const;
  public:
  void clear_records();
  ::nakama::api::LeaderboardRecord* mutable_records(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nakama::api::LeaderboardRecord >*
      mutable_records();
  private:
  const ::nakama::api::LeaderboardRecord& _internal_records(int index) const;
  ::nakama::api::LeaderboardRecord* _internal_add_records();
  public:
  const ::nakama::api::LeaderboardRecord& records(int index) const;
  ::nakama::api::LeaderboardRecord* add_records();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nakama::api::LeaderboardRecord >&
      records() const;

  // repeated .nakama.api.LeaderboardRecord owner_records = 2;
  int owner_records_size() const;
  private:
  int _internal_owner_records_size() const;
  public:
  void clear_owner_records();
  ::nakama::api::LeaderboardRecord* mutable_owner_records(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nakama::api::LeaderboardRecord >*
      mutable_owner_records();
  private:
  const ::nakama::api::LeaderboardRecord& _internal_owner_records(int index) const;
  ::nakama::api::LeaderboardRecord* _internal_add_owner_records();
  public:
  const ::nakama::api::LeaderboardRecord& owner_records(int index) const;
  ::nakama::api::LeaderboardRecord* add_owner_records();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nakama::api::LeaderboardRecord >&
      owner_records() const;

  // string next_cursor = 3;
  void clear_next_cursor();
  const std::string& next_cursor() const;
  void set_next_cursor(const std::string& value);
  void set_next_cursor(std::string&& value);
  void set_next_cursor(const char* value);
  void set_next_cursor(const char* value, size_t size);
  std::string* mutable_next_cursor();
  std::string* release_next_cursor();
  void set_allocated_next_cursor(std::string* next_cursor);
  private:
  const std::string& _internal_next_cursor() const;
  void _internal_set_next_cursor(const std::string& value);
  std::string* _internal_mutable_next_cursor();
  public:

  // string prev_cursor = 4;
  void clear_prev_cursor();
  const std::string& prev_cursor() const;
  void set_prev_cursor(const std::string& value);
  void set_prev_cursor(std::string&& value);
  void set_prev_cursor(const char* value);
  void set_prev_cursor(const char* value, size_t size);
  std::string* mutable_prev_cursor();
  std::string* release_prev_cursor();
  void set_allocated_prev_cursor(std::string* prev_cursor);
  private:
  const std::string& _internal_prev_cursor() const;
  void _internal_set_prev_cursor(const std::string& value);
  std::string* _internal_mutable_prev_cursor();
  public:

  // @@protoc_insertion_point(class_scope:nakama.api.LeaderboardRecordList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nakama::api::LeaderboardRecord > records_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nakama::api::LeaderboardRecord > owner_records_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_cursor_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prev_cursor_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto;
};
// -------------------------------------------------------------------

class LeaveGroupRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nakama.api.LeaveGroupRequest) */ {
 public:
  inline LeaveGroupRequest() : LeaveGroupRequest(nullptr) {}
  virtual ~LeaveGroupRequest();

  LeaveGroupRequest(const LeaveGroupRequest& from);
  LeaveGroupRequest(LeaveGroupRequest&& from) noexcept
    : LeaveGroupRequest() {
    *this = ::std::move(from);
  }

  inline LeaveGroupRequest& operator=(const LeaveGroupRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LeaveGroupRequest& operator=(LeaveGroupRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LeaveGroupRequest& default_instance();

  static inline const LeaveGroupRequest* internal_default_instance() {
    return reinterpret_cast<const LeaveGroupRequest*>(
               &_LeaveGroupRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    65;

  friend void swap(LeaveGroupRequest& a, LeaveGroupRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LeaveGroupRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LeaveGroupRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LeaveGroupRequest* New() const final {
    return CreateMaybeMessage<LeaveGroupRequest>(nullptr);
  }

  LeaveGroupRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LeaveGroupRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LeaveGroupRequest& from);
  void MergeFrom(const LeaveGroupRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LeaveGroupRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nakama.api.LeaveGroupRequest";
  }
  protected:
  explicit LeaveGroupRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto);
    return ::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupIdFieldNumber = 1,
  };
  // string group_id = 1;
  void clear_group_id();
  const std::string& group_id() const;
  void set_group_id(const std::string& value);
  void set_group_id(std::string&& value);
  void set_group_id(const char* value);
  void set_group_id(const char* value, size_t size);
  std::string* mutable_group_id();
  std::string* release_group_id();
  void set_allocated_group_id(std::string* group_id);
  private:
  const std::string& _internal_group_id() const;
  void _internal_set_group_id(const std::string& value);
  std::string* _internal_mutable_group_id();
  public:

  // @@protoc_insertion_point(class_scope:nakama.api.LeaveGroupRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr group_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto;
};
// -------------------------------------------------------------------

class LinkFacebookRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nakama.api.LinkFacebookRequest) */ {
 public:
  inline LinkFacebookRequest() : LinkFacebookRequest(nullptr) {}
  virtual ~LinkFacebookRequest();

  LinkFacebookRequest(const LinkFacebookRequest& from);
  LinkFacebookRequest(LinkFacebookRequest&& from) noexcept
    : LinkFacebookRequest() {
    *this = ::std::move(from);
  }

  inline LinkFacebookRequest& operator=(const LinkFacebookRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LinkFacebookRequest& operator=(LinkFacebookRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LinkFacebookRequest& default_instance();

  static inline const LinkFacebookRequest* internal_default_instance() {
    return reinterpret_cast<const LinkFacebookRequest*>(
               &_LinkFacebookRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    66;

  friend void swap(LinkFacebookRequest& a, LinkFacebookRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LinkFacebookRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LinkFacebookRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LinkFacebookRequest* New() const final {
    return CreateMaybeMessage<LinkFacebookRequest>(nullptr);
  }

  LinkFacebookRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LinkFacebookRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LinkFacebookRequest& from);
  void MergeFrom(const LinkFacebookRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LinkFacebookRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nakama.api.LinkFacebookRequest";
  }
  protected:
  explicit LinkFacebookRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto);
    return ::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 1,
    kSyncFieldNumber = 2,
  };
  // .nakama.api.AccountFacebook account = 1;
  bool has_account() const;
  private:
  bool _internal_has_account() const;
  public:
  void clear_account();
  const ::nakama::api::AccountFacebook& account() const;
  ::nakama::api::AccountFacebook* release_account();
  ::nakama::api::AccountFacebook* mutable_account();
  void set_allocated_account(::nakama::api::AccountFacebook* account);
  private:
  const ::nakama::api::AccountFacebook& _internal_account() const;
  ::nakama::api::AccountFacebook* _internal_mutable_account();
  public:
  void unsafe_arena_set_allocated_account(
      ::nakama::api::AccountFacebook* account);
  ::nakama::api::AccountFacebook* unsafe_arena_release_account();

  // .google.protobuf.BoolValue sync = 2;
  bool has_sync() const;
  private:
  bool _internal_has_sync() const;
  public:
  void clear_sync();
  const PROTOBUF_NAMESPACE_ID::BoolValue& sync() const;
  PROTOBUF_NAMESPACE_ID::BoolValue* release_sync();
  PROTOBUF_NAMESPACE_ID::BoolValue* mutable_sync();
  void set_allocated_sync(PROTOBUF_NAMESPACE_ID::BoolValue* sync);
  private:
  const PROTOBUF_NAMESPACE_ID::BoolValue& _internal_sync() const;
  PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_sync();
  public:
  void unsafe_arena_set_allocated_sync(
      PROTOBUF_NAMESPACE_ID::BoolValue* sync);
  PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_sync();

  // @@protoc_insertion_point(class_scope:nakama.api.LinkFacebookRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::nakama::api::AccountFacebook* account_;
  PROTOBUF_NAMESPACE_ID::BoolValue* sync_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto;
};
// -------------------------------------------------------------------

class LinkSteamRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nakama.api.LinkSteamRequest) */ {
 public:
  inline LinkSteamRequest() : LinkSteamRequest(nullptr) {}
  virtual ~LinkSteamRequest();

  LinkSteamRequest(const LinkSteamRequest& from);
  LinkSteamRequest(LinkSteamRequest&& from) noexcept
    : LinkSteamRequest() {
    *this = ::std::move(from);
  }

  inline LinkSteamRequest& operator=(const LinkSteamRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LinkSteamRequest& operator=(LinkSteamRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LinkSteamRequest& default_instance();

  static inline const LinkSteamRequest* internal_default_instance() {
    return reinterpret_cast<const LinkSteamRequest*>(
               &_LinkSteamRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    67;

  friend void swap(LinkSteamRequest& a, LinkSteamRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LinkSteamRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LinkSteamRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LinkSteamRequest* New() const final {
    return CreateMaybeMessage<LinkSteamRequest>(nullptr);
  }

  LinkSteamRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LinkSteamRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LinkSteamRequest& from);
  void MergeFrom(const LinkSteamRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LinkSteamRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nakama.api.LinkSteamRequest";
  }
  protected:
  explicit LinkSteamRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto);
    return ::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 1,
    kSyncFieldNumber = 2,
  };
  // .nakama.api.AccountSteam account = 1;
  bool has_account() const;
  private:
  bool _internal_has_account() const;
  public:
  void clear_account();
  const ::nakama::api::AccountSteam& account() const;
  ::nakama::api::AccountSteam* release_account();
  ::nakama::api::AccountSteam* mutable_account();
  void set_allocated_account(::nakama::api::AccountSteam* account);
  private:
  const ::nakama::api::AccountSteam& _internal_account() const;
  ::nakama::api::AccountSteam* _internal_mutable_account();
  public:
  void unsafe_arena_set_allocated_account(
      ::nakama::api::AccountSteam* account);
  ::nakama::api::AccountSteam* unsafe_arena_release_account();

  // .google.protobuf.BoolValue sync = 2;
  bool has_sync() const;
  private:
  bool _internal_has_sync() const;
  public:
  void clear_sync();
  const PROTOBUF_NAMESPACE_ID::BoolValue& sync() const;
  PROTOBUF_NAMESPACE_ID::BoolValue* release_sync();
  PROTOBUF_NAMESPACE_ID::BoolValue* mutable_sync();
  void set_allocated_sync(PROTOBUF_NAMESPACE_ID::BoolValue* sync);
  private:
  const PROTOBUF_NAMESPACE_ID::BoolValue& _internal_sync() const;
  PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_sync();
  public:
  void unsafe_arena_set_allocated_sync(
      PROTOBUF_NAMESPACE_ID::BoolValue* sync);
  PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_sync();

  // @@protoc_insertion_point(class_scope:nakama.api.LinkSteamRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::nakama::api::AccountSteam* account_;
  PROTOBUF_NAMESPACE_ID::BoolValue* sync_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto;
};
// -------------------------------------------------------------------

class ListChannelMessagesRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nakama.api.ListChannelMessagesRequest) */ {
 public:
  inline ListChannelMessagesRequest() : ListChannelMessagesRequest(nullptr) {}
  virtual ~ListChannelMessagesRequest();

  ListChannelMessagesRequest(const ListChannelMessagesRequest& from);
  ListChannelMessagesRequest(ListChannelMessagesRequest&& from) noexcept
    : ListChannelMessagesRequest() {
    *this = ::std::move(from);
  }

  inline ListChannelMessagesRequest& operator=(const ListChannelMessagesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListChannelMessagesRequest& operator=(ListChannelMessagesRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListChannelMessagesRequest& default_instance();

  static inline const ListChannelMessagesRequest* internal_default_instance() {
    return reinterpret_cast<const ListChannelMessagesRequest*>(
               &_ListChannelMessagesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    68;

  friend void swap(ListChannelMessagesRequest& a, ListChannelMessagesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListChannelMessagesRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListChannelMessagesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListChannelMessagesRequest* New() const final {
    return CreateMaybeMessage<ListChannelMessagesRequest>(nullptr);
  }

  ListChannelMessagesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListChannelMessagesRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListChannelMessagesRequest& from);
  void MergeFrom(const ListChannelMessagesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListChannelMessagesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nakama.api.ListChannelMessagesRequest";
  }
  protected:
  explicit ListChannelMessagesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto);
    return ::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelIdFieldNumber = 1,
    kCursorFieldNumber = 4,
    kLimitFieldNumber = 2,
    kForwardFieldNumber = 3,
  };
  // string channel_id = 1;
  void clear_channel_id();
  const std::string& channel_id() const;
  void set_channel_id(const std::string& value);
  void set_channel_id(std::string&& value);
  void set_channel_id(const char* value);
  void set_channel_id(const char* value, size_t size);
  std::string* mutable_channel_id();
  std::string* release_channel_id();
  void set_allocated_channel_id(std::string* channel_id);
  private:
  const std::string& _internal_channel_id() const;
  void _internal_set_channel_id(const std::string& value);
  std::string* _internal_mutable_channel_id();
  public:

  // string cursor = 4;
  void clear_cursor();
  const std::string& cursor() const;
  void set_cursor(const std::string& value);
  void set_cursor(std::string&& value);
  void set_cursor(const char* value);
  void set_cursor(const char* value, size_t size);
  std::string* mutable_cursor();
  std::string* release_cursor();
  void set_allocated_cursor(std::string* cursor);
  private:
  const std::string& _internal_cursor() const;
  void _internal_set_cursor(const std::string& value);
  std::string* _internal_mutable_cursor();
  public:

  // .google.protobuf.Int32Value limit = 2;
  bool has_limit() const;
  private:
  bool _internal_has_limit() const;
  public:
  void clear_limit();
  const PROTOBUF_NAMESPACE_ID::Int32Value& limit() const;
  PROTOBUF_NAMESPACE_ID::Int32Value* release_limit();
  PROTOBUF_NAMESPACE_ID::Int32Value* mutable_limit();
  void set_allocated_limit(PROTOBUF_NAMESPACE_ID::Int32Value* limit);
  private:
  const PROTOBUF_NAMESPACE_ID::Int32Value& _internal_limit() const;
  PROTOBUF_NAMESPACE_ID::Int32Value* _internal_mutable_limit();
  public:
  void unsafe_arena_set_allocated_limit(
      PROTOBUF_NAMESPACE_ID::Int32Value* limit);
  PROTOBUF_NAMESPACE_ID::Int32Value* unsafe_arena_release_limit();

  // .google.protobuf.BoolValue forward = 3;
  bool has_forward() const;
  private:
  bool _internal_has_forward() const;
  public:
  void clear_forward();
  const PROTOBUF_NAMESPACE_ID::BoolValue& forward() const;
  PROTOBUF_NAMESPACE_ID::BoolValue* release_forward();
  PROTOBUF_NAMESPACE_ID::BoolValue* mutable_forward();
  void set_allocated_forward(PROTOBUF_NAMESPACE_ID::BoolValue* forward);
  private:
  const PROTOBUF_NAMESPACE_ID::BoolValue& _internal_forward() const;
  PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_forward();
  public:
  void unsafe_arena_set_allocated_forward(
      PROTOBUF_NAMESPACE_ID::BoolValue* forward);
  PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_forward();

  // @@protoc_insertion_point(class_scope:nakama.api.ListChannelMessagesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr channel_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cursor_;
  PROTOBUF_NAMESPACE_ID::Int32Value* limit_;
  PROTOBUF_NAMESPACE_ID::BoolValue* forward_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto;
};
// -------------------------------------------------------------------

class ListFriendsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nakama.api.ListFriendsRequest) */ {
 public:
  inline ListFriendsRequest() : ListFriendsRequest(nullptr) {}
  virtual ~ListFriendsRequest();

  ListFriendsRequest(const ListFriendsRequest& from);
  ListFriendsRequest(ListFriendsRequest&& from) noexcept
    : ListFriendsRequest() {
    *this = ::std::move(from);
  }

  inline ListFriendsRequest& operator=(const ListFriendsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListFriendsRequest& operator=(ListFriendsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListFriendsRequest& default_instance();

  static inline const ListFriendsRequest* internal_default_instance() {
    return reinterpret_cast<const ListFriendsRequest*>(
               &_ListFriendsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    69;

  friend void swap(ListFriendsRequest& a, ListFriendsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListFriendsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListFriendsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListFriendsRequest* New() const final {
    return CreateMaybeMessage<ListFriendsRequest>(nullptr);
  }

  ListFriendsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListFriendsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListFriendsRequest& from);
  void MergeFrom(const ListFriendsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListFriendsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nakama.api.ListFriendsRequest";
  }
  protected:
  explicit ListFriendsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto);
    return ::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCursorFieldNumber = 3,
    kLimitFieldNumber = 1,
    kStateFieldNumber = 2,
  };
  // string cursor = 3;
  void clear_cursor();
  const std::string& cursor() const;
  void set_cursor(const std::string& value);
  void set_cursor(std::string&& value);
  void set_cursor(const char* value);
  void set_cursor(const char* value, size_t size);
  std::string* mutable_cursor();
  std::string* release_cursor();
  void set_allocated_cursor(std::string* cursor);
  private:
  const std::string& _internal_cursor() const;
  void _internal_set_cursor(const std::string& value);
  std::string* _internal_mutable_cursor();
  public:

  // .google.protobuf.Int32Value limit = 1;
  bool has_limit() const;
  private:
  bool _internal_has_limit() const;
  public:
  void clear_limit();
  const PROTOBUF_NAMESPACE_ID::Int32Value& limit() const;
  PROTOBUF_NAMESPACE_ID::Int32Value* release_limit();
  PROTOBUF_NAMESPACE_ID::Int32Value* mutable_limit();
  void set_allocated_limit(PROTOBUF_NAMESPACE_ID::Int32Value* limit);
  private:
  const PROTOBUF_NAMESPACE_ID::Int32Value& _internal_limit() const;
  PROTOBUF_NAMESPACE_ID::Int32Value* _internal_mutable_limit();
  public:
  void unsafe_arena_set_allocated_limit(
      PROTOBUF_NAMESPACE_ID::Int32Value* limit);
  PROTOBUF_NAMESPACE_ID::Int32Value* unsafe_arena_release_limit();

  // .google.protobuf.Int32Value state = 2;
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  const PROTOBUF_NAMESPACE_ID::Int32Value& state() const;
  PROTOBUF_NAMESPACE_ID::Int32Value* release_state();
  PROTOBUF_NAMESPACE_ID::Int32Value* mutable_state();
  void set_allocated_state(PROTOBUF_NAMESPACE_ID::Int32Value* state);
  private:
  const PROTOBUF_NAMESPACE_ID::Int32Value& _internal_state() const;
  PROTOBUF_NAMESPACE_ID::Int32Value* _internal_mutable_state();
  public:
  void unsafe_arena_set_allocated_state(
      PROTOBUF_NAMESPACE_ID::Int32Value* state);
  PROTOBUF_NAMESPACE_ID::Int32Value* unsafe_arena_release_state();

  // @@protoc_insertion_point(class_scope:nakama.api.ListFriendsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cursor_;
  PROTOBUF_NAMESPACE_ID::Int32Value* limit_;
  PROTOBUF_NAMESPACE_ID::Int32Value* state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto;
};
// -------------------------------------------------------------------

class ListGroupsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nakama.api.ListGroupsRequest) */ {
 public:
  inline ListGroupsRequest() : ListGroupsRequest(nullptr) {}
  virtual ~ListGroupsRequest();

  ListGroupsRequest(const ListGroupsRequest& from);
  ListGroupsRequest(ListGroupsRequest&& from) noexcept
    : ListGroupsRequest() {
    *this = ::std::move(from);
  }

  inline ListGroupsRequest& operator=(const ListGroupsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListGroupsRequest& operator=(ListGroupsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListGroupsRequest& default_instance();

  static inline const ListGroupsRequest* internal_default_instance() {
    return reinterpret_cast<const ListGroupsRequest*>(
               &_ListGroupsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    70;

  friend void swap(ListGroupsRequest& a, ListGroupsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListGroupsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListGroupsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListGroupsRequest* New() const final {
    return CreateMaybeMessage<ListGroupsRequest>(nullptr);
  }

  ListGroupsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListGroupsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListGroupsRequest& from);
  void MergeFrom(const ListGroupsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListGroupsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nakama.api.ListGroupsRequest";
  }
  protected:
  explicit ListGroupsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto);
    return ::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kCursorFieldNumber = 2,
    kLangTagFieldNumber = 4,
    kLimitFieldNumber = 3,
    kMembersFieldNumber = 5,
    kOpenFieldNumber = 6,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string cursor = 2;
  void clear_cursor();
  const std::string& cursor() const;
  void set_cursor(const std::string& value);
  void set_cursor(std::string&& value);
  void set_cursor(const char* value);
  void set_cursor(const char* value, size_t size);
  std::string* mutable_cursor();
  std::string* release_cursor();
  void set_allocated_cursor(std::string* cursor);
  private:
  const std::string& _internal_cursor() const;
  void _internal_set_cursor(const std::string& value);
  std::string* _internal_mutable_cursor();
  public:

  // string lang_tag = 4;
  void clear_lang_tag();
  const std::string& lang_tag() const;
  void set_lang_tag(const std::string& value);
  void set_lang_tag(std::string&& value);
  void set_lang_tag(const char* value);
  void set_lang_tag(const char* value, size_t size);
  std::string* mutable_lang_tag();
  std::string* release_lang_tag();
  void set_allocated_lang_tag(std::string* lang_tag);
  private:
  const std::string& _internal_lang_tag() const;
  void _internal_set_lang_tag(const std::string& value);
  std::string* _internal_mutable_lang_tag();
  public:

  // .google.protobuf.Int32Value limit = 3;
  bool has_limit() const;
  private:
  bool _internal_has_limit() const;
  public:
  void clear_limit();
  const PROTOBUF_NAMESPACE_ID::Int32Value& limit() const;
  PROTOBUF_NAMESPACE_ID::Int32Value* release_limit();
  PROTOBUF_NAMESPACE_ID::Int32Value* mutable_limit();
  void set_allocated_limit(PROTOBUF_NAMESPACE_ID::Int32Value* limit);
  private:
  const PROTOBUF_NAMESPACE_ID::Int32Value& _internal_limit() const;
  PROTOBUF_NAMESPACE_ID::Int32Value* _internal_mutable_limit();
  public:
  void unsafe_arena_set_allocated_limit(
      PROTOBUF_NAMESPACE_ID::Int32Value* limit);
  PROTOBUF_NAMESPACE_ID::Int32Value* unsafe_arena_release_limit();

  // .google.protobuf.Int32Value members = 5;
  bool has_members() const;
  private:
  bool _internal_has_members() const;
  public:
  void clear_members();
  const PROTOBUF_NAMESPACE_ID::Int32Value& members() const;
  PROTOBUF_NAMESPACE_ID::Int32Value* release_members();
  PROTOBUF_NAMESPACE_ID::Int32Value* mutable_members();
  void set_allocated_members(PROTOBUF_NAMESPACE_ID::Int32Value* members);
  private:
  const PROTOBUF_NAMESPACE_ID::Int32Value& _internal_members() const;
  PROTOBUF_NAMESPACE_ID::Int32Value* _internal_mutable_members();
  public:
  void unsafe_arena_set_allocated_members(
      PROTOBUF_NAMESPACE_ID::Int32Value* members);
  PROTOBUF_NAMESPACE_ID::Int32Value* unsafe_arena_release_members();

  // .google.protobuf.BoolValue open = 6;
  bool has_open() const;
  private:
  bool _internal_has_open() const;
  public:
  void clear_open();
  const PROTOBUF_NAMESPACE_ID::BoolValue& open() const;
  PROTOBUF_NAMESPACE_ID::BoolValue* release_open();
  PROTOBUF_NAMESPACE_ID::BoolValue* mutable_open();
  void set_allocated_open(PROTOBUF_NAMESPACE_ID::BoolValue* open);
  private:
  const PROTOBUF_NAMESPACE_ID::BoolValue& _internal_open() const;
  PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_open();
  public:
  void unsafe_arena_set_allocated_open(
      PROTOBUF_NAMESPACE_ID::BoolValue* open);
  PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_open();

  // @@protoc_insertion_point(class_scope:nakama.api.ListGroupsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cursor_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lang_tag_;
  PROTOBUF_NAMESPACE_ID::Int32Value* limit_;
  PROTOBUF_NAMESPACE_ID::Int32Value* members_;
  PROTOBUF_NAMESPACE_ID::BoolValue* open_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto;
};
// -------------------------------------------------------------------

class ListGroupUsersRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nakama.api.ListGroupUsersRequest) */ {
 public:
  inline ListGroupUsersRequest() : ListGroupUsersRequest(nullptr) {}
  virtual ~ListGroupUsersRequest();

  ListGroupUsersRequest(const ListGroupUsersRequest& from);
  ListGroupUsersRequest(ListGroupUsersRequest&& from) noexcept
    : ListGroupUsersRequest() {
    *this = ::std::move(from);
  }

  inline ListGroupUsersRequest& operator=(const ListGroupUsersRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListGroupUsersRequest& operator=(ListGroupUsersRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListGroupUsersRequest& default_instance();

  static inline const ListGroupUsersRequest* internal_default_instance() {
    return reinterpret_cast<const ListGroupUsersRequest*>(
               &_ListGroupUsersRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    71;

  friend void swap(ListGroupUsersRequest& a, ListGroupUsersRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListGroupUsersRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListGroupUsersRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListGroupUsersRequest* New() const final {
    return CreateMaybeMessage<ListGroupUsersRequest>(nullptr);
  }

  ListGroupUsersRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListGroupUsersRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListGroupUsersRequest& from);
  void MergeFrom(const ListGroupUsersRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListGroupUsersRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nakama.api.ListGroupUsersRequest";
  }
  protected:
  explicit ListGroupUsersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto);
    return ::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupIdFieldNumber = 1,
    kCursorFieldNumber = 4,
    kLimitFieldNumber = 2,
    kStateFieldNumber = 3,
  };
  // string group_id = 1;
  void clear_group_id();
  const std::string& group_id() const;
  void set_group_id(const std::string& value);
  void set_group_id(std::string&& value);
  void set_group_id(const char* value);
  void set_group_id(const char* value, size_t size);
  std::string* mutable_group_id();
  std::string* release_group_id();
  void set_allocated_group_id(std::string* group_id);
  private:
  const std::string& _internal_group_id() const;
  void _internal_set_group_id(const std::string& value);
  std::string* _internal_mutable_group_id();
  public:

  // string cursor = 4;
  void clear_cursor();
  const std::string& cursor() const;
  void set_cursor(const std::string& value);
  void set_cursor(std::string&& value);
  void set_cursor(const char* value);
  void set_cursor(const char* value, size_t size);
  std::string* mutable_cursor();
  std::string* release_cursor();
  void set_allocated_cursor(std::string* cursor);
  private:
  const std::string& _internal_cursor() const;
  void _internal_set_cursor(const std::string& value);
  std::string* _internal_mutable_cursor();
  public:

  // .google.protobuf.Int32Value limit = 2;
  bool has_limit() const;
  private:
  bool _internal_has_limit() const;
  public:
  void clear_limit();
  const PROTOBUF_NAMESPACE_ID::Int32Value& limit() const;
  PROTOBUF_NAMESPACE_ID::Int32Value* release_limit();
  PROTOBUF_NAMESPACE_ID::Int32Value* mutable_limit();
  void set_allocated_limit(PROTOBUF_NAMESPACE_ID::Int32Value* limit);
  private:
  const PROTOBUF_NAMESPACE_ID::Int32Value& _internal_limit() const;
  PROTOBUF_NAMESPACE_ID::Int32Value* _internal_mutable_limit();
  public:
  void unsafe_arena_set_allocated_limit(
      PROTOBUF_NAMESPACE_ID::Int32Value* limit);
  PROTOBUF_NAMESPACE_ID::Int32Value* unsafe_arena_release_limit();

  // .google.protobuf.Int32Value state = 3;
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  const PROTOBUF_NAMESPACE_ID::Int32Value& state() const;
  PROTOBUF_NAMESPACE_ID::Int32Value* release_state();
  PROTOBUF_NAMESPACE_ID::Int32Value* mutable_state();
  void set_allocated_state(PROTOBUF_NAMESPACE_ID::Int32Value* state);
  private:
  const PROTOBUF_NAMESPACE_ID::Int32Value& _internal_state() const;
  PROTOBUF_NAMESPACE_ID::Int32Value* _internal_mutable_state();
  public:
  void unsafe_arena_set_allocated_state(
      PROTOBUF_NAMESPACE_ID::Int32Value* state);
  PROTOBUF_NAMESPACE_ID::Int32Value* unsafe_arena_release_state();

  // @@protoc_insertion_point(class_scope:nakama.api.ListGroupUsersRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr group_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cursor_;
  PROTOBUF_NAMESPACE_ID::Int32Value* limit_;
  PROTOBUF_NAMESPACE_ID::Int32Value* state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto;
};
// -------------------------------------------------------------------

class ListLeaderboardRecordsAroundOwnerRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nakama.api.ListLeaderboardRecordsAroundOwnerRequest) */ {
 public:
  inline ListLeaderboardRecordsAroundOwnerRequest() : ListLeaderboardRecordsAroundOwnerRequest(nullptr) {}
  virtual ~ListLeaderboardRecordsAroundOwnerRequest();

  ListLeaderboardRecordsAroundOwnerRequest(const ListLeaderboardRecordsAroundOwnerRequest& from);
  ListLeaderboardRecordsAroundOwnerRequest(ListLeaderboardRecordsAroundOwnerRequest&& from) noexcept
    : ListLeaderboardRecordsAroundOwnerRequest() {
    *this = ::std::move(from);
  }

  inline ListLeaderboardRecordsAroundOwnerRequest& operator=(const ListLeaderboardRecordsAroundOwnerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListLeaderboardRecordsAroundOwnerRequest& operator=(ListLeaderboardRecordsAroundOwnerRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListLeaderboardRecordsAroundOwnerRequest& default_instance();

  static inline const ListLeaderboardRecordsAroundOwnerRequest* internal_default_instance() {
    return reinterpret_cast<const ListLeaderboardRecordsAroundOwnerRequest*>(
               &_ListLeaderboardRecordsAroundOwnerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    72;

  friend void swap(ListLeaderboardRecordsAroundOwnerRequest& a, ListLeaderboardRecordsAroundOwnerRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListLeaderboardRecordsAroundOwnerRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListLeaderboardRecordsAroundOwnerRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListLeaderboardRecordsAroundOwnerRequest* New() const final {
    return CreateMaybeMessage<ListLeaderboardRecordsAroundOwnerRequest>(nullptr);
  }

  ListLeaderboardRecordsAroundOwnerRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListLeaderboardRecordsAroundOwnerRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListLeaderboardRecordsAroundOwnerRequest& from);
  void MergeFrom(const ListLeaderboardRecordsAroundOwnerRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListLeaderboardRecordsAroundOwnerRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nakama.api.ListLeaderboardRecordsAroundOwnerRequest";
  }
  protected:
  explicit ListLeaderboardRecordsAroundOwnerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto);
    return ::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLeaderboardIdFieldNumber = 1,
    kOwnerIdFieldNumber = 3,
    kCursorFieldNumber = 5,
    kLimitFieldNumber = 2,
    kExpiryFieldNumber = 4,
  };
  // string leaderboard_id = 1;
  void clear_leaderboard_id();
  const std::string& leaderboard_id() const;
  void set_leaderboard_id(const std::string& value);
  void set_leaderboard_id(std::string&& value);
  void set_leaderboard_id(const char* value);
  void set_leaderboard_id(const char* value, size_t size);
  std::string* mutable_leaderboard_id();
  std::string* release_leaderboard_id();
  void set_allocated_leaderboard_id(std::string* leaderboard_id);
  private:
  const std::string& _internal_leaderboard_id() const;
  void _internal_set_leaderboard_id(const std::string& value);
  std::string* _internal_mutable_leaderboard_id();
  public:

  // string owner_id = 3;
  void clear_owner_id();
  const std::string& owner_id() const;
  void set_owner_id(const std::string& value);
  void set_owner_id(std::string&& value);
  void set_owner_id(const char* value);
  void set_owner_id(const char* value, size_t size);
  std::string* mutable_owner_id();
  std::string* release_owner_id();
  void set_allocated_owner_id(std::string* owner_id);
  private:
  const std::string& _internal_owner_id() const;
  void _internal_set_owner_id(const std::string& value);
  std::string* _internal_mutable_owner_id();
  public:

  // string cursor = 5;
  void clear_cursor();
  const std::string& cursor() const;
  void set_cursor(const std::string& value);
  void set_cursor(std::string&& value);
  void set_cursor(const char* value);
  void set_cursor(const char* value, size_t size);
  std::string* mutable_cursor();
  std::string* release_cursor();
  void set_allocated_cursor(std::string* cursor);
  private:
  const std::string& _internal_cursor() const;
  void _internal_set_cursor(const std::string& value);
  std::string* _internal_mutable_cursor();
  public:

  // .google.protobuf.UInt32Value limit = 2;
  bool has_limit() const;
  private:
  bool _internal_has_limit() const;
  public:
  void clear_limit();
  const PROTOBUF_NAMESPACE_ID::UInt32Value& limit() const;
  PROTOBUF_NAMESPACE_ID::UInt32Value* release_limit();
  PROTOBUF_NAMESPACE_ID::UInt32Value* mutable_limit();
  void set_allocated_limit(PROTOBUF_NAMESPACE_ID::UInt32Value* limit);
  private:
  const PROTOBUF_NAMESPACE_ID::UInt32Value& _internal_limit() const;
  PROTOBUF_NAMESPACE_ID::UInt32Value* _internal_mutable_limit();
  public:
  void unsafe_arena_set_allocated_limit(
      PROTOBUF_NAMESPACE_ID::UInt32Value* limit);
  PROTOBUF_NAMESPACE_ID::UInt32Value* unsafe_arena_release_limit();

  // .google.protobuf.Int64Value expiry = 4;
  bool has_expiry() const;
  private:
  bool _internal_has_expiry() const;
  public:
  void clear_expiry();
  const PROTOBUF_NAMESPACE_ID::Int64Value& expiry() const;
  PROTOBUF_NAMESPACE_ID::Int64Value* release_expiry();
  PROTOBUF_NAMESPACE_ID::Int64Value* mutable_expiry();
  void set_allocated_expiry(PROTOBUF_NAMESPACE_ID::Int64Value* expiry);
  private:
  const PROTOBUF_NAMESPACE_ID::Int64Value& _internal_expiry() const;
  PROTOBUF_NAMESPACE_ID::Int64Value* _internal_mutable_expiry();
  public:
  void unsafe_arena_set_allocated_expiry(
      PROTOBUF_NAMESPACE_ID::Int64Value* expiry);
  PROTOBUF_NAMESPACE_ID::Int64Value* unsafe_arena_release_expiry();

  // @@protoc_insertion_point(class_scope:nakama.api.ListLeaderboardRecordsAroundOwnerRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr leaderboard_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr owner_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cursor_;
  PROTOBUF_NAMESPACE_ID::UInt32Value* limit_;
  PROTOBUF_NAMESPACE_ID::Int64Value* expiry_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto;
};
// -------------------------------------------------------------------

class ListLeaderboardRecordsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nakama.api.ListLeaderboardRecordsRequest) */ {
 public:
  inline ListLeaderboardRecordsRequest() : ListLeaderboardRecordsRequest(nullptr) {}
  virtual ~ListLeaderboardRecordsRequest();

  ListLeaderboardRecordsRequest(const ListLeaderboardRecordsRequest& from);
  ListLeaderboardRecordsRequest(ListLeaderboardRecordsRequest&& from) noexcept
    : ListLeaderboardRecordsRequest() {
    *this = ::std::move(from);
  }

  inline ListLeaderboardRecordsRequest& operator=(const ListLeaderboardRecordsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListLeaderboardRecordsRequest& operator=(ListLeaderboardRecordsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListLeaderboardRecordsRequest& default_instance();

  static inline const ListLeaderboardRecordsRequest* internal_default_instance() {
    return reinterpret_cast<const ListLeaderboardRecordsRequest*>(
               &_ListLeaderboardRecordsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    73;

  friend void swap(ListLeaderboardRecordsRequest& a, ListLeaderboardRecordsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListLeaderboardRecordsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListLeaderboardRecordsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListLeaderboardRecordsRequest* New() const final {
    return CreateMaybeMessage<ListLeaderboardRecordsRequest>(nullptr);
  }

  ListLeaderboardRecordsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListLeaderboardRecordsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListLeaderboardRecordsRequest& from);
  void MergeFrom(const ListLeaderboardRecordsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListLeaderboardRecordsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nakama.api.ListLeaderboardRecordsRequest";
  }
  protected:
  explicit ListLeaderboardRecordsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto);
    return ::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOwnerIdsFieldNumber = 2,
    kLeaderboardIdFieldNumber = 1,
    kCursorFieldNumber = 4,
    kLimitFieldNumber = 3,
    kExpiryFieldNumber = 5,
  };
  // repeated string owner_ids = 2;
  int owner_ids_size() const;
  private:
  int _internal_owner_ids_size() const;
  public:
  void clear_owner_ids();
  const std::string& owner_ids(int index) const;
  std::string* mutable_owner_ids(int index);
  void set_owner_ids(int index, const std::string& value);
  void set_owner_ids(int index, std::string&& value);
  void set_owner_ids(int index, const char* value);
  void set_owner_ids(int index, const char* value, size_t size);
  std::string* add_owner_ids();
  void add_owner_ids(const std::string& value);
  void add_owner_ids(std::string&& value);
  void add_owner_ids(const char* value);
  void add_owner_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& owner_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_owner_ids();
  private:
  const std::string& _internal_owner_ids(int index) const;
  std::string* _internal_add_owner_ids();
  public:

  // string leaderboard_id = 1;
  void clear_leaderboard_id();
  const std::string& leaderboard_id() const;
  void set_leaderboard_id(const std::string& value);
  void set_leaderboard_id(std::string&& value);
  void set_leaderboard_id(const char* value);
  void set_leaderboard_id(const char* value, size_t size);
  std::string* mutable_leaderboard_id();
  std::string* release_leaderboard_id();
  void set_allocated_leaderboard_id(std::string* leaderboard_id);
  private:
  const std::string& _internal_leaderboard_id() const;
  void _internal_set_leaderboard_id(const std::string& value);
  std::string* _internal_mutable_leaderboard_id();
  public:

  // string cursor = 4;
  void clear_cursor();
  const std::string& cursor() const;
  void set_cursor(const std::string& value);
  void set_cursor(std::string&& value);
  void set_cursor(const char* value);
  void set_cursor(const char* value, size_t size);
  std::string* mutable_cursor();
  std::string* release_cursor();
  void set_allocated_cursor(std::string* cursor);
  private:
  const std::string& _internal_cursor() const;
  void _internal_set_cursor(const std::string& value);
  std::string* _internal_mutable_cursor();
  public:

  // .google.protobuf.Int32Value limit = 3;
  bool has_limit() const;
  private:
  bool _internal_has_limit() const;
  public:
  void clear_limit();
  const PROTOBUF_NAMESPACE_ID::Int32Value& limit() const;
  PROTOBUF_NAMESPACE_ID::Int32Value* release_limit();
  PROTOBUF_NAMESPACE_ID::Int32Value* mutable_limit();
  void set_allocated_limit(PROTOBUF_NAMESPACE_ID::Int32Value* limit);
  private:
  const PROTOBUF_NAMESPACE_ID::Int32Value& _internal_limit() const;
  PROTOBUF_NAMESPACE_ID::Int32Value* _internal_mutable_limit();
  public:
  void unsafe_arena_set_allocated_limit(
      PROTOBUF_NAMESPACE_ID::Int32Value* limit);
  PROTOBUF_NAMESPACE_ID::Int32Value* unsafe_arena_release_limit();

  // .google.protobuf.Int64Value expiry = 5;
  bool has_expiry() const;
  private:
  bool _internal_has_expiry() const;
  public:
  void clear_expiry();
  const PROTOBUF_NAMESPACE_ID::Int64Value& expiry() const;
  PROTOBUF_NAMESPACE_ID::Int64Value* release_expiry();
  PROTOBUF_NAMESPACE_ID::Int64Value* mutable_expiry();
  void set_allocated_expiry(PROTOBUF_NAMESPACE_ID::Int64Value* expiry);
  private:
  const PROTOBUF_NAMESPACE_ID::Int64Value& _internal_expiry() const;
  PROTOBUF_NAMESPACE_ID::Int64Value* _internal_mutable_expiry();
  public:
  void unsafe_arena_set_allocated_expiry(
      PROTOBUF_NAMESPACE_ID::Int64Value* expiry);
  PROTOBUF_NAMESPACE_ID::Int64Value* unsafe_arena_release_expiry();

  // @@protoc_insertion_point(class_scope:nakama.api.ListLeaderboardRecordsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> owner_ids_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr leaderboard_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cursor_;
  PROTOBUF_NAMESPACE_ID::Int32Value* limit_;
  PROTOBUF_NAMESPACE_ID::Int64Value* expiry_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto;
};
// -------------------------------------------------------------------

class ListMatchesRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nakama.api.ListMatchesRequest) */ {
 public:
  inline ListMatchesRequest() : ListMatchesRequest(nullptr) {}
  virtual ~ListMatchesRequest();

  ListMatchesRequest(const ListMatchesRequest& from);
  ListMatchesRequest(ListMatchesRequest&& from) noexcept
    : ListMatchesRequest() {
    *this = ::std::move(from);
  }

  inline ListMatchesRequest& operator=(const ListMatchesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListMatchesRequest& operator=(ListMatchesRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListMatchesRequest& default_instance();

  static inline const ListMatchesRequest* internal_default_instance() {
    return reinterpret_cast<const ListMatchesRequest*>(
               &_ListMatchesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    74;

  friend void swap(ListMatchesRequest& a, ListMatchesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListMatchesRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListMatchesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListMatchesRequest* New() const final {
    return CreateMaybeMessage<ListMatchesRequest>(nullptr);
  }

  ListMatchesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListMatchesRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListMatchesRequest& from);
  void MergeFrom(const ListMatchesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListMatchesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nakama.api.ListMatchesRequest";
  }
  protected:
  explicit ListMatchesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto);
    return ::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLimitFieldNumber = 1,
    kAuthoritativeFieldNumber = 2,
    kLabelFieldNumber = 3,
    kMinSizeFieldNumber = 4,
    kMaxSizeFieldNumber = 5,
    kQueryFieldNumber = 6,
  };
  // .google.protobuf.Int32Value limit = 1;
  bool has_limit() const;
  private:
  bool _internal_has_limit() const;
  public:
  void clear_limit();
  const PROTOBUF_NAMESPACE_ID::Int32Value& limit() const;
  PROTOBUF_NAMESPACE_ID::Int32Value* release_limit();
  PROTOBUF_NAMESPACE_ID::Int32Value* mutable_limit();
  void set_allocated_limit(PROTOBUF_NAMESPACE_ID::Int32Value* limit);
  private:
  const PROTOBUF_NAMESPACE_ID::Int32Value& _internal_limit() const;
  PROTOBUF_NAMESPACE_ID::Int32Value* _internal_mutable_limit();
  public:
  void unsafe_arena_set_allocated_limit(
      PROTOBUF_NAMESPACE_ID::Int32Value* limit);
  PROTOBUF_NAMESPACE_ID::Int32Value* unsafe_arena_release_limit();

  // .google.protobuf.BoolValue authoritative = 2;
  bool has_authoritative() const;
  private:
  bool _internal_has_authoritative() const;
  public:
  void clear_authoritative();
  const PROTOBUF_NAMESPACE_ID::BoolValue& authoritative() const;
  PROTOBUF_NAMESPACE_ID::BoolValue* release_authoritative();
  PROTOBUF_NAMESPACE_ID::BoolValue* mutable_authoritative();
  void set_allocated_authoritative(PROTOBUF_NAMESPACE_ID::BoolValue* authoritative);
  private:
  const PROTOBUF_NAMESPACE_ID::BoolValue& _internal_authoritative() const;
  PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_authoritative();
  public:
  void unsafe_arena_set_allocated_authoritative(
      PROTOBUF_NAMESPACE_ID::BoolValue* authoritative);
  PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_authoritative();

  // .google.protobuf.StringValue label = 3;
  bool has_label() const;
  private:
  bool _internal_has_label() const;
  public:
  void clear_label();
  const PROTOBUF_NAMESPACE_ID::StringValue& label() const;
  PROTOBUF_NAMESPACE_ID::StringValue* release_label();
  PROTOBUF_NAMESPACE_ID::StringValue* mutable_label();
  void set_allocated_label(PROTOBUF_NAMESPACE_ID::StringValue* label);
  private:
  const PROTOBUF_NAMESPACE_ID::StringValue& _internal_label() const;
  PROTOBUF_NAMESPACE_ID::StringValue* _internal_mutable_label();
  public:
  void unsafe_arena_set_allocated_label(
      PROTOBUF_NAMESPACE_ID::StringValue* label);
  PROTOBUF_NAMESPACE_ID::StringValue* unsafe_arena_release_label();

  // .google.protobuf.Int32Value min_size = 4;
  bool has_min_size() const;
  private:
  bool _internal_has_min_size() const;
  public:
  void clear_min_size();
  const PROTOBUF_NAMESPACE_ID::Int32Value& min_size() const;
  PROTOBUF_NAMESPACE_ID::Int32Value* release_min_size();
  PROTOBUF_NAMESPACE_ID::Int32Value* mutable_min_size();
  void set_allocated_min_size(PROTOBUF_NAMESPACE_ID::Int32Value* min_size);
  private:
  const PROTOBUF_NAMESPACE_ID::Int32Value& _internal_min_size() const;
  PROTOBUF_NAMESPACE_ID::Int32Value* _internal_mutable_min_size();
  public:
  void unsafe_arena_set_allocated_min_size(
      PROTOBUF_NAMESPACE_ID::Int32Value* min_size);
  PROTOBUF_NAMESPACE_ID::Int32Value* unsafe_arena_release_min_size();

  // .google.protobuf.Int32Value max_size = 5;
  bool has_max_size() const;
  private:
  bool _internal_has_max_size() const;
  public:
  void clear_max_size();
  const PROTOBUF_NAMESPACE_ID::Int32Value& max_size() const;
  PROTOBUF_NAMESPACE_ID::Int32Value* release_max_size();
  PROTOBUF_NAMESPACE_ID::Int32Value* mutable_max_size();
  void set_allocated_max_size(PROTOBUF_NAMESPACE_ID::Int32Value* max_size);
  private:
  const PROTOBUF_NAMESPACE_ID::Int32Value& _internal_max_size() const;
  PROTOBUF_NAMESPACE_ID::Int32Value* _internal_mutable_max_size();
  public:
  void unsafe_arena_set_allocated_max_size(
      PROTOBUF_NAMESPACE_ID::Int32Value* max_size);
  PROTOBUF_NAMESPACE_ID::Int32Value* unsafe_arena_release_max_size();

  // .google.protobuf.StringValue query = 6;
  bool has_query() const;
  private:
  bool _internal_has_query() const;
  public:
  void clear_query();
  const PROTOBUF_NAMESPACE_ID::StringValue& query() const;
  PROTOBUF_NAMESPACE_ID::StringValue* release_query();
  PROTOBUF_NAMESPACE_ID::StringValue* mutable_query();
  void set_allocated_query(PROTOBUF_NAMESPACE_ID::StringValue* query);
  private:
  const PROTOBUF_NAMESPACE_ID::StringValue& _internal_query() const;
  PROTOBUF_NAMESPACE_ID::StringValue* _internal_mutable_query();
  public:
  void unsafe_arena_set_allocated_query(
      PROTOBUF_NAMESPACE_ID::StringValue* query);
  PROTOBUF_NAMESPACE_ID::StringValue* unsafe_arena_release_query();

  // @@protoc_insertion_point(class_scope:nakama.api.ListMatchesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  PROTOBUF_NAMESPACE_ID::Int32Value* limit_;
  PROTOBUF_NAMESPACE_ID::BoolValue* authoritative_;
  PROTOBUF_NAMESPACE_ID::StringValue* label_;
  PROTOBUF_NAMESPACE_ID::Int32Value* min_size_;
  PROTOBUF_NAMESPACE_ID::Int32Value* max_size_;
  PROTOBUF_NAMESPACE_ID::StringValue* query_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto;
};
// -------------------------------------------------------------------

class ListNotificationsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nakama.api.ListNotificationsRequest) */ {
 public:
  inline ListNotificationsRequest() : ListNotificationsRequest(nullptr) {}
  virtual ~ListNotificationsRequest();

  ListNotificationsRequest(const ListNotificationsRequest& from);
  ListNotificationsRequest(ListNotificationsRequest&& from) noexcept
    : ListNotificationsRequest() {
    *this = ::std::move(from);
  }

  inline ListNotificationsRequest& operator=(const ListNotificationsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListNotificationsRequest& operator=(ListNotificationsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListNotificationsRequest& default_instance();

  static inline const ListNotificationsRequest* internal_default_instance() {
    return reinterpret_cast<const ListNotificationsRequest*>(
               &_ListNotificationsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    75;

  friend void swap(ListNotificationsRequest& a, ListNotificationsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListNotificationsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListNotificationsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListNotificationsRequest* New() const final {
    return CreateMaybeMessage<ListNotificationsRequest>(nullptr);
  }

  ListNotificationsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListNotificationsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListNotificationsRequest& from);
  void MergeFrom(const ListNotificationsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListNotificationsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nakama.api.ListNotificationsRequest";
  }
  protected:
  explicit ListNotificationsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto);
    return ::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCacheableCursorFieldNumber = 2,
    kLimitFieldNumber = 1,
  };
  // string cacheable_cursor = 2;
  void clear_cacheable_cursor();
  const std::string& cacheable_cursor() const;
  void set_cacheable_cursor(const std::string& value);
  void set_cacheable_cursor(std::string&& value);
  void set_cacheable_cursor(const char* value);
  void set_cacheable_cursor(const char* value, size_t size);
  std::string* mutable_cacheable_cursor();
  std::string* release_cacheable_cursor();
  void set_allocated_cacheable_cursor(std::string* cacheable_cursor);
  private:
  const std::string& _internal_cacheable_cursor() const;
  void _internal_set_cacheable_cursor(const std::string& value);
  std::string* _internal_mutable_cacheable_cursor();
  public:

  // .google.protobuf.Int32Value limit = 1;
  bool has_limit() const;
  private:
  bool _internal_has_limit() const;
  public:
  void clear_limit();
  const PROTOBUF_NAMESPACE_ID::Int32Value& limit() const;
  PROTOBUF_NAMESPACE_ID::Int32Value* release_limit();
  PROTOBUF_NAMESPACE_ID::Int32Value* mutable_limit();
  void set_allocated_limit(PROTOBUF_NAMESPACE_ID::Int32Value* limit);
  private:
  const PROTOBUF_NAMESPACE_ID::Int32Value& _internal_limit() const;
  PROTOBUF_NAMESPACE_ID::Int32Value* _internal_mutable_limit();
  public:
  void unsafe_arena_set_allocated_limit(
      PROTOBUF_NAMESPACE_ID::Int32Value* limit);
  PROTOBUF_NAMESPACE_ID::Int32Value* unsafe_arena_release_limit();

  // @@protoc_insertion_point(class_scope:nakama.api.ListNotificationsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cacheable_cursor_;
  PROTOBUF_NAMESPACE_ID::Int32Value* limit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto;
};
// -------------------------------------------------------------------

class ListStorageObjectsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nakama.api.ListStorageObjectsRequest) */ {
 public:
  inline ListStorageObjectsRequest() : ListStorageObjectsRequest(nullptr) {}
  virtual ~ListStorageObjectsRequest();

  ListStorageObjectsRequest(const ListStorageObjectsRequest& from);
  ListStorageObjectsRequest(ListStorageObjectsRequest&& from) noexcept
    : ListStorageObjectsRequest() {
    *this = ::std::move(from);
  }

  inline ListStorageObjectsRequest& operator=(const ListStorageObjectsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListStorageObjectsRequest& operator=(ListStorageObjectsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListStorageObjectsRequest& default_instance();

  static inline const ListStorageObjectsRequest* internal_default_instance() {
    return reinterpret_cast<const ListStorageObjectsRequest*>(
               &_ListStorageObjectsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    76;

  friend void swap(ListStorageObjectsRequest& a, ListStorageObjectsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListStorageObjectsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListStorageObjectsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListStorageObjectsRequest* New() const final {
    return CreateMaybeMessage<ListStorageObjectsRequest>(nullptr);
  }

  ListStorageObjectsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListStorageObjectsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListStorageObjectsRequest& from);
  void MergeFrom(const ListStorageObjectsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListStorageObjectsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nakama.api.ListStorageObjectsRequest";
  }
  protected:
  explicit ListStorageObjectsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto);
    return ::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kCollectionFieldNumber = 2,
    kCursorFieldNumber = 4,
    kLimitFieldNumber = 3,
  };
  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // string collection = 2;
  void clear_collection();
  const std::string& collection() const;
  void set_collection(const std::string& value);
  void set_collection(std::string&& value);
  void set_collection(const char* value);
  void set_collection(const char* value, size_t size);
  std::string* mutable_collection();
  std::string* release_collection();
  void set_allocated_collection(std::string* collection);
  private:
  const std::string& _internal_collection() const;
  void _internal_set_collection(const std::string& value);
  std::string* _internal_mutable_collection();
  public:

  // string cursor = 4;
  void clear_cursor();
  const std::string& cursor() const;
  void set_cursor(const std::string& value);
  void set_cursor(std::string&& value);
  void set_cursor(const char* value);
  void set_cursor(const char* value, size_t size);
  std::string* mutable_cursor();
  std::string* release_cursor();
  void set_allocated_cursor(std::string* cursor);
  private:
  const std::string& _internal_cursor() const;
  void _internal_set_cursor(const std::string& value);
  std::string* _internal_mutable_cursor();
  public:

  // .google.protobuf.Int32Value limit = 3;
  bool has_limit() const;
  private:
  bool _internal_has_limit() const;
  public:
  void clear_limit();
  const PROTOBUF_NAMESPACE_ID::Int32Value& limit() const;
  PROTOBUF_NAMESPACE_ID::Int32Value* release_limit();
  PROTOBUF_NAMESPACE_ID::Int32Value* mutable_limit();
  void set_allocated_limit(PROTOBUF_NAMESPACE_ID::Int32Value* limit);
  private:
  const PROTOBUF_NAMESPACE_ID::Int32Value& _internal_limit() const;
  PROTOBUF_NAMESPACE_ID::Int32Value* _internal_mutable_limit();
  public:
  void unsafe_arena_set_allocated_limit(
      PROTOBUF_NAMESPACE_ID::Int32Value* limit);
  PROTOBUF_NAMESPACE_ID::Int32Value* unsafe_arena_release_limit();

  // @@protoc_insertion_point(class_scope:nakama.api.ListStorageObjectsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr collection_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cursor_;
  PROTOBUF_NAMESPACE_ID::Int32Value* limit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto;
};
// -------------------------------------------------------------------

class ListSubscriptionsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nakama.api.ListSubscriptionsRequest) */ {
 public:
  inline ListSubscriptionsRequest() : ListSubscriptionsRequest(nullptr) {}
  virtual ~ListSubscriptionsRequest();

  ListSubscriptionsRequest(const ListSubscriptionsRequest& from);
  ListSubscriptionsRequest(ListSubscriptionsRequest&& from) noexcept
    : ListSubscriptionsRequest() {
    *this = ::std::move(from);
  }

  inline ListSubscriptionsRequest& operator=(const ListSubscriptionsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListSubscriptionsRequest& operator=(ListSubscriptionsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListSubscriptionsRequest& default_instance();

  static inline const ListSubscriptionsRequest* internal_default_instance() {
    return reinterpret_cast<const ListSubscriptionsRequest*>(
               &_ListSubscriptionsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    77;

  friend void swap(ListSubscriptionsRequest& a, ListSubscriptionsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListSubscriptionsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListSubscriptionsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListSubscriptionsRequest* New() const final {
    return CreateMaybeMessage<ListSubscriptionsRequest>(nullptr);
  }

  ListSubscriptionsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListSubscriptionsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListSubscriptionsRequest& from);
  void MergeFrom(const ListSubscriptionsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListSubscriptionsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nakama.api.ListSubscriptionsRequest";
  }
  protected:
  explicit ListSubscriptionsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto);
    return ::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCursorFieldNumber = 2,
    kLimitFieldNumber = 1,
  };
  // string cursor = 2;
  void clear_cursor();
  const std::string& cursor() const;
  void set_cursor(const std::string& value);
  void set_cursor(std::string&& value);
  void set_cursor(const char* value);
  void set_cursor(const char* value, size_t size);
  std::string* mutable_cursor();
  std::string* release_cursor();
  void set_allocated_cursor(std::string* cursor);
  private:
  const std::string& _internal_cursor() const;
  void _internal_set_cursor(const std::string& value);
  std::string* _internal_mutable_cursor();
  public:

  // .google.protobuf.Int32Value limit = 1;
  bool has_limit() const;
  private:
  bool _internal_has_limit() const;
  public:
  void clear_limit();
  const PROTOBUF_NAMESPACE_ID::Int32Value& limit() const;
  PROTOBUF_NAMESPACE_ID::Int32Value* release_limit();
  PROTOBUF_NAMESPACE_ID::Int32Value* mutable_limit();
  void set_allocated_limit(PROTOBUF_NAMESPACE_ID::Int32Value* limit);
  private:
  const PROTOBUF_NAMESPACE_ID::Int32Value& _internal_limit() const;
  PROTOBUF_NAMESPACE_ID::Int32Value* _internal_mutable_limit();
  public:
  void unsafe_arena_set_allocated_limit(
      PROTOBUF_NAMESPACE_ID::Int32Value* limit);
  PROTOBUF_NAMESPACE_ID::Int32Value* unsafe_arena_release_limit();

  // @@protoc_insertion_point(class_scope:nakama.api.ListSubscriptionsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cursor_;
  PROTOBUF_NAMESPACE_ID::Int32Value* limit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto;
};
// -------------------------------------------------------------------

class ListTournamentRecordsAroundOwnerRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nakama.api.ListTournamentRecordsAroundOwnerRequest) */ {
 public:
  inline ListTournamentRecordsAroundOwnerRequest() : ListTournamentRecordsAroundOwnerRequest(nullptr) {}
  virtual ~ListTournamentRecordsAroundOwnerRequest();

  ListTournamentRecordsAroundOwnerRequest(const ListTournamentRecordsAroundOwnerRequest& from);
  ListTournamentRecordsAroundOwnerRequest(ListTournamentRecordsAroundOwnerRequest&& from) noexcept
    : ListTournamentRecordsAroundOwnerRequest() {
    *this = ::std::move(from);
  }

  inline ListTournamentRecordsAroundOwnerRequest& operator=(const ListTournamentRecordsAroundOwnerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListTournamentRecordsAroundOwnerRequest& operator=(ListTournamentRecordsAroundOwnerRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListTournamentRecordsAroundOwnerRequest& default_instance();

  static inline const ListTournamentRecordsAroundOwnerRequest* internal_default_instance() {
    return reinterpret_cast<const ListTournamentRecordsAroundOwnerRequest*>(
               &_ListTournamentRecordsAroundOwnerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    78;

  friend void swap(ListTournamentRecordsAroundOwnerRequest& a, ListTournamentRecordsAroundOwnerRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListTournamentRecordsAroundOwnerRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListTournamentRecordsAroundOwnerRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListTournamentRecordsAroundOwnerRequest* New() const final {
    return CreateMaybeMessage<ListTournamentRecordsAroundOwnerRequest>(nullptr);
  }

  ListTournamentRecordsAroundOwnerRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListTournamentRecordsAroundOwnerRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListTournamentRecordsAroundOwnerRequest& from);
  void MergeFrom(const ListTournamentRecordsAroundOwnerRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListTournamentRecordsAroundOwnerRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nakama.api.ListTournamentRecordsAroundOwnerRequest";
  }
  protected:
  explicit ListTournamentRecordsAroundOwnerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto);
    return ::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTournamentIdFieldNumber = 1,
    kOwnerIdFieldNumber = 3,
    kCursorFieldNumber = 5,
    kLimitFieldNumber = 2,
    kExpiryFieldNumber = 4,
  };
  // string tournament_id = 1;
  void clear_tournament_id();
  const std::string& tournament_id() const;
  void set_tournament_id(const std::string& value);
  void set_tournament_id(std::string&& value);
  void set_tournament_id(const char* value);
  void set_tournament_id(const char* value, size_t size);
  std::string* mutable_tournament_id();
  std::string* release_tournament_id();
  void set_allocated_tournament_id(std::string* tournament_id);
  private:
  const std::string& _internal_tournament_id() const;
  void _internal_set_tournament_id(const std::string& value);
  std::string* _internal_mutable_tournament_id();
  public:

  // string owner_id = 3;
  void clear_owner_id();
  const std::string& owner_id() const;
  void set_owner_id(const std::string& value);
  void set_owner_id(std::string&& value);
  void set_owner_id(const char* value);
  void set_owner_id(const char* value, size_t size);
  std::string* mutable_owner_id();
  std::string* release_owner_id();
  void set_allocated_owner_id(std::string* owner_id);
  private:
  const std::string& _internal_owner_id() const;
  void _internal_set_owner_id(const std::string& value);
  std::string* _internal_mutable_owner_id();
  public:

  // string cursor = 5;
  void clear_cursor();
  const std::string& cursor() const;
  void set_cursor(const std::string& value);
  void set_cursor(std::string&& value);
  void set_cursor(const char* value);
  void set_cursor(const char* value, size_t size);
  std::string* mutable_cursor();
  std::string* release_cursor();
  void set_allocated_cursor(std::string* cursor);
  private:
  const std::string& _internal_cursor() const;
  void _internal_set_cursor(const std::string& value);
  std::string* _internal_mutable_cursor();
  public:

  // .google.protobuf.UInt32Value limit = 2;
  bool has_limit() const;
  private:
  bool _internal_has_limit() const;
  public:
  void clear_limit();
  const PROTOBUF_NAMESPACE_ID::UInt32Value& limit() const;
  PROTOBUF_NAMESPACE_ID::UInt32Value* release_limit();
  PROTOBUF_NAMESPACE_ID::UInt32Value* mutable_limit();
  void set_allocated_limit(PROTOBUF_NAMESPACE_ID::UInt32Value* limit);
  private:
  const PROTOBUF_NAMESPACE_ID::UInt32Value& _internal_limit() const;
  PROTOBUF_NAMESPACE_ID::UInt32Value* _internal_mutable_limit();
  public:
  void unsafe_arena_set_allocated_limit(
      PROTOBUF_NAMESPACE_ID::UInt32Value* limit);
  PROTOBUF_NAMESPACE_ID::UInt32Value* unsafe_arena_release_limit();

  // .google.protobuf.Int64Value expiry = 4;
  bool has_expiry() const;
  private:
  bool _internal_has_expiry() const;
  public:
  void clear_expiry();
  const PROTOBUF_NAMESPACE_ID::Int64Value& expiry() const;
  PROTOBUF_NAMESPACE_ID::Int64Value* release_expiry();
  PROTOBUF_NAMESPACE_ID::Int64Value* mutable_expiry();
  void set_allocated_expiry(PROTOBUF_NAMESPACE_ID::Int64Value* expiry);
  private:
  const PROTOBUF_NAMESPACE_ID::Int64Value& _internal_expiry() const;
  PROTOBUF_NAMESPACE_ID::Int64Value* _internal_mutable_expiry();
  public:
  void unsafe_arena_set_allocated_expiry(
      PROTOBUF_NAMESPACE_ID::Int64Value* expiry);
  PROTOBUF_NAMESPACE_ID::Int64Value* unsafe_arena_release_expiry();

  // @@protoc_insertion_point(class_scope:nakama.api.ListTournamentRecordsAroundOwnerRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tournament_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr owner_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cursor_;
  PROTOBUF_NAMESPACE_ID::UInt32Value* limit_;
  PROTOBUF_NAMESPACE_ID::Int64Value* expiry_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto;
};
// -------------------------------------------------------------------

class ListTournamentRecordsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nakama.api.ListTournamentRecordsRequest) */ {
 public:
  inline ListTournamentRecordsRequest() : ListTournamentRecordsRequest(nullptr) {}
  virtual ~ListTournamentRecordsRequest();

  ListTournamentRecordsRequest(const ListTournamentRecordsRequest& from);
  ListTournamentRecordsRequest(ListTournamentRecordsRequest&& from) noexcept
    : ListTournamentRecordsRequest() {
    *this = ::std::move(from);
  }

  inline ListTournamentRecordsRequest& operator=(const ListTournamentRecordsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListTournamentRecordsRequest& operator=(ListTournamentRecordsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListTournamentRecordsRequest& default_instance();

  static inline const ListTournamentRecordsRequest* internal_default_instance() {
    return reinterpret_cast<const ListTournamentRecordsRequest*>(
               &_ListTournamentRecordsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    79;

  friend void swap(ListTournamentRecordsRequest& a, ListTournamentRecordsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListTournamentRecordsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListTournamentRecordsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListTournamentRecordsRequest* New() const final {
    return CreateMaybeMessage<ListTournamentRecordsRequest>(nullptr);
  }

  ListTournamentRecordsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListTournamentRecordsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListTournamentRecordsRequest& from);
  void MergeFrom(const ListTournamentRecordsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListTournamentRecordsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nakama.api.ListTournamentRecordsRequest";
  }
  protected:
  explicit ListTournamentRecordsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto);
    return ::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOwnerIdsFieldNumber = 2,
    kTournamentIdFieldNumber = 1,
    kCursorFieldNumber = 4,
    kLimitFieldNumber = 3,
    kExpiryFieldNumber = 5,
  };
  // repeated string owner_ids = 2;
  int owner_ids_size() const;
  private:
  int _internal_owner_ids_size() const;
  public:
  void clear_owner_ids();
  const std::string& owner_ids(int index) const;
  std::string* mutable_owner_ids(int index);
  void set_owner_ids(int index, const std::string& value);
  void set_owner_ids(int index, std::string&& value);
  void set_owner_ids(int index, const char* value);
  void set_owner_ids(int index, const char* value, size_t size);
  std::string* add_owner_ids();
  void add_owner_ids(const std::string& value);
  void add_owner_ids(std::string&& value);
  void add_owner_ids(const char* value);
  void add_owner_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& owner_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_owner_ids();
  private:
  const std::string& _internal_owner_ids(int index) const;
  std::string* _internal_add_owner_ids();
  public:

  // string tournament_id = 1;
  void clear_tournament_id();
  const std::string& tournament_id() const;
  void set_tournament_id(const std::string& value);
  void set_tournament_id(std::string&& value);
  void set_tournament_id(const char* value);
  void set_tournament_id(const char* value, size_t size);
  std::string* mutable_tournament_id();
  std::string* release_tournament_id();
  void set_allocated_tournament_id(std::string* tournament_id);
  private:
  const std::string& _internal_tournament_id() const;
  void _internal_set_tournament_id(const std::string& value);
  std::string* _internal_mutable_tournament_id();
  public:

  // string cursor = 4;
  void clear_cursor();
  const std::string& cursor() const;
  void set_cursor(const std::string& value);
  void set_cursor(std::string&& value);
  void set_cursor(const char* value);
  void set_cursor(const char* value, size_t size);
  std::string* mutable_cursor();
  std::string* release_cursor();
  void set_allocated_cursor(std::string* cursor);
  private:
  const std::string& _internal_cursor() const;
  void _internal_set_cursor(const std::string& value);
  std::string* _internal_mutable_cursor();
  public:

  // .google.protobuf.Int32Value limit = 3;
  bool has_limit() const;
  private:
  bool _internal_has_limit() const;
  public:
  void clear_limit();
  const PROTOBUF_NAMESPACE_ID::Int32Value& limit() const;
  PROTOBUF_NAMESPACE_ID::Int32Value* release_limit();
  PROTOBUF_NAMESPACE_ID::Int32Value* mutable_limit();
  void set_allocated_limit(PROTOBUF_NAMESPACE_ID::Int32Value* limit);
  private:
  const PROTOBUF_NAMESPACE_ID::Int32Value& _internal_limit() const;
  PROTOBUF_NAMESPACE_ID::Int32Value* _internal_mutable_limit();
  public:
  void unsafe_arena_set_allocated_limit(
      PROTOBUF_NAMESPACE_ID::Int32Value* limit);
  PROTOBUF_NAMESPACE_ID::Int32Value* unsafe_arena_release_limit();

  // .google.protobuf.Int64Value expiry = 5;
  bool has_expiry() const;
  private:
  bool _internal_has_expiry() const;
  public:
  void clear_expiry();
  const PROTOBUF_NAMESPACE_ID::Int64Value& expiry() const;
  PROTOBUF_NAMESPACE_ID::Int64Value* release_expiry();
  PROTOBUF_NAMESPACE_ID::Int64Value* mutable_expiry();
  void set_allocated_expiry(PROTOBUF_NAMESPACE_ID::Int64Value* expiry);
  private:
  const PROTOBUF_NAMESPACE_ID::Int64Value& _internal_expiry() const;
  PROTOBUF_NAMESPACE_ID::Int64Value* _internal_mutable_expiry();
  public:
  void unsafe_arena_set_allocated_expiry(
      PROTOBUF_NAMESPACE_ID::Int64Value* expiry);
  PROTOBUF_NAMESPACE_ID::Int64Value* unsafe_arena_release_expiry();

  // @@protoc_insertion_point(class_scope:nakama.api.ListTournamentRecordsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> owner_ids_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tournament_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cursor_;
  PROTOBUF_NAMESPACE_ID::Int32Value* limit_;
  PROTOBUF_NAMESPACE_ID::Int64Value* expiry_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto;
};
// -------------------------------------------------------------------

class ListTournamentsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nakama.api.ListTournamentsRequest) */ {
 public:
  inline ListTournamentsRequest() : ListTournamentsRequest(nullptr) {}
  virtual ~ListTournamentsRequest();

  ListTournamentsRequest(const ListTournamentsRequest& from);
  ListTournamentsRequest(ListTournamentsRequest&& from) noexcept
    : ListTournamentsRequest() {
    *this = ::std::move(from);
  }

  inline ListTournamentsRequest& operator=(const ListTournamentsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListTournamentsRequest& operator=(ListTournamentsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListTournamentsRequest& default_instance();

  static inline const ListTournamentsRequest* internal_default_instance() {
    return reinterpret_cast<const ListTournamentsRequest*>(
               &_ListTournamentsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    80;

  friend void swap(ListTournamentsRequest& a, ListTournamentsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListTournamentsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListTournamentsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListTournamentsRequest* New() const final {
    return CreateMaybeMessage<ListTournamentsRequest>(nullptr);
  }

  ListTournamentsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListTournamentsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListTournamentsRequest& from);
  void MergeFrom(const ListTournamentsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListTournamentsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nakama.api.ListTournamentsRequest";
  }
  protected:
  explicit ListTournamentsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto);
    return ::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCursorFieldNumber = 8,
    kCategoryStartFieldNumber = 1,
    kCategoryEndFieldNumber = 2,
    kStartTimeFieldNumber = 3,
    kEndTimeFieldNumber = 4,
    kLimitFieldNumber = 6,
  };
  // string cursor = 8;
  void clear_cursor();
  const std::string& cursor() const;
  void set_cursor(const std::string& value);
  void set_cursor(std::string&& value);
  void set_cursor(const char* value);
  void set_cursor(const char* value, size_t size);
  std::string* mutable_cursor();
  std::string* release_cursor();
  void set_allocated_cursor(std::string* cursor);
  private:
  const std::string& _internal_cursor() const;
  void _internal_set_cursor(const std::string& value);
  std::string* _internal_mutable_cursor();
  public:

  // .google.protobuf.UInt32Value category_start = 1;
  bool has_category_start() const;
  private:
  bool _internal_has_category_start() const;
  public:
  void clear_category_start();
  const PROTOBUF_NAMESPACE_ID::UInt32Value& category_start() const;
  PROTOBUF_NAMESPACE_ID::UInt32Value* release_category_start();
  PROTOBUF_NAMESPACE_ID::UInt32Value* mutable_category_start();
  void set_allocated_category_start(PROTOBUF_NAMESPACE_ID::UInt32Value* category_start);
  private:
  const PROTOBUF_NAMESPACE_ID::UInt32Value& _internal_category_start() const;
  PROTOBUF_NAMESPACE_ID::UInt32Value* _internal_mutable_category_start();
  public:
  void unsafe_arena_set_allocated_category_start(
      PROTOBUF_NAMESPACE_ID::UInt32Value* category_start);
  PROTOBUF_NAMESPACE_ID::UInt32Value* unsafe_arena_release_category_start();

  // .google.protobuf.UInt32Value category_end = 2;
  bool has_category_end() const;
  private:
  bool _internal_has_category_end() const;
  public:
  void clear_category_end();
  const PROTOBUF_NAMESPACE_ID::UInt32Value& category_end() const;
  PROTOBUF_NAMESPACE_ID::UInt32Value* release_category_end();
  PROTOBUF_NAMESPACE_ID::UInt32Value* mutable_category_end();
  void set_allocated_category_end(PROTOBUF_NAMESPACE_ID::UInt32Value* category_end);
  private:
  const PROTOBUF_NAMESPACE_ID::UInt32Value& _internal_category_end() const;
  PROTOBUF_NAMESPACE_ID::UInt32Value* _internal_mutable_category_end();
  public:
  void unsafe_arena_set_allocated_category_end(
      PROTOBUF_NAMESPACE_ID::UInt32Value* category_end);
  PROTOBUF_NAMESPACE_ID::UInt32Value* unsafe_arena_release_category_end();

  // .google.protobuf.UInt32Value start_time = 3;
  bool has_start_time() const;
  private:
  bool _internal_has_start_time() const;
  public:
  void clear_start_time();
  const PROTOBUF_NAMESPACE_ID::UInt32Value& start_time() const;
  PROTOBUF_NAMESPACE_ID::UInt32Value* release_start_time();
  PROTOBUF_NAMESPACE_ID::UInt32Value* mutable_start_time();
  void set_allocated_start_time(PROTOBUF_NAMESPACE_ID::UInt32Value* start_time);
  private:
  const PROTOBUF_NAMESPACE_ID::UInt32Value& _internal_start_time() const;
  PROTOBUF_NAMESPACE_ID::UInt32Value* _internal_mutable_start_time();
  public:
  void unsafe_arena_set_allocated_start_time(
      PROTOBUF_NAMESPACE_ID::UInt32Value* start_time);
  PROTOBUF_NAMESPACE_ID::UInt32Value* unsafe_arena_release_start_time();

  // .google.protobuf.UInt32Value end_time = 4;
  bool has_end_time() const;
  private:
  bool _internal_has_end_time() const;
  public:
  void clear_end_time();
  const PROTOBUF_NAMESPACE_ID::UInt32Value& end_time() const;
  PROTOBUF_NAMESPACE_ID::UInt32Value* release_end_time();
  PROTOBUF_NAMESPACE_ID::UInt32Value* mutable_end_time();
  void set_allocated_end_time(PROTOBUF_NAMESPACE_ID::UInt32Value* end_time);
  private:
  const PROTOBUF_NAMESPACE_ID::UInt32Value& _internal_end_time() const;
  PROTOBUF_NAMESPACE_ID::UInt32Value* _internal_mutable_end_time();
  public:
  void unsafe_arena_set_allocated_end_time(
      PROTOBUF_NAMESPACE_ID::UInt32Value* end_time);
  PROTOBUF_NAMESPACE_ID::UInt32Value* unsafe_arena_release_end_time();

  // .google.protobuf.Int32Value limit = 6;
  bool has_limit() const;
  private:
  bool _internal_has_limit() const;
  public:
  void clear_limit();
  const PROTOBUF_NAMESPACE_ID::Int32Value& limit() const;
  PROTOBUF_NAMESPACE_ID::Int32Value* release_limit();
  PROTOBUF_NAMESPACE_ID::Int32Value* mutable_limit();
  void set_allocated_limit(PROTOBUF_NAMESPACE_ID::Int32Value* limit);
  private:
  const PROTOBUF_NAMESPACE_ID::Int32Value& _internal_limit() const;
  PROTOBUF_NAMESPACE_ID::Int32Value* _internal_mutable_limit();
  public:
  void unsafe_arena_set_allocated_limit(
      PROTOBUF_NAMESPACE_ID::Int32Value* limit);
  PROTOBUF_NAMESPACE_ID::Int32Value* unsafe_arena_release_limit();

  // @@protoc_insertion_point(class_scope:nakama.api.ListTournamentsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cursor_;
  PROTOBUF_NAMESPACE_ID::UInt32Value* category_start_;
  PROTOBUF_NAMESPACE_ID::UInt32Value* category_end_;
  PROTOBUF_NAMESPACE_ID::UInt32Value* start_time_;
  PROTOBUF_NAMESPACE_ID::UInt32Value* end_time_;
  PROTOBUF_NAMESPACE_ID::Int32Value* limit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto;
};
// -------------------------------------------------------------------

class ListUserGroupsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nakama.api.ListUserGroupsRequest) */ {
 public:
  inline ListUserGroupsRequest() : ListUserGroupsRequest(nullptr) {}
  virtual ~ListUserGroupsRequest();

  ListUserGroupsRequest(const ListUserGroupsRequest& from);
  ListUserGroupsRequest(ListUserGroupsRequest&& from) noexcept
    : ListUserGroupsRequest() {
    *this = ::std::move(from);
  }

  inline ListUserGroupsRequest& operator=(const ListUserGroupsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListUserGroupsRequest& operator=(ListUserGroupsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListUserGroupsRequest& default_instance();

  static inline const ListUserGroupsRequest* internal_default_instance() {
    return reinterpret_cast<const ListUserGroupsRequest*>(
               &_ListUserGroupsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    81;

  friend void swap(ListUserGroupsRequest& a, ListUserGroupsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListUserGroupsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListUserGroupsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListUserGroupsRequest* New() const final {
    return CreateMaybeMessage<ListUserGroupsRequest>(nullptr);
  }

  ListUserGroupsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListUserGroupsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListUserGroupsRequest& from);
  void MergeFrom(const ListUserGroupsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListUserGroupsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nakama.api.ListUserGroupsRequest";
  }
  protected:
  explicit ListUserGroupsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto);
    return ::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kCursorFieldNumber = 4,
    kLimitFieldNumber = 2,
    kStateFieldNumber = 3,
  };
  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // string cursor = 4;
  void clear_cursor();
  const std::string& cursor() const;
  void set_cursor(const std::string& value);
  void set_cursor(std::string&& value);
  void set_cursor(const char* value);
  void set_cursor(const char* value, size_t size);
  std::string* mutable_cursor();
  std::string* release_cursor();
  void set_allocated_cursor(std::string* cursor);
  private:
  const std::string& _internal_cursor() const;
  void _internal_set_cursor(const std::string& value);
  std::string* _internal_mutable_cursor();
  public:

  // .google.protobuf.Int32Value limit = 2;
  bool has_limit() const;
  private:
  bool _internal_has_limit() const;
  public:
  void clear_limit();
  const PROTOBUF_NAMESPACE_ID::Int32Value& limit() const;
  PROTOBUF_NAMESPACE_ID::Int32Value* release_limit();
  PROTOBUF_NAMESPACE_ID::Int32Value* mutable_limit();
  void set_allocated_limit(PROTOBUF_NAMESPACE_ID::Int32Value* limit);
  private:
  const PROTOBUF_NAMESPACE_ID::Int32Value& _internal_limit() const;
  PROTOBUF_NAMESPACE_ID::Int32Value* _internal_mutable_limit();
  public:
  void unsafe_arena_set_allocated_limit(
      PROTOBUF_NAMESPACE_ID::Int32Value* limit);
  PROTOBUF_NAMESPACE_ID::Int32Value* unsafe_arena_release_limit();

  // .google.protobuf.Int32Value state = 3;
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  const PROTOBUF_NAMESPACE_ID::Int32Value& state() const;
  PROTOBUF_NAMESPACE_ID::Int32Value* release_state();
  PROTOBUF_NAMESPACE_ID::Int32Value* mutable_state();
  void set_allocated_state(PROTOBUF_NAMESPACE_ID::Int32Value* state);
  private:
  const PROTOBUF_NAMESPACE_ID::Int32Value& _internal_state() const;
  PROTOBUF_NAMESPACE_ID::Int32Value* _internal_mutable_state();
  public:
  void unsafe_arena_set_allocated_state(
      PROTOBUF_NAMESPACE_ID::Int32Value* state);
  PROTOBUF_NAMESPACE_ID::Int32Value* unsafe_arena_release_state();

  // @@protoc_insertion_point(class_scope:nakama.api.ListUserGroupsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cursor_;
  PROTOBUF_NAMESPACE_ID::Int32Value* limit_;
  PROTOBUF_NAMESPACE_ID::Int32Value* state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto;
};
// -------------------------------------------------------------------

class Match PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nakama.api.Match) */ {
 public:
  inline Match() : Match(nullptr) {}
  virtual ~Match();

  Match(const Match& from);
  Match(Match&& from) noexcept
    : Match() {
    *this = ::std::move(from);
  }

  inline Match& operator=(const Match& from) {
    CopyFrom(from);
    return *this;
  }
  inline Match& operator=(Match&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Match& default_instance();

  static inline const Match* internal_default_instance() {
    return reinterpret_cast<const Match*>(
               &_Match_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    82;

  friend void swap(Match& a, Match& b) {
    a.Swap(&b);
  }
  inline void Swap(Match* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Match* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Match* New() const final {
    return CreateMaybeMessage<Match>(nullptr);
  }

  Match* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Match>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Match& from);
  void MergeFrom(const Match& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Match* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nakama.api.Match";
  }
  protected:
  explicit Match(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto);
    return ::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMatchIdFieldNumber = 1,
    kHandlerNameFieldNumber = 6,
    kLabelFieldNumber = 3,
    kAuthoritativeFieldNumber = 2,
    kSizeFieldNumber = 4,
    kTickRateFieldNumber = 5,
  };
  // string match_id = 1;
  void clear_match_id();
  const std::string& match_id() const;
  void set_match_id(const std::string& value);
  void set_match_id(std::string&& value);
  void set_match_id(const char* value);
  void set_match_id(const char* value, size_t size);
  std::string* mutable_match_id();
  std::string* release_match_id();
  void set_allocated_match_id(std::string* match_id);
  private:
  const std::string& _internal_match_id() const;
  void _internal_set_match_id(const std::string& value);
  std::string* _internal_mutable_match_id();
  public:

  // string handler_name = 6;
  void clear_handler_name();
  const std::string& handler_name() const;
  void set_handler_name(const std::string& value);
  void set_handler_name(std::string&& value);
  void set_handler_name(const char* value);
  void set_handler_name(const char* value, size_t size);
  std::string* mutable_handler_name();
  std::string* release_handler_name();
  void set_allocated_handler_name(std::string* handler_name);
  private:
  const std::string& _internal_handler_name() const;
  void _internal_set_handler_name(const std::string& value);
  std::string* _internal_mutable_handler_name();
  public:

  // .google.protobuf.StringValue label = 3;
  bool has_label() const;
  private:
  bool _internal_has_label() const;
  public:
  void clear_label();
  const PROTOBUF_NAMESPACE_ID::StringValue& label() const;
  PROTOBUF_NAMESPACE_ID::StringValue* release_label();
  PROTOBUF_NAMESPACE_ID::StringValue* mutable_label();
  void set_allocated_label(PROTOBUF_NAMESPACE_ID::StringValue* label);
  private:
  const PROTOBUF_NAMESPACE_ID::StringValue& _internal_label() const;
  PROTOBUF_NAMESPACE_ID::StringValue* _internal_mutable_label();
  public:
  void unsafe_arena_set_allocated_label(
      PROTOBUF_NAMESPACE_ID::StringValue* label);
  PROTOBUF_NAMESPACE_ID::StringValue* unsafe_arena_release_label();

  // bool authoritative = 2;
  void clear_authoritative();
  bool authoritative() const;
  void set_authoritative(bool value);
  private:
  bool _internal_authoritative() const;
  void _internal_set_authoritative(bool value);
  public:

  // int32 size = 4;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::int32 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 tick_rate = 5;
  void clear_tick_rate();
  ::PROTOBUF_NAMESPACE_ID::int32 tick_rate() const;
  void set_tick_rate(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tick_rate() const;
  void _internal_set_tick_rate(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:nakama.api.Match)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr match_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr handler_name_;
  PROTOBUF_NAMESPACE_ID::StringValue* label_;
  bool authoritative_;
  ::PROTOBUF_NAMESPACE_ID::int32 size_;
  ::PROTOBUF_NAMESPACE_ID::int32 tick_rate_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto;
};
// -------------------------------------------------------------------

class MatchList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nakama.api.MatchList) */ {
 public:
  inline MatchList() : MatchList(nullptr) {}
  virtual ~MatchList();

  MatchList(const MatchList& from);
  MatchList(MatchList&& from) noexcept
    : MatchList() {
    *this = ::std::move(from);
  }

  inline MatchList& operator=(const MatchList& from) {
    CopyFrom(from);
    return *this;
  }
  inline MatchList& operator=(MatchList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MatchList& default_instance();

  static inline const MatchList* internal_default_instance() {
    return reinterpret_cast<const MatchList*>(
               &_MatchList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    83;

  friend void swap(MatchList& a, MatchList& b) {
    a.Swap(&b);
  }
  inline void Swap(MatchList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MatchList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MatchList* New() const final {
    return CreateMaybeMessage<MatchList>(nullptr);
  }

  MatchList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MatchList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MatchList& from);
  void MergeFrom(const MatchList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MatchList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nakama.api.MatchList";
  }
  protected:
  explicit MatchList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto);
    return ::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMatchesFieldNumber = 1,
  };
  // repeated .nakama.api.Match matches = 1;
  int matches_size() const;
  private:
  int _internal_matches_size() const;
  public:
  void clear_matches();
  ::nakama::api::Match* mutable_matches(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nakama::api::Match >*
      mutable_matches();
  private:
  const ::nakama::api::Match& _internal_matches(int index) const;
  ::nakama::api::Match* _internal_add_matches();
  public:
  const ::nakama::api::Match& matches(int index) const;
  ::nakama::api::Match* add_matches();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nakama::api::Match >&
      matches() const;

  // @@protoc_insertion_point(class_scope:nakama.api.MatchList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nakama::api::Match > matches_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto;
};
// -------------------------------------------------------------------

class Notification PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nakama.api.Notification) */ {
 public:
  inline Notification() : Notification(nullptr) {}
  virtual ~Notification();

  Notification(const Notification& from);
  Notification(Notification&& from) noexcept
    : Notification() {
    *this = ::std::move(from);
  }

  inline Notification& operator=(const Notification& from) {
    CopyFrom(from);
    return *this;
  }
  inline Notification& operator=(Notification&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Notification& default_instance();

  static inline const Notification* internal_default_instance() {
    return reinterpret_cast<const Notification*>(
               &_Notification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    84;

  friend void swap(Notification& a, Notification& b) {
    a.Swap(&b);
  }
  inline void Swap(Notification* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Notification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Notification* New() const final {
    return CreateMaybeMessage<Notification>(nullptr);
  }

  Notification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Notification>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Notification& from);
  void MergeFrom(const Notification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Notification* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nakama.api.Notification";
  }
  protected:
  explicit Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto);
    return ::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kSubjectFieldNumber = 2,
    kContentFieldNumber = 3,
    kSenderIdFieldNumber = 5,
    kCreateTimeFieldNumber = 6,
    kCodeFieldNumber = 4,
    kPersistentFieldNumber = 7,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string subject = 2;
  void clear_subject();
  const std::string& subject() const;
  void set_subject(const std::string& value);
  void set_subject(std::string&& value);
  void set_subject(const char* value);
  void set_subject(const char* value, size_t size);
  std::string* mutable_subject();
  std::string* release_subject();
  void set_allocated_subject(std::string* subject);
  private:
  const std::string& _internal_subject() const;
  void _internal_set_subject(const std::string& value);
  std::string* _internal_mutable_subject();
  public:

  // string content = 3;
  void clear_content();
  const std::string& content() const;
  void set_content(const std::string& value);
  void set_content(std::string&& value);
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  std::string* mutable_content();
  std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // string sender_id = 5;
  void clear_sender_id();
  const std::string& sender_id() const;
  void set_sender_id(const std::string& value);
  void set_sender_id(std::string&& value);
  void set_sender_id(const char* value);
  void set_sender_id(const char* value, size_t size);
  std::string* mutable_sender_id();
  std::string* release_sender_id();
  void set_allocated_sender_id(std::string* sender_id);
  private:
  const std::string& _internal_sender_id() const;
  void _internal_set_sender_id(const std::string& value);
  std::string* _internal_mutable_sender_id();
  public:

  // .google.protobuf.Timestamp create_time = 6;
  bool has_create_time() const;
  private:
  bool _internal_has_create_time() const;
  public:
  void clear_create_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& create_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_create_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_create_time();
  void set_allocated_create_time(PROTOBUF_NAMESPACE_ID::Timestamp* create_time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_create_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_create_time();
  public:
  void unsafe_arena_set_allocated_create_time(
      PROTOBUF_NAMESPACE_ID::Timestamp* create_time);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_create_time();

  // int32 code = 4;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool persistent = 7;
  void clear_persistent();
  bool persistent() const;
  void set_persistent(bool value);
  private:
  bool _internal_persistent() const;
  void _internal_set_persistent(bool value);
  public:

  // @@protoc_insertion_point(class_scope:nakama.api.Notification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subject_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sender_id_;
  PROTOBUF_NAMESPACE_ID::Timestamp* create_time_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  bool persistent_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto;
};
// -------------------------------------------------------------------

class NotificationList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nakama.api.NotificationList) */ {
 public:
  inline NotificationList() : NotificationList(nullptr) {}
  virtual ~NotificationList();

  NotificationList(const NotificationList& from);
  NotificationList(NotificationList&& from) noexcept
    : NotificationList() {
    *this = ::std::move(from);
  }

  inline NotificationList& operator=(const NotificationList& from) {
    CopyFrom(from);
    return *this;
  }
  inline NotificationList& operator=(NotificationList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NotificationList& default_instance();

  static inline const NotificationList* internal_default_instance() {
    return reinterpret_cast<const NotificationList*>(
               &_NotificationList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    85;

  friend void swap(NotificationList& a, NotificationList& b) {
    a.Swap(&b);
  }
  inline void Swap(NotificationList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NotificationList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NotificationList* New() const final {
    return CreateMaybeMessage<NotificationList>(nullptr);
  }

  NotificationList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NotificationList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NotificationList& from);
  void MergeFrom(const NotificationList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NotificationList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nakama.api.NotificationList";
  }
  protected:
  explicit NotificationList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto);
    return ::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNotificationsFieldNumber = 1,
    kCacheableCursorFieldNumber = 2,
  };
  // repeated .nakama.api.Notification notifications = 1;
  int notifications_size() const;
  private:
  int _internal_notifications_size() const;
  public:
  void clear_notifications();
  ::nakama::api::Notification* mutable_notifications(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nakama::api::Notification >*
      mutable_notifications();
  private:
  const ::nakama::api::Notification& _internal_notifications(int index) const;
  ::nakama::api::Notification* _internal_add_notifications();
  public:
  const ::nakama::api::Notification& notifications(int index) const;
  ::nakama::api::Notification* add_notifications();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nakama::api::Notification >&
      notifications() const;

  // string cacheable_cursor = 2;
  void clear_cacheable_cursor();
  const std::string& cacheable_cursor() const;
  void set_cacheable_cursor(const std::string& value);
  void set_cacheable_cursor(std::string&& value);
  void set_cacheable_cursor(const char* value);
  void set_cacheable_cursor(const char* value, size_t size);
  std::string* mutable_cacheable_cursor();
  std::string* release_cacheable_cursor();
  void set_allocated_cacheable_cursor(std::string* cacheable_cursor);
  private:
  const std::string& _internal_cacheable_cursor() const;
  void _internal_set_cacheable_cursor(const std::string& value);
  std::string* _internal_mutable_cacheable_cursor();
  public:

  // @@protoc_insertion_point(class_scope:nakama.api.NotificationList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nakama::api::Notification > notifications_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cacheable_cursor_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto;
};
// -------------------------------------------------------------------

class PromoteGroupUsersRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nakama.api.PromoteGroupUsersRequest) */ {
 public:
  inline PromoteGroupUsersRequest() : PromoteGroupUsersRequest(nullptr) {}
  virtual ~PromoteGroupUsersRequest();

  PromoteGroupUsersRequest(const PromoteGroupUsersRequest& from);
  PromoteGroupUsersRequest(PromoteGroupUsersRequest&& from) noexcept
    : PromoteGroupUsersRequest() {
    *this = ::std::move(from);
  }

  inline PromoteGroupUsersRequest& operator=(const PromoteGroupUsersRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PromoteGroupUsersRequest& operator=(PromoteGroupUsersRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PromoteGroupUsersRequest& default_instance();

  static inline const PromoteGroupUsersRequest* internal_default_instance() {
    return reinterpret_cast<const PromoteGroupUsersRequest*>(
               &_PromoteGroupUsersRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    86;

  friend void swap(PromoteGroupUsersRequest& a, PromoteGroupUsersRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PromoteGroupUsersRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PromoteGroupUsersRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PromoteGroupUsersRequest* New() const final {
    return CreateMaybeMessage<PromoteGroupUsersRequest>(nullptr);
  }

  PromoteGroupUsersRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PromoteGroupUsersRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PromoteGroupUsersRequest& from);
  void MergeFrom(const PromoteGroupUsersRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PromoteGroupUsersRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nakama.api.PromoteGroupUsersRequest";
  }
  protected:
  explicit PromoteGroupUsersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto);
    return ::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdsFieldNumber = 2,
    kGroupIdFieldNumber = 1,
  };
  // repeated string user_ids = 2;
  int user_ids_size() const;
  private:
  int _internal_user_ids_size() const;
  public:
  void clear_user_ids();
  const std::string& user_ids(int index) const;
  std::string* mutable_user_ids(int index);
  void set_user_ids(int index, const std::string& value);
  void set_user_ids(int index, std::string&& value);
  void set_user_ids(int index, const char* value);
  void set_user_ids(int index, const char* value, size_t size);
  std::string* add_user_ids();
  void add_user_ids(const std::string& value);
  void add_user_ids(std::string&& value);
  void add_user_ids(const char* value);
  void add_user_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& user_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_user_ids();
  private:
  const std::string& _internal_user_ids(int index) const;
  std::string* _internal_add_user_ids();
  public:

  // string group_id = 1;
  void clear_group_id();
  const std::string& group_id() const;
  void set_group_id(const std::string& value);
  void set_group_id(std::string&& value);
  void set_group_id(const char* value);
  void set_group_id(const char* value, size_t size);
  std::string* mutable_group_id();
  std::string* release_group_id();
  void set_allocated_group_id(std::string* group_id);
  private:
  const std::string& _internal_group_id() const;
  void _internal_set_group_id(const std::string& value);
  std::string* _internal_mutable_group_id();
  public:

  // @@protoc_insertion_point(class_scope:nakama.api.PromoteGroupUsersRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> user_ids_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr group_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto;
};
// -------------------------------------------------------------------

class DemoteGroupUsersRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nakama.api.DemoteGroupUsersRequest) */ {
 public:
  inline DemoteGroupUsersRequest() : DemoteGroupUsersRequest(nullptr) {}
  virtual ~DemoteGroupUsersRequest();

  DemoteGroupUsersRequest(const DemoteGroupUsersRequest& from);
  DemoteGroupUsersRequest(DemoteGroupUsersRequest&& from) noexcept
    : DemoteGroupUsersRequest() {
    *this = ::std::move(from);
  }

  inline DemoteGroupUsersRequest& operator=(const DemoteGroupUsersRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DemoteGroupUsersRequest& operator=(DemoteGroupUsersRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DemoteGroupUsersRequest& default_instance();

  static inline const DemoteGroupUsersRequest* internal_default_instance() {
    return reinterpret_cast<const DemoteGroupUsersRequest*>(
               &_DemoteGroupUsersRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    87;

  friend void swap(DemoteGroupUsersRequest& a, DemoteGroupUsersRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DemoteGroupUsersRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DemoteGroupUsersRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DemoteGroupUsersRequest* New() const final {
    return CreateMaybeMessage<DemoteGroupUsersRequest>(nullptr);
  }

  DemoteGroupUsersRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DemoteGroupUsersRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DemoteGroupUsersRequest& from);
  void MergeFrom(const DemoteGroupUsersRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DemoteGroupUsersRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nakama.api.DemoteGroupUsersRequest";
  }
  protected:
  explicit DemoteGroupUsersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto);
    return ::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdsFieldNumber = 2,
    kGroupIdFieldNumber = 1,
  };
  // repeated string user_ids = 2;
  int user_ids_size() const;
  private:
  int _internal_user_ids_size() const;
  public:
  void clear_user_ids();
  const std::string& user_ids(int index) const;
  std::string* mutable_user_ids(int index);
  void set_user_ids(int index, const std::string& value);
  void set_user_ids(int index, std::string&& value);
  void set_user_ids(int index, const char* value);
  void set_user_ids(int index, const char* value, size_t size);
  std::string* add_user_ids();
  void add_user_ids(const std::string& value);
  void add_user_ids(std::string&& value);
  void add_user_ids(const char* value);
  void add_user_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& user_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_user_ids();
  private:
  const std::string& _internal_user_ids(int index) const;
  std::string* _internal_add_user_ids();
  public:

  // string group_id = 1;
  void clear_group_id();
  const std::string& group_id() const;
  void set_group_id(const std::string& value);
  void set_group_id(std::string&& value);
  void set_group_id(const char* value);
  void set_group_id(const char* value, size_t size);
  std::string* mutable_group_id();
  std::string* release_group_id();
  void set_allocated_group_id(std::string* group_id);
  private:
  const std::string& _internal_group_id() const;
  void _internal_set_group_id(const std::string& value);
  std::string* _internal_mutable_group_id();
  public:

  // @@protoc_insertion_point(class_scope:nakama.api.DemoteGroupUsersRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> user_ids_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr group_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto;
};
// -------------------------------------------------------------------

class ReadStorageObjectId PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nakama.api.ReadStorageObjectId) */ {
 public:
  inline ReadStorageObjectId() : ReadStorageObjectId(nullptr) {}
  virtual ~ReadStorageObjectId();

  ReadStorageObjectId(const ReadStorageObjectId& from);
  ReadStorageObjectId(ReadStorageObjectId&& from) noexcept
    : ReadStorageObjectId() {
    *this = ::std::move(from);
  }

  inline ReadStorageObjectId& operator=(const ReadStorageObjectId& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadStorageObjectId& operator=(ReadStorageObjectId&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReadStorageObjectId& default_instance();

  static inline const ReadStorageObjectId* internal_default_instance() {
    return reinterpret_cast<const ReadStorageObjectId*>(
               &_ReadStorageObjectId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    88;

  friend void swap(ReadStorageObjectId& a, ReadStorageObjectId& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadStorageObjectId* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadStorageObjectId* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReadStorageObjectId* New() const final {
    return CreateMaybeMessage<ReadStorageObjectId>(nullptr);
  }

  ReadStorageObjectId* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReadStorageObjectId>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReadStorageObjectId& from);
  void MergeFrom(const ReadStorageObjectId& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadStorageObjectId* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nakama.api.ReadStorageObjectId";
  }
  protected:
  explicit ReadStorageObjectId(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto);
    return ::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCollectionFieldNumber = 1,
    kKeyFieldNumber = 2,
    kUserIdFieldNumber = 3,
  };
  // string collection = 1;
  void clear_collection();
  const std::string& collection() const;
  void set_collection(const std::string& value);
  void set_collection(std::string&& value);
  void set_collection(const char* value);
  void set_collection(const char* value, size_t size);
  std::string* mutable_collection();
  std::string* release_collection();
  void set_allocated_collection(std::string* collection);
  private:
  const std::string& _internal_collection() const;
  void _internal_set_collection(const std::string& value);
  std::string* _internal_mutable_collection();
  public:

  // string key = 2;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // string user_id = 3;
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // @@protoc_insertion_point(class_scope:nakama.api.ReadStorageObjectId)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr collection_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto;
};
// -------------------------------------------------------------------

class ReadStorageObjectsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nakama.api.ReadStorageObjectsRequest) */ {
 public:
  inline ReadStorageObjectsRequest() : ReadStorageObjectsRequest(nullptr) {}
  virtual ~ReadStorageObjectsRequest();

  ReadStorageObjectsRequest(const ReadStorageObjectsRequest& from);
  ReadStorageObjectsRequest(ReadStorageObjectsRequest&& from) noexcept
    : ReadStorageObjectsRequest() {
    *this = ::std::move(from);
  }

  inline ReadStorageObjectsRequest& operator=(const ReadStorageObjectsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadStorageObjectsRequest& operator=(ReadStorageObjectsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReadStorageObjectsRequest& default_instance();

  static inline const ReadStorageObjectsRequest* internal_default_instance() {
    return reinterpret_cast<const ReadStorageObjectsRequest*>(
               &_ReadStorageObjectsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    89;

  friend void swap(ReadStorageObjectsRequest& a, ReadStorageObjectsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadStorageObjectsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadStorageObjectsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReadStorageObjectsRequest* New() const final {
    return CreateMaybeMessage<ReadStorageObjectsRequest>(nullptr);
  }

  ReadStorageObjectsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReadStorageObjectsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReadStorageObjectsRequest& from);
  void MergeFrom(const ReadStorageObjectsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadStorageObjectsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nakama.api.ReadStorageObjectsRequest";
  }
  protected:
  explicit ReadStorageObjectsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto);
    return ::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectIdsFieldNumber = 1,
  };
  // repeated .nakama.api.ReadStorageObjectId object_ids = 1;
  int object_ids_size() const;
  private:
  int _internal_object_ids_size() const;
  public:
  void clear_object_ids();
  ::nakama::api::ReadStorageObjectId* mutable_object_ids(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nakama::api::ReadStorageObjectId >*
      mutable_object_ids();
  private:
  const ::nakama::api::ReadStorageObjectId& _internal_object_ids(int index) const;
  ::nakama::api::ReadStorageObjectId* _internal_add_object_ids();
  public:
  const ::nakama::api::ReadStorageObjectId& object_ids(int index) const;
  ::nakama::api::ReadStorageObjectId* add_object_ids();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nakama::api::ReadStorageObjectId >&
      object_ids() const;

  // @@protoc_insertion_point(class_scope:nakama.api.ReadStorageObjectsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nakama::api::ReadStorageObjectId > object_ids_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto;
};
// -------------------------------------------------------------------

class Rpc PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nakama.api.Rpc) */ {
 public:
  inline Rpc() : Rpc(nullptr) {}
  virtual ~Rpc();

  Rpc(const Rpc& from);
  Rpc(Rpc&& from) noexcept
    : Rpc() {
    *this = ::std::move(from);
  }

  inline Rpc& operator=(const Rpc& from) {
    CopyFrom(from);
    return *this;
  }
  inline Rpc& operator=(Rpc&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Rpc& default_instance();

  static inline const Rpc* internal_default_instance() {
    return reinterpret_cast<const Rpc*>(
               &_Rpc_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    90;

  friend void swap(Rpc& a, Rpc& b) {
    a.Swap(&b);
  }
  inline void Swap(Rpc* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Rpc* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Rpc* New() const final {
    return CreateMaybeMessage<Rpc>(nullptr);
  }

  Rpc* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Rpc>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Rpc& from);
  void MergeFrom(const Rpc& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rpc* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nakama.api.Rpc";
  }
  protected:
  explicit Rpc(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto);
    return ::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kPayloadFieldNumber = 2,
    kHttpKeyFieldNumber = 3,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string payload = 2;
  void clear_payload();
  const std::string& payload() const;
  void set_payload(const std::string& value);
  void set_payload(std::string&& value);
  void set_payload(const char* value);
  void set_payload(const char* value, size_t size);
  std::string* mutable_payload();
  std::string* release_payload();
  void set_allocated_payload(std::string* payload);
  private:
  const std::string& _internal_payload() const;
  void _internal_set_payload(const std::string& value);
  std::string* _internal_mutable_payload();
  public:

  // string http_key = 3;
  void clear_http_key();
  const std::string& http_key() const;
  void set_http_key(const std::string& value);
  void set_http_key(std::string&& value);
  void set_http_key(const char* value);
  void set_http_key(const char* value, size_t size);
  std::string* mutable_http_key();
  std::string* release_http_key();
  void set_allocated_http_key(std::string* http_key);
  private:
  const std::string& _internal_http_key() const;
  void _internal_set_http_key(const std::string& value);
  std::string* _internal_mutable_http_key();
  public:

  // @@protoc_insertion_point(class_scope:nakama.api.Rpc)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payload_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr http_key_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto;
};
// -------------------------------------------------------------------

class Session PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nakama.api.Session) */ {
 public:
  inline Session() : Session(nullptr) {}
  virtual ~Session();

  Session(const Session& from);
  Session(Session&& from) noexcept
    : Session() {
    *this = ::std::move(from);
  }

  inline Session& operator=(const Session& from) {
    CopyFrom(from);
    return *this;
  }
  inline Session& operator=(Session&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Session& default_instance();

  static inline const Session* internal_default_instance() {
    return reinterpret_cast<const Session*>(
               &_Session_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    91;

  friend void swap(Session& a, Session& b) {
    a.Swap(&b);
  }
  inline void Swap(Session* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Session* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Session* New() const final {
    return CreateMaybeMessage<Session>(nullptr);
  }

  Session* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Session>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Session& from);
  void MergeFrom(const Session& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Session* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nakama.api.Session";
  }
  protected:
  explicit Session(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto);
    return ::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 2,
    kRefreshTokenFieldNumber = 3,
    kCreatedFieldNumber = 1,
  };
  // string token = 2;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // string refresh_token = 3;
  void clear_refresh_token();
  const std::string& refresh_token() const;
  void set_refresh_token(const std::string& value);
  void set_refresh_token(std::string&& value);
  void set_refresh_token(const char* value);
  void set_refresh_token(const char* value, size_t size);
  std::string* mutable_refresh_token();
  std::string* release_refresh_token();
  void set_allocated_refresh_token(std::string* refresh_token);
  private:
  const std::string& _internal_refresh_token() const;
  void _internal_set_refresh_token(const std::string& value);
  std::string* _internal_mutable_refresh_token();
  public:

  // bool created = 1;
  void clear_created();
  bool created() const;
  void set_created(bool value);
  private:
  bool _internal_created() const;
  void _internal_set_created(bool value);
  public:

  // @@protoc_insertion_point(class_scope:nakama.api.Session)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr refresh_token_;
  bool created_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto;
};
// -------------------------------------------------------------------

class StorageObject PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nakama.api.StorageObject) */ {
 public:
  inline StorageObject() : StorageObject(nullptr) {}
  virtual ~StorageObject();

  StorageObject(const StorageObject& from);
  StorageObject(StorageObject&& from) noexcept
    : StorageObject() {
    *this = ::std::move(from);
  }

  inline StorageObject& operator=(const StorageObject& from) {
    CopyFrom(from);
    return *this;
  }
  inline StorageObject& operator=(StorageObject&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StorageObject& default_instance();

  static inline const StorageObject* internal_default_instance() {
    return reinterpret_cast<const StorageObject*>(
               &_StorageObject_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    92;

  friend void swap(StorageObject& a, StorageObject& b) {
    a.Swap(&b);
  }
  inline void Swap(StorageObject* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StorageObject* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StorageObject* New() const final {
    return CreateMaybeMessage<StorageObject>(nullptr);
  }

  StorageObject* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StorageObject>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StorageObject& from);
  void MergeFrom(const StorageObject& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StorageObject* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nakama.api.StorageObject";
  }
  protected:
  explicit StorageObject(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto);
    return ::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCollectionFieldNumber = 1,
    kKeyFieldNumber = 2,
    kUserIdFieldNumber = 3,
    kValueFieldNumber = 4,
    kVersionFieldNumber = 5,
    kCreateTimeFieldNumber = 8,
    kUpdateTimeFieldNumber = 9,
    kPermissionReadFieldNumber = 6,
    kPermissionWriteFieldNumber = 7,
  };
  // string collection = 1;
  void clear_collection();
  const std::string& collection() const;
  void set_collection(const std::string& value);
  void set_collection(std::string&& value);
  void set_collection(const char* value);
  void set_collection(const char* value, size_t size);
  std::string* mutable_collection();
  std::string* release_collection();
  void set_allocated_collection(std::string* collection);
  private:
  const std::string& _internal_collection() const;
  void _internal_set_collection(const std::string& value);
  std::string* _internal_mutable_collection();
  public:

  // string key = 2;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // string user_id = 3;
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // string value = 4;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // string version = 5;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // .google.protobuf.Timestamp create_time = 8;
  bool has_create_time() const;
  private:
  bool _internal_has_create_time() const;
  public:
  void clear_create_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& create_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_create_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_create_time();
  void set_allocated_create_time(PROTOBUF_NAMESPACE_ID::Timestamp* create_time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_create_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_create_time();
  public:
  void unsafe_arena_set_allocated_create_time(
      PROTOBUF_NAMESPACE_ID::Timestamp* create_time);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_create_time();

  // .google.protobuf.Timestamp update_time = 9;
  bool has_update_time() const;
  private:
  bool _internal_has_update_time() const;
  public:
  void clear_update_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& update_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_update_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_update_time();
  void set_allocated_update_time(PROTOBUF_NAMESPACE_ID::Timestamp* update_time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_update_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_update_time();
  public:
  void unsafe_arena_set_allocated_update_time(
      PROTOBUF_NAMESPACE_ID::Timestamp* update_time);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_update_time();

  // int32 permission_read = 6;
  void clear_permission_read();
  ::PROTOBUF_NAMESPACE_ID::int32 permission_read() const;
  void set_permission_read(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_permission_read() const;
  void _internal_set_permission_read(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 permission_write = 7;
  void clear_permission_write();
  ::PROTOBUF_NAMESPACE_ID::int32 permission_write() const;
  void set_permission_write(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_permission_write() const;
  void _internal_set_permission_write(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:nakama.api.StorageObject)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr collection_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  PROTOBUF_NAMESPACE_ID::Timestamp* create_time_;
  PROTOBUF_NAMESPACE_ID::Timestamp* update_time_;
  ::PROTOBUF_NAMESPACE_ID::int32 permission_read_;
  ::PROTOBUF_NAMESPACE_ID::int32 permission_write_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto;
};
// -------------------------------------------------------------------

class StorageObjectAck PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nakama.api.StorageObjectAck) */ {
 public:
  inline StorageObjectAck() : StorageObjectAck(nullptr) {}
  virtual ~StorageObjectAck();

  StorageObjectAck(const StorageObjectAck& from);
  StorageObjectAck(StorageObjectAck&& from) noexcept
    : StorageObjectAck() {
    *this = ::std::move(from);
  }

  inline StorageObjectAck& operator=(const StorageObjectAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline StorageObjectAck& operator=(StorageObjectAck&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StorageObjectAck& default_instance();

  static inline const StorageObjectAck* internal_default_instance() {
    return reinterpret_cast<const StorageObjectAck*>(
               &_StorageObjectAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    93;

  friend void swap(StorageObjectAck& a, StorageObjectAck& b) {
    a.Swap(&b);
  }
  inline void Swap(StorageObjectAck* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StorageObjectAck* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StorageObjectAck* New() const final {
    return CreateMaybeMessage<StorageObjectAck>(nullptr);
  }

  StorageObjectAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StorageObjectAck>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StorageObjectAck& from);
  void MergeFrom(const StorageObjectAck& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StorageObjectAck* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nakama.api.StorageObjectAck";
  }
  protected:
  explicit StorageObjectAck(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto);
    return ::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCollectionFieldNumber = 1,
    kKeyFieldNumber = 2,
    kVersionFieldNumber = 3,
    kUserIdFieldNumber = 4,
  };
  // string collection = 1;
  void clear_collection();
  const std::string& collection() const;
  void set_collection(const std::string& value);
  void set_collection(std::string&& value);
  void set_collection(const char* value);
  void set_collection(const char* value, size_t size);
  std::string* mutable_collection();
  std::string* release_collection();
  void set_allocated_collection(std::string* collection);
  private:
  const std::string& _internal_collection() const;
  void _internal_set_collection(const std::string& value);
  std::string* _internal_mutable_collection();
  public:

  // string key = 2;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // string version = 3;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // string user_id = 4;
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // @@protoc_insertion_point(class_scope:nakama.api.StorageObjectAck)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr collection_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto;
};
// -------------------------------------------------------------------

class StorageObjectAcks PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nakama.api.StorageObjectAcks) */ {
 public:
  inline StorageObjectAcks() : StorageObjectAcks(nullptr) {}
  virtual ~StorageObjectAcks();

  StorageObjectAcks(const StorageObjectAcks& from);
  StorageObjectAcks(StorageObjectAcks&& from) noexcept
    : StorageObjectAcks() {
    *this = ::std::move(from);
  }

  inline StorageObjectAcks& operator=(const StorageObjectAcks& from) {
    CopyFrom(from);
    return *this;
  }
  inline StorageObjectAcks& operator=(StorageObjectAcks&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StorageObjectAcks& default_instance();

  static inline const StorageObjectAcks* internal_default_instance() {
    return reinterpret_cast<const StorageObjectAcks*>(
               &_StorageObjectAcks_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    94;

  friend void swap(StorageObjectAcks& a, StorageObjectAcks& b) {
    a.Swap(&b);
  }
  inline void Swap(StorageObjectAcks* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StorageObjectAcks* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StorageObjectAcks* New() const final {
    return CreateMaybeMessage<StorageObjectAcks>(nullptr);
  }

  StorageObjectAcks* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StorageObjectAcks>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StorageObjectAcks& from);
  void MergeFrom(const StorageObjectAcks& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StorageObjectAcks* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nakama.api.StorageObjectAcks";
  }
  protected:
  explicit StorageObjectAcks(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto);
    return ::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAcksFieldNumber = 1,
  };
  // repeated .nakama.api.StorageObjectAck acks = 1;
  int acks_size() const;
  private:
  int _internal_acks_size() const;
  public:
  void clear_acks();
  ::nakama::api::StorageObjectAck* mutable_acks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nakama::api::StorageObjectAck >*
      mutable_acks();
  private:
  const ::nakama::api::StorageObjectAck& _internal_acks(int index) const;
  ::nakama::api::StorageObjectAck* _internal_add_acks();
  public:
  const ::nakama::api::StorageObjectAck& acks(int index) const;
  ::nakama::api::StorageObjectAck* add_acks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nakama::api::StorageObjectAck >&
      acks() const;

  // @@protoc_insertion_point(class_scope:nakama.api.StorageObjectAcks)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nakama::api::StorageObjectAck > acks_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto;
};
// -------------------------------------------------------------------

class StorageObjects PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nakama.api.StorageObjects) */ {
 public:
  inline StorageObjects() : StorageObjects(nullptr) {}
  virtual ~StorageObjects();

  StorageObjects(const StorageObjects& from);
  StorageObjects(StorageObjects&& from) noexcept
    : StorageObjects() {
    *this = ::std::move(from);
  }

  inline StorageObjects& operator=(const StorageObjects& from) {
    CopyFrom(from);
    return *this;
  }
  inline StorageObjects& operator=(StorageObjects&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StorageObjects& default_instance();

  static inline const StorageObjects* internal_default_instance() {
    return reinterpret_cast<const StorageObjects*>(
               &_StorageObjects_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    95;

  friend void swap(StorageObjects& a, StorageObjects& b) {
    a.Swap(&b);
  }
  inline void Swap(StorageObjects* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StorageObjects* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StorageObjects* New() const final {
    return CreateMaybeMessage<StorageObjects>(nullptr);
  }

  StorageObjects* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StorageObjects>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StorageObjects& from);
  void MergeFrom(const StorageObjects& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StorageObjects* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nakama.api.StorageObjects";
  }
  protected:
  explicit StorageObjects(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto);
    return ::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectsFieldNumber = 1,
  };
  // repeated .nakama.api.StorageObject objects = 1;
  int objects_size() const;
  private:
  int _internal_objects_size() const;
  public:
  void clear_objects();
  ::nakama::api::StorageObject* mutable_objects(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nakama::api::StorageObject >*
      mutable_objects();
  private:
  const ::nakama::api::StorageObject& _internal_objects(int index) const;
  ::nakama::api::StorageObject* _internal_add_objects();
  public:
  const ::nakama::api::StorageObject& objects(int index) const;
  ::nakama::api::StorageObject* add_objects();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nakama::api::StorageObject >&
      objects() const;

  // @@protoc_insertion_point(class_scope:nakama.api.StorageObjects)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nakama::api::StorageObject > objects_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto;
};
// -------------------------------------------------------------------

class StorageObjectList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nakama.api.StorageObjectList) */ {
 public:
  inline StorageObjectList() : StorageObjectList(nullptr) {}
  virtual ~StorageObjectList();

  StorageObjectList(const StorageObjectList& from);
  StorageObjectList(StorageObjectList&& from) noexcept
    : StorageObjectList() {
    *this = ::std::move(from);
  }

  inline StorageObjectList& operator=(const StorageObjectList& from) {
    CopyFrom(from);
    return *this;
  }
  inline StorageObjectList& operator=(StorageObjectList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StorageObjectList& default_instance();

  static inline const StorageObjectList* internal_default_instance() {
    return reinterpret_cast<const StorageObjectList*>(
               &_StorageObjectList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    96;

  friend void swap(StorageObjectList& a, StorageObjectList& b) {
    a.Swap(&b);
  }
  inline void Swap(StorageObjectList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StorageObjectList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StorageObjectList* New() const final {
    return CreateMaybeMessage<StorageObjectList>(nullptr);
  }

  StorageObjectList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StorageObjectList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StorageObjectList& from);
  void MergeFrom(const StorageObjectList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StorageObjectList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nakama.api.StorageObjectList";
  }
  protected:
  explicit StorageObjectList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto);
    return ::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectsFieldNumber = 1,
    kCursorFieldNumber = 2,
  };
  // repeated .nakama.api.StorageObject objects = 1;
  int objects_size() const;
  private:
  int _internal_objects_size() const;
  public:
  void clear_objects();
  ::nakama::api::StorageObject* mutable_objects(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nakama::api::StorageObject >*
      mutable_objects();
  private:
  const ::nakama::api::StorageObject& _internal_objects(int index) const;
  ::nakama::api::StorageObject* _internal_add_objects();
  public:
  const ::nakama::api::StorageObject& objects(int index) const;
  ::nakama::api::StorageObject* add_objects();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nakama::api::StorageObject >&
      objects() const;

  // string cursor = 2;
  void clear_cursor();
  const std::string& cursor() const;
  void set_cursor(const std::string& value);
  void set_cursor(std::string&& value);
  void set_cursor(const char* value);
  void set_cursor(const char* value, size_t size);
  std::string* mutable_cursor();
  std::string* release_cursor();
  void set_allocated_cursor(std::string* cursor);
  private:
  const std::string& _internal_cursor() const;
  void _internal_set_cursor(const std::string& value);
  std::string* _internal_mutable_cursor();
  public:

  // @@protoc_insertion_point(class_scope:nakama.api.StorageObjectList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nakama::api::StorageObject > objects_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cursor_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto;
};
// -------------------------------------------------------------------

class Tournament PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nakama.api.Tournament) */ {
 public:
  inline Tournament() : Tournament(nullptr) {}
  virtual ~Tournament();

  Tournament(const Tournament& from);
  Tournament(Tournament&& from) noexcept
    : Tournament() {
    *this = ::std::move(from);
  }

  inline Tournament& operator=(const Tournament& from) {
    CopyFrom(from);
    return *this;
  }
  inline Tournament& operator=(Tournament&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Tournament& default_instance();

  static inline const Tournament* internal_default_instance() {
    return reinterpret_cast<const Tournament*>(
               &_Tournament_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    97;

  friend void swap(Tournament& a, Tournament& b) {
    a.Swap(&b);
  }
  inline void Swap(Tournament* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Tournament* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Tournament* New() const final {
    return CreateMaybeMessage<Tournament>(nullptr);
  }

  Tournament* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Tournament>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Tournament& from);
  void MergeFrom(const Tournament& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Tournament* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nakama.api.Tournament";
  }
  protected:
  explicit Tournament(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto);
    return ::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kTitleFieldNumber = 2,
    kDescriptionFieldNumber = 3,
    kMetadataFieldNumber = 12,
    kCreateTimeFieldNumber = 13,
    kStartTimeFieldNumber = 14,
    kEndTimeFieldNumber = 15,
    kCategoryFieldNumber = 4,
    kSortOrderFieldNumber = 5,
    kSizeFieldNumber = 6,
    kMaxSizeFieldNumber = 7,
    kMaxNumScoreFieldNumber = 8,
    kCanEnterFieldNumber = 9,
    kEndActiveFieldNumber = 10,
    kNextResetFieldNumber = 11,
    kDurationFieldNumber = 16,
    kStartActiveFieldNumber = 17,
    kPrevResetFieldNumber = 18,
    kOperatorFieldNumber = 19,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string title = 2;
  void clear_title();
  const std::string& title() const;
  void set_title(const std::string& value);
  void set_title(std::string&& value);
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  std::string* mutable_title();
  std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // string description = 3;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // string metadata = 12;
  void clear_metadata();
  const std::string& metadata() const;
  void set_metadata(const std::string& value);
  void set_metadata(std::string&& value);
  void set_metadata(const char* value);
  void set_metadata(const char* value, size_t size);
  std::string* mutable_metadata();
  std::string* release_metadata();
  void set_allocated_metadata(std::string* metadata);
  private:
  const std::string& _internal_metadata() const;
  void _internal_set_metadata(const std::string& value);
  std::string* _internal_mutable_metadata();
  public:

  // .google.protobuf.Timestamp create_time = 13;
  bool has_create_time() const;
  private:
  bool _internal_has_create_time() const;
  public:
  void clear_create_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& create_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_create_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_create_time();
  void set_allocated_create_time(PROTOBUF_NAMESPACE_ID::Timestamp* create_time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_create_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_create_time();
  public:
  void unsafe_arena_set_allocated_create_time(
      PROTOBUF_NAMESPACE_ID::Timestamp* create_time);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_create_time();

  // .google.protobuf.Timestamp start_time = 14;
  bool has_start_time() const;
  private:
  bool _internal_has_start_time() const;
  public:
  void clear_start_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& start_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_start_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_start_time();
  void set_allocated_start_time(PROTOBUF_NAMESPACE_ID::Timestamp* start_time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_start_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_start_time();
  public:
  void unsafe_arena_set_allocated_start_time(
      PROTOBUF_NAMESPACE_ID::Timestamp* start_time);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_start_time();

  // .google.protobuf.Timestamp end_time = 15;
  bool has_end_time() const;
  private:
  bool _internal_has_end_time() const;
  public:
  void clear_end_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& end_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_end_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_end_time();
  void set_allocated_end_time(PROTOBUF_NAMESPACE_ID::Timestamp* end_time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_end_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_end_time();
  public:
  void unsafe_arena_set_allocated_end_time(
      PROTOBUF_NAMESPACE_ID::Timestamp* end_time);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_end_time();

  // uint32 category = 4;
  void clear_category();
  ::PROTOBUF_NAMESPACE_ID::uint32 category() const;
  void set_category(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_category() const;
  void _internal_set_category(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 sort_order = 5;
  void clear_sort_order();
  ::PROTOBUF_NAMESPACE_ID::uint32 sort_order() const;
  void set_sort_order(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sort_order() const;
  void _internal_set_sort_order(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 size = 6;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 max_size = 7;
  void clear_max_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_size() const;
  void set_max_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_size() const;
  void _internal_set_max_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 max_num_score = 8;
  void clear_max_num_score();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_num_score() const;
  void set_max_num_score(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_num_score() const;
  void _internal_set_max_num_score(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool can_enter = 9;
  void clear_can_enter();
  bool can_enter() const;
  void set_can_enter(bool value);
  private:
  bool _internal_can_enter() const;
  void _internal_set_can_enter(bool value);
  public:

  // uint32 end_active = 10;
  void clear_end_active();
  ::PROTOBUF_NAMESPACE_ID::uint32 end_active() const;
  void set_end_active(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_end_active() const;
  void _internal_set_end_active(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 next_reset = 11;
  void clear_next_reset();
  ::PROTOBUF_NAMESPACE_ID::uint32 next_reset() const;
  void set_next_reset(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_next_reset() const;
  void _internal_set_next_reset(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 duration = 16;
  void clear_duration();
  ::PROTOBUF_NAMESPACE_ID::uint32 duration() const;
  void set_duration(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_duration() const;
  void _internal_set_duration(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 start_active = 17;
  void clear_start_active();
  ::PROTOBUF_NAMESPACE_ID::uint32 start_active() const;
  void set_start_active(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_start_active() const;
  void _internal_set_start_active(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 prev_reset = 18;
  void clear_prev_reset();
  ::PROTOBUF_NAMESPACE_ID::uint32 prev_reset() const;
  void set_prev_reset(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_prev_reset() const;
  void _internal_set_prev_reset(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .nakama.api.Operator operator = 19;
  void clear_operator_();
  ::nakama::api::Operator operator_() const;
  void set_operator_(::nakama::api::Operator value);
  private:
  ::nakama::api::Operator _internal_operator_() const;
  void _internal_set_operator_(::nakama::api::Operator value);
  public:

  // @@protoc_insertion_point(class_scope:nakama.api.Tournament)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr metadata_;
  PROTOBUF_NAMESPACE_ID::Timestamp* create_time_;
  PROTOBUF_NAMESPACE_ID::Timestamp* start_time_;
  PROTOBUF_NAMESPACE_ID::Timestamp* end_time_;
  ::PROTOBUF_NAMESPACE_ID::uint32 category_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sort_order_;
  ::PROTOBUF_NAMESPACE_ID::uint32 size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_num_score_;
  bool can_enter_;
  ::PROTOBUF_NAMESPACE_ID::uint32 end_active_;
  ::PROTOBUF_NAMESPACE_ID::uint32 next_reset_;
  ::PROTOBUF_NAMESPACE_ID::uint32 duration_;
  ::PROTOBUF_NAMESPACE_ID::uint32 start_active_;
  ::PROTOBUF_NAMESPACE_ID::uint32 prev_reset_;
  int operator__;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto;
};
// -------------------------------------------------------------------

class TournamentList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nakama.api.TournamentList) */ {
 public:
  inline TournamentList() : TournamentList(nullptr) {}
  virtual ~TournamentList();

  TournamentList(const TournamentList& from);
  TournamentList(TournamentList&& from) noexcept
    : TournamentList() {
    *this = ::std::move(from);
  }

  inline TournamentList& operator=(const TournamentList& from) {
    CopyFrom(from);
    return *this;
  }
  inline TournamentList& operator=(TournamentList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TournamentList& default_instance();

  static inline const TournamentList* internal_default_instance() {
    return reinterpret_cast<const TournamentList*>(
               &_TournamentList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    98;

  friend void swap(TournamentList& a, TournamentList& b) {
    a.Swap(&b);
  }
  inline void Swap(TournamentList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TournamentList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TournamentList* New() const final {
    return CreateMaybeMessage<TournamentList>(nullptr);
  }

  TournamentList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TournamentList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TournamentList& from);
  void MergeFrom(const TournamentList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TournamentList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nakama.api.TournamentList";
  }
  protected:
  explicit TournamentList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto);
    return ::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTournamentsFieldNumber = 1,
    kCursorFieldNumber = 2,
  };
  // repeated .nakama.api.Tournament tournaments = 1;
  int tournaments_size() const;
  private:
  int _internal_tournaments_size() const;
  public:
  void clear_tournaments();
  ::nakama::api::Tournament* mutable_tournaments(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nakama::api::Tournament >*
      mutable_tournaments();
  private:
  const ::nakama::api::Tournament& _internal_tournaments(int index) const;
  ::nakama::api::Tournament* _internal_add_tournaments();
  public:
  const ::nakama::api::Tournament& tournaments(int index) const;
  ::nakama::api::Tournament* add_tournaments();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nakama::api::Tournament >&
      tournaments() const;

  // string cursor = 2;
  void clear_cursor();
  const std::string& cursor() const;
  void set_cursor(const std::string& value);
  void set_cursor(std::string&& value);
  void set_cursor(const char* value);
  void set_cursor(const char* value, size_t size);
  std::string* mutable_cursor();
  std::string* release_cursor();
  void set_allocated_cursor(std::string* cursor);
  private:
  const std::string& _internal_cursor() const;
  void _internal_set_cursor(const std::string& value);
  std::string* _internal_mutable_cursor();
  public:

  // @@protoc_insertion_point(class_scope:nakama.api.TournamentList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nakama::api::Tournament > tournaments_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cursor_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto;
};
// -------------------------------------------------------------------

class TournamentRecordList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nakama.api.TournamentRecordList) */ {
 public:
  inline TournamentRecordList() : TournamentRecordList(nullptr) {}
  virtual ~TournamentRecordList();

  TournamentRecordList(const TournamentRecordList& from);
  TournamentRecordList(TournamentRecordList&& from) noexcept
    : TournamentRecordList() {
    *this = ::std::move(from);
  }

  inline TournamentRecordList& operator=(const TournamentRecordList& from) {
    CopyFrom(from);
    return *this;
  }
  inline TournamentRecordList& operator=(TournamentRecordList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TournamentRecordList& default_instance();

  static inline const TournamentRecordList* internal_default_instance() {
    return reinterpret_cast<const TournamentRecordList*>(
               &_TournamentRecordList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    99;

  friend void swap(TournamentRecordList& a, TournamentRecordList& b) {
    a.Swap(&b);
  }
  inline void Swap(TournamentRecordList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TournamentRecordList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TournamentRecordList* New() const final {
    return CreateMaybeMessage<TournamentRecordList>(nullptr);
  }

  TournamentRecordList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TournamentRecordList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TournamentRecordList& from);
  void MergeFrom(const TournamentRecordList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TournamentRecordList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nakama.api.TournamentRecordList";
  }
  protected:
  explicit TournamentRecordList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto);
    return ::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecordsFieldNumber = 1,
    kOwnerRecordsFieldNumber = 2,
    kNextCursorFieldNumber = 3,
    kPrevCursorFieldNumber = 4,
  };
  // repeated .nakama.api.LeaderboardRecord records = 1;
  int records_size() const;
  private:
  int _internal_records_size() const;
  public:
  void clear_records();
  ::nakama::api::LeaderboardRecord* mutable_records(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nakama::api::LeaderboardRecord >*
      mutable_records();
  private:
  const ::nakama::api::LeaderboardRecord& _internal_records(int index) const;
  ::nakama::api::LeaderboardRecord* _internal_add_records();
  public:
  const ::nakama::api::LeaderboardRecord& records(int index) const;
  ::nakama::api::LeaderboardRecord* add_records();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nakama::api::LeaderboardRecord >&
      records() const;

  // repeated .nakama.api.LeaderboardRecord owner_records = 2;
  int owner_records_size() const;
  private:
  int _internal_owner_records_size() const;
  public:
  void clear_owner_records();
  ::nakama::api::LeaderboardRecord* mutable_owner_records(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nakama::api::LeaderboardRecord >*
      mutable_owner_records();
  private:
  const ::nakama::api::LeaderboardRecord& _internal_owner_records(int index) const;
  ::nakama::api::LeaderboardRecord* _internal_add_owner_records();
  public:
  const ::nakama::api::LeaderboardRecord& owner_records(int index) const;
  ::nakama::api::LeaderboardRecord* add_owner_records();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nakama::api::LeaderboardRecord >&
      owner_records() const;

  // string next_cursor = 3;
  void clear_next_cursor();
  const std::string& next_cursor() const;
  void set_next_cursor(const std::string& value);
  void set_next_cursor(std::string&& value);
  void set_next_cursor(const char* value);
  void set_next_cursor(const char* value, size_t size);
  std::string* mutable_next_cursor();
  std::string* release_next_cursor();
  void set_allocated_next_cursor(std::string* next_cursor);
  private:
  const std::string& _internal_next_cursor() const;
  void _internal_set_next_cursor(const std::string& value);
  std::string* _internal_mutable_next_cursor();
  public:

  // string prev_cursor = 4;
  void clear_prev_cursor();
  const std::string& prev_cursor() const;
  void set_prev_cursor(const std::string& value);
  void set_prev_cursor(std::string&& value);
  void set_prev_cursor(const char* value);
  void set_prev_cursor(const char* value, size_t size);
  std::string* mutable_prev_cursor();
  std::string* release_prev_cursor();
  void set_allocated_prev_cursor(std::string* prev_cursor);
  private:
  const std::string& _internal_prev_cursor() const;
  void _internal_set_prev_cursor(const std::string& value);
  std::string* _internal_mutable_prev_cursor();
  public:

  // @@protoc_insertion_point(class_scope:nakama.api.TournamentRecordList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nakama::api::LeaderboardRecord > records_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nakama::api::LeaderboardRecord > owner_records_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_cursor_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prev_cursor_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto;
};
// -------------------------------------------------------------------

class UpdateAccountRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nakama.api.UpdateAccountRequest) */ {
 public:
  inline UpdateAccountRequest() : UpdateAccountRequest(nullptr) {}
  virtual ~UpdateAccountRequest();

  UpdateAccountRequest(const UpdateAccountRequest& from);
  UpdateAccountRequest(UpdateAccountRequest&& from) noexcept
    : UpdateAccountRequest() {
    *this = ::std::move(from);
  }

  inline UpdateAccountRequest& operator=(const UpdateAccountRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateAccountRequest& operator=(UpdateAccountRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateAccountRequest& default_instance();

  static inline const UpdateAccountRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateAccountRequest*>(
               &_UpdateAccountRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    100;

  friend void swap(UpdateAccountRequest& a, UpdateAccountRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateAccountRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateAccountRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateAccountRequest* New() const final {
    return CreateMaybeMessage<UpdateAccountRequest>(nullptr);
  }

  UpdateAccountRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateAccountRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateAccountRequest& from);
  void MergeFrom(const UpdateAccountRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateAccountRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nakama.api.UpdateAccountRequest";
  }
  protected:
  explicit UpdateAccountRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto);
    return ::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 1,
    kDisplayNameFieldNumber = 2,
    kAvatarUrlFieldNumber = 3,
    kLangTagFieldNumber = 4,
    kLocationFieldNumber = 5,
    kTimezoneFieldNumber = 6,
  };
  // .google.protobuf.StringValue username = 1;
  bool has_username() const;
  private:
  bool _internal_has_username() const;
  public:
  void clear_username();
  const PROTOBUF_NAMESPACE_ID::StringValue& username() const;
  PROTOBUF_NAMESPACE_ID::StringValue* release_username();
  PROTOBUF_NAMESPACE_ID::StringValue* mutable_username();
  void set_allocated_username(PROTOBUF_NAMESPACE_ID::StringValue* username);
  private:
  const PROTOBUF_NAMESPACE_ID::StringValue& _internal_username() const;
  PROTOBUF_NAMESPACE_ID::StringValue* _internal_mutable_username();
  public:
  void unsafe_arena_set_allocated_username(
      PROTOBUF_NAMESPACE_ID::StringValue* username);
  PROTOBUF_NAMESPACE_ID::StringValue* unsafe_arena_release_username();

  // .google.protobuf.StringValue display_name = 2;
  bool has_display_name() const;
  private:
  bool _internal_has_display_name() const;
  public:
  void clear_display_name();
  const PROTOBUF_NAMESPACE_ID::StringValue& display_name() const;
  PROTOBUF_NAMESPACE_ID::StringValue* release_display_name();
  PROTOBUF_NAMESPACE_ID::StringValue* mutable_display_name();
  void set_allocated_display_name(PROTOBUF_NAMESPACE_ID::StringValue* display_name);
  private:
  const PROTOBUF_NAMESPACE_ID::StringValue& _internal_display_name() const;
  PROTOBUF_NAMESPACE_ID::StringValue* _internal_mutable_display_name();
  public:
  void unsafe_arena_set_allocated_display_name(
      PROTOBUF_NAMESPACE_ID::StringValue* display_name);
  PROTOBUF_NAMESPACE_ID::StringValue* unsafe_arena_release_display_name();

  // .google.protobuf.StringValue avatar_url = 3;
  bool has_avatar_url() const;
  private:
  bool _internal_has_avatar_url() const;
  public:
  void clear_avatar_url();
  const PROTOBUF_NAMESPACE_ID::StringValue& avatar_url() const;
  PROTOBUF_NAMESPACE_ID::StringValue* release_avatar_url();
  PROTOBUF_NAMESPACE_ID::StringValue* mutable_avatar_url();
  void set_allocated_avatar_url(PROTOBUF_NAMESPACE_ID::StringValue* avatar_url);
  private:
  const PROTOBUF_NAMESPACE_ID::StringValue& _internal_avatar_url() const;
  PROTOBUF_NAMESPACE_ID::StringValue* _internal_mutable_avatar_url();
  public:
  void unsafe_arena_set_allocated_avatar_url(
      PROTOBUF_NAMESPACE_ID::StringValue* avatar_url);
  PROTOBUF_NAMESPACE_ID::StringValue* unsafe_arena_release_avatar_url();

  // .google.protobuf.StringValue lang_tag = 4;
  bool has_lang_tag() const;
  private:
  bool _internal_has_lang_tag() const;
  public:
  void clear_lang_tag();
  const PROTOBUF_NAMESPACE_ID::StringValue& lang_tag() const;
  PROTOBUF_NAMESPACE_ID::StringValue* release_lang_tag();
  PROTOBUF_NAMESPACE_ID::StringValue* mutable_lang_tag();
  void set_allocated_lang_tag(PROTOBUF_NAMESPACE_ID::StringValue* lang_tag);
  private:
  const PROTOBUF_NAMESPACE_ID::StringValue& _internal_lang_tag() const;
  PROTOBUF_NAMESPACE_ID::StringValue* _internal_mutable_lang_tag();
  public:
  void unsafe_arena_set_allocated_lang_tag(
      PROTOBUF_NAMESPACE_ID::StringValue* lang_tag);
  PROTOBUF_NAMESPACE_ID::StringValue* unsafe_arena_release_lang_tag();

  // .google.protobuf.StringValue location = 5;
  bool has_location() const;
  private:
  bool _internal_has_location() const;
  public:
  void clear_location();
  const PROTOBUF_NAMESPACE_ID::StringValue& location() const;
  PROTOBUF_NAMESPACE_ID::StringValue* release_location();
  PROTOBUF_NAMESPACE_ID::StringValue* mutable_location();
  void set_allocated_location(PROTOBUF_NAMESPACE_ID::StringValue* location);
  private:
  const PROTOBUF_NAMESPACE_ID::StringValue& _internal_location() const;
  PROTOBUF_NAMESPACE_ID::StringValue* _internal_mutable_location();
  public:
  void unsafe_arena_set_allocated_location(
      PROTOBUF_NAMESPACE_ID::StringValue* location);
  PROTOBUF_NAMESPACE_ID::StringValue* unsafe_arena_release_location();

  // .google.protobuf.StringValue timezone = 6;
  bool has_timezone() const;
  private:
  bool _internal_has_timezone() const;
  public:
  void clear_timezone();
  const PROTOBUF_NAMESPACE_ID::StringValue& timezone() const;
  PROTOBUF_NAMESPACE_ID::StringValue* release_timezone();
  PROTOBUF_NAMESPACE_ID::StringValue* mutable_timezone();
  void set_allocated_timezone(PROTOBUF_NAMESPACE_ID::StringValue* timezone);
  private:
  const PROTOBUF_NAMESPACE_ID::StringValue& _internal_timezone() const;
  PROTOBUF_NAMESPACE_ID::StringValue* _internal_mutable_timezone();
  public:
  void unsafe_arena_set_allocated_timezone(
      PROTOBUF_NAMESPACE_ID::StringValue* timezone);
  PROTOBUF_NAMESPACE_ID::StringValue* unsafe_arena_release_timezone();

  // @@protoc_insertion_point(class_scope:nakama.api.UpdateAccountRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  PROTOBUF_NAMESPACE_ID::StringValue* username_;
  PROTOBUF_NAMESPACE_ID::StringValue* display_name_;
  PROTOBUF_NAMESPACE_ID::StringValue* avatar_url_;
  PROTOBUF_NAMESPACE_ID::StringValue* lang_tag_;
  PROTOBUF_NAMESPACE_ID::StringValue* location_;
  PROTOBUF_NAMESPACE_ID::StringValue* timezone_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto;
};
// -------------------------------------------------------------------

class UpdateGroupRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nakama.api.UpdateGroupRequest) */ {
 public:
  inline UpdateGroupRequest() : UpdateGroupRequest(nullptr) {}
  virtual ~UpdateGroupRequest();

  UpdateGroupRequest(const UpdateGroupRequest& from);
  UpdateGroupRequest(UpdateGroupRequest&& from) noexcept
    : UpdateGroupRequest() {
    *this = ::std::move(from);
  }

  inline UpdateGroupRequest& operator=(const UpdateGroupRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateGroupRequest& operator=(UpdateGroupRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateGroupRequest& default_instance();

  static inline const UpdateGroupRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateGroupRequest*>(
               &_UpdateGroupRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    101;

  friend void swap(UpdateGroupRequest& a, UpdateGroupRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateGroupRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateGroupRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateGroupRequest* New() const final {
    return CreateMaybeMessage<UpdateGroupRequest>(nullptr);
  }

  UpdateGroupRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateGroupRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateGroupRequest& from);
  void MergeFrom(const UpdateGroupRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateGroupRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nakama.api.UpdateGroupRequest";
  }
  protected:
  explicit UpdateGroupRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto);
    return ::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupIdFieldNumber = 1,
    kNameFieldNumber = 2,
    kDescriptionFieldNumber = 3,
    kLangTagFieldNumber = 4,
    kAvatarUrlFieldNumber = 5,
    kOpenFieldNumber = 6,
  };
  // string group_id = 1;
  void clear_group_id();
  const std::string& group_id() const;
  void set_group_id(const std::string& value);
  void set_group_id(std::string&& value);
  void set_group_id(const char* value);
  void set_group_id(const char* value, size_t size);
  std::string* mutable_group_id();
  std::string* release_group_id();
  void set_allocated_group_id(std::string* group_id);
  private:
  const std::string& _internal_group_id() const;
  void _internal_set_group_id(const std::string& value);
  std::string* _internal_mutable_group_id();
  public:

  // .google.protobuf.StringValue name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const PROTOBUF_NAMESPACE_ID::StringValue& name() const;
  PROTOBUF_NAMESPACE_ID::StringValue* release_name();
  PROTOBUF_NAMESPACE_ID::StringValue* mutable_name();
  void set_allocated_name(PROTOBUF_NAMESPACE_ID::StringValue* name);
  private:
  const PROTOBUF_NAMESPACE_ID::StringValue& _internal_name() const;
  PROTOBUF_NAMESPACE_ID::StringValue* _internal_mutable_name();
  public:
  void unsafe_arena_set_allocated_name(
      PROTOBUF_NAMESPACE_ID::StringValue* name);
  PROTOBUF_NAMESPACE_ID::StringValue* unsafe_arena_release_name();

  // .google.protobuf.StringValue description = 3;
  bool has_description() const;
  private:
  bool _internal_has_description() const;
  public:
  void clear_description();
  const PROTOBUF_NAMESPACE_ID::StringValue& description() const;
  PROTOBUF_NAMESPACE_ID::StringValue* release_description();
  PROTOBUF_NAMESPACE_ID::StringValue* mutable_description();
  void set_allocated_description(PROTOBUF_NAMESPACE_ID::StringValue* description);
  private:
  const PROTOBUF_NAMESPACE_ID::StringValue& _internal_description() const;
  PROTOBUF_NAMESPACE_ID::StringValue* _internal_mutable_description();
  public:
  void unsafe_arena_set_allocated_description(
      PROTOBUF_NAMESPACE_ID::StringValue* description);
  PROTOBUF_NAMESPACE_ID::StringValue* unsafe_arena_release_description();

  // .google.protobuf.StringValue lang_tag = 4;
  bool has_lang_tag() const;
  private:
  bool _internal_has_lang_tag() const;
  public:
  void clear_lang_tag();
  const PROTOBUF_NAMESPACE_ID::StringValue& lang_tag() const;
  PROTOBUF_NAMESPACE_ID::StringValue* release_lang_tag();
  PROTOBUF_NAMESPACE_ID::StringValue* mutable_lang_tag();
  void set_allocated_lang_tag(PROTOBUF_NAMESPACE_ID::StringValue* lang_tag);
  private:
  const PROTOBUF_NAMESPACE_ID::StringValue& _internal_lang_tag() const;
  PROTOBUF_NAMESPACE_ID::StringValue* _internal_mutable_lang_tag();
  public:
  void unsafe_arena_set_allocated_lang_tag(
      PROTOBUF_NAMESPACE_ID::StringValue* lang_tag);
  PROTOBUF_NAMESPACE_ID::StringValue* unsafe_arena_release_lang_tag();

  // .google.protobuf.StringValue avatar_url = 5;
  bool has_avatar_url() const;
  private:
  bool _internal_has_avatar_url() const;
  public:
  void clear_avatar_url();
  const PROTOBUF_NAMESPACE_ID::StringValue& avatar_url() const;
  PROTOBUF_NAMESPACE_ID::StringValue* release_avatar_url();
  PROTOBUF_NAMESPACE_ID::StringValue* mutable_avatar_url();
  void set_allocated_avatar_url(PROTOBUF_NAMESPACE_ID::StringValue* avatar_url);
  private:
  const PROTOBUF_NAMESPACE_ID::StringValue& _internal_avatar_url() const;
  PROTOBUF_NAMESPACE_ID::StringValue* _internal_mutable_avatar_url();
  public:
  void unsafe_arena_set_allocated_avatar_url(
      PROTOBUF_NAMESPACE_ID::StringValue* avatar_url);
  PROTOBUF_NAMESPACE_ID::StringValue* unsafe_arena_release_avatar_url();

  // .google.protobuf.BoolValue open = 6;
  bool has_open() const;
  private:
  bool _internal_has_open() const;
  public:
  void clear_open();
  const PROTOBUF_NAMESPACE_ID::BoolValue& open() const;
  PROTOBUF_NAMESPACE_ID::BoolValue* release_open();
  PROTOBUF_NAMESPACE_ID::BoolValue* mutable_open();
  void set_allocated_open(PROTOBUF_NAMESPACE_ID::BoolValue* open);
  private:
  const PROTOBUF_NAMESPACE_ID::BoolValue& _internal_open() const;
  PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_open();
  public:
  void unsafe_arena_set_allocated_open(
      PROTOBUF_NAMESPACE_ID::BoolValue* open);
  PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_open();

  // @@protoc_insertion_point(class_scope:nakama.api.UpdateGroupRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr group_id_;
  PROTOBUF_NAMESPACE_ID::StringValue* name_;
  PROTOBUF_NAMESPACE_ID::StringValue* description_;
  PROTOBUF_NAMESPACE_ID::StringValue* lang_tag_;
  PROTOBUF_NAMESPACE_ID::StringValue* avatar_url_;
  PROTOBUF_NAMESPACE_ID::BoolValue* open_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto;
};
// -------------------------------------------------------------------

class User PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nakama.api.User) */ {
 public:
  inline User() : User(nullptr) {}
  virtual ~User();

  User(const User& from);
  User(User&& from) noexcept
    : User() {
    *this = ::std::move(from);
  }

  inline User& operator=(const User& from) {
    CopyFrom(from);
    return *this;
  }
  inline User& operator=(User&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const User& default_instance();

  static inline const User* internal_default_instance() {
    return reinterpret_cast<const User*>(
               &_User_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    102;

  friend void swap(User& a, User& b) {
    a.Swap(&b);
  }
  inline void Swap(User* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(User* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline User* New() const final {
    return CreateMaybeMessage<User>(nullptr);
  }

  User* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<User>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const User& from);
  void MergeFrom(const User& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(User* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nakama.api.User";
  }
  protected:
  explicit User(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto);
    return ::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kUsernameFieldNumber = 2,
    kDisplayNameFieldNumber = 3,
    kAvatarUrlFieldNumber = 4,
    kLangTagFieldNumber = 5,
    kLocationFieldNumber = 6,
    kTimezoneFieldNumber = 7,
    kMetadataFieldNumber = 8,
    kFacebookIdFieldNumber = 9,
    kGoogleIdFieldNumber = 10,
    kGamecenterIdFieldNumber = 11,
    kSteamIdFieldNumber = 12,
    kFacebookInstantGameIdFieldNumber = 17,
    kAppleIdFieldNumber = 18,
    kCreateTimeFieldNumber = 15,
    kUpdateTimeFieldNumber = 16,
    kOnlineFieldNumber = 13,
    kEdgeCountFieldNumber = 14,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string username = 2;
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // string display_name = 3;
  void clear_display_name();
  const std::string& display_name() const;
  void set_display_name(const std::string& value);
  void set_display_name(std::string&& value);
  void set_display_name(const char* value);
  void set_display_name(const char* value, size_t size);
  std::string* mutable_display_name();
  std::string* release_display_name();
  void set_allocated_display_name(std::string* display_name);
  private:
  const std::string& _internal_display_name() const;
  void _internal_set_display_name(const std::string& value);
  std::string* _internal_mutable_display_name();
  public:

  // string avatar_url = 4;
  void clear_avatar_url();
  const std::string& avatar_url() const;
  void set_avatar_url(const std::string& value);
  void set_avatar_url(std::string&& value);
  void set_avatar_url(const char* value);
  void set_avatar_url(const char* value, size_t size);
  std::string* mutable_avatar_url();
  std::string* release_avatar_url();
  void set_allocated_avatar_url(std::string* avatar_url);
  private:
  const std::string& _internal_avatar_url() const;
  void _internal_set_avatar_url(const std::string& value);
  std::string* _internal_mutable_avatar_url();
  public:

  // string lang_tag = 5;
  void clear_lang_tag();
  const std::string& lang_tag() const;
  void set_lang_tag(const std::string& value);
  void set_lang_tag(std::string&& value);
  void set_lang_tag(const char* value);
  void set_lang_tag(const char* value, size_t size);
  std::string* mutable_lang_tag();
  std::string* release_lang_tag();
  void set_allocated_lang_tag(std::string* lang_tag);
  private:
  const std::string& _internal_lang_tag() const;
  void _internal_set_lang_tag(const std::string& value);
  std::string* _internal_mutable_lang_tag();
  public:

  // string location = 6;
  void clear_location();
  const std::string& location() const;
  void set_location(const std::string& value);
  void set_location(std::string&& value);
  void set_location(const char* value);
  void set_location(const char* value, size_t size);
  std::string* mutable_location();
  std::string* release_location();
  void set_allocated_location(std::string* location);
  private:
  const std::string& _internal_location() const;
  void _internal_set_location(const std::string& value);
  std::string* _internal_mutable_location();
  public:

  // string timezone = 7;
  void clear_timezone();
  const std::string& timezone() const;
  void set_timezone(const std::string& value);
  void set_timezone(std::string&& value);
  void set_timezone(const char* value);
  void set_timezone(const char* value, size_t size);
  std::string* mutable_timezone();
  std::string* release_timezone();
  void set_allocated_timezone(std::string* timezone);
  private:
  const std::string& _internal_timezone() const;
  void _internal_set_timezone(const std::string& value);
  std::string* _internal_mutable_timezone();
  public:

  // string metadata = 8;
  void clear_metadata();
  const std::string& metadata() const;
  void set_metadata(const std::string& value);
  void set_metadata(std::string&& value);
  void set_metadata(const char* value);
  void set_metadata(const char* value, size_t size);
  std::string* mutable_metadata();
  std::string* release_metadata();
  void set_allocated_metadata(std::string* metadata);
  private:
  const std::string& _internal_metadata() const;
  void _internal_set_metadata(const std::string& value);
  std::string* _internal_mutable_metadata();
  public:

  // string facebook_id = 9;
  void clear_facebook_id();
  const std::string& facebook_id() const;
  void set_facebook_id(const std::string& value);
  void set_facebook_id(std::string&& value);
  void set_facebook_id(const char* value);
  void set_facebook_id(const char* value, size_t size);
  std::string* mutable_facebook_id();
  std::string* release_facebook_id();
  void set_allocated_facebook_id(std::string* facebook_id);
  private:
  const std::string& _internal_facebook_id() const;
  void _internal_set_facebook_id(const std::string& value);
  std::string* _internal_mutable_facebook_id();
  public:

  // string google_id = 10;
  void clear_google_id();
  const std::string& google_id() const;
  void set_google_id(const std::string& value);
  void set_google_id(std::string&& value);
  void set_google_id(const char* value);
  void set_google_id(const char* value, size_t size);
  std::string* mutable_google_id();
  std::string* release_google_id();
  void set_allocated_google_id(std::string* google_id);
  private:
  const std::string& _internal_google_id() const;
  void _internal_set_google_id(const std::string& value);
  std::string* _internal_mutable_google_id();
  public:

  // string gamecenter_id = 11;
  void clear_gamecenter_id();
  const std::string& gamecenter_id() const;
  void set_gamecenter_id(const std::string& value);
  void set_gamecenter_id(std::string&& value);
  void set_gamecenter_id(const char* value);
  void set_gamecenter_id(const char* value, size_t size);
  std::string* mutable_gamecenter_id();
  std::string* release_gamecenter_id();
  void set_allocated_gamecenter_id(std::string* gamecenter_id);
  private:
  const std::string& _internal_gamecenter_id() const;
  void _internal_set_gamecenter_id(const std::string& value);
  std::string* _internal_mutable_gamecenter_id();
  public:

  // string steam_id = 12;
  void clear_steam_id();
  const std::string& steam_id() const;
  void set_steam_id(const std::string& value);
  void set_steam_id(std::string&& value);
  void set_steam_id(const char* value);
  void set_steam_id(const char* value, size_t size);
  std::string* mutable_steam_id();
  std::string* release_steam_id();
  void set_allocated_steam_id(std::string* steam_id);
  private:
  const std::string& _internal_steam_id() const;
  void _internal_set_steam_id(const std::string& value);
  std::string* _internal_mutable_steam_id();
  public:

  // string facebook_instant_game_id = 17;
  void clear_facebook_instant_game_id();
  const std::string& facebook_instant_game_id() const;
  void set_facebook_instant_game_id(const std::string& value);
  void set_facebook_instant_game_id(std::string&& value);
  void set_facebook_instant_game_id(const char* value);
  void set_facebook_instant_game_id(const char* value, size_t size);
  std::string* mutable_facebook_instant_game_id();
  std::string* release_facebook_instant_game_id();
  void set_allocated_facebook_instant_game_id(std::string* facebook_instant_game_id);
  private:
  const std::string& _internal_facebook_instant_game_id() const;
  void _internal_set_facebook_instant_game_id(const std::string& value);
  std::string* _internal_mutable_facebook_instant_game_id();
  public:

  // string apple_id = 18;
  void clear_apple_id();
  const std::string& apple_id() const;
  void set_apple_id(const std::string& value);
  void set_apple_id(std::string&& value);
  void set_apple_id(const char* value);
  void set_apple_id(const char* value, size_t size);
  std::string* mutable_apple_id();
  std::string* release_apple_id();
  void set_allocated_apple_id(std::string* apple_id);
  private:
  const std::string& _internal_apple_id() const;
  void _internal_set_apple_id(const std::string& value);
  std::string* _internal_mutable_apple_id();
  public:

  // .google.protobuf.Timestamp create_time = 15;
  bool has_create_time() const;
  private:
  bool _internal_has_create_time() const;
  public:
  void clear_create_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& create_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_create_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_create_time();
  void set_allocated_create_time(PROTOBUF_NAMESPACE_ID::Timestamp* create_time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_create_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_create_time();
  public:
  void unsafe_arena_set_allocated_create_time(
      PROTOBUF_NAMESPACE_ID::Timestamp* create_time);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_create_time();

  // .google.protobuf.Timestamp update_time = 16;
  bool has_update_time() const;
  private:
  bool _internal_has_update_time() const;
  public:
  void clear_update_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& update_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_update_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_update_time();
  void set_allocated_update_time(PROTOBUF_NAMESPACE_ID::Timestamp* update_time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_update_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_update_time();
  public:
  void unsafe_arena_set_allocated_update_time(
      PROTOBUF_NAMESPACE_ID::Timestamp* update_time);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_update_time();

  // bool online = 13;
  void clear_online();
  bool online() const;
  void set_online(bool value);
  private:
  bool _internal_online() const;
  void _internal_set_online(bool value);
  public:

  // int32 edge_count = 14;
  void clear_edge_count();
  ::PROTOBUF_NAMESPACE_ID::int32 edge_count() const;
  void set_edge_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_edge_count() const;
  void _internal_set_edge_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:nakama.api.User)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr display_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr avatar_url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lang_tag_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr location_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr timezone_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr facebook_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr google_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gamecenter_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr steam_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr facebook_instant_game_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr apple_id_;
  PROTOBUF_NAMESPACE_ID::Timestamp* create_time_;
  PROTOBUF_NAMESPACE_ID::Timestamp* update_time_;
  bool online_;
  ::PROTOBUF_NAMESPACE_ID::int32 edge_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto;
};
// -------------------------------------------------------------------

class UserGroupList_UserGroup PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nakama.api.UserGroupList.UserGroup) */ {
 public:
  inline UserGroupList_UserGroup() : UserGroupList_UserGroup(nullptr) {}
  virtual ~UserGroupList_UserGroup();

  UserGroupList_UserGroup(const UserGroupList_UserGroup& from);
  UserGroupList_UserGroup(UserGroupList_UserGroup&& from) noexcept
    : UserGroupList_UserGroup() {
    *this = ::std::move(from);
  }

  inline UserGroupList_UserGroup& operator=(const UserGroupList_UserGroup& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserGroupList_UserGroup& operator=(UserGroupList_UserGroup&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserGroupList_UserGroup& default_instance();

  static inline const UserGroupList_UserGroup* internal_default_instance() {
    return reinterpret_cast<const UserGroupList_UserGroup*>(
               &_UserGroupList_UserGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    103;

  friend void swap(UserGroupList_UserGroup& a, UserGroupList_UserGroup& b) {
    a.Swap(&b);
  }
  inline void Swap(UserGroupList_UserGroup* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserGroupList_UserGroup* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserGroupList_UserGroup* New() const final {
    return CreateMaybeMessage<UserGroupList_UserGroup>(nullptr);
  }

  UserGroupList_UserGroup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserGroupList_UserGroup>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserGroupList_UserGroup& from);
  void MergeFrom(const UserGroupList_UserGroup& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserGroupList_UserGroup* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nakama.api.UserGroupList.UserGroup";
  }
  protected:
  explicit UserGroupList_UserGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto);
    return ::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef UserGroupList_UserGroup_State State;
  static constexpr State SUPERADMIN =
    UserGroupList_UserGroup_State_SUPERADMIN;
  static constexpr State ADMIN =
    UserGroupList_UserGroup_State_ADMIN;
  static constexpr State MEMBER =
    UserGroupList_UserGroup_State_MEMBER;
  static constexpr State JOIN_REQUEST =
    UserGroupList_UserGroup_State_JOIN_REQUEST;
  static inline bool State_IsValid(int value) {
    return UserGroupList_UserGroup_State_IsValid(value);
  }
  static constexpr State State_MIN =
    UserGroupList_UserGroup_State_State_MIN;
  static constexpr State State_MAX =
    UserGroupList_UserGroup_State_State_MAX;
  static constexpr int State_ARRAYSIZE =
    UserGroupList_UserGroup_State_State_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  State_descriptor() {
    return UserGroupList_UserGroup_State_descriptor();
  }
  template<typename T>
  static inline const std::string& State_Name(T enum_t_value) {
    static_assert(::std::is_same<T, State>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function State_Name.");
    return UserGroupList_UserGroup_State_Name(enum_t_value);
  }
  static inline bool State_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      State* value) {
    return UserGroupList_UserGroup_State_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kGroupFieldNumber = 1,
    kStateFieldNumber = 2,
  };
  // .nakama.api.Group group = 1;
  bool has_group() const;
  private:
  bool _internal_has_group() const;
  public:
  void clear_group();
  const ::nakama::api::Group& group() const;
  ::nakama::api::Group* release_group();
  ::nakama::api::Group* mutable_group();
  void set_allocated_group(::nakama::api::Group* group);
  private:
  const ::nakama::api::Group& _internal_group() const;
  ::nakama::api::Group* _internal_mutable_group();
  public:
  void unsafe_arena_set_allocated_group(
      ::nakama::api::Group* group);
  ::nakama::api::Group* unsafe_arena_release_group();

  // .google.protobuf.Int32Value state = 2;
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  const PROTOBUF_NAMESPACE_ID::Int32Value& state() const;
  PROTOBUF_NAMESPACE_ID::Int32Value* release_state();
  PROTOBUF_NAMESPACE_ID::Int32Value* mutable_state();
  void set_allocated_state(PROTOBUF_NAMESPACE_ID::Int32Value* state);
  private:
  const PROTOBUF_NAMESPACE_ID::Int32Value& _internal_state() const;
  PROTOBUF_NAMESPACE_ID::Int32Value* _internal_mutable_state();
  public:
  void unsafe_arena_set_allocated_state(
      PROTOBUF_NAMESPACE_ID::Int32Value* state);
  PROTOBUF_NAMESPACE_ID::Int32Value* unsafe_arena_release_state();

  // @@protoc_insertion_point(class_scope:nakama.api.UserGroupList.UserGroup)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::nakama::api::Group* group_;
  PROTOBUF_NAMESPACE_ID::Int32Value* state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto;
};
// -------------------------------------------------------------------

class UserGroupList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nakama.api.UserGroupList) */ {
 public:
  inline UserGroupList() : UserGroupList(nullptr) {}
  virtual ~UserGroupList();

  UserGroupList(const UserGroupList& from);
  UserGroupList(UserGroupList&& from) noexcept
    : UserGroupList() {
    *this = ::std::move(from);
  }

  inline UserGroupList& operator=(const UserGroupList& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserGroupList& operator=(UserGroupList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserGroupList& default_instance();

  static inline const UserGroupList* internal_default_instance() {
    return reinterpret_cast<const UserGroupList*>(
               &_UserGroupList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    104;

  friend void swap(UserGroupList& a, UserGroupList& b) {
    a.Swap(&b);
  }
  inline void Swap(UserGroupList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserGroupList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserGroupList* New() const final {
    return CreateMaybeMessage<UserGroupList>(nullptr);
  }

  UserGroupList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserGroupList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserGroupList& from);
  void MergeFrom(const UserGroupList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserGroupList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nakama.api.UserGroupList";
  }
  protected:
  explicit UserGroupList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto);
    return ::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef UserGroupList_UserGroup UserGroup;

  // accessors -------------------------------------------------------

  enum : int {
    kUserGroupsFieldNumber = 1,
    kCursorFieldNumber = 2,
  };
  // repeated .nakama.api.UserGroupList.UserGroup user_groups = 1;
  int user_groups_size() const;
  private:
  int _internal_user_groups_size() const;
  public:
  void clear_user_groups();
  ::nakama::api::UserGroupList_UserGroup* mutable_user_groups(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nakama::api::UserGroupList_UserGroup >*
      mutable_user_groups();
  private:
  const ::nakama::api::UserGroupList_UserGroup& _internal_user_groups(int index) const;
  ::nakama::api::UserGroupList_UserGroup* _internal_add_user_groups();
  public:
  const ::nakama::api::UserGroupList_UserGroup& user_groups(int index) const;
  ::nakama::api::UserGroupList_UserGroup* add_user_groups();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nakama::api::UserGroupList_UserGroup >&
      user_groups() const;

  // string cursor = 2;
  void clear_cursor();
  const std::string& cursor() const;
  void set_cursor(const std::string& value);
  void set_cursor(std::string&& value);
  void set_cursor(const char* value);
  void set_cursor(const char* value, size_t size);
  std::string* mutable_cursor();
  std::string* release_cursor();
  void set_allocated_cursor(std::string* cursor);
  private:
  const std::string& _internal_cursor() const;
  void _internal_set_cursor(const std::string& value);
  std::string* _internal_mutable_cursor();
  public:

  // @@protoc_insertion_point(class_scope:nakama.api.UserGroupList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nakama::api::UserGroupList_UserGroup > user_groups_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cursor_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto;
};
// -------------------------------------------------------------------

class Users PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nakama.api.Users) */ {
 public:
  inline Users() : Users(nullptr) {}
  virtual ~Users();

  Users(const Users& from);
  Users(Users&& from) noexcept
    : Users() {
    *this = ::std::move(from);
  }

  inline Users& operator=(const Users& from) {
    CopyFrom(from);
    return *this;
  }
  inline Users& operator=(Users&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Users& default_instance();

  static inline const Users* internal_default_instance() {
    return reinterpret_cast<const Users*>(
               &_Users_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    105;

  friend void swap(Users& a, Users& b) {
    a.Swap(&b);
  }
  inline void Swap(Users* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Users* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Users* New() const final {
    return CreateMaybeMessage<Users>(nullptr);
  }

  Users* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Users>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Users& from);
  void MergeFrom(const Users& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Users* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nakama.api.Users";
  }
  protected:
  explicit Users(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto);
    return ::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsersFieldNumber = 1,
  };
  // repeated .nakama.api.User users = 1;
  int users_size() const;
  private:
  int _internal_users_size() const;
  public:
  void clear_users();
  ::nakama::api::User* mutable_users(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nakama::api::User >*
      mutable_users();
  private:
  const ::nakama::api::User& _internal_users(int index) const;
  ::nakama::api::User* _internal_add_users();
  public:
  const ::nakama::api::User& users(int index) const;
  ::nakama::api::User* add_users();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nakama::api::User >&
      users() const;

  // @@protoc_insertion_point(class_scope:nakama.api.Users)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nakama::api::User > users_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto;
};
// -------------------------------------------------------------------

class ValidatePurchaseAppleRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nakama.api.ValidatePurchaseAppleRequest) */ {
 public:
  inline ValidatePurchaseAppleRequest() : ValidatePurchaseAppleRequest(nullptr) {}
  virtual ~ValidatePurchaseAppleRequest();

  ValidatePurchaseAppleRequest(const ValidatePurchaseAppleRequest& from);
  ValidatePurchaseAppleRequest(ValidatePurchaseAppleRequest&& from) noexcept
    : ValidatePurchaseAppleRequest() {
    *this = ::std::move(from);
  }

  inline ValidatePurchaseAppleRequest& operator=(const ValidatePurchaseAppleRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ValidatePurchaseAppleRequest& operator=(ValidatePurchaseAppleRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ValidatePurchaseAppleRequest& default_instance();

  static inline const ValidatePurchaseAppleRequest* internal_default_instance() {
    return reinterpret_cast<const ValidatePurchaseAppleRequest*>(
               &_ValidatePurchaseAppleRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    106;

  friend void swap(ValidatePurchaseAppleRequest& a, ValidatePurchaseAppleRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ValidatePurchaseAppleRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ValidatePurchaseAppleRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ValidatePurchaseAppleRequest* New() const final {
    return CreateMaybeMessage<ValidatePurchaseAppleRequest>(nullptr);
  }

  ValidatePurchaseAppleRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ValidatePurchaseAppleRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ValidatePurchaseAppleRequest& from);
  void MergeFrom(const ValidatePurchaseAppleRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValidatePurchaseAppleRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nakama.api.ValidatePurchaseAppleRequest";
  }
  protected:
  explicit ValidatePurchaseAppleRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto);
    return ::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReceiptFieldNumber = 1,
    kPersistFieldNumber = 2,
  };
  // string receipt = 1;
  void clear_receipt();
  const std::string& receipt() const;
  void set_receipt(const std::string& value);
  void set_receipt(std::string&& value);
  void set_receipt(const char* value);
  void set_receipt(const char* value, size_t size);
  std::string* mutable_receipt();
  std::string* release_receipt();
  void set_allocated_receipt(std::string* receipt);
  private:
  const std::string& _internal_receipt() const;
  void _internal_set_receipt(const std::string& value);
  std::string* _internal_mutable_receipt();
  public:

  // .google.protobuf.BoolValue persist = 2;
  bool has_persist() const;
  private:
  bool _internal_has_persist() const;
  public:
  void clear_persist();
  const PROTOBUF_NAMESPACE_ID::BoolValue& persist() const;
  PROTOBUF_NAMESPACE_ID::BoolValue* release_persist();
  PROTOBUF_NAMESPACE_ID::BoolValue* mutable_persist();
  void set_allocated_persist(PROTOBUF_NAMESPACE_ID::BoolValue* persist);
  private:
  const PROTOBUF_NAMESPACE_ID::BoolValue& _internal_persist() const;
  PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_persist();
  public:
  void unsafe_arena_set_allocated_persist(
      PROTOBUF_NAMESPACE_ID::BoolValue* persist);
  PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_persist();

  // @@protoc_insertion_point(class_scope:nakama.api.ValidatePurchaseAppleRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr receipt_;
  PROTOBUF_NAMESPACE_ID::BoolValue* persist_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto;
};
// -------------------------------------------------------------------

class ValidateSubscriptionAppleRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nakama.api.ValidateSubscriptionAppleRequest) */ {
 public:
  inline ValidateSubscriptionAppleRequest() : ValidateSubscriptionAppleRequest(nullptr) {}
  virtual ~ValidateSubscriptionAppleRequest();

  ValidateSubscriptionAppleRequest(const ValidateSubscriptionAppleRequest& from);
  ValidateSubscriptionAppleRequest(ValidateSubscriptionAppleRequest&& from) noexcept
    : ValidateSubscriptionAppleRequest() {
    *this = ::std::move(from);
  }

  inline ValidateSubscriptionAppleRequest& operator=(const ValidateSubscriptionAppleRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ValidateSubscriptionAppleRequest& operator=(ValidateSubscriptionAppleRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ValidateSubscriptionAppleRequest& default_instance();

  static inline const ValidateSubscriptionAppleRequest* internal_default_instance() {
    return reinterpret_cast<const ValidateSubscriptionAppleRequest*>(
               &_ValidateSubscriptionAppleRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    107;

  friend void swap(ValidateSubscriptionAppleRequest& a, ValidateSubscriptionAppleRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ValidateSubscriptionAppleRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ValidateSubscriptionAppleRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ValidateSubscriptionAppleRequest* New() const final {
    return CreateMaybeMessage<ValidateSubscriptionAppleRequest>(nullptr);
  }

  ValidateSubscriptionAppleRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ValidateSubscriptionAppleRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ValidateSubscriptionAppleRequest& from);
  void MergeFrom(const ValidateSubscriptionAppleRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValidateSubscriptionAppleRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nakama.api.ValidateSubscriptionAppleRequest";
  }
  protected:
  explicit ValidateSubscriptionAppleRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto);
    return ::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReceiptFieldNumber = 1,
    kPersistFieldNumber = 2,
  };
  // string receipt = 1;
  void clear_receipt();
  const std::string& receipt() const;
  void set_receipt(const std::string& value);
  void set_receipt(std::string&& value);
  void set_receipt(const char* value);
  void set_receipt(const char* value, size_t size);
  std::string* mutable_receipt();
  std::string* release_receipt();
  void set_allocated_receipt(std::string* receipt);
  private:
  const std::string& _internal_receipt() const;
  void _internal_set_receipt(const std::string& value);
  std::string* _internal_mutable_receipt();
  public:

  // .google.protobuf.BoolValue persist = 2;
  bool has_persist() const;
  private:
  bool _internal_has_persist() const;
  public:
  void clear_persist();
  const PROTOBUF_NAMESPACE_ID::BoolValue& persist() const;
  PROTOBUF_NAMESPACE_ID::BoolValue* release_persist();
  PROTOBUF_NAMESPACE_ID::BoolValue* mutable_persist();
  void set_allocated_persist(PROTOBUF_NAMESPACE_ID::BoolValue* persist);
  private:
  const PROTOBUF_NAMESPACE_ID::BoolValue& _internal_persist() const;
  PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_persist();
  public:
  void unsafe_arena_set_allocated_persist(
      PROTOBUF_NAMESPACE_ID::BoolValue* persist);
  PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_persist();

  // @@protoc_insertion_point(class_scope:nakama.api.ValidateSubscriptionAppleRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr receipt_;
  PROTOBUF_NAMESPACE_ID::BoolValue* persist_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto;
};
// -------------------------------------------------------------------

class ValidatePurchaseGoogleRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nakama.api.ValidatePurchaseGoogleRequest) */ {
 public:
  inline ValidatePurchaseGoogleRequest() : ValidatePurchaseGoogleRequest(nullptr) {}
  virtual ~ValidatePurchaseGoogleRequest();

  ValidatePurchaseGoogleRequest(const ValidatePurchaseGoogleRequest& from);
  ValidatePurchaseGoogleRequest(ValidatePurchaseGoogleRequest&& from) noexcept
    : ValidatePurchaseGoogleRequest() {
    *this = ::std::move(from);
  }

  inline ValidatePurchaseGoogleRequest& operator=(const ValidatePurchaseGoogleRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ValidatePurchaseGoogleRequest& operator=(ValidatePurchaseGoogleRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ValidatePurchaseGoogleRequest& default_instance();

  static inline const ValidatePurchaseGoogleRequest* internal_default_instance() {
    return reinterpret_cast<const ValidatePurchaseGoogleRequest*>(
               &_ValidatePurchaseGoogleRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    108;

  friend void swap(ValidatePurchaseGoogleRequest& a, ValidatePurchaseGoogleRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ValidatePurchaseGoogleRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ValidatePurchaseGoogleRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ValidatePurchaseGoogleRequest* New() const final {
    return CreateMaybeMessage<ValidatePurchaseGoogleRequest>(nullptr);
  }

  ValidatePurchaseGoogleRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ValidatePurchaseGoogleRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ValidatePurchaseGoogleRequest& from);
  void MergeFrom(const ValidatePurchaseGoogleRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValidatePurchaseGoogleRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nakama.api.ValidatePurchaseGoogleRequest";
  }
  protected:
  explicit ValidatePurchaseGoogleRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto);
    return ::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPurchaseFieldNumber = 1,
    kPersistFieldNumber = 2,
  };
  // string purchase = 1;
  void clear_purchase();
  const std::string& purchase() const;
  void set_purchase(const std::string& value);
  void set_purchase(std::string&& value);
  void set_purchase(const char* value);
  void set_purchase(const char* value, size_t size);
  std::string* mutable_purchase();
  std::string* release_purchase();
  void set_allocated_purchase(std::string* purchase);
  private:
  const std::string& _internal_purchase() const;
  void _internal_set_purchase(const std::string& value);
  std::string* _internal_mutable_purchase();
  public:

  // .google.protobuf.BoolValue persist = 2;
  bool has_persist() const;
  private:
  bool _internal_has_persist() const;
  public:
  void clear_persist();
  const PROTOBUF_NAMESPACE_ID::BoolValue& persist() const;
  PROTOBUF_NAMESPACE_ID::BoolValue* release_persist();
  PROTOBUF_NAMESPACE_ID::BoolValue* mutable_persist();
  void set_allocated_persist(PROTOBUF_NAMESPACE_ID::BoolValue* persist);
  private:
  const PROTOBUF_NAMESPACE_ID::BoolValue& _internal_persist() const;
  PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_persist();
  public:
  void unsafe_arena_set_allocated_persist(
      PROTOBUF_NAMESPACE_ID::BoolValue* persist);
  PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_persist();

  // @@protoc_insertion_point(class_scope:nakama.api.ValidatePurchaseGoogleRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr purchase_;
  PROTOBUF_NAMESPACE_ID::BoolValue* persist_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto;
};
// -------------------------------------------------------------------

class ValidateSubscriptionGoogleRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nakama.api.ValidateSubscriptionGoogleRequest) */ {
 public:
  inline ValidateSubscriptionGoogleRequest() : ValidateSubscriptionGoogleRequest(nullptr) {}
  virtual ~ValidateSubscriptionGoogleRequest();

  ValidateSubscriptionGoogleRequest(const ValidateSubscriptionGoogleRequest& from);
  ValidateSubscriptionGoogleRequest(ValidateSubscriptionGoogleRequest&& from) noexcept
    : ValidateSubscriptionGoogleRequest() {
    *this = ::std::move(from);
  }

  inline ValidateSubscriptionGoogleRequest& operator=(const ValidateSubscriptionGoogleRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ValidateSubscriptionGoogleRequest& operator=(ValidateSubscriptionGoogleRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ValidateSubscriptionGoogleRequest& default_instance();

  static inline const ValidateSubscriptionGoogleRequest* internal_default_instance() {
    return reinterpret_cast<const ValidateSubscriptionGoogleRequest*>(
               &_ValidateSubscriptionGoogleRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    109;

  friend void swap(ValidateSubscriptionGoogleRequest& a, ValidateSubscriptionGoogleRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ValidateSubscriptionGoogleRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ValidateSubscriptionGoogleRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ValidateSubscriptionGoogleRequest* New() const final {
    return CreateMaybeMessage<ValidateSubscriptionGoogleRequest>(nullptr);
  }

  ValidateSubscriptionGoogleRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ValidateSubscriptionGoogleRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ValidateSubscriptionGoogleRequest& from);
  void MergeFrom(const ValidateSubscriptionGoogleRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValidateSubscriptionGoogleRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nakama.api.ValidateSubscriptionGoogleRequest";
  }
  protected:
  explicit ValidateSubscriptionGoogleRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto);
    return ::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReceiptFieldNumber = 1,
    kPersistFieldNumber = 2,
  };
  // string receipt = 1;
  void clear_receipt();
  const std::string& receipt() const;
  void set_receipt(const std::string& value);
  void set_receipt(std::string&& value);
  void set_receipt(const char* value);
  void set_receipt(const char* value, size_t size);
  std::string* mutable_receipt();
  std::string* release_receipt();
  void set_allocated_receipt(std::string* receipt);
  private:
  const std::string& _internal_receipt() const;
  void _internal_set_receipt(const std::string& value);
  std::string* _internal_mutable_receipt();
  public:

  // .google.protobuf.BoolValue persist = 2;
  bool has_persist() const;
  private:
  bool _internal_has_persist() const;
  public:
  void clear_persist();
  const PROTOBUF_NAMESPACE_ID::BoolValue& persist() const;
  PROTOBUF_NAMESPACE_ID::BoolValue* release_persist();
  PROTOBUF_NAMESPACE_ID::BoolValue* mutable_persist();
  void set_allocated_persist(PROTOBUF_NAMESPACE_ID::BoolValue* persist);
  private:
  const PROTOBUF_NAMESPACE_ID::BoolValue& _internal_persist() const;
  PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_persist();
  public:
  void unsafe_arena_set_allocated_persist(
      PROTOBUF_NAMESPACE_ID::BoolValue* persist);
  PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_persist();

  // @@protoc_insertion_point(class_scope:nakama.api.ValidateSubscriptionGoogleRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr receipt_;
  PROTOBUF_NAMESPACE_ID::BoolValue* persist_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto;
};
// -------------------------------------------------------------------

class ValidatePurchaseHuaweiRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nakama.api.ValidatePurchaseHuaweiRequest) */ {
 public:
  inline ValidatePurchaseHuaweiRequest() : ValidatePurchaseHuaweiRequest(nullptr) {}
  virtual ~ValidatePurchaseHuaweiRequest();

  ValidatePurchaseHuaweiRequest(const ValidatePurchaseHuaweiRequest& from);
  ValidatePurchaseHuaweiRequest(ValidatePurchaseHuaweiRequest&& from) noexcept
    : ValidatePurchaseHuaweiRequest() {
    *this = ::std::move(from);
  }

  inline ValidatePurchaseHuaweiRequest& operator=(const ValidatePurchaseHuaweiRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ValidatePurchaseHuaweiRequest& operator=(ValidatePurchaseHuaweiRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ValidatePurchaseHuaweiRequest& default_instance();

  static inline const ValidatePurchaseHuaweiRequest* internal_default_instance() {
    return reinterpret_cast<const ValidatePurchaseHuaweiRequest*>(
               &_ValidatePurchaseHuaweiRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    110;

  friend void swap(ValidatePurchaseHuaweiRequest& a, ValidatePurchaseHuaweiRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ValidatePurchaseHuaweiRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ValidatePurchaseHuaweiRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ValidatePurchaseHuaweiRequest* New() const final {
    return CreateMaybeMessage<ValidatePurchaseHuaweiRequest>(nullptr);
  }

  ValidatePurchaseHuaweiRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ValidatePurchaseHuaweiRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ValidatePurchaseHuaweiRequest& from);
  void MergeFrom(const ValidatePurchaseHuaweiRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValidatePurchaseHuaweiRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nakama.api.ValidatePurchaseHuaweiRequest";
  }
  protected:
  explicit ValidatePurchaseHuaweiRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto);
    return ::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPurchaseFieldNumber = 1,
    kSignatureFieldNumber = 2,
    kPersistFieldNumber = 3,
  };
  // string purchase = 1;
  void clear_purchase();
  const std::string& purchase() const;
  void set_purchase(const std::string& value);
  void set_purchase(std::string&& value);
  void set_purchase(const char* value);
  void set_purchase(const char* value, size_t size);
  std::string* mutable_purchase();
  std::string* release_purchase();
  void set_allocated_purchase(std::string* purchase);
  private:
  const std::string& _internal_purchase() const;
  void _internal_set_purchase(const std::string& value);
  std::string* _internal_mutable_purchase();
  public:

  // string signature = 2;
  void clear_signature();
  const std::string& signature() const;
  void set_signature(const std::string& value);
  void set_signature(std::string&& value);
  void set_signature(const char* value);
  void set_signature(const char* value, size_t size);
  std::string* mutable_signature();
  std::string* release_signature();
  void set_allocated_signature(std::string* signature);
  private:
  const std::string& _internal_signature() const;
  void _internal_set_signature(const std::string& value);
  std::string* _internal_mutable_signature();
  public:

  // .google.protobuf.BoolValue persist = 3;
  bool has_persist() const;
  private:
  bool _internal_has_persist() const;
  public:
  void clear_persist();
  const PROTOBUF_NAMESPACE_ID::BoolValue& persist() const;
  PROTOBUF_NAMESPACE_ID::BoolValue* release_persist();
  PROTOBUF_NAMESPACE_ID::BoolValue* mutable_persist();
  void set_allocated_persist(PROTOBUF_NAMESPACE_ID::BoolValue* persist);
  private:
  const PROTOBUF_NAMESPACE_ID::BoolValue& _internal_persist() const;
  PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_persist();
  public:
  void unsafe_arena_set_allocated_persist(
      PROTOBUF_NAMESPACE_ID::BoolValue* persist);
  PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_persist();

  // @@protoc_insertion_point(class_scope:nakama.api.ValidatePurchaseHuaweiRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr purchase_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signature_;
  PROTOBUF_NAMESPACE_ID::BoolValue* persist_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto;
};
// -------------------------------------------------------------------

class ValidatedPurchase PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nakama.api.ValidatedPurchase) */ {
 public:
  inline ValidatedPurchase() : ValidatedPurchase(nullptr) {}
  virtual ~ValidatedPurchase();

  ValidatedPurchase(const ValidatedPurchase& from);
  ValidatedPurchase(ValidatedPurchase&& from) noexcept
    : ValidatedPurchase() {
    *this = ::std::move(from);
  }

  inline ValidatedPurchase& operator=(const ValidatedPurchase& from) {
    CopyFrom(from);
    return *this;
  }
  inline ValidatedPurchase& operator=(ValidatedPurchase&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ValidatedPurchase& default_instance();

  static inline const ValidatedPurchase* internal_default_instance() {
    return reinterpret_cast<const ValidatedPurchase*>(
               &_ValidatedPurchase_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    111;

  friend void swap(ValidatedPurchase& a, ValidatedPurchase& b) {
    a.Swap(&b);
  }
  inline void Swap(ValidatedPurchase* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ValidatedPurchase* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ValidatedPurchase* New() const final {
    return CreateMaybeMessage<ValidatedPurchase>(nullptr);
  }

  ValidatedPurchase* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ValidatedPurchase>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ValidatedPurchase& from);
  void MergeFrom(const ValidatedPurchase& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValidatedPurchase* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nakama.api.ValidatedPurchase";
  }
  protected:
  explicit ValidatedPurchase(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto);
    return ::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProductIdFieldNumber = 1,
    kTransactionIdFieldNumber = 2,
    kProviderResponseFieldNumber = 7,
    kPurchaseTimeFieldNumber = 4,
    kCreateTimeFieldNumber = 5,
    kUpdateTimeFieldNumber = 6,
    kStoreFieldNumber = 3,
    kEnvironmentFieldNumber = 8,
    kSeenBeforeFieldNumber = 9,
  };
  // string product_id = 1;
  void clear_product_id();
  const std::string& product_id() const;
  void set_product_id(const std::string& value);
  void set_product_id(std::string&& value);
  void set_product_id(const char* value);
  void set_product_id(const char* value, size_t size);
  std::string* mutable_product_id();
  std::string* release_product_id();
  void set_allocated_product_id(std::string* product_id);
  private:
  const std::string& _internal_product_id() const;
  void _internal_set_product_id(const std::string& value);
  std::string* _internal_mutable_product_id();
  public:

  // string transaction_id = 2;
  void clear_transaction_id();
  const std::string& transaction_id() const;
  void set_transaction_id(const std::string& value);
  void set_transaction_id(std::string&& value);
  void set_transaction_id(const char* value);
  void set_transaction_id(const char* value, size_t size);
  std::string* mutable_transaction_id();
  std::string* release_transaction_id();
  void set_allocated_transaction_id(std::string* transaction_id);
  private:
  const std::string& _internal_transaction_id() const;
  void _internal_set_transaction_id(const std::string& value);
  std::string* _internal_mutable_transaction_id();
  public:

  // string provider_response = 7;
  void clear_provider_response();
  const std::string& provider_response() const;
  void set_provider_response(const std::string& value);
  void set_provider_response(std::string&& value);
  void set_provider_response(const char* value);
  void set_provider_response(const char* value, size_t size);
  std::string* mutable_provider_response();
  std::string* release_provider_response();
  void set_allocated_provider_response(std::string* provider_response);
  private:
  const std::string& _internal_provider_response() const;
  void _internal_set_provider_response(const std::string& value);
  std::string* _internal_mutable_provider_response();
  public:

  // .google.protobuf.Timestamp purchase_time = 4;
  bool has_purchase_time() const;
  private:
  bool _internal_has_purchase_time() const;
  public:
  void clear_purchase_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& purchase_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_purchase_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_purchase_time();
  void set_allocated_purchase_time(PROTOBUF_NAMESPACE_ID::Timestamp* purchase_time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_purchase_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_purchase_time();
  public:
  void unsafe_arena_set_allocated_purchase_time(
      PROTOBUF_NAMESPACE_ID::Timestamp* purchase_time);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_purchase_time();

  // .google.protobuf.Timestamp create_time = 5;
  bool has_create_time() const;
  private:
  bool _internal_has_create_time() const;
  public:
  void clear_create_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& create_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_create_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_create_time();
  void set_allocated_create_time(PROTOBUF_NAMESPACE_ID::Timestamp* create_time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_create_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_create_time();
  public:
  void unsafe_arena_set_allocated_create_time(
      PROTOBUF_NAMESPACE_ID::Timestamp* create_time);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_create_time();

  // .google.protobuf.Timestamp update_time = 6;
  bool has_update_time() const;
  private:
  bool _internal_has_update_time() const;
  public:
  void clear_update_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& update_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_update_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_update_time();
  void set_allocated_update_time(PROTOBUF_NAMESPACE_ID::Timestamp* update_time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_update_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_update_time();
  public:
  void unsafe_arena_set_allocated_update_time(
      PROTOBUF_NAMESPACE_ID::Timestamp* update_time);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_update_time();

  // .nakama.api.StoreProvider store = 3;
  void clear_store();
  ::nakama::api::StoreProvider store() const;
  void set_store(::nakama::api::StoreProvider value);
  private:
  ::nakama::api::StoreProvider _internal_store() const;
  void _internal_set_store(::nakama::api::StoreProvider value);
  public:

  // .nakama.api.StoreEnvironment environment = 8;
  void clear_environment();
  ::nakama::api::StoreEnvironment environment() const;
  void set_environment(::nakama::api::StoreEnvironment value);
  private:
  ::nakama::api::StoreEnvironment _internal_environment() const;
  void _internal_set_environment(::nakama::api::StoreEnvironment value);
  public:

  // bool seen_before = 9;
  void clear_seen_before();
  bool seen_before() const;
  void set_seen_before(bool value);
  private:
  bool _internal_seen_before() const;
  void _internal_set_seen_before(bool value);
  public:

  // @@protoc_insertion_point(class_scope:nakama.api.ValidatedPurchase)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr product_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr transaction_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr provider_response_;
  PROTOBUF_NAMESPACE_ID::Timestamp* purchase_time_;
  PROTOBUF_NAMESPACE_ID::Timestamp* create_time_;
  PROTOBUF_NAMESPACE_ID::Timestamp* update_time_;
  int store_;
  int environment_;
  bool seen_before_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto;
};
// -------------------------------------------------------------------

class ValidatePurchaseResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nakama.api.ValidatePurchaseResponse) */ {
 public:
  inline ValidatePurchaseResponse() : ValidatePurchaseResponse(nullptr) {}
  virtual ~ValidatePurchaseResponse();

  ValidatePurchaseResponse(const ValidatePurchaseResponse& from);
  ValidatePurchaseResponse(ValidatePurchaseResponse&& from) noexcept
    : ValidatePurchaseResponse() {
    *this = ::std::move(from);
  }

  inline ValidatePurchaseResponse& operator=(const ValidatePurchaseResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ValidatePurchaseResponse& operator=(ValidatePurchaseResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ValidatePurchaseResponse& default_instance();

  static inline const ValidatePurchaseResponse* internal_default_instance() {
    return reinterpret_cast<const ValidatePurchaseResponse*>(
               &_ValidatePurchaseResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    112;

  friend void swap(ValidatePurchaseResponse& a, ValidatePurchaseResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ValidatePurchaseResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ValidatePurchaseResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ValidatePurchaseResponse* New() const final {
    return CreateMaybeMessage<ValidatePurchaseResponse>(nullptr);
  }

  ValidatePurchaseResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ValidatePurchaseResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ValidatePurchaseResponse& from);
  void MergeFrom(const ValidatePurchaseResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValidatePurchaseResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nakama.api.ValidatePurchaseResponse";
  }
  protected:
  explicit ValidatePurchaseResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto);
    return ::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValidatedPurchasesFieldNumber = 1,
  };
  // repeated .nakama.api.ValidatedPurchase validated_purchases = 1;
  int validated_purchases_size() const;
  private:
  int _internal_validated_purchases_size() const;
  public:
  void clear_validated_purchases();
  ::nakama::api::ValidatedPurchase* mutable_validated_purchases(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nakama::api::ValidatedPurchase >*
      mutable_validated_purchases();
  private:
  const ::nakama::api::ValidatedPurchase& _internal_validated_purchases(int index) const;
  ::nakama::api::ValidatedPurchase* _internal_add_validated_purchases();
  public:
  const ::nakama::api::ValidatedPurchase& validated_purchases(int index) const;
  ::nakama::api::ValidatedPurchase* add_validated_purchases();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nakama::api::ValidatedPurchase >&
      validated_purchases() const;

  // @@protoc_insertion_point(class_scope:nakama.api.ValidatePurchaseResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nakama::api::ValidatedPurchase > validated_purchases_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto;
};
// -------------------------------------------------------------------

class ValidateSubscriptionResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nakama.api.ValidateSubscriptionResponse) */ {
 public:
  inline ValidateSubscriptionResponse() : ValidateSubscriptionResponse(nullptr) {}
  virtual ~ValidateSubscriptionResponse();

  ValidateSubscriptionResponse(const ValidateSubscriptionResponse& from);
  ValidateSubscriptionResponse(ValidateSubscriptionResponse&& from) noexcept
    : ValidateSubscriptionResponse() {
    *this = ::std::move(from);
  }

  inline ValidateSubscriptionResponse& operator=(const ValidateSubscriptionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ValidateSubscriptionResponse& operator=(ValidateSubscriptionResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ValidateSubscriptionResponse& default_instance();

  static inline const ValidateSubscriptionResponse* internal_default_instance() {
    return reinterpret_cast<const ValidateSubscriptionResponse*>(
               &_ValidateSubscriptionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    113;

  friend void swap(ValidateSubscriptionResponse& a, ValidateSubscriptionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ValidateSubscriptionResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ValidateSubscriptionResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ValidateSubscriptionResponse* New() const final {
    return CreateMaybeMessage<ValidateSubscriptionResponse>(nullptr);
  }

  ValidateSubscriptionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ValidateSubscriptionResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ValidateSubscriptionResponse& from);
  void MergeFrom(const ValidateSubscriptionResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValidateSubscriptionResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nakama.api.ValidateSubscriptionResponse";
  }
  protected:
  explicit ValidateSubscriptionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto);
    return ::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValidatedSubscriptionFieldNumber = 1,
  };
  // .nakama.api.ValidatedSubscription validated_subscription = 1;
  bool has_validated_subscription() const;
  private:
  bool _internal_has_validated_subscription() const;
  public:
  void clear_validated_subscription();
  const ::nakama::api::ValidatedSubscription& validated_subscription() const;
  ::nakama::api::ValidatedSubscription* release_validated_subscription();
  ::nakama::api::ValidatedSubscription* mutable_validated_subscription();
  void set_allocated_validated_subscription(::nakama::api::ValidatedSubscription* validated_subscription);
  private:
  const ::nakama::api::ValidatedSubscription& _internal_validated_subscription() const;
  ::nakama::api::ValidatedSubscription* _internal_mutable_validated_subscription();
  public:
  void unsafe_arena_set_allocated_validated_subscription(
      ::nakama::api::ValidatedSubscription* validated_subscription);
  ::nakama::api::ValidatedSubscription* unsafe_arena_release_validated_subscription();

  // @@protoc_insertion_point(class_scope:nakama.api.ValidateSubscriptionResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::nakama::api::ValidatedSubscription* validated_subscription_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto;
};
// -------------------------------------------------------------------

class ValidatedSubscription PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nakama.api.ValidatedSubscription) */ {
 public:
  inline ValidatedSubscription() : ValidatedSubscription(nullptr) {}
  virtual ~ValidatedSubscription();

  ValidatedSubscription(const ValidatedSubscription& from);
  ValidatedSubscription(ValidatedSubscription&& from) noexcept
    : ValidatedSubscription() {
    *this = ::std::move(from);
  }

  inline ValidatedSubscription& operator=(const ValidatedSubscription& from) {
    CopyFrom(from);
    return *this;
  }
  inline ValidatedSubscription& operator=(ValidatedSubscription&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ValidatedSubscription& default_instance();

  static inline const ValidatedSubscription* internal_default_instance() {
    return reinterpret_cast<const ValidatedSubscription*>(
               &_ValidatedSubscription_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    114;

  friend void swap(ValidatedSubscription& a, ValidatedSubscription& b) {
    a.Swap(&b);
  }
  inline void Swap(ValidatedSubscription* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ValidatedSubscription* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ValidatedSubscription* New() const final {
    return CreateMaybeMessage<ValidatedSubscription>(nullptr);
  }

  ValidatedSubscription* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ValidatedSubscription>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ValidatedSubscription& from);
  void MergeFrom(const ValidatedSubscription& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValidatedSubscription* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nakama.api.ValidatedSubscription";
  }
  protected:
  explicit ValidatedSubscription(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto);
    return ::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProductIdFieldNumber = 1,
    kOriginalTransactionIdFieldNumber = 2,
    kPurchaseTimeFieldNumber = 4,
    kCreateTimeFieldNumber = 5,
    kUpdateTimeFieldNumber = 6,
    kExpiryTimeFieldNumber = 8,
    kStoreFieldNumber = 3,
    kEnvironmentFieldNumber = 7,
    kActiveFieldNumber = 9,
  };
  // string product_id = 1;
  void clear_product_id();
  const std::string& product_id() const;
  void set_product_id(const std::string& value);
  void set_product_id(std::string&& value);
  void set_product_id(const char* value);
  void set_product_id(const char* value, size_t size);
  std::string* mutable_product_id();
  std::string* release_product_id();
  void set_allocated_product_id(std::string* product_id);
  private:
  const std::string& _internal_product_id() const;
  void _internal_set_product_id(const std::string& value);
  std::string* _internal_mutable_product_id();
  public:

  // string original_transaction_id = 2;
  void clear_original_transaction_id();
  const std::string& original_transaction_id() const;
  void set_original_transaction_id(const std::string& value);
  void set_original_transaction_id(std::string&& value);
  void set_original_transaction_id(const char* value);
  void set_original_transaction_id(const char* value, size_t size);
  std::string* mutable_original_transaction_id();
  std::string* release_original_transaction_id();
  void set_allocated_original_transaction_id(std::string* original_transaction_id);
  private:
  const std::string& _internal_original_transaction_id() const;
  void _internal_set_original_transaction_id(const std::string& value);
  std::string* _internal_mutable_original_transaction_id();
  public:

  // .google.protobuf.Timestamp purchase_time = 4;
  bool has_purchase_time() const;
  private:
  bool _internal_has_purchase_time() const;
  public:
  void clear_purchase_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& purchase_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_purchase_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_purchase_time();
  void set_allocated_purchase_time(PROTOBUF_NAMESPACE_ID::Timestamp* purchase_time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_purchase_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_purchase_time();
  public:
  void unsafe_arena_set_allocated_purchase_time(
      PROTOBUF_NAMESPACE_ID::Timestamp* purchase_time);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_purchase_time();

  // .google.protobuf.Timestamp create_time = 5;
  bool has_create_time() const;
  private:
  bool _internal_has_create_time() const;
  public:
  void clear_create_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& create_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_create_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_create_time();
  void set_allocated_create_time(PROTOBUF_NAMESPACE_ID::Timestamp* create_time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_create_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_create_time();
  public:
  void unsafe_arena_set_allocated_create_time(
      PROTOBUF_NAMESPACE_ID::Timestamp* create_time);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_create_time();

  // .google.protobuf.Timestamp update_time = 6;
  bool has_update_time() const;
  private:
  bool _internal_has_update_time() const;
  public:
  void clear_update_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& update_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_update_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_update_time();
  void set_allocated_update_time(PROTOBUF_NAMESPACE_ID::Timestamp* update_time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_update_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_update_time();
  public:
  void unsafe_arena_set_allocated_update_time(
      PROTOBUF_NAMESPACE_ID::Timestamp* update_time);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_update_time();

  // .google.protobuf.Timestamp expiry_time = 8;
  bool has_expiry_time() const;
  private:
  bool _internal_has_expiry_time() const;
  public:
  void clear_expiry_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& expiry_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_expiry_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_expiry_time();
  void set_allocated_expiry_time(PROTOBUF_NAMESPACE_ID::Timestamp* expiry_time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_expiry_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_expiry_time();
  public:
  void unsafe_arena_set_allocated_expiry_time(
      PROTOBUF_NAMESPACE_ID::Timestamp* expiry_time);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_expiry_time();

  // .nakama.api.StoreProvider store = 3;
  void clear_store();
  ::nakama::api::StoreProvider store() const;
  void set_store(::nakama::api::StoreProvider value);
  private:
  ::nakama::api::StoreProvider _internal_store() const;
  void _internal_set_store(::nakama::api::StoreProvider value);
  public:

  // .nakama.api.StoreEnvironment environment = 7;
  void clear_environment();
  ::nakama::api::StoreEnvironment environment() const;
  void set_environment(::nakama::api::StoreEnvironment value);
  private:
  ::nakama::api::StoreEnvironment _internal_environment() const;
  void _internal_set_environment(::nakama::api::StoreEnvironment value);
  public:

  // bool active = 9;
  void clear_active();
  bool active() const;
  void set_active(bool value);
  private:
  bool _internal_active() const;
  void _internal_set_active(bool value);
  public:

  // @@protoc_insertion_point(class_scope:nakama.api.ValidatedSubscription)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr product_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr original_transaction_id_;
  PROTOBUF_NAMESPACE_ID::Timestamp* purchase_time_;
  PROTOBUF_NAMESPACE_ID::Timestamp* create_time_;
  PROTOBUF_NAMESPACE_ID::Timestamp* update_time_;
  PROTOBUF_NAMESPACE_ID::Timestamp* expiry_time_;
  int store_;
  int environment_;
  bool active_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto;
};
// -------------------------------------------------------------------

class PurchaseList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nakama.api.PurchaseList) */ {
 public:
  inline PurchaseList() : PurchaseList(nullptr) {}
  virtual ~PurchaseList();

  PurchaseList(const PurchaseList& from);
  PurchaseList(PurchaseList&& from) noexcept
    : PurchaseList() {
    *this = ::std::move(from);
  }

  inline PurchaseList& operator=(const PurchaseList& from) {
    CopyFrom(from);
    return *this;
  }
  inline PurchaseList& operator=(PurchaseList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PurchaseList& default_instance();

  static inline const PurchaseList* internal_default_instance() {
    return reinterpret_cast<const PurchaseList*>(
               &_PurchaseList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    115;

  friend void swap(PurchaseList& a, PurchaseList& b) {
    a.Swap(&b);
  }
  inline void Swap(PurchaseList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PurchaseList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PurchaseList* New() const final {
    return CreateMaybeMessage<PurchaseList>(nullptr);
  }

  PurchaseList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PurchaseList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PurchaseList& from);
  void MergeFrom(const PurchaseList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PurchaseList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nakama.api.PurchaseList";
  }
  protected:
  explicit PurchaseList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto);
    return ::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValidatedPurchasesFieldNumber = 1,
    kCursorFieldNumber = 2,
    kPrevCursorFieldNumber = 3,
  };
  // repeated .nakama.api.ValidatedPurchase validated_purchases = 1;
  int validated_purchases_size() const;
  private:
  int _internal_validated_purchases_size() const;
  public:
  void clear_validated_purchases();
  ::nakama::api::ValidatedPurchase* mutable_validated_purchases(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nakama::api::ValidatedPurchase >*
      mutable_validated_purchases();
  private:
  const ::nakama::api::ValidatedPurchase& _internal_validated_purchases(int index) const;
  ::nakama::api::ValidatedPurchase* _internal_add_validated_purchases();
  public:
  const ::nakama::api::ValidatedPurchase& validated_purchases(int index) const;
  ::nakama::api::ValidatedPurchase* add_validated_purchases();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nakama::api::ValidatedPurchase >&
      validated_purchases() const;

  // string cursor = 2;
  void clear_cursor();
  const std::string& cursor() const;
  void set_cursor(const std::string& value);
  void set_cursor(std::string&& value);
  void set_cursor(const char* value);
  void set_cursor(const char* value, size_t size);
  std::string* mutable_cursor();
  std::string* release_cursor();
  void set_allocated_cursor(std::string* cursor);
  private:
  const std::string& _internal_cursor() const;
  void _internal_set_cursor(const std::string& value);
  std::string* _internal_mutable_cursor();
  public:

  // string prev_cursor = 3;
  void clear_prev_cursor();
  const std::string& prev_cursor() const;
  void set_prev_cursor(const std::string& value);
  void set_prev_cursor(std::string&& value);
  void set_prev_cursor(const char* value);
  void set_prev_cursor(const char* value, size_t size);
  std::string* mutable_prev_cursor();
  std::string* release_prev_cursor();
  void set_allocated_prev_cursor(std::string* prev_cursor);
  private:
  const std::string& _internal_prev_cursor() const;
  void _internal_set_prev_cursor(const std::string& value);
  std::string* _internal_mutable_prev_cursor();
  public:

  // @@protoc_insertion_point(class_scope:nakama.api.PurchaseList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nakama::api::ValidatedPurchase > validated_purchases_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cursor_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prev_cursor_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto;
};
// -------------------------------------------------------------------

class SubscriptionList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nakama.api.SubscriptionList) */ {
 public:
  inline SubscriptionList() : SubscriptionList(nullptr) {}
  virtual ~SubscriptionList();

  SubscriptionList(const SubscriptionList& from);
  SubscriptionList(SubscriptionList&& from) noexcept
    : SubscriptionList() {
    *this = ::std::move(from);
  }

  inline SubscriptionList& operator=(const SubscriptionList& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscriptionList& operator=(SubscriptionList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubscriptionList& default_instance();

  static inline const SubscriptionList* internal_default_instance() {
    return reinterpret_cast<const SubscriptionList*>(
               &_SubscriptionList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    116;

  friend void swap(SubscriptionList& a, SubscriptionList& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscriptionList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscriptionList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubscriptionList* New() const final {
    return CreateMaybeMessage<SubscriptionList>(nullptr);
  }

  SubscriptionList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubscriptionList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubscriptionList& from);
  void MergeFrom(const SubscriptionList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubscriptionList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nakama.api.SubscriptionList";
  }
  protected:
  explicit SubscriptionList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto);
    return ::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValidatedSubscriptionsFieldNumber = 1,
    kCursorFieldNumber = 2,
    kPrevCursorFieldNumber = 3,
  };
  // repeated .nakama.api.ValidatedSubscription validated_subscriptions = 1;
  int validated_subscriptions_size() const;
  private:
  int _internal_validated_subscriptions_size() const;
  public:
  void clear_validated_subscriptions();
  ::nakama::api::ValidatedSubscription* mutable_validated_subscriptions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nakama::api::ValidatedSubscription >*
      mutable_validated_subscriptions();
  private:
  const ::nakama::api::ValidatedSubscription& _internal_validated_subscriptions(int index) const;
  ::nakama::api::ValidatedSubscription* _internal_add_validated_subscriptions();
  public:
  const ::nakama::api::ValidatedSubscription& validated_subscriptions(int index) const;
  ::nakama::api::ValidatedSubscription* add_validated_subscriptions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nakama::api::ValidatedSubscription >&
      validated_subscriptions() const;

  // string cursor = 2;
  void clear_cursor();
  const std::string& cursor() const;
  void set_cursor(const std::string& value);
  void set_cursor(std::string&& value);
  void set_cursor(const char* value);
  void set_cursor(const char* value, size_t size);
  std::string* mutable_cursor();
  std::string* release_cursor();
  void set_allocated_cursor(std::string* cursor);
  private:
  const std::string& _internal_cursor() const;
  void _internal_set_cursor(const std::string& value);
  std::string* _internal_mutable_cursor();
  public:

  // string prev_cursor = 3;
  void clear_prev_cursor();
  const std::string& prev_cursor() const;
  void set_prev_cursor(const std::string& value);
  void set_prev_cursor(std::string&& value);
  void set_prev_cursor(const char* value);
  void set_prev_cursor(const char* value, size_t size);
  std::string* mutable_prev_cursor();
  std::string* release_prev_cursor();
  void set_allocated_prev_cursor(std::string* prev_cursor);
  private:
  const std::string& _internal_prev_cursor() const;
  void _internal_set_prev_cursor(const std::string& value);
  std::string* _internal_mutable_prev_cursor();
  public:

  // @@protoc_insertion_point(class_scope:nakama.api.SubscriptionList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nakama::api::ValidatedSubscription > validated_subscriptions_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cursor_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prev_cursor_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto;
};
// -------------------------------------------------------------------

class WriteLeaderboardRecordRequest_LeaderboardRecordWrite PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nakama.api.WriteLeaderboardRecordRequest.LeaderboardRecordWrite) */ {
 public:
  inline WriteLeaderboardRecordRequest_LeaderboardRecordWrite() : WriteLeaderboardRecordRequest_LeaderboardRecordWrite(nullptr) {}
  virtual ~WriteLeaderboardRecordRequest_LeaderboardRecordWrite();

  WriteLeaderboardRecordRequest_LeaderboardRecordWrite(const WriteLeaderboardRecordRequest_LeaderboardRecordWrite& from);
  WriteLeaderboardRecordRequest_LeaderboardRecordWrite(WriteLeaderboardRecordRequest_LeaderboardRecordWrite&& from) noexcept
    : WriteLeaderboardRecordRequest_LeaderboardRecordWrite() {
    *this = ::std::move(from);
  }

  inline WriteLeaderboardRecordRequest_LeaderboardRecordWrite& operator=(const WriteLeaderboardRecordRequest_LeaderboardRecordWrite& from) {
    CopyFrom(from);
    return *this;
  }
  inline WriteLeaderboardRecordRequest_LeaderboardRecordWrite& operator=(WriteLeaderboardRecordRequest_LeaderboardRecordWrite&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WriteLeaderboardRecordRequest_LeaderboardRecordWrite& default_instance();

  static inline const WriteLeaderboardRecordRequest_LeaderboardRecordWrite* internal_default_instance() {
    return reinterpret_cast<const WriteLeaderboardRecordRequest_LeaderboardRecordWrite*>(
               &_WriteLeaderboardRecordRequest_LeaderboardRecordWrite_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    117;

  friend void swap(WriteLeaderboardRecordRequest_LeaderboardRecordWrite& a, WriteLeaderboardRecordRequest_LeaderboardRecordWrite& b) {
    a.Swap(&b);
  }
  inline void Swap(WriteLeaderboardRecordRequest_LeaderboardRecordWrite* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WriteLeaderboardRecordRequest_LeaderboardRecordWrite* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WriteLeaderboardRecordRequest_LeaderboardRecordWrite* New() const final {
    return CreateMaybeMessage<WriteLeaderboardRecordRequest_LeaderboardRecordWrite>(nullptr);
  }

  WriteLeaderboardRecordRequest_LeaderboardRecordWrite* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WriteLeaderboardRecordRequest_LeaderboardRecordWrite>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WriteLeaderboardRecordRequest_LeaderboardRecordWrite& from);
  void MergeFrom(const WriteLeaderboardRecordRequest_LeaderboardRecordWrite& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WriteLeaderboardRecordRequest_LeaderboardRecordWrite* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nakama.api.WriteLeaderboardRecordRequest.LeaderboardRecordWrite";
  }
  protected:
  explicit WriteLeaderboardRecordRequest_LeaderboardRecordWrite(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto);
    return ::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetadataFieldNumber = 3,
    kScoreFieldNumber = 1,
    kSubscoreFieldNumber = 2,
    kOperatorFieldNumber = 4,
  };
  // string metadata = 3;
  void clear_metadata();
  const std::string& metadata() const;
  void set_metadata(const std::string& value);
  void set_metadata(std::string&& value);
  void set_metadata(const char* value);
  void set_metadata(const char* value, size_t size);
  std::string* mutable_metadata();
  std::string* release_metadata();
  void set_allocated_metadata(std::string* metadata);
  private:
  const std::string& _internal_metadata() const;
  void _internal_set_metadata(const std::string& value);
  std::string* _internal_mutable_metadata();
  public:

  // int64 score = 1;
  void clear_score();
  ::PROTOBUF_NAMESPACE_ID::int64 score() const;
  void set_score(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_score() const;
  void _internal_set_score(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 subscore = 2;
  void clear_subscore();
  ::PROTOBUF_NAMESPACE_ID::int64 subscore() const;
  void set_subscore(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_subscore() const;
  void _internal_set_subscore(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .nakama.api.Operator operator = 4;
  void clear_operator_();
  ::nakama::api::Operator operator_() const;
  void set_operator_(::nakama::api::Operator value);
  private:
  ::nakama::api::Operator _internal_operator_() const;
  void _internal_set_operator_(::nakama::api::Operator value);
  public:

  // @@protoc_insertion_point(class_scope:nakama.api.WriteLeaderboardRecordRequest.LeaderboardRecordWrite)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 score_;
  ::PROTOBUF_NAMESPACE_ID::int64 subscore_;
  int operator__;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto;
};
// -------------------------------------------------------------------

class WriteLeaderboardRecordRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nakama.api.WriteLeaderboardRecordRequest) */ {
 public:
  inline WriteLeaderboardRecordRequest() : WriteLeaderboardRecordRequest(nullptr) {}
  virtual ~WriteLeaderboardRecordRequest();

  WriteLeaderboardRecordRequest(const WriteLeaderboardRecordRequest& from);
  WriteLeaderboardRecordRequest(WriteLeaderboardRecordRequest&& from) noexcept
    : WriteLeaderboardRecordRequest() {
    *this = ::std::move(from);
  }

  inline WriteLeaderboardRecordRequest& operator=(const WriteLeaderboardRecordRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline WriteLeaderboardRecordRequest& operator=(WriteLeaderboardRecordRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WriteLeaderboardRecordRequest& default_instance();

  static inline const WriteLeaderboardRecordRequest* internal_default_instance() {
    return reinterpret_cast<const WriteLeaderboardRecordRequest*>(
               &_WriteLeaderboardRecordRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    118;

  friend void swap(WriteLeaderboardRecordRequest& a, WriteLeaderboardRecordRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(WriteLeaderboardRecordRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WriteLeaderboardRecordRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WriteLeaderboardRecordRequest* New() const final {
    return CreateMaybeMessage<WriteLeaderboardRecordRequest>(nullptr);
  }

  WriteLeaderboardRecordRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WriteLeaderboardRecordRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WriteLeaderboardRecordRequest& from);
  void MergeFrom(const WriteLeaderboardRecordRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WriteLeaderboardRecordRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nakama.api.WriteLeaderboardRecordRequest";
  }
  protected:
  explicit WriteLeaderboardRecordRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto);
    return ::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef WriteLeaderboardRecordRequest_LeaderboardRecordWrite LeaderboardRecordWrite;

  // accessors -------------------------------------------------------

  enum : int {
    kLeaderboardIdFieldNumber = 1,
    kRecordFieldNumber = 2,
  };
  // string leaderboard_id = 1;
  void clear_leaderboard_id();
  const std::string& leaderboard_id() const;
  void set_leaderboard_id(const std::string& value);
  void set_leaderboard_id(std::string&& value);
  void set_leaderboard_id(const char* value);
  void set_leaderboard_id(const char* value, size_t size);
  std::string* mutable_leaderboard_id();
  std::string* release_leaderboard_id();
  void set_allocated_leaderboard_id(std::string* leaderboard_id);
  private:
  const std::string& _internal_leaderboard_id() const;
  void _internal_set_leaderboard_id(const std::string& value);
  std::string* _internal_mutable_leaderboard_id();
  public:

  // .nakama.api.WriteLeaderboardRecordRequest.LeaderboardRecordWrite record = 2;
  bool has_record() const;
  private:
  bool _internal_has_record() const;
  public:
  void clear_record();
  const ::nakama::api::WriteLeaderboardRecordRequest_LeaderboardRecordWrite& record() const;
  ::nakama::api::WriteLeaderboardRecordRequest_LeaderboardRecordWrite* release_record();
  ::nakama::api::WriteLeaderboardRecordRequest_LeaderboardRecordWrite* mutable_record();
  void set_allocated_record(::nakama::api::WriteLeaderboardRecordRequest_LeaderboardRecordWrite* record);
  private:
  const ::nakama::api::WriteLeaderboardRecordRequest_LeaderboardRecordWrite& _internal_record() const;
  ::nakama::api::WriteLeaderboardRecordRequest_LeaderboardRecordWrite* _internal_mutable_record();
  public:
  void unsafe_arena_set_allocated_record(
      ::nakama::api::WriteLeaderboardRecordRequest_LeaderboardRecordWrite* record);
  ::nakama::api::WriteLeaderboardRecordRequest_LeaderboardRecordWrite* unsafe_arena_release_record();

  // @@protoc_insertion_point(class_scope:nakama.api.WriteLeaderboardRecordRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr leaderboard_id_;
  ::nakama::api::WriteLeaderboardRecordRequest_LeaderboardRecordWrite* record_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto;
};
// -------------------------------------------------------------------

class WriteStorageObject PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nakama.api.WriteStorageObject) */ {
 public:
  inline WriteStorageObject() : WriteStorageObject(nullptr) {}
  virtual ~WriteStorageObject();

  WriteStorageObject(const WriteStorageObject& from);
  WriteStorageObject(WriteStorageObject&& from) noexcept
    : WriteStorageObject() {
    *this = ::std::move(from);
  }

  inline WriteStorageObject& operator=(const WriteStorageObject& from) {
    CopyFrom(from);
    return *this;
  }
  inline WriteStorageObject& operator=(WriteStorageObject&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WriteStorageObject& default_instance();

  static inline const WriteStorageObject* internal_default_instance() {
    return reinterpret_cast<const WriteStorageObject*>(
               &_WriteStorageObject_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    119;

  friend void swap(WriteStorageObject& a, WriteStorageObject& b) {
    a.Swap(&b);
  }
  inline void Swap(WriteStorageObject* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WriteStorageObject* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WriteStorageObject* New() const final {
    return CreateMaybeMessage<WriteStorageObject>(nullptr);
  }

  WriteStorageObject* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WriteStorageObject>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WriteStorageObject& from);
  void MergeFrom(const WriteStorageObject& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WriteStorageObject* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nakama.api.WriteStorageObject";
  }
  protected:
  explicit WriteStorageObject(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto);
    return ::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCollectionFieldNumber = 1,
    kKeyFieldNumber = 2,
    kValueFieldNumber = 3,
    kVersionFieldNumber = 4,
    kPermissionReadFieldNumber = 5,
    kPermissionWriteFieldNumber = 6,
  };
  // string collection = 1;
  void clear_collection();
  const std::string& collection() const;
  void set_collection(const std::string& value);
  void set_collection(std::string&& value);
  void set_collection(const char* value);
  void set_collection(const char* value, size_t size);
  std::string* mutable_collection();
  std::string* release_collection();
  void set_allocated_collection(std::string* collection);
  private:
  const std::string& _internal_collection() const;
  void _internal_set_collection(const std::string& value);
  std::string* _internal_mutable_collection();
  public:

  // string key = 2;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // string value = 3;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // string version = 4;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // .google.protobuf.Int32Value permission_read = 5;
  bool has_permission_read() const;
  private:
  bool _internal_has_permission_read() const;
  public:
  void clear_permission_read();
  const PROTOBUF_NAMESPACE_ID::Int32Value& permission_read() const;
  PROTOBUF_NAMESPACE_ID::Int32Value* release_permission_read();
  PROTOBUF_NAMESPACE_ID::Int32Value* mutable_permission_read();
  void set_allocated_permission_read(PROTOBUF_NAMESPACE_ID::Int32Value* permission_read);
  private:
  const PROTOBUF_NAMESPACE_ID::Int32Value& _internal_permission_read() const;
  PROTOBUF_NAMESPACE_ID::Int32Value* _internal_mutable_permission_read();
  public:
  void unsafe_arena_set_allocated_permission_read(
      PROTOBUF_NAMESPACE_ID::Int32Value* permission_read);
  PROTOBUF_NAMESPACE_ID::Int32Value* unsafe_arena_release_permission_read();

  // .google.protobuf.Int32Value permission_write = 6;
  bool has_permission_write() const;
  private:
  bool _internal_has_permission_write() const;
  public:
  void clear_permission_write();
  const PROTOBUF_NAMESPACE_ID::Int32Value& permission_write() const;
  PROTOBUF_NAMESPACE_ID::Int32Value* release_permission_write();
  PROTOBUF_NAMESPACE_ID::Int32Value* mutable_permission_write();
  void set_allocated_permission_write(PROTOBUF_NAMESPACE_ID::Int32Value* permission_write);
  private:
  const PROTOBUF_NAMESPACE_ID::Int32Value& _internal_permission_write() const;
  PROTOBUF_NAMESPACE_ID::Int32Value* _internal_mutable_permission_write();
  public:
  void unsafe_arena_set_allocated_permission_write(
      PROTOBUF_NAMESPACE_ID::Int32Value* permission_write);
  PROTOBUF_NAMESPACE_ID::Int32Value* unsafe_arena_release_permission_write();

  // @@protoc_insertion_point(class_scope:nakama.api.WriteStorageObject)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr collection_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  PROTOBUF_NAMESPACE_ID::Int32Value* permission_read_;
  PROTOBUF_NAMESPACE_ID::Int32Value* permission_write_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto;
};
// -------------------------------------------------------------------

class WriteStorageObjectsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nakama.api.WriteStorageObjectsRequest) */ {
 public:
  inline WriteStorageObjectsRequest() : WriteStorageObjectsRequest(nullptr) {}
  virtual ~WriteStorageObjectsRequest();

  WriteStorageObjectsRequest(const WriteStorageObjectsRequest& from);
  WriteStorageObjectsRequest(WriteStorageObjectsRequest&& from) noexcept
    : WriteStorageObjectsRequest() {
    *this = ::std::move(from);
  }

  inline WriteStorageObjectsRequest& operator=(const WriteStorageObjectsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline WriteStorageObjectsRequest& operator=(WriteStorageObjectsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WriteStorageObjectsRequest& default_instance();

  static inline const WriteStorageObjectsRequest* internal_default_instance() {
    return reinterpret_cast<const WriteStorageObjectsRequest*>(
               &_WriteStorageObjectsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    120;

  friend void swap(WriteStorageObjectsRequest& a, WriteStorageObjectsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(WriteStorageObjectsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WriteStorageObjectsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WriteStorageObjectsRequest* New() const final {
    return CreateMaybeMessage<WriteStorageObjectsRequest>(nullptr);
  }

  WriteStorageObjectsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WriteStorageObjectsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WriteStorageObjectsRequest& from);
  void MergeFrom(const WriteStorageObjectsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WriteStorageObjectsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nakama.api.WriteStorageObjectsRequest";
  }
  protected:
  explicit WriteStorageObjectsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto);
    return ::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectsFieldNumber = 1,
  };
  // repeated .nakama.api.WriteStorageObject objects = 1;
  int objects_size() const;
  private:
  int _internal_objects_size() const;
  public:
  void clear_objects();
  ::nakama::api::WriteStorageObject* mutable_objects(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nakama::api::WriteStorageObject >*
      mutable_objects();
  private:
  const ::nakama::api::WriteStorageObject& _internal_objects(int index) const;
  ::nakama::api::WriteStorageObject* _internal_add_objects();
  public:
  const ::nakama::api::WriteStorageObject& objects(int index) const;
  ::nakama::api::WriteStorageObject* add_objects();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nakama::api::WriteStorageObject >&
      objects() const;

  // @@protoc_insertion_point(class_scope:nakama.api.WriteStorageObjectsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nakama::api::WriteStorageObject > objects_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto;
};
// -------------------------------------------------------------------

class WriteTournamentRecordRequest_TournamentRecordWrite PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nakama.api.WriteTournamentRecordRequest.TournamentRecordWrite) */ {
 public:
  inline WriteTournamentRecordRequest_TournamentRecordWrite() : WriteTournamentRecordRequest_TournamentRecordWrite(nullptr) {}
  virtual ~WriteTournamentRecordRequest_TournamentRecordWrite();

  WriteTournamentRecordRequest_TournamentRecordWrite(const WriteTournamentRecordRequest_TournamentRecordWrite& from);
  WriteTournamentRecordRequest_TournamentRecordWrite(WriteTournamentRecordRequest_TournamentRecordWrite&& from) noexcept
    : WriteTournamentRecordRequest_TournamentRecordWrite() {
    *this = ::std::move(from);
  }

  inline WriteTournamentRecordRequest_TournamentRecordWrite& operator=(const WriteTournamentRecordRequest_TournamentRecordWrite& from) {
    CopyFrom(from);
    return *this;
  }
  inline WriteTournamentRecordRequest_TournamentRecordWrite& operator=(WriteTournamentRecordRequest_TournamentRecordWrite&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WriteTournamentRecordRequest_TournamentRecordWrite& default_instance();

  static inline const WriteTournamentRecordRequest_TournamentRecordWrite* internal_default_instance() {
    return reinterpret_cast<const WriteTournamentRecordRequest_TournamentRecordWrite*>(
               &_WriteTournamentRecordRequest_TournamentRecordWrite_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    121;

  friend void swap(WriteTournamentRecordRequest_TournamentRecordWrite& a, WriteTournamentRecordRequest_TournamentRecordWrite& b) {
    a.Swap(&b);
  }
  inline void Swap(WriteTournamentRecordRequest_TournamentRecordWrite* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WriteTournamentRecordRequest_TournamentRecordWrite* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WriteTournamentRecordRequest_TournamentRecordWrite* New() const final {
    return CreateMaybeMessage<WriteTournamentRecordRequest_TournamentRecordWrite>(nullptr);
  }

  WriteTournamentRecordRequest_TournamentRecordWrite* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WriteTournamentRecordRequest_TournamentRecordWrite>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WriteTournamentRecordRequest_TournamentRecordWrite& from);
  void MergeFrom(const WriteTournamentRecordRequest_TournamentRecordWrite& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WriteTournamentRecordRequest_TournamentRecordWrite* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nakama.api.WriteTournamentRecordRequest.TournamentRecordWrite";
  }
  protected:
  explicit WriteTournamentRecordRequest_TournamentRecordWrite(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto);
    return ::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetadataFieldNumber = 3,
    kScoreFieldNumber = 1,
    kSubscoreFieldNumber = 2,
    kOperatorFieldNumber = 4,
  };
  // string metadata = 3;
  void clear_metadata();
  const std::string& metadata() const;
  void set_metadata(const std::string& value);
  void set_metadata(std::string&& value);
  void set_metadata(const char* value);
  void set_metadata(const char* value, size_t size);
  std::string* mutable_metadata();
  std::string* release_metadata();
  void set_allocated_metadata(std::string* metadata);
  private:
  const std::string& _internal_metadata() const;
  void _internal_set_metadata(const std::string& value);
  std::string* _internal_mutable_metadata();
  public:

  // int64 score = 1;
  void clear_score();
  ::PROTOBUF_NAMESPACE_ID::int64 score() const;
  void set_score(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_score() const;
  void _internal_set_score(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 subscore = 2;
  void clear_subscore();
  ::PROTOBUF_NAMESPACE_ID::int64 subscore() const;
  void set_subscore(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_subscore() const;
  void _internal_set_subscore(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .nakama.api.Operator operator = 4;
  void clear_operator_();
  ::nakama::api::Operator operator_() const;
  void set_operator_(::nakama::api::Operator value);
  private:
  ::nakama::api::Operator _internal_operator_() const;
  void _internal_set_operator_(::nakama::api::Operator value);
  public:

  // @@protoc_insertion_point(class_scope:nakama.api.WriteTournamentRecordRequest.TournamentRecordWrite)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 score_;
  ::PROTOBUF_NAMESPACE_ID::int64 subscore_;
  int operator__;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto;
};
// -------------------------------------------------------------------

class WriteTournamentRecordRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nakama.api.WriteTournamentRecordRequest) */ {
 public:
  inline WriteTournamentRecordRequest() : WriteTournamentRecordRequest(nullptr) {}
  virtual ~WriteTournamentRecordRequest();

  WriteTournamentRecordRequest(const WriteTournamentRecordRequest& from);
  WriteTournamentRecordRequest(WriteTournamentRecordRequest&& from) noexcept
    : WriteTournamentRecordRequest() {
    *this = ::std::move(from);
  }

  inline WriteTournamentRecordRequest& operator=(const WriteTournamentRecordRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline WriteTournamentRecordRequest& operator=(WriteTournamentRecordRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WriteTournamentRecordRequest& default_instance();

  static inline const WriteTournamentRecordRequest* internal_default_instance() {
    return reinterpret_cast<const WriteTournamentRecordRequest*>(
               &_WriteTournamentRecordRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    122;

  friend void swap(WriteTournamentRecordRequest& a, WriteTournamentRecordRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(WriteTournamentRecordRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WriteTournamentRecordRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WriteTournamentRecordRequest* New() const final {
    return CreateMaybeMessage<WriteTournamentRecordRequest>(nullptr);
  }

  WriteTournamentRecordRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WriteTournamentRecordRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WriteTournamentRecordRequest& from);
  void MergeFrom(const WriteTournamentRecordRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WriteTournamentRecordRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nakama.api.WriteTournamentRecordRequest";
  }
  protected:
  explicit WriteTournamentRecordRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto);
    return ::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef WriteTournamentRecordRequest_TournamentRecordWrite TournamentRecordWrite;

  // accessors -------------------------------------------------------

  enum : int {
    kTournamentIdFieldNumber = 1,
    kRecordFieldNumber = 2,
  };
  // string tournament_id = 1;
  void clear_tournament_id();
  const std::string& tournament_id() const;
  void set_tournament_id(const std::string& value);
  void set_tournament_id(std::string&& value);
  void set_tournament_id(const char* value);
  void set_tournament_id(const char* value, size_t size);
  std::string* mutable_tournament_id();
  std::string* release_tournament_id();
  void set_allocated_tournament_id(std::string* tournament_id);
  private:
  const std::string& _internal_tournament_id() const;
  void _internal_set_tournament_id(const std::string& value);
  std::string* _internal_mutable_tournament_id();
  public:

  // .nakama.api.WriteTournamentRecordRequest.TournamentRecordWrite record = 2;
  bool has_record() const;
  private:
  bool _internal_has_record() const;
  public:
  void clear_record();
  const ::nakama::api::WriteTournamentRecordRequest_TournamentRecordWrite& record() const;
  ::nakama::api::WriteTournamentRecordRequest_TournamentRecordWrite* release_record();
  ::nakama::api::WriteTournamentRecordRequest_TournamentRecordWrite* mutable_record();
  void set_allocated_record(::nakama::api::WriteTournamentRecordRequest_TournamentRecordWrite* record);
  private:
  const ::nakama::api::WriteTournamentRecordRequest_TournamentRecordWrite& _internal_record() const;
  ::nakama::api::WriteTournamentRecordRequest_TournamentRecordWrite* _internal_mutable_record();
  public:
  void unsafe_arena_set_allocated_record(
      ::nakama::api::WriteTournamentRecordRequest_TournamentRecordWrite* record);
  ::nakama::api::WriteTournamentRecordRequest_TournamentRecordWrite* unsafe_arena_release_record();

  // @@protoc_insertion_point(class_scope:nakama.api.WriteTournamentRecordRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tournament_id_;
  ::nakama::api::WriteTournamentRecordRequest_TournamentRecordWrite* record_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Account

// .nakama.api.User user = 1;
inline bool Account::_internal_has_user() const {
  return this != internal_default_instance() && user_ != nullptr;
}
inline bool Account::has_user() const {
  return _internal_has_user();
}
inline void Account::clear_user() {
  if (GetArena() == nullptr && user_ != nullptr) {
    delete user_;
  }
  user_ = nullptr;
}
inline const ::nakama::api::User& Account::_internal_user() const {
  const ::nakama::api::User* p = user_;
  return p != nullptr ? *p : reinterpret_cast<const ::nakama::api::User&>(
      ::nakama::api::_User_default_instance_);
}
inline const ::nakama::api::User& Account::user() const {
  // @@protoc_insertion_point(field_get:nakama.api.Account.user)
  return _internal_user();
}
inline void Account::unsafe_arena_set_allocated_user(
    ::nakama::api::User* user) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_);
  }
  user_ = user;
  if (user) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nakama.api.Account.user)
}
inline ::nakama::api::User* Account::release_user() {
  
  ::nakama::api::User* temp = user_;
  user_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::nakama::api::User* Account::unsafe_arena_release_user() {
  // @@protoc_insertion_point(field_release:nakama.api.Account.user)
  
  ::nakama::api::User* temp = user_;
  user_ = nullptr;
  return temp;
}
inline ::nakama::api::User* Account::_internal_mutable_user() {
  
  if (user_ == nullptr) {
    auto* p = CreateMaybeMessage<::nakama::api::User>(GetArena());
    user_ = p;
  }
  return user_;
}
inline ::nakama::api::User* Account::mutable_user() {
  // @@protoc_insertion_point(field_mutable:nakama.api.Account.user)
  return _internal_mutable_user();
}
inline void Account::set_allocated_user(::nakama::api::User* user) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete user_;
  }
  if (user) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(user);
    if (message_arena != submessage_arena) {
      user = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user, submessage_arena);
    }
    
  } else {
    
  }
  user_ = user;
  // @@protoc_insertion_point(field_set_allocated:nakama.api.Account.user)
}

// string wallet = 2;
inline void Account::clear_wallet() {
  wallet_.ClearToEmpty();
}
inline const std::string& Account::wallet() const {
  // @@protoc_insertion_point(field_get:nakama.api.Account.wallet)
  return _internal_wallet();
}
inline void Account::set_wallet(const std::string& value) {
  _internal_set_wallet(value);
  // @@protoc_insertion_point(field_set:nakama.api.Account.wallet)
}
inline std::string* Account::mutable_wallet() {
  // @@protoc_insertion_point(field_mutable:nakama.api.Account.wallet)
  return _internal_mutable_wallet();
}
inline const std::string& Account::_internal_wallet() const {
  return wallet_.Get();
}
inline void Account::_internal_set_wallet(const std::string& value) {
  
  wallet_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Account::set_wallet(std::string&& value) {
  
  wallet_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.Account.wallet)
}
inline void Account::set_wallet(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  wallet_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.Account.wallet)
}
inline void Account::set_wallet(const char* value,
    size_t size) {
  
  wallet_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.Account.wallet)
}
inline std::string* Account::_internal_mutable_wallet() {
  
  return wallet_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Account::release_wallet() {
  // @@protoc_insertion_point(field_release:nakama.api.Account.wallet)
  return wallet_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Account::set_allocated_wallet(std::string* wallet) {
  if (wallet != nullptr) {
    
  } else {
    
  }
  wallet_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), wallet,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.Account.wallet)
}

// string email = 3;
inline void Account::clear_email() {
  email_.ClearToEmpty();
}
inline const std::string& Account::email() const {
  // @@protoc_insertion_point(field_get:nakama.api.Account.email)
  return _internal_email();
}
inline void Account::set_email(const std::string& value) {
  _internal_set_email(value);
  // @@protoc_insertion_point(field_set:nakama.api.Account.email)
}
inline std::string* Account::mutable_email() {
  // @@protoc_insertion_point(field_mutable:nakama.api.Account.email)
  return _internal_mutable_email();
}
inline const std::string& Account::_internal_email() const {
  return email_.Get();
}
inline void Account::_internal_set_email(const std::string& value) {
  
  email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Account::set_email(std::string&& value) {
  
  email_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.Account.email)
}
inline void Account::set_email(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.Account.email)
}
inline void Account::set_email(const char* value,
    size_t size) {
  
  email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.Account.email)
}
inline std::string* Account::_internal_mutable_email() {
  
  return email_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Account::release_email() {
  // @@protoc_insertion_point(field_release:nakama.api.Account.email)
  return email_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Account::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    
  } else {
    
  }
  email_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), email,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.Account.email)
}

// repeated .nakama.api.AccountDevice devices = 4;
inline int Account::_internal_devices_size() const {
  return devices_.size();
}
inline int Account::devices_size() const {
  return _internal_devices_size();
}
inline void Account::clear_devices() {
  devices_.Clear();
}
inline ::nakama::api::AccountDevice* Account::mutable_devices(int index) {
  // @@protoc_insertion_point(field_mutable:nakama.api.Account.devices)
  return devices_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nakama::api::AccountDevice >*
Account::mutable_devices() {
  // @@protoc_insertion_point(field_mutable_list:nakama.api.Account.devices)
  return &devices_;
}
inline const ::nakama::api::AccountDevice& Account::_internal_devices(int index) const {
  return devices_.Get(index);
}
inline const ::nakama::api::AccountDevice& Account::devices(int index) const {
  // @@protoc_insertion_point(field_get:nakama.api.Account.devices)
  return _internal_devices(index);
}
inline ::nakama::api::AccountDevice* Account::_internal_add_devices() {
  return devices_.Add();
}
inline ::nakama::api::AccountDevice* Account::add_devices() {
  // @@protoc_insertion_point(field_add:nakama.api.Account.devices)
  return _internal_add_devices();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nakama::api::AccountDevice >&
Account::devices() const {
  // @@protoc_insertion_point(field_list:nakama.api.Account.devices)
  return devices_;
}

// string custom_id = 5;
inline void Account::clear_custom_id() {
  custom_id_.ClearToEmpty();
}
inline const std::string& Account::custom_id() const {
  // @@protoc_insertion_point(field_get:nakama.api.Account.custom_id)
  return _internal_custom_id();
}
inline void Account::set_custom_id(const std::string& value) {
  _internal_set_custom_id(value);
  // @@protoc_insertion_point(field_set:nakama.api.Account.custom_id)
}
inline std::string* Account::mutable_custom_id() {
  // @@protoc_insertion_point(field_mutable:nakama.api.Account.custom_id)
  return _internal_mutable_custom_id();
}
inline const std::string& Account::_internal_custom_id() const {
  return custom_id_.Get();
}
inline void Account::_internal_set_custom_id(const std::string& value) {
  
  custom_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Account::set_custom_id(std::string&& value) {
  
  custom_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.Account.custom_id)
}
inline void Account::set_custom_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  custom_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.Account.custom_id)
}
inline void Account::set_custom_id(const char* value,
    size_t size) {
  
  custom_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.Account.custom_id)
}
inline std::string* Account::_internal_mutable_custom_id() {
  
  return custom_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Account::release_custom_id() {
  // @@protoc_insertion_point(field_release:nakama.api.Account.custom_id)
  return custom_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Account::set_allocated_custom_id(std::string* custom_id) {
  if (custom_id != nullptr) {
    
  } else {
    
  }
  custom_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), custom_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.Account.custom_id)
}

// .google.protobuf.Timestamp verify_time = 6;
inline bool Account::_internal_has_verify_time() const {
  return this != internal_default_instance() && verify_time_ != nullptr;
}
inline bool Account::has_verify_time() const {
  return _internal_has_verify_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Account::_internal_verify_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = verify_time_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Account::verify_time() const {
  // @@protoc_insertion_point(field_get:nakama.api.Account.verify_time)
  return _internal_verify_time();
}
inline void Account::unsafe_arena_set_allocated_verify_time(
    PROTOBUF_NAMESPACE_ID::Timestamp* verify_time) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(verify_time_);
  }
  verify_time_ = verify_time;
  if (verify_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nakama.api.Account.verify_time)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Account::release_verify_time() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = verify_time_;
  verify_time_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Account::unsafe_arena_release_verify_time() {
  // @@protoc_insertion_point(field_release:nakama.api.Account.verify_time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = verify_time_;
  verify_time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Account::_internal_mutable_verify_time() {
  
  if (verify_time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    verify_time_ = p;
  }
  return verify_time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Account::mutable_verify_time() {
  // @@protoc_insertion_point(field_mutable:nakama.api.Account.verify_time)
  return _internal_mutable_verify_time();
}
inline void Account::set_allocated_verify_time(PROTOBUF_NAMESPACE_ID::Timestamp* verify_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(verify_time_);
  }
  if (verify_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(verify_time)->GetArena();
    if (message_arena != submessage_arena) {
      verify_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, verify_time, submessage_arena);
    }
    
  } else {
    
  }
  verify_time_ = verify_time;
  // @@protoc_insertion_point(field_set_allocated:nakama.api.Account.verify_time)
}

// .google.protobuf.Timestamp disable_time = 7;
inline bool Account::_internal_has_disable_time() const {
  return this != internal_default_instance() && disable_time_ != nullptr;
}
inline bool Account::has_disable_time() const {
  return _internal_has_disable_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Account::_internal_disable_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = disable_time_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Account::disable_time() const {
  // @@protoc_insertion_point(field_get:nakama.api.Account.disable_time)
  return _internal_disable_time();
}
inline void Account::unsafe_arena_set_allocated_disable_time(
    PROTOBUF_NAMESPACE_ID::Timestamp* disable_time) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(disable_time_);
  }
  disable_time_ = disable_time;
  if (disable_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nakama.api.Account.disable_time)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Account::release_disable_time() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = disable_time_;
  disable_time_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Account::unsafe_arena_release_disable_time() {
  // @@protoc_insertion_point(field_release:nakama.api.Account.disable_time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = disable_time_;
  disable_time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Account::_internal_mutable_disable_time() {
  
  if (disable_time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    disable_time_ = p;
  }
  return disable_time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Account::mutable_disable_time() {
  // @@protoc_insertion_point(field_mutable:nakama.api.Account.disable_time)
  return _internal_mutable_disable_time();
}
inline void Account::set_allocated_disable_time(PROTOBUF_NAMESPACE_ID::Timestamp* disable_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(disable_time_);
  }
  if (disable_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(disable_time)->GetArena();
    if (message_arena != submessage_arena) {
      disable_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, disable_time, submessage_arena);
    }
    
  } else {
    
  }
  disable_time_ = disable_time;
  // @@protoc_insertion_point(field_set_allocated:nakama.api.Account.disable_time)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// AccountRefresh

// string token = 1;
inline void AccountRefresh::clear_token() {
  token_.ClearToEmpty();
}
inline const std::string& AccountRefresh::token() const {
  // @@protoc_insertion_point(field_get:nakama.api.AccountRefresh.token)
  return _internal_token();
}
inline void AccountRefresh::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:nakama.api.AccountRefresh.token)
}
inline std::string* AccountRefresh::mutable_token() {
  // @@protoc_insertion_point(field_mutable:nakama.api.AccountRefresh.token)
  return _internal_mutable_token();
}
inline const std::string& AccountRefresh::_internal_token() const {
  return token_.Get();
}
inline void AccountRefresh::_internal_set_token(const std::string& value) {
  
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AccountRefresh::set_token(std::string&& value) {
  
  token_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.AccountRefresh.token)
}
inline void AccountRefresh::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.AccountRefresh.token)
}
inline void AccountRefresh::set_token(const char* value,
    size_t size) {
  
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.AccountRefresh.token)
}
inline std::string* AccountRefresh::_internal_mutable_token() {
  
  return token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AccountRefresh::release_token() {
  // @@protoc_insertion_point(field_release:nakama.api.AccountRefresh.token)
  return token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AccountRefresh::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.AccountRefresh.token)
}

// map<string, string> vars = 2;
inline int AccountRefresh::_internal_vars_size() const {
  return vars_.size();
}
inline int AccountRefresh::vars_size() const {
  return _internal_vars_size();
}
inline void AccountRefresh::clear_vars() {
  vars_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
AccountRefresh::_internal_vars() const {
  return vars_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
AccountRefresh::vars() const {
  // @@protoc_insertion_point(field_map:nakama.api.AccountRefresh.vars)
  return _internal_vars();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
AccountRefresh::_internal_mutable_vars() {
  return vars_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
AccountRefresh::mutable_vars() {
  // @@protoc_insertion_point(field_mutable_map:nakama.api.AccountRefresh.vars)
  return _internal_mutable_vars();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// AccountApple

// string token = 1;
inline void AccountApple::clear_token() {
  token_.ClearToEmpty();
}
inline const std::string& AccountApple::token() const {
  // @@protoc_insertion_point(field_get:nakama.api.AccountApple.token)
  return _internal_token();
}
inline void AccountApple::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:nakama.api.AccountApple.token)
}
inline std::string* AccountApple::mutable_token() {
  // @@protoc_insertion_point(field_mutable:nakama.api.AccountApple.token)
  return _internal_mutable_token();
}
inline const std::string& AccountApple::_internal_token() const {
  return token_.Get();
}
inline void AccountApple::_internal_set_token(const std::string& value) {
  
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AccountApple::set_token(std::string&& value) {
  
  token_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.AccountApple.token)
}
inline void AccountApple::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.AccountApple.token)
}
inline void AccountApple::set_token(const char* value,
    size_t size) {
  
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.AccountApple.token)
}
inline std::string* AccountApple::_internal_mutable_token() {
  
  return token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AccountApple::release_token() {
  // @@protoc_insertion_point(field_release:nakama.api.AccountApple.token)
  return token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AccountApple::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.AccountApple.token)
}

// map<string, string> vars = 2;
inline int AccountApple::_internal_vars_size() const {
  return vars_.size();
}
inline int AccountApple::vars_size() const {
  return _internal_vars_size();
}
inline void AccountApple::clear_vars() {
  vars_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
AccountApple::_internal_vars() const {
  return vars_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
AccountApple::vars() const {
  // @@protoc_insertion_point(field_map:nakama.api.AccountApple.vars)
  return _internal_vars();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
AccountApple::_internal_mutable_vars() {
  return vars_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
AccountApple::mutable_vars() {
  // @@protoc_insertion_point(field_mutable_map:nakama.api.AccountApple.vars)
  return _internal_mutable_vars();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// AccountCustom

// string id = 1;
inline void AccountCustom::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& AccountCustom::id() const {
  // @@protoc_insertion_point(field_get:nakama.api.AccountCustom.id)
  return _internal_id();
}
inline void AccountCustom::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:nakama.api.AccountCustom.id)
}
inline std::string* AccountCustom::mutable_id() {
  // @@protoc_insertion_point(field_mutable:nakama.api.AccountCustom.id)
  return _internal_mutable_id();
}
inline const std::string& AccountCustom::_internal_id() const {
  return id_.Get();
}
inline void AccountCustom::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AccountCustom::set_id(std::string&& value) {
  
  id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.AccountCustom.id)
}
inline void AccountCustom::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.AccountCustom.id)
}
inline void AccountCustom::set_id(const char* value,
    size_t size) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.AccountCustom.id)
}
inline std::string* AccountCustom::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AccountCustom::release_id() {
  // @@protoc_insertion_point(field_release:nakama.api.AccountCustom.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AccountCustom::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.AccountCustom.id)
}

// map<string, string> vars = 2;
inline int AccountCustom::_internal_vars_size() const {
  return vars_.size();
}
inline int AccountCustom::vars_size() const {
  return _internal_vars_size();
}
inline void AccountCustom::clear_vars() {
  vars_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
AccountCustom::_internal_vars() const {
  return vars_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
AccountCustom::vars() const {
  // @@protoc_insertion_point(field_map:nakama.api.AccountCustom.vars)
  return _internal_vars();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
AccountCustom::_internal_mutable_vars() {
  return vars_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
AccountCustom::mutable_vars() {
  // @@protoc_insertion_point(field_mutable_map:nakama.api.AccountCustom.vars)
  return _internal_mutable_vars();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// AccountDevice

// string id = 1;
inline void AccountDevice::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& AccountDevice::id() const {
  // @@protoc_insertion_point(field_get:nakama.api.AccountDevice.id)
  return _internal_id();
}
inline void AccountDevice::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:nakama.api.AccountDevice.id)
}
inline std::string* AccountDevice::mutable_id() {
  // @@protoc_insertion_point(field_mutable:nakama.api.AccountDevice.id)
  return _internal_mutable_id();
}
inline const std::string& AccountDevice::_internal_id() const {
  return id_.Get();
}
inline void AccountDevice::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AccountDevice::set_id(std::string&& value) {
  
  id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.AccountDevice.id)
}
inline void AccountDevice::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.AccountDevice.id)
}
inline void AccountDevice::set_id(const char* value,
    size_t size) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.AccountDevice.id)
}
inline std::string* AccountDevice::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AccountDevice::release_id() {
  // @@protoc_insertion_point(field_release:nakama.api.AccountDevice.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AccountDevice::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.AccountDevice.id)
}

// map<string, string> vars = 2;
inline int AccountDevice::_internal_vars_size() const {
  return vars_.size();
}
inline int AccountDevice::vars_size() const {
  return _internal_vars_size();
}
inline void AccountDevice::clear_vars() {
  vars_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
AccountDevice::_internal_vars() const {
  return vars_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
AccountDevice::vars() const {
  // @@protoc_insertion_point(field_map:nakama.api.AccountDevice.vars)
  return _internal_vars();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
AccountDevice::_internal_mutable_vars() {
  return vars_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
AccountDevice::mutable_vars() {
  // @@protoc_insertion_point(field_mutable_map:nakama.api.AccountDevice.vars)
  return _internal_mutable_vars();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// AccountEmail

// string email = 1;
inline void AccountEmail::clear_email() {
  email_.ClearToEmpty();
}
inline const std::string& AccountEmail::email() const {
  // @@protoc_insertion_point(field_get:nakama.api.AccountEmail.email)
  return _internal_email();
}
inline void AccountEmail::set_email(const std::string& value) {
  _internal_set_email(value);
  // @@protoc_insertion_point(field_set:nakama.api.AccountEmail.email)
}
inline std::string* AccountEmail::mutable_email() {
  // @@protoc_insertion_point(field_mutable:nakama.api.AccountEmail.email)
  return _internal_mutable_email();
}
inline const std::string& AccountEmail::_internal_email() const {
  return email_.Get();
}
inline void AccountEmail::_internal_set_email(const std::string& value) {
  
  email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AccountEmail::set_email(std::string&& value) {
  
  email_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.AccountEmail.email)
}
inline void AccountEmail::set_email(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.AccountEmail.email)
}
inline void AccountEmail::set_email(const char* value,
    size_t size) {
  
  email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.AccountEmail.email)
}
inline std::string* AccountEmail::_internal_mutable_email() {
  
  return email_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AccountEmail::release_email() {
  // @@protoc_insertion_point(field_release:nakama.api.AccountEmail.email)
  return email_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AccountEmail::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    
  } else {
    
  }
  email_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), email,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.AccountEmail.email)
}

// string password = 2;
inline void AccountEmail::clear_password() {
  password_.ClearToEmpty();
}
inline const std::string& AccountEmail::password() const {
  // @@protoc_insertion_point(field_get:nakama.api.AccountEmail.password)
  return _internal_password();
}
inline void AccountEmail::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:nakama.api.AccountEmail.password)
}
inline std::string* AccountEmail::mutable_password() {
  // @@protoc_insertion_point(field_mutable:nakama.api.AccountEmail.password)
  return _internal_mutable_password();
}
inline const std::string& AccountEmail::_internal_password() const {
  return password_.Get();
}
inline void AccountEmail::_internal_set_password(const std::string& value) {
  
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AccountEmail::set_password(std::string&& value) {
  
  password_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.AccountEmail.password)
}
inline void AccountEmail::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.AccountEmail.password)
}
inline void AccountEmail::set_password(const char* value,
    size_t size) {
  
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.AccountEmail.password)
}
inline std::string* AccountEmail::_internal_mutable_password() {
  
  return password_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AccountEmail::release_password() {
  // @@protoc_insertion_point(field_release:nakama.api.AccountEmail.password)
  return password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AccountEmail::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.AccountEmail.password)
}

// map<string, string> vars = 3;
inline int AccountEmail::_internal_vars_size() const {
  return vars_.size();
}
inline int AccountEmail::vars_size() const {
  return _internal_vars_size();
}
inline void AccountEmail::clear_vars() {
  vars_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
AccountEmail::_internal_vars() const {
  return vars_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
AccountEmail::vars() const {
  // @@protoc_insertion_point(field_map:nakama.api.AccountEmail.vars)
  return _internal_vars();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
AccountEmail::_internal_mutable_vars() {
  return vars_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
AccountEmail::mutable_vars() {
  // @@protoc_insertion_point(field_mutable_map:nakama.api.AccountEmail.vars)
  return _internal_mutable_vars();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// AccountFacebook

// string token = 1;
inline void AccountFacebook::clear_token() {
  token_.ClearToEmpty();
}
inline const std::string& AccountFacebook::token() const {
  // @@protoc_insertion_point(field_get:nakama.api.AccountFacebook.token)
  return _internal_token();
}
inline void AccountFacebook::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:nakama.api.AccountFacebook.token)
}
inline std::string* AccountFacebook::mutable_token() {
  // @@protoc_insertion_point(field_mutable:nakama.api.AccountFacebook.token)
  return _internal_mutable_token();
}
inline const std::string& AccountFacebook::_internal_token() const {
  return token_.Get();
}
inline void AccountFacebook::_internal_set_token(const std::string& value) {
  
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AccountFacebook::set_token(std::string&& value) {
  
  token_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.AccountFacebook.token)
}
inline void AccountFacebook::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.AccountFacebook.token)
}
inline void AccountFacebook::set_token(const char* value,
    size_t size) {
  
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.AccountFacebook.token)
}
inline std::string* AccountFacebook::_internal_mutable_token() {
  
  return token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AccountFacebook::release_token() {
  // @@protoc_insertion_point(field_release:nakama.api.AccountFacebook.token)
  return token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AccountFacebook::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.AccountFacebook.token)
}

// map<string, string> vars = 2;
inline int AccountFacebook::_internal_vars_size() const {
  return vars_.size();
}
inline int AccountFacebook::vars_size() const {
  return _internal_vars_size();
}
inline void AccountFacebook::clear_vars() {
  vars_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
AccountFacebook::_internal_vars() const {
  return vars_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
AccountFacebook::vars() const {
  // @@protoc_insertion_point(field_map:nakama.api.AccountFacebook.vars)
  return _internal_vars();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
AccountFacebook::_internal_mutable_vars() {
  return vars_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
AccountFacebook::mutable_vars() {
  // @@protoc_insertion_point(field_mutable_map:nakama.api.AccountFacebook.vars)
  return _internal_mutable_vars();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// AccountFacebookInstantGame

// string signed_player_info = 1;
inline void AccountFacebookInstantGame::clear_signed_player_info() {
  signed_player_info_.ClearToEmpty();
}
inline const std::string& AccountFacebookInstantGame::signed_player_info() const {
  // @@protoc_insertion_point(field_get:nakama.api.AccountFacebookInstantGame.signed_player_info)
  return _internal_signed_player_info();
}
inline void AccountFacebookInstantGame::set_signed_player_info(const std::string& value) {
  _internal_set_signed_player_info(value);
  // @@protoc_insertion_point(field_set:nakama.api.AccountFacebookInstantGame.signed_player_info)
}
inline std::string* AccountFacebookInstantGame::mutable_signed_player_info() {
  // @@protoc_insertion_point(field_mutable:nakama.api.AccountFacebookInstantGame.signed_player_info)
  return _internal_mutable_signed_player_info();
}
inline const std::string& AccountFacebookInstantGame::_internal_signed_player_info() const {
  return signed_player_info_.Get();
}
inline void AccountFacebookInstantGame::_internal_set_signed_player_info(const std::string& value) {
  
  signed_player_info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AccountFacebookInstantGame::set_signed_player_info(std::string&& value) {
  
  signed_player_info_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.AccountFacebookInstantGame.signed_player_info)
}
inline void AccountFacebookInstantGame::set_signed_player_info(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  signed_player_info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.AccountFacebookInstantGame.signed_player_info)
}
inline void AccountFacebookInstantGame::set_signed_player_info(const char* value,
    size_t size) {
  
  signed_player_info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.AccountFacebookInstantGame.signed_player_info)
}
inline std::string* AccountFacebookInstantGame::_internal_mutable_signed_player_info() {
  
  return signed_player_info_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AccountFacebookInstantGame::release_signed_player_info() {
  // @@protoc_insertion_point(field_release:nakama.api.AccountFacebookInstantGame.signed_player_info)
  return signed_player_info_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AccountFacebookInstantGame::set_allocated_signed_player_info(std::string* signed_player_info) {
  if (signed_player_info != nullptr) {
    
  } else {
    
  }
  signed_player_info_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signed_player_info,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.AccountFacebookInstantGame.signed_player_info)
}

// map<string, string> vars = 2;
inline int AccountFacebookInstantGame::_internal_vars_size() const {
  return vars_.size();
}
inline int AccountFacebookInstantGame::vars_size() const {
  return _internal_vars_size();
}
inline void AccountFacebookInstantGame::clear_vars() {
  vars_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
AccountFacebookInstantGame::_internal_vars() const {
  return vars_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
AccountFacebookInstantGame::vars() const {
  // @@protoc_insertion_point(field_map:nakama.api.AccountFacebookInstantGame.vars)
  return _internal_vars();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
AccountFacebookInstantGame::_internal_mutable_vars() {
  return vars_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
AccountFacebookInstantGame::mutable_vars() {
  // @@protoc_insertion_point(field_mutable_map:nakama.api.AccountFacebookInstantGame.vars)
  return _internal_mutable_vars();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// AccountGameCenter

// string player_id = 1;
inline void AccountGameCenter::clear_player_id() {
  player_id_.ClearToEmpty();
}
inline const std::string& AccountGameCenter::player_id() const {
  // @@protoc_insertion_point(field_get:nakama.api.AccountGameCenter.player_id)
  return _internal_player_id();
}
inline void AccountGameCenter::set_player_id(const std::string& value) {
  _internal_set_player_id(value);
  // @@protoc_insertion_point(field_set:nakama.api.AccountGameCenter.player_id)
}
inline std::string* AccountGameCenter::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:nakama.api.AccountGameCenter.player_id)
  return _internal_mutable_player_id();
}
inline const std::string& AccountGameCenter::_internal_player_id() const {
  return player_id_.Get();
}
inline void AccountGameCenter::_internal_set_player_id(const std::string& value) {
  
  player_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AccountGameCenter::set_player_id(std::string&& value) {
  
  player_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.AccountGameCenter.player_id)
}
inline void AccountGameCenter::set_player_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  player_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.AccountGameCenter.player_id)
}
inline void AccountGameCenter::set_player_id(const char* value,
    size_t size) {
  
  player_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.AccountGameCenter.player_id)
}
inline std::string* AccountGameCenter::_internal_mutable_player_id() {
  
  return player_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AccountGameCenter::release_player_id() {
  // @@protoc_insertion_point(field_release:nakama.api.AccountGameCenter.player_id)
  return player_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AccountGameCenter::set_allocated_player_id(std::string* player_id) {
  if (player_id != nullptr) {
    
  } else {
    
  }
  player_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), player_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.AccountGameCenter.player_id)
}

// string bundle_id = 2;
inline void AccountGameCenter::clear_bundle_id() {
  bundle_id_.ClearToEmpty();
}
inline const std::string& AccountGameCenter::bundle_id() const {
  // @@protoc_insertion_point(field_get:nakama.api.AccountGameCenter.bundle_id)
  return _internal_bundle_id();
}
inline void AccountGameCenter::set_bundle_id(const std::string& value) {
  _internal_set_bundle_id(value);
  // @@protoc_insertion_point(field_set:nakama.api.AccountGameCenter.bundle_id)
}
inline std::string* AccountGameCenter::mutable_bundle_id() {
  // @@protoc_insertion_point(field_mutable:nakama.api.AccountGameCenter.bundle_id)
  return _internal_mutable_bundle_id();
}
inline const std::string& AccountGameCenter::_internal_bundle_id() const {
  return bundle_id_.Get();
}
inline void AccountGameCenter::_internal_set_bundle_id(const std::string& value) {
  
  bundle_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AccountGameCenter::set_bundle_id(std::string&& value) {
  
  bundle_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.AccountGameCenter.bundle_id)
}
inline void AccountGameCenter::set_bundle_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  bundle_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.AccountGameCenter.bundle_id)
}
inline void AccountGameCenter::set_bundle_id(const char* value,
    size_t size) {
  
  bundle_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.AccountGameCenter.bundle_id)
}
inline std::string* AccountGameCenter::_internal_mutable_bundle_id() {
  
  return bundle_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AccountGameCenter::release_bundle_id() {
  // @@protoc_insertion_point(field_release:nakama.api.AccountGameCenter.bundle_id)
  return bundle_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AccountGameCenter::set_allocated_bundle_id(std::string* bundle_id) {
  if (bundle_id != nullptr) {
    
  } else {
    
  }
  bundle_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bundle_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.AccountGameCenter.bundle_id)
}

// int64 timestamp_seconds = 3;
inline void AccountGameCenter::clear_timestamp_seconds() {
  timestamp_seconds_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AccountGameCenter::_internal_timestamp_seconds() const {
  return timestamp_seconds_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AccountGameCenter::timestamp_seconds() const {
  // @@protoc_insertion_point(field_get:nakama.api.AccountGameCenter.timestamp_seconds)
  return _internal_timestamp_seconds();
}
inline void AccountGameCenter::_internal_set_timestamp_seconds(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  timestamp_seconds_ = value;
}
inline void AccountGameCenter::set_timestamp_seconds(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_timestamp_seconds(value);
  // @@protoc_insertion_point(field_set:nakama.api.AccountGameCenter.timestamp_seconds)
}

// string salt = 4;
inline void AccountGameCenter::clear_salt() {
  salt_.ClearToEmpty();
}
inline const std::string& AccountGameCenter::salt() const {
  // @@protoc_insertion_point(field_get:nakama.api.AccountGameCenter.salt)
  return _internal_salt();
}
inline void AccountGameCenter::set_salt(const std::string& value) {
  _internal_set_salt(value);
  // @@protoc_insertion_point(field_set:nakama.api.AccountGameCenter.salt)
}
inline std::string* AccountGameCenter::mutable_salt() {
  // @@protoc_insertion_point(field_mutable:nakama.api.AccountGameCenter.salt)
  return _internal_mutable_salt();
}
inline const std::string& AccountGameCenter::_internal_salt() const {
  return salt_.Get();
}
inline void AccountGameCenter::_internal_set_salt(const std::string& value) {
  
  salt_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AccountGameCenter::set_salt(std::string&& value) {
  
  salt_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.AccountGameCenter.salt)
}
inline void AccountGameCenter::set_salt(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  salt_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.AccountGameCenter.salt)
}
inline void AccountGameCenter::set_salt(const char* value,
    size_t size) {
  
  salt_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.AccountGameCenter.salt)
}
inline std::string* AccountGameCenter::_internal_mutable_salt() {
  
  return salt_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AccountGameCenter::release_salt() {
  // @@protoc_insertion_point(field_release:nakama.api.AccountGameCenter.salt)
  return salt_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AccountGameCenter::set_allocated_salt(std::string* salt) {
  if (salt != nullptr) {
    
  } else {
    
  }
  salt_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), salt,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.AccountGameCenter.salt)
}

// string signature = 5;
inline void AccountGameCenter::clear_signature() {
  signature_.ClearToEmpty();
}
inline const std::string& AccountGameCenter::signature() const {
  // @@protoc_insertion_point(field_get:nakama.api.AccountGameCenter.signature)
  return _internal_signature();
}
inline void AccountGameCenter::set_signature(const std::string& value) {
  _internal_set_signature(value);
  // @@protoc_insertion_point(field_set:nakama.api.AccountGameCenter.signature)
}
inline std::string* AccountGameCenter::mutable_signature() {
  // @@protoc_insertion_point(field_mutable:nakama.api.AccountGameCenter.signature)
  return _internal_mutable_signature();
}
inline const std::string& AccountGameCenter::_internal_signature() const {
  return signature_.Get();
}
inline void AccountGameCenter::_internal_set_signature(const std::string& value) {
  
  signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AccountGameCenter::set_signature(std::string&& value) {
  
  signature_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.AccountGameCenter.signature)
}
inline void AccountGameCenter::set_signature(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.AccountGameCenter.signature)
}
inline void AccountGameCenter::set_signature(const char* value,
    size_t size) {
  
  signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.AccountGameCenter.signature)
}
inline std::string* AccountGameCenter::_internal_mutable_signature() {
  
  return signature_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AccountGameCenter::release_signature() {
  // @@protoc_insertion_point(field_release:nakama.api.AccountGameCenter.signature)
  return signature_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AccountGameCenter::set_allocated_signature(std::string* signature) {
  if (signature != nullptr) {
    
  } else {
    
  }
  signature_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signature,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.AccountGameCenter.signature)
}

// string public_key_url = 6;
inline void AccountGameCenter::clear_public_key_url() {
  public_key_url_.ClearToEmpty();
}
inline const std::string& AccountGameCenter::public_key_url() const {
  // @@protoc_insertion_point(field_get:nakama.api.AccountGameCenter.public_key_url)
  return _internal_public_key_url();
}
inline void AccountGameCenter::set_public_key_url(const std::string& value) {
  _internal_set_public_key_url(value);
  // @@protoc_insertion_point(field_set:nakama.api.AccountGameCenter.public_key_url)
}
inline std::string* AccountGameCenter::mutable_public_key_url() {
  // @@protoc_insertion_point(field_mutable:nakama.api.AccountGameCenter.public_key_url)
  return _internal_mutable_public_key_url();
}
inline const std::string& AccountGameCenter::_internal_public_key_url() const {
  return public_key_url_.Get();
}
inline void AccountGameCenter::_internal_set_public_key_url(const std::string& value) {
  
  public_key_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AccountGameCenter::set_public_key_url(std::string&& value) {
  
  public_key_url_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.AccountGameCenter.public_key_url)
}
inline void AccountGameCenter::set_public_key_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  public_key_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.AccountGameCenter.public_key_url)
}
inline void AccountGameCenter::set_public_key_url(const char* value,
    size_t size) {
  
  public_key_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.AccountGameCenter.public_key_url)
}
inline std::string* AccountGameCenter::_internal_mutable_public_key_url() {
  
  return public_key_url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AccountGameCenter::release_public_key_url() {
  // @@protoc_insertion_point(field_release:nakama.api.AccountGameCenter.public_key_url)
  return public_key_url_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AccountGameCenter::set_allocated_public_key_url(std::string* public_key_url) {
  if (public_key_url != nullptr) {
    
  } else {
    
  }
  public_key_url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), public_key_url,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.AccountGameCenter.public_key_url)
}

// map<string, string> vars = 7;
inline int AccountGameCenter::_internal_vars_size() const {
  return vars_.size();
}
inline int AccountGameCenter::vars_size() const {
  return _internal_vars_size();
}
inline void AccountGameCenter::clear_vars() {
  vars_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
AccountGameCenter::_internal_vars() const {
  return vars_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
AccountGameCenter::vars() const {
  // @@protoc_insertion_point(field_map:nakama.api.AccountGameCenter.vars)
  return _internal_vars();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
AccountGameCenter::_internal_mutable_vars() {
  return vars_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
AccountGameCenter::mutable_vars() {
  // @@protoc_insertion_point(field_mutable_map:nakama.api.AccountGameCenter.vars)
  return _internal_mutable_vars();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// AccountGoogle

// string token = 1;
inline void AccountGoogle::clear_token() {
  token_.ClearToEmpty();
}
inline const std::string& AccountGoogle::token() const {
  // @@protoc_insertion_point(field_get:nakama.api.AccountGoogle.token)
  return _internal_token();
}
inline void AccountGoogle::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:nakama.api.AccountGoogle.token)
}
inline std::string* AccountGoogle::mutable_token() {
  // @@protoc_insertion_point(field_mutable:nakama.api.AccountGoogle.token)
  return _internal_mutable_token();
}
inline const std::string& AccountGoogle::_internal_token() const {
  return token_.Get();
}
inline void AccountGoogle::_internal_set_token(const std::string& value) {
  
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AccountGoogle::set_token(std::string&& value) {
  
  token_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.AccountGoogle.token)
}
inline void AccountGoogle::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.AccountGoogle.token)
}
inline void AccountGoogle::set_token(const char* value,
    size_t size) {
  
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.AccountGoogle.token)
}
inline std::string* AccountGoogle::_internal_mutable_token() {
  
  return token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AccountGoogle::release_token() {
  // @@protoc_insertion_point(field_release:nakama.api.AccountGoogle.token)
  return token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AccountGoogle::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.AccountGoogle.token)
}

// map<string, string> vars = 2;
inline int AccountGoogle::_internal_vars_size() const {
  return vars_.size();
}
inline int AccountGoogle::vars_size() const {
  return _internal_vars_size();
}
inline void AccountGoogle::clear_vars() {
  vars_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
AccountGoogle::_internal_vars() const {
  return vars_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
AccountGoogle::vars() const {
  // @@protoc_insertion_point(field_map:nakama.api.AccountGoogle.vars)
  return _internal_vars();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
AccountGoogle::_internal_mutable_vars() {
  return vars_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
AccountGoogle::mutable_vars() {
  // @@protoc_insertion_point(field_mutable_map:nakama.api.AccountGoogle.vars)
  return _internal_mutable_vars();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// AccountSteam

// string token = 1;
inline void AccountSteam::clear_token() {
  token_.ClearToEmpty();
}
inline const std::string& AccountSteam::token() const {
  // @@protoc_insertion_point(field_get:nakama.api.AccountSteam.token)
  return _internal_token();
}
inline void AccountSteam::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:nakama.api.AccountSteam.token)
}
inline std::string* AccountSteam::mutable_token() {
  // @@protoc_insertion_point(field_mutable:nakama.api.AccountSteam.token)
  return _internal_mutable_token();
}
inline const std::string& AccountSteam::_internal_token() const {
  return token_.Get();
}
inline void AccountSteam::_internal_set_token(const std::string& value) {
  
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AccountSteam::set_token(std::string&& value) {
  
  token_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.AccountSteam.token)
}
inline void AccountSteam::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.AccountSteam.token)
}
inline void AccountSteam::set_token(const char* value,
    size_t size) {
  
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.AccountSteam.token)
}
inline std::string* AccountSteam::_internal_mutable_token() {
  
  return token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AccountSteam::release_token() {
  // @@protoc_insertion_point(field_release:nakama.api.AccountSteam.token)
  return token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AccountSteam::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.AccountSteam.token)
}

// map<string, string> vars = 2;
inline int AccountSteam::_internal_vars_size() const {
  return vars_.size();
}
inline int AccountSteam::vars_size() const {
  return _internal_vars_size();
}
inline void AccountSteam::clear_vars() {
  vars_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
AccountSteam::_internal_vars() const {
  return vars_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
AccountSteam::vars() const {
  // @@protoc_insertion_point(field_map:nakama.api.AccountSteam.vars)
  return _internal_vars();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
AccountSteam::_internal_mutable_vars() {
  return vars_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
AccountSteam::mutable_vars() {
  // @@protoc_insertion_point(field_mutable_map:nakama.api.AccountSteam.vars)
  return _internal_mutable_vars();
}

// -------------------------------------------------------------------

// AddFriendsRequest

// repeated string ids = 1;
inline int AddFriendsRequest::_internal_ids_size() const {
  return ids_.size();
}
inline int AddFriendsRequest::ids_size() const {
  return _internal_ids_size();
}
inline void AddFriendsRequest::clear_ids() {
  ids_.Clear();
}
inline std::string* AddFriendsRequest::add_ids() {
  // @@protoc_insertion_point(field_add_mutable:nakama.api.AddFriendsRequest.ids)
  return _internal_add_ids();
}
inline const std::string& AddFriendsRequest::_internal_ids(int index) const {
  return ids_.Get(index);
}
inline const std::string& AddFriendsRequest::ids(int index) const {
  // @@protoc_insertion_point(field_get:nakama.api.AddFriendsRequest.ids)
  return _internal_ids(index);
}
inline std::string* AddFriendsRequest::mutable_ids(int index) {
  // @@protoc_insertion_point(field_mutable:nakama.api.AddFriendsRequest.ids)
  return ids_.Mutable(index);
}
inline void AddFriendsRequest::set_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:nakama.api.AddFriendsRequest.ids)
  ids_.Mutable(index)->assign(value);
}
inline void AddFriendsRequest::set_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:nakama.api.AddFriendsRequest.ids)
  ids_.Mutable(index)->assign(std::move(value));
}
inline void AddFriendsRequest::set_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:nakama.api.AddFriendsRequest.ids)
}
inline void AddFriendsRequest::set_ids(int index, const char* value, size_t size) {
  ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:nakama.api.AddFriendsRequest.ids)
}
inline std::string* AddFriendsRequest::_internal_add_ids() {
  return ids_.Add();
}
inline void AddFriendsRequest::add_ids(const std::string& value) {
  ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:nakama.api.AddFriendsRequest.ids)
}
inline void AddFriendsRequest::add_ids(std::string&& value) {
  ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:nakama.api.AddFriendsRequest.ids)
}
inline void AddFriendsRequest::add_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:nakama.api.AddFriendsRequest.ids)
}
inline void AddFriendsRequest::add_ids(const char* value, size_t size) {
  ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:nakama.api.AddFriendsRequest.ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
AddFriendsRequest::ids() const {
  // @@protoc_insertion_point(field_list:nakama.api.AddFriendsRequest.ids)
  return ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
AddFriendsRequest::mutable_ids() {
  // @@protoc_insertion_point(field_mutable_list:nakama.api.AddFriendsRequest.ids)
  return &ids_;
}

// repeated string usernames = 2;
inline int AddFriendsRequest::_internal_usernames_size() const {
  return usernames_.size();
}
inline int AddFriendsRequest::usernames_size() const {
  return _internal_usernames_size();
}
inline void AddFriendsRequest::clear_usernames() {
  usernames_.Clear();
}
inline std::string* AddFriendsRequest::add_usernames() {
  // @@protoc_insertion_point(field_add_mutable:nakama.api.AddFriendsRequest.usernames)
  return _internal_add_usernames();
}
inline const std::string& AddFriendsRequest::_internal_usernames(int index) const {
  return usernames_.Get(index);
}
inline const std::string& AddFriendsRequest::usernames(int index) const {
  // @@protoc_insertion_point(field_get:nakama.api.AddFriendsRequest.usernames)
  return _internal_usernames(index);
}
inline std::string* AddFriendsRequest::mutable_usernames(int index) {
  // @@protoc_insertion_point(field_mutable:nakama.api.AddFriendsRequest.usernames)
  return usernames_.Mutable(index);
}
inline void AddFriendsRequest::set_usernames(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:nakama.api.AddFriendsRequest.usernames)
  usernames_.Mutable(index)->assign(value);
}
inline void AddFriendsRequest::set_usernames(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:nakama.api.AddFriendsRequest.usernames)
  usernames_.Mutable(index)->assign(std::move(value));
}
inline void AddFriendsRequest::set_usernames(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  usernames_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:nakama.api.AddFriendsRequest.usernames)
}
inline void AddFriendsRequest::set_usernames(int index, const char* value, size_t size) {
  usernames_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:nakama.api.AddFriendsRequest.usernames)
}
inline std::string* AddFriendsRequest::_internal_add_usernames() {
  return usernames_.Add();
}
inline void AddFriendsRequest::add_usernames(const std::string& value) {
  usernames_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:nakama.api.AddFriendsRequest.usernames)
}
inline void AddFriendsRequest::add_usernames(std::string&& value) {
  usernames_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:nakama.api.AddFriendsRequest.usernames)
}
inline void AddFriendsRequest::add_usernames(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  usernames_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:nakama.api.AddFriendsRequest.usernames)
}
inline void AddFriendsRequest::add_usernames(const char* value, size_t size) {
  usernames_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:nakama.api.AddFriendsRequest.usernames)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
AddFriendsRequest::usernames() const {
  // @@protoc_insertion_point(field_list:nakama.api.AddFriendsRequest.usernames)
  return usernames_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
AddFriendsRequest::mutable_usernames() {
  // @@protoc_insertion_point(field_mutable_list:nakama.api.AddFriendsRequest.usernames)
  return &usernames_;
}

// -------------------------------------------------------------------

// AddGroupUsersRequest

// string group_id = 1;
inline void AddGroupUsersRequest::clear_group_id() {
  group_id_.ClearToEmpty();
}
inline const std::string& AddGroupUsersRequest::group_id() const {
  // @@protoc_insertion_point(field_get:nakama.api.AddGroupUsersRequest.group_id)
  return _internal_group_id();
}
inline void AddGroupUsersRequest::set_group_id(const std::string& value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:nakama.api.AddGroupUsersRequest.group_id)
}
inline std::string* AddGroupUsersRequest::mutable_group_id() {
  // @@protoc_insertion_point(field_mutable:nakama.api.AddGroupUsersRequest.group_id)
  return _internal_mutable_group_id();
}
inline const std::string& AddGroupUsersRequest::_internal_group_id() const {
  return group_id_.Get();
}
inline void AddGroupUsersRequest::_internal_set_group_id(const std::string& value) {
  
  group_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AddGroupUsersRequest::set_group_id(std::string&& value) {
  
  group_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.AddGroupUsersRequest.group_id)
}
inline void AddGroupUsersRequest::set_group_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  group_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.AddGroupUsersRequest.group_id)
}
inline void AddGroupUsersRequest::set_group_id(const char* value,
    size_t size) {
  
  group_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.AddGroupUsersRequest.group_id)
}
inline std::string* AddGroupUsersRequest::_internal_mutable_group_id() {
  
  return group_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AddGroupUsersRequest::release_group_id() {
  // @@protoc_insertion_point(field_release:nakama.api.AddGroupUsersRequest.group_id)
  return group_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddGroupUsersRequest::set_allocated_group_id(std::string* group_id) {
  if (group_id != nullptr) {
    
  } else {
    
  }
  group_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), group_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.AddGroupUsersRequest.group_id)
}

// repeated string user_ids = 2;
inline int AddGroupUsersRequest::_internal_user_ids_size() const {
  return user_ids_.size();
}
inline int AddGroupUsersRequest::user_ids_size() const {
  return _internal_user_ids_size();
}
inline void AddGroupUsersRequest::clear_user_ids() {
  user_ids_.Clear();
}
inline std::string* AddGroupUsersRequest::add_user_ids() {
  // @@protoc_insertion_point(field_add_mutable:nakama.api.AddGroupUsersRequest.user_ids)
  return _internal_add_user_ids();
}
inline const std::string& AddGroupUsersRequest::_internal_user_ids(int index) const {
  return user_ids_.Get(index);
}
inline const std::string& AddGroupUsersRequest::user_ids(int index) const {
  // @@protoc_insertion_point(field_get:nakama.api.AddGroupUsersRequest.user_ids)
  return _internal_user_ids(index);
}
inline std::string* AddGroupUsersRequest::mutable_user_ids(int index) {
  // @@protoc_insertion_point(field_mutable:nakama.api.AddGroupUsersRequest.user_ids)
  return user_ids_.Mutable(index);
}
inline void AddGroupUsersRequest::set_user_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:nakama.api.AddGroupUsersRequest.user_ids)
  user_ids_.Mutable(index)->assign(value);
}
inline void AddGroupUsersRequest::set_user_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:nakama.api.AddGroupUsersRequest.user_ids)
  user_ids_.Mutable(index)->assign(std::move(value));
}
inline void AddGroupUsersRequest::set_user_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  user_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:nakama.api.AddGroupUsersRequest.user_ids)
}
inline void AddGroupUsersRequest::set_user_ids(int index, const char* value, size_t size) {
  user_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:nakama.api.AddGroupUsersRequest.user_ids)
}
inline std::string* AddGroupUsersRequest::_internal_add_user_ids() {
  return user_ids_.Add();
}
inline void AddGroupUsersRequest::add_user_ids(const std::string& value) {
  user_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:nakama.api.AddGroupUsersRequest.user_ids)
}
inline void AddGroupUsersRequest::add_user_ids(std::string&& value) {
  user_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:nakama.api.AddGroupUsersRequest.user_ids)
}
inline void AddGroupUsersRequest::add_user_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  user_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:nakama.api.AddGroupUsersRequest.user_ids)
}
inline void AddGroupUsersRequest::add_user_ids(const char* value, size_t size) {
  user_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:nakama.api.AddGroupUsersRequest.user_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
AddGroupUsersRequest::user_ids() const {
  // @@protoc_insertion_point(field_list:nakama.api.AddGroupUsersRequest.user_ids)
  return user_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
AddGroupUsersRequest::mutable_user_ids() {
  // @@protoc_insertion_point(field_mutable_list:nakama.api.AddGroupUsersRequest.user_ids)
  return &user_ids_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// SessionRefreshRequest

// string token = 1;
inline void SessionRefreshRequest::clear_token() {
  token_.ClearToEmpty();
}
inline const std::string& SessionRefreshRequest::token() const {
  // @@protoc_insertion_point(field_get:nakama.api.SessionRefreshRequest.token)
  return _internal_token();
}
inline void SessionRefreshRequest::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:nakama.api.SessionRefreshRequest.token)
}
inline std::string* SessionRefreshRequest::mutable_token() {
  // @@protoc_insertion_point(field_mutable:nakama.api.SessionRefreshRequest.token)
  return _internal_mutable_token();
}
inline const std::string& SessionRefreshRequest::_internal_token() const {
  return token_.Get();
}
inline void SessionRefreshRequest::_internal_set_token(const std::string& value) {
  
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SessionRefreshRequest::set_token(std::string&& value) {
  
  token_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.SessionRefreshRequest.token)
}
inline void SessionRefreshRequest::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.SessionRefreshRequest.token)
}
inline void SessionRefreshRequest::set_token(const char* value,
    size_t size) {
  
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.SessionRefreshRequest.token)
}
inline std::string* SessionRefreshRequest::_internal_mutable_token() {
  
  return token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SessionRefreshRequest::release_token() {
  // @@protoc_insertion_point(field_release:nakama.api.SessionRefreshRequest.token)
  return token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SessionRefreshRequest::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.SessionRefreshRequest.token)
}

// map<string, string> vars = 2;
inline int SessionRefreshRequest::_internal_vars_size() const {
  return vars_.size();
}
inline int SessionRefreshRequest::vars_size() const {
  return _internal_vars_size();
}
inline void SessionRefreshRequest::clear_vars() {
  vars_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
SessionRefreshRequest::_internal_vars() const {
  return vars_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
SessionRefreshRequest::vars() const {
  // @@protoc_insertion_point(field_map:nakama.api.SessionRefreshRequest.vars)
  return _internal_vars();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
SessionRefreshRequest::_internal_mutable_vars() {
  return vars_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
SessionRefreshRequest::mutable_vars() {
  // @@protoc_insertion_point(field_mutable_map:nakama.api.SessionRefreshRequest.vars)
  return _internal_mutable_vars();
}

// -------------------------------------------------------------------

// SessionLogoutRequest

// string token = 1;
inline void SessionLogoutRequest::clear_token() {
  token_.ClearToEmpty();
}
inline const std::string& SessionLogoutRequest::token() const {
  // @@protoc_insertion_point(field_get:nakama.api.SessionLogoutRequest.token)
  return _internal_token();
}
inline void SessionLogoutRequest::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:nakama.api.SessionLogoutRequest.token)
}
inline std::string* SessionLogoutRequest::mutable_token() {
  // @@protoc_insertion_point(field_mutable:nakama.api.SessionLogoutRequest.token)
  return _internal_mutable_token();
}
inline const std::string& SessionLogoutRequest::_internal_token() const {
  return token_.Get();
}
inline void SessionLogoutRequest::_internal_set_token(const std::string& value) {
  
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SessionLogoutRequest::set_token(std::string&& value) {
  
  token_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.SessionLogoutRequest.token)
}
inline void SessionLogoutRequest::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.SessionLogoutRequest.token)
}
inline void SessionLogoutRequest::set_token(const char* value,
    size_t size) {
  
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.SessionLogoutRequest.token)
}
inline std::string* SessionLogoutRequest::_internal_mutable_token() {
  
  return token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SessionLogoutRequest::release_token() {
  // @@protoc_insertion_point(field_release:nakama.api.SessionLogoutRequest.token)
  return token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SessionLogoutRequest::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.SessionLogoutRequest.token)
}

// string refresh_token = 2;
inline void SessionLogoutRequest::clear_refresh_token() {
  refresh_token_.ClearToEmpty();
}
inline const std::string& SessionLogoutRequest::refresh_token() const {
  // @@protoc_insertion_point(field_get:nakama.api.SessionLogoutRequest.refresh_token)
  return _internal_refresh_token();
}
inline void SessionLogoutRequest::set_refresh_token(const std::string& value) {
  _internal_set_refresh_token(value);
  // @@protoc_insertion_point(field_set:nakama.api.SessionLogoutRequest.refresh_token)
}
inline std::string* SessionLogoutRequest::mutable_refresh_token() {
  // @@protoc_insertion_point(field_mutable:nakama.api.SessionLogoutRequest.refresh_token)
  return _internal_mutable_refresh_token();
}
inline const std::string& SessionLogoutRequest::_internal_refresh_token() const {
  return refresh_token_.Get();
}
inline void SessionLogoutRequest::_internal_set_refresh_token(const std::string& value) {
  
  refresh_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SessionLogoutRequest::set_refresh_token(std::string&& value) {
  
  refresh_token_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.SessionLogoutRequest.refresh_token)
}
inline void SessionLogoutRequest::set_refresh_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  refresh_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.SessionLogoutRequest.refresh_token)
}
inline void SessionLogoutRequest::set_refresh_token(const char* value,
    size_t size) {
  
  refresh_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.SessionLogoutRequest.refresh_token)
}
inline std::string* SessionLogoutRequest::_internal_mutable_refresh_token() {
  
  return refresh_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SessionLogoutRequest::release_refresh_token() {
  // @@protoc_insertion_point(field_release:nakama.api.SessionLogoutRequest.refresh_token)
  return refresh_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SessionLogoutRequest::set_allocated_refresh_token(std::string* refresh_token) {
  if (refresh_token != nullptr) {
    
  } else {
    
  }
  refresh_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), refresh_token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.SessionLogoutRequest.refresh_token)
}

// -------------------------------------------------------------------

// AuthenticateAppleRequest

// .nakama.api.AccountApple account = 1;
inline bool AuthenticateAppleRequest::_internal_has_account() const {
  return this != internal_default_instance() && account_ != nullptr;
}
inline bool AuthenticateAppleRequest::has_account() const {
  return _internal_has_account();
}
inline void AuthenticateAppleRequest::clear_account() {
  if (GetArena() == nullptr && account_ != nullptr) {
    delete account_;
  }
  account_ = nullptr;
}
inline const ::nakama::api::AccountApple& AuthenticateAppleRequest::_internal_account() const {
  const ::nakama::api::AccountApple* p = account_;
  return p != nullptr ? *p : reinterpret_cast<const ::nakama::api::AccountApple&>(
      ::nakama::api::_AccountApple_default_instance_);
}
inline const ::nakama::api::AccountApple& AuthenticateAppleRequest::account() const {
  // @@protoc_insertion_point(field_get:nakama.api.AuthenticateAppleRequest.account)
  return _internal_account();
}
inline void AuthenticateAppleRequest::unsafe_arena_set_allocated_account(
    ::nakama::api::AccountApple* account) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(account_);
  }
  account_ = account;
  if (account) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nakama.api.AuthenticateAppleRequest.account)
}
inline ::nakama::api::AccountApple* AuthenticateAppleRequest::release_account() {
  
  ::nakama::api::AccountApple* temp = account_;
  account_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::nakama::api::AccountApple* AuthenticateAppleRequest::unsafe_arena_release_account() {
  // @@protoc_insertion_point(field_release:nakama.api.AuthenticateAppleRequest.account)
  
  ::nakama::api::AccountApple* temp = account_;
  account_ = nullptr;
  return temp;
}
inline ::nakama::api::AccountApple* AuthenticateAppleRequest::_internal_mutable_account() {
  
  if (account_ == nullptr) {
    auto* p = CreateMaybeMessage<::nakama::api::AccountApple>(GetArena());
    account_ = p;
  }
  return account_;
}
inline ::nakama::api::AccountApple* AuthenticateAppleRequest::mutable_account() {
  // @@protoc_insertion_point(field_mutable:nakama.api.AuthenticateAppleRequest.account)
  return _internal_mutable_account();
}
inline void AuthenticateAppleRequest::set_allocated_account(::nakama::api::AccountApple* account) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete account_;
  }
  if (account) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(account);
    if (message_arena != submessage_arena) {
      account = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, account, submessage_arena);
    }
    
  } else {
    
  }
  account_ = account;
  // @@protoc_insertion_point(field_set_allocated:nakama.api.AuthenticateAppleRequest.account)
}

// .google.protobuf.BoolValue create = 2;
inline bool AuthenticateAppleRequest::_internal_has_create() const {
  return this != internal_default_instance() && create_ != nullptr;
}
inline bool AuthenticateAppleRequest::has_create() const {
  return _internal_has_create();
}
inline const PROTOBUF_NAMESPACE_ID::BoolValue& AuthenticateAppleRequest::_internal_create() const {
  const PROTOBUF_NAMESPACE_ID::BoolValue* p = create_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::BoolValue&>(
      PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::BoolValue& AuthenticateAppleRequest::create() const {
  // @@protoc_insertion_point(field_get:nakama.api.AuthenticateAppleRequest.create)
  return _internal_create();
}
inline void AuthenticateAppleRequest::unsafe_arena_set_allocated_create(
    PROTOBUF_NAMESPACE_ID::BoolValue* create) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(create_);
  }
  create_ = create;
  if (create) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nakama.api.AuthenticateAppleRequest.create)
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* AuthenticateAppleRequest::release_create() {
  
  PROTOBUF_NAMESPACE_ID::BoolValue* temp = create_;
  create_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* AuthenticateAppleRequest::unsafe_arena_release_create() {
  // @@protoc_insertion_point(field_release:nakama.api.AuthenticateAppleRequest.create)
  
  PROTOBUF_NAMESPACE_ID::BoolValue* temp = create_;
  create_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* AuthenticateAppleRequest::_internal_mutable_create() {
  
  if (create_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::BoolValue>(GetArena());
    create_ = p;
  }
  return create_;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* AuthenticateAppleRequest::mutable_create() {
  // @@protoc_insertion_point(field_mutable:nakama.api.AuthenticateAppleRequest.create)
  return _internal_mutable_create();
}
inline void AuthenticateAppleRequest::set_allocated_create(PROTOBUF_NAMESPACE_ID::BoolValue* create) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(create_);
  }
  if (create) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(create)->GetArena();
    if (message_arena != submessage_arena) {
      create = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, create, submessage_arena);
    }
    
  } else {
    
  }
  create_ = create;
  // @@protoc_insertion_point(field_set_allocated:nakama.api.AuthenticateAppleRequest.create)
}

// string username = 3;
inline void AuthenticateAppleRequest::clear_username() {
  username_.ClearToEmpty();
}
inline const std::string& AuthenticateAppleRequest::username() const {
  // @@protoc_insertion_point(field_get:nakama.api.AuthenticateAppleRequest.username)
  return _internal_username();
}
inline void AuthenticateAppleRequest::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:nakama.api.AuthenticateAppleRequest.username)
}
inline std::string* AuthenticateAppleRequest::mutable_username() {
  // @@protoc_insertion_point(field_mutable:nakama.api.AuthenticateAppleRequest.username)
  return _internal_mutable_username();
}
inline const std::string& AuthenticateAppleRequest::_internal_username() const {
  return username_.Get();
}
inline void AuthenticateAppleRequest::_internal_set_username(const std::string& value) {
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AuthenticateAppleRequest::set_username(std::string&& value) {
  
  username_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.AuthenticateAppleRequest.username)
}
inline void AuthenticateAppleRequest::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.AuthenticateAppleRequest.username)
}
inline void AuthenticateAppleRequest::set_username(const char* value,
    size_t size) {
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.AuthenticateAppleRequest.username)
}
inline std::string* AuthenticateAppleRequest::_internal_mutable_username() {
  
  return username_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AuthenticateAppleRequest::release_username() {
  // @@protoc_insertion_point(field_release:nakama.api.AuthenticateAppleRequest.username)
  return username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AuthenticateAppleRequest::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.AuthenticateAppleRequest.username)
}

// -------------------------------------------------------------------

// AuthenticateCustomRequest

// .nakama.api.AccountCustom account = 1;
inline bool AuthenticateCustomRequest::_internal_has_account() const {
  return this != internal_default_instance() && account_ != nullptr;
}
inline bool AuthenticateCustomRequest::has_account() const {
  return _internal_has_account();
}
inline void AuthenticateCustomRequest::clear_account() {
  if (GetArena() == nullptr && account_ != nullptr) {
    delete account_;
  }
  account_ = nullptr;
}
inline const ::nakama::api::AccountCustom& AuthenticateCustomRequest::_internal_account() const {
  const ::nakama::api::AccountCustom* p = account_;
  return p != nullptr ? *p : reinterpret_cast<const ::nakama::api::AccountCustom&>(
      ::nakama::api::_AccountCustom_default_instance_);
}
inline const ::nakama::api::AccountCustom& AuthenticateCustomRequest::account() const {
  // @@protoc_insertion_point(field_get:nakama.api.AuthenticateCustomRequest.account)
  return _internal_account();
}
inline void AuthenticateCustomRequest::unsafe_arena_set_allocated_account(
    ::nakama::api::AccountCustom* account) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(account_);
  }
  account_ = account;
  if (account) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nakama.api.AuthenticateCustomRequest.account)
}
inline ::nakama::api::AccountCustom* AuthenticateCustomRequest::release_account() {
  
  ::nakama::api::AccountCustom* temp = account_;
  account_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::nakama::api::AccountCustom* AuthenticateCustomRequest::unsafe_arena_release_account() {
  // @@protoc_insertion_point(field_release:nakama.api.AuthenticateCustomRequest.account)
  
  ::nakama::api::AccountCustom* temp = account_;
  account_ = nullptr;
  return temp;
}
inline ::nakama::api::AccountCustom* AuthenticateCustomRequest::_internal_mutable_account() {
  
  if (account_ == nullptr) {
    auto* p = CreateMaybeMessage<::nakama::api::AccountCustom>(GetArena());
    account_ = p;
  }
  return account_;
}
inline ::nakama::api::AccountCustom* AuthenticateCustomRequest::mutable_account() {
  // @@protoc_insertion_point(field_mutable:nakama.api.AuthenticateCustomRequest.account)
  return _internal_mutable_account();
}
inline void AuthenticateCustomRequest::set_allocated_account(::nakama::api::AccountCustom* account) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete account_;
  }
  if (account) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(account);
    if (message_arena != submessage_arena) {
      account = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, account, submessage_arena);
    }
    
  } else {
    
  }
  account_ = account;
  // @@protoc_insertion_point(field_set_allocated:nakama.api.AuthenticateCustomRequest.account)
}

// .google.protobuf.BoolValue create = 2;
inline bool AuthenticateCustomRequest::_internal_has_create() const {
  return this != internal_default_instance() && create_ != nullptr;
}
inline bool AuthenticateCustomRequest::has_create() const {
  return _internal_has_create();
}
inline const PROTOBUF_NAMESPACE_ID::BoolValue& AuthenticateCustomRequest::_internal_create() const {
  const PROTOBUF_NAMESPACE_ID::BoolValue* p = create_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::BoolValue&>(
      PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::BoolValue& AuthenticateCustomRequest::create() const {
  // @@protoc_insertion_point(field_get:nakama.api.AuthenticateCustomRequest.create)
  return _internal_create();
}
inline void AuthenticateCustomRequest::unsafe_arena_set_allocated_create(
    PROTOBUF_NAMESPACE_ID::BoolValue* create) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(create_);
  }
  create_ = create;
  if (create) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nakama.api.AuthenticateCustomRequest.create)
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* AuthenticateCustomRequest::release_create() {
  
  PROTOBUF_NAMESPACE_ID::BoolValue* temp = create_;
  create_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* AuthenticateCustomRequest::unsafe_arena_release_create() {
  // @@protoc_insertion_point(field_release:nakama.api.AuthenticateCustomRequest.create)
  
  PROTOBUF_NAMESPACE_ID::BoolValue* temp = create_;
  create_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* AuthenticateCustomRequest::_internal_mutable_create() {
  
  if (create_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::BoolValue>(GetArena());
    create_ = p;
  }
  return create_;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* AuthenticateCustomRequest::mutable_create() {
  // @@protoc_insertion_point(field_mutable:nakama.api.AuthenticateCustomRequest.create)
  return _internal_mutable_create();
}
inline void AuthenticateCustomRequest::set_allocated_create(PROTOBUF_NAMESPACE_ID::BoolValue* create) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(create_);
  }
  if (create) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(create)->GetArena();
    if (message_arena != submessage_arena) {
      create = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, create, submessage_arena);
    }
    
  } else {
    
  }
  create_ = create;
  // @@protoc_insertion_point(field_set_allocated:nakama.api.AuthenticateCustomRequest.create)
}

// string username = 3;
inline void AuthenticateCustomRequest::clear_username() {
  username_.ClearToEmpty();
}
inline const std::string& AuthenticateCustomRequest::username() const {
  // @@protoc_insertion_point(field_get:nakama.api.AuthenticateCustomRequest.username)
  return _internal_username();
}
inline void AuthenticateCustomRequest::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:nakama.api.AuthenticateCustomRequest.username)
}
inline std::string* AuthenticateCustomRequest::mutable_username() {
  // @@protoc_insertion_point(field_mutable:nakama.api.AuthenticateCustomRequest.username)
  return _internal_mutable_username();
}
inline const std::string& AuthenticateCustomRequest::_internal_username() const {
  return username_.Get();
}
inline void AuthenticateCustomRequest::_internal_set_username(const std::string& value) {
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AuthenticateCustomRequest::set_username(std::string&& value) {
  
  username_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.AuthenticateCustomRequest.username)
}
inline void AuthenticateCustomRequest::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.AuthenticateCustomRequest.username)
}
inline void AuthenticateCustomRequest::set_username(const char* value,
    size_t size) {
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.AuthenticateCustomRequest.username)
}
inline std::string* AuthenticateCustomRequest::_internal_mutable_username() {
  
  return username_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AuthenticateCustomRequest::release_username() {
  // @@protoc_insertion_point(field_release:nakama.api.AuthenticateCustomRequest.username)
  return username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AuthenticateCustomRequest::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.AuthenticateCustomRequest.username)
}

// -------------------------------------------------------------------

// AuthenticateDeviceRequest

// .nakama.api.AccountDevice account = 1;
inline bool AuthenticateDeviceRequest::_internal_has_account() const {
  return this != internal_default_instance() && account_ != nullptr;
}
inline bool AuthenticateDeviceRequest::has_account() const {
  return _internal_has_account();
}
inline void AuthenticateDeviceRequest::clear_account() {
  if (GetArena() == nullptr && account_ != nullptr) {
    delete account_;
  }
  account_ = nullptr;
}
inline const ::nakama::api::AccountDevice& AuthenticateDeviceRequest::_internal_account() const {
  const ::nakama::api::AccountDevice* p = account_;
  return p != nullptr ? *p : reinterpret_cast<const ::nakama::api::AccountDevice&>(
      ::nakama::api::_AccountDevice_default_instance_);
}
inline const ::nakama::api::AccountDevice& AuthenticateDeviceRequest::account() const {
  // @@protoc_insertion_point(field_get:nakama.api.AuthenticateDeviceRequest.account)
  return _internal_account();
}
inline void AuthenticateDeviceRequest::unsafe_arena_set_allocated_account(
    ::nakama::api::AccountDevice* account) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(account_);
  }
  account_ = account;
  if (account) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nakama.api.AuthenticateDeviceRequest.account)
}
inline ::nakama::api::AccountDevice* AuthenticateDeviceRequest::release_account() {
  
  ::nakama::api::AccountDevice* temp = account_;
  account_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::nakama::api::AccountDevice* AuthenticateDeviceRequest::unsafe_arena_release_account() {
  // @@protoc_insertion_point(field_release:nakama.api.AuthenticateDeviceRequest.account)
  
  ::nakama::api::AccountDevice* temp = account_;
  account_ = nullptr;
  return temp;
}
inline ::nakama::api::AccountDevice* AuthenticateDeviceRequest::_internal_mutable_account() {
  
  if (account_ == nullptr) {
    auto* p = CreateMaybeMessage<::nakama::api::AccountDevice>(GetArena());
    account_ = p;
  }
  return account_;
}
inline ::nakama::api::AccountDevice* AuthenticateDeviceRequest::mutable_account() {
  // @@protoc_insertion_point(field_mutable:nakama.api.AuthenticateDeviceRequest.account)
  return _internal_mutable_account();
}
inline void AuthenticateDeviceRequest::set_allocated_account(::nakama::api::AccountDevice* account) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete account_;
  }
  if (account) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(account);
    if (message_arena != submessage_arena) {
      account = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, account, submessage_arena);
    }
    
  } else {
    
  }
  account_ = account;
  // @@protoc_insertion_point(field_set_allocated:nakama.api.AuthenticateDeviceRequest.account)
}

// .google.protobuf.BoolValue create = 2;
inline bool AuthenticateDeviceRequest::_internal_has_create() const {
  return this != internal_default_instance() && create_ != nullptr;
}
inline bool AuthenticateDeviceRequest::has_create() const {
  return _internal_has_create();
}
inline const PROTOBUF_NAMESPACE_ID::BoolValue& AuthenticateDeviceRequest::_internal_create() const {
  const PROTOBUF_NAMESPACE_ID::BoolValue* p = create_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::BoolValue&>(
      PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::BoolValue& AuthenticateDeviceRequest::create() const {
  // @@protoc_insertion_point(field_get:nakama.api.AuthenticateDeviceRequest.create)
  return _internal_create();
}
inline void AuthenticateDeviceRequest::unsafe_arena_set_allocated_create(
    PROTOBUF_NAMESPACE_ID::BoolValue* create) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(create_);
  }
  create_ = create;
  if (create) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nakama.api.AuthenticateDeviceRequest.create)
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* AuthenticateDeviceRequest::release_create() {
  
  PROTOBUF_NAMESPACE_ID::BoolValue* temp = create_;
  create_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* AuthenticateDeviceRequest::unsafe_arena_release_create() {
  // @@protoc_insertion_point(field_release:nakama.api.AuthenticateDeviceRequest.create)
  
  PROTOBUF_NAMESPACE_ID::BoolValue* temp = create_;
  create_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* AuthenticateDeviceRequest::_internal_mutable_create() {
  
  if (create_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::BoolValue>(GetArena());
    create_ = p;
  }
  return create_;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* AuthenticateDeviceRequest::mutable_create() {
  // @@protoc_insertion_point(field_mutable:nakama.api.AuthenticateDeviceRequest.create)
  return _internal_mutable_create();
}
inline void AuthenticateDeviceRequest::set_allocated_create(PROTOBUF_NAMESPACE_ID::BoolValue* create) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(create_);
  }
  if (create) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(create)->GetArena();
    if (message_arena != submessage_arena) {
      create = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, create, submessage_arena);
    }
    
  } else {
    
  }
  create_ = create;
  // @@protoc_insertion_point(field_set_allocated:nakama.api.AuthenticateDeviceRequest.create)
}

// string username = 3;
inline void AuthenticateDeviceRequest::clear_username() {
  username_.ClearToEmpty();
}
inline const std::string& AuthenticateDeviceRequest::username() const {
  // @@protoc_insertion_point(field_get:nakama.api.AuthenticateDeviceRequest.username)
  return _internal_username();
}
inline void AuthenticateDeviceRequest::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:nakama.api.AuthenticateDeviceRequest.username)
}
inline std::string* AuthenticateDeviceRequest::mutable_username() {
  // @@protoc_insertion_point(field_mutable:nakama.api.AuthenticateDeviceRequest.username)
  return _internal_mutable_username();
}
inline const std::string& AuthenticateDeviceRequest::_internal_username() const {
  return username_.Get();
}
inline void AuthenticateDeviceRequest::_internal_set_username(const std::string& value) {
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AuthenticateDeviceRequest::set_username(std::string&& value) {
  
  username_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.AuthenticateDeviceRequest.username)
}
inline void AuthenticateDeviceRequest::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.AuthenticateDeviceRequest.username)
}
inline void AuthenticateDeviceRequest::set_username(const char* value,
    size_t size) {
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.AuthenticateDeviceRequest.username)
}
inline std::string* AuthenticateDeviceRequest::_internal_mutable_username() {
  
  return username_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AuthenticateDeviceRequest::release_username() {
  // @@protoc_insertion_point(field_release:nakama.api.AuthenticateDeviceRequest.username)
  return username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AuthenticateDeviceRequest::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.AuthenticateDeviceRequest.username)
}

// -------------------------------------------------------------------

// AuthenticateEmailRequest

// .nakama.api.AccountEmail account = 1;
inline bool AuthenticateEmailRequest::_internal_has_account() const {
  return this != internal_default_instance() && account_ != nullptr;
}
inline bool AuthenticateEmailRequest::has_account() const {
  return _internal_has_account();
}
inline void AuthenticateEmailRequest::clear_account() {
  if (GetArena() == nullptr && account_ != nullptr) {
    delete account_;
  }
  account_ = nullptr;
}
inline const ::nakama::api::AccountEmail& AuthenticateEmailRequest::_internal_account() const {
  const ::nakama::api::AccountEmail* p = account_;
  return p != nullptr ? *p : reinterpret_cast<const ::nakama::api::AccountEmail&>(
      ::nakama::api::_AccountEmail_default_instance_);
}
inline const ::nakama::api::AccountEmail& AuthenticateEmailRequest::account() const {
  // @@protoc_insertion_point(field_get:nakama.api.AuthenticateEmailRequest.account)
  return _internal_account();
}
inline void AuthenticateEmailRequest::unsafe_arena_set_allocated_account(
    ::nakama::api::AccountEmail* account) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(account_);
  }
  account_ = account;
  if (account) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nakama.api.AuthenticateEmailRequest.account)
}
inline ::nakama::api::AccountEmail* AuthenticateEmailRequest::release_account() {
  
  ::nakama::api::AccountEmail* temp = account_;
  account_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::nakama::api::AccountEmail* AuthenticateEmailRequest::unsafe_arena_release_account() {
  // @@protoc_insertion_point(field_release:nakama.api.AuthenticateEmailRequest.account)
  
  ::nakama::api::AccountEmail* temp = account_;
  account_ = nullptr;
  return temp;
}
inline ::nakama::api::AccountEmail* AuthenticateEmailRequest::_internal_mutable_account() {
  
  if (account_ == nullptr) {
    auto* p = CreateMaybeMessage<::nakama::api::AccountEmail>(GetArena());
    account_ = p;
  }
  return account_;
}
inline ::nakama::api::AccountEmail* AuthenticateEmailRequest::mutable_account() {
  // @@protoc_insertion_point(field_mutable:nakama.api.AuthenticateEmailRequest.account)
  return _internal_mutable_account();
}
inline void AuthenticateEmailRequest::set_allocated_account(::nakama::api::AccountEmail* account) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete account_;
  }
  if (account) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(account);
    if (message_arena != submessage_arena) {
      account = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, account, submessage_arena);
    }
    
  } else {
    
  }
  account_ = account;
  // @@protoc_insertion_point(field_set_allocated:nakama.api.AuthenticateEmailRequest.account)
}

// .google.protobuf.BoolValue create = 2;
inline bool AuthenticateEmailRequest::_internal_has_create() const {
  return this != internal_default_instance() && create_ != nullptr;
}
inline bool AuthenticateEmailRequest::has_create() const {
  return _internal_has_create();
}
inline const PROTOBUF_NAMESPACE_ID::BoolValue& AuthenticateEmailRequest::_internal_create() const {
  const PROTOBUF_NAMESPACE_ID::BoolValue* p = create_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::BoolValue&>(
      PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::BoolValue& AuthenticateEmailRequest::create() const {
  // @@protoc_insertion_point(field_get:nakama.api.AuthenticateEmailRequest.create)
  return _internal_create();
}
inline void AuthenticateEmailRequest::unsafe_arena_set_allocated_create(
    PROTOBUF_NAMESPACE_ID::BoolValue* create) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(create_);
  }
  create_ = create;
  if (create) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nakama.api.AuthenticateEmailRequest.create)
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* AuthenticateEmailRequest::release_create() {
  
  PROTOBUF_NAMESPACE_ID::BoolValue* temp = create_;
  create_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* AuthenticateEmailRequest::unsafe_arena_release_create() {
  // @@protoc_insertion_point(field_release:nakama.api.AuthenticateEmailRequest.create)
  
  PROTOBUF_NAMESPACE_ID::BoolValue* temp = create_;
  create_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* AuthenticateEmailRequest::_internal_mutable_create() {
  
  if (create_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::BoolValue>(GetArena());
    create_ = p;
  }
  return create_;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* AuthenticateEmailRequest::mutable_create() {
  // @@protoc_insertion_point(field_mutable:nakama.api.AuthenticateEmailRequest.create)
  return _internal_mutable_create();
}
inline void AuthenticateEmailRequest::set_allocated_create(PROTOBUF_NAMESPACE_ID::BoolValue* create) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(create_);
  }
  if (create) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(create)->GetArena();
    if (message_arena != submessage_arena) {
      create = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, create, submessage_arena);
    }
    
  } else {
    
  }
  create_ = create;
  // @@protoc_insertion_point(field_set_allocated:nakama.api.AuthenticateEmailRequest.create)
}

// string username = 3;
inline void AuthenticateEmailRequest::clear_username() {
  username_.ClearToEmpty();
}
inline const std::string& AuthenticateEmailRequest::username() const {
  // @@protoc_insertion_point(field_get:nakama.api.AuthenticateEmailRequest.username)
  return _internal_username();
}
inline void AuthenticateEmailRequest::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:nakama.api.AuthenticateEmailRequest.username)
}
inline std::string* AuthenticateEmailRequest::mutable_username() {
  // @@protoc_insertion_point(field_mutable:nakama.api.AuthenticateEmailRequest.username)
  return _internal_mutable_username();
}
inline const std::string& AuthenticateEmailRequest::_internal_username() const {
  return username_.Get();
}
inline void AuthenticateEmailRequest::_internal_set_username(const std::string& value) {
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AuthenticateEmailRequest::set_username(std::string&& value) {
  
  username_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.AuthenticateEmailRequest.username)
}
inline void AuthenticateEmailRequest::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.AuthenticateEmailRequest.username)
}
inline void AuthenticateEmailRequest::set_username(const char* value,
    size_t size) {
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.AuthenticateEmailRequest.username)
}
inline std::string* AuthenticateEmailRequest::_internal_mutable_username() {
  
  return username_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AuthenticateEmailRequest::release_username() {
  // @@protoc_insertion_point(field_release:nakama.api.AuthenticateEmailRequest.username)
  return username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AuthenticateEmailRequest::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.AuthenticateEmailRequest.username)
}

// -------------------------------------------------------------------

// AuthenticateFacebookRequest

// .nakama.api.AccountFacebook account = 1;
inline bool AuthenticateFacebookRequest::_internal_has_account() const {
  return this != internal_default_instance() && account_ != nullptr;
}
inline bool AuthenticateFacebookRequest::has_account() const {
  return _internal_has_account();
}
inline void AuthenticateFacebookRequest::clear_account() {
  if (GetArena() == nullptr && account_ != nullptr) {
    delete account_;
  }
  account_ = nullptr;
}
inline const ::nakama::api::AccountFacebook& AuthenticateFacebookRequest::_internal_account() const {
  const ::nakama::api::AccountFacebook* p = account_;
  return p != nullptr ? *p : reinterpret_cast<const ::nakama::api::AccountFacebook&>(
      ::nakama::api::_AccountFacebook_default_instance_);
}
inline const ::nakama::api::AccountFacebook& AuthenticateFacebookRequest::account() const {
  // @@protoc_insertion_point(field_get:nakama.api.AuthenticateFacebookRequest.account)
  return _internal_account();
}
inline void AuthenticateFacebookRequest::unsafe_arena_set_allocated_account(
    ::nakama::api::AccountFacebook* account) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(account_);
  }
  account_ = account;
  if (account) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nakama.api.AuthenticateFacebookRequest.account)
}
inline ::nakama::api::AccountFacebook* AuthenticateFacebookRequest::release_account() {
  
  ::nakama::api::AccountFacebook* temp = account_;
  account_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::nakama::api::AccountFacebook* AuthenticateFacebookRequest::unsafe_arena_release_account() {
  // @@protoc_insertion_point(field_release:nakama.api.AuthenticateFacebookRequest.account)
  
  ::nakama::api::AccountFacebook* temp = account_;
  account_ = nullptr;
  return temp;
}
inline ::nakama::api::AccountFacebook* AuthenticateFacebookRequest::_internal_mutable_account() {
  
  if (account_ == nullptr) {
    auto* p = CreateMaybeMessage<::nakama::api::AccountFacebook>(GetArena());
    account_ = p;
  }
  return account_;
}
inline ::nakama::api::AccountFacebook* AuthenticateFacebookRequest::mutable_account() {
  // @@protoc_insertion_point(field_mutable:nakama.api.AuthenticateFacebookRequest.account)
  return _internal_mutable_account();
}
inline void AuthenticateFacebookRequest::set_allocated_account(::nakama::api::AccountFacebook* account) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete account_;
  }
  if (account) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(account);
    if (message_arena != submessage_arena) {
      account = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, account, submessage_arena);
    }
    
  } else {
    
  }
  account_ = account;
  // @@protoc_insertion_point(field_set_allocated:nakama.api.AuthenticateFacebookRequest.account)
}

// .google.protobuf.BoolValue create = 2;
inline bool AuthenticateFacebookRequest::_internal_has_create() const {
  return this != internal_default_instance() && create_ != nullptr;
}
inline bool AuthenticateFacebookRequest::has_create() const {
  return _internal_has_create();
}
inline const PROTOBUF_NAMESPACE_ID::BoolValue& AuthenticateFacebookRequest::_internal_create() const {
  const PROTOBUF_NAMESPACE_ID::BoolValue* p = create_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::BoolValue&>(
      PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::BoolValue& AuthenticateFacebookRequest::create() const {
  // @@protoc_insertion_point(field_get:nakama.api.AuthenticateFacebookRequest.create)
  return _internal_create();
}
inline void AuthenticateFacebookRequest::unsafe_arena_set_allocated_create(
    PROTOBUF_NAMESPACE_ID::BoolValue* create) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(create_);
  }
  create_ = create;
  if (create) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nakama.api.AuthenticateFacebookRequest.create)
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* AuthenticateFacebookRequest::release_create() {
  
  PROTOBUF_NAMESPACE_ID::BoolValue* temp = create_;
  create_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* AuthenticateFacebookRequest::unsafe_arena_release_create() {
  // @@protoc_insertion_point(field_release:nakama.api.AuthenticateFacebookRequest.create)
  
  PROTOBUF_NAMESPACE_ID::BoolValue* temp = create_;
  create_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* AuthenticateFacebookRequest::_internal_mutable_create() {
  
  if (create_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::BoolValue>(GetArena());
    create_ = p;
  }
  return create_;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* AuthenticateFacebookRequest::mutable_create() {
  // @@protoc_insertion_point(field_mutable:nakama.api.AuthenticateFacebookRequest.create)
  return _internal_mutable_create();
}
inline void AuthenticateFacebookRequest::set_allocated_create(PROTOBUF_NAMESPACE_ID::BoolValue* create) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(create_);
  }
  if (create) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(create)->GetArena();
    if (message_arena != submessage_arena) {
      create = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, create, submessage_arena);
    }
    
  } else {
    
  }
  create_ = create;
  // @@protoc_insertion_point(field_set_allocated:nakama.api.AuthenticateFacebookRequest.create)
}

// string username = 3;
inline void AuthenticateFacebookRequest::clear_username() {
  username_.ClearToEmpty();
}
inline const std::string& AuthenticateFacebookRequest::username() const {
  // @@protoc_insertion_point(field_get:nakama.api.AuthenticateFacebookRequest.username)
  return _internal_username();
}
inline void AuthenticateFacebookRequest::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:nakama.api.AuthenticateFacebookRequest.username)
}
inline std::string* AuthenticateFacebookRequest::mutable_username() {
  // @@protoc_insertion_point(field_mutable:nakama.api.AuthenticateFacebookRequest.username)
  return _internal_mutable_username();
}
inline const std::string& AuthenticateFacebookRequest::_internal_username() const {
  return username_.Get();
}
inline void AuthenticateFacebookRequest::_internal_set_username(const std::string& value) {
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AuthenticateFacebookRequest::set_username(std::string&& value) {
  
  username_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.AuthenticateFacebookRequest.username)
}
inline void AuthenticateFacebookRequest::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.AuthenticateFacebookRequest.username)
}
inline void AuthenticateFacebookRequest::set_username(const char* value,
    size_t size) {
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.AuthenticateFacebookRequest.username)
}
inline std::string* AuthenticateFacebookRequest::_internal_mutable_username() {
  
  return username_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AuthenticateFacebookRequest::release_username() {
  // @@protoc_insertion_point(field_release:nakama.api.AuthenticateFacebookRequest.username)
  return username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AuthenticateFacebookRequest::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.AuthenticateFacebookRequest.username)
}

// .google.protobuf.BoolValue sync = 4;
inline bool AuthenticateFacebookRequest::_internal_has_sync() const {
  return this != internal_default_instance() && sync_ != nullptr;
}
inline bool AuthenticateFacebookRequest::has_sync() const {
  return _internal_has_sync();
}
inline const PROTOBUF_NAMESPACE_ID::BoolValue& AuthenticateFacebookRequest::_internal_sync() const {
  const PROTOBUF_NAMESPACE_ID::BoolValue* p = sync_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::BoolValue&>(
      PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::BoolValue& AuthenticateFacebookRequest::sync() const {
  // @@protoc_insertion_point(field_get:nakama.api.AuthenticateFacebookRequest.sync)
  return _internal_sync();
}
inline void AuthenticateFacebookRequest::unsafe_arena_set_allocated_sync(
    PROTOBUF_NAMESPACE_ID::BoolValue* sync) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sync_);
  }
  sync_ = sync;
  if (sync) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nakama.api.AuthenticateFacebookRequest.sync)
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* AuthenticateFacebookRequest::release_sync() {
  
  PROTOBUF_NAMESPACE_ID::BoolValue* temp = sync_;
  sync_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* AuthenticateFacebookRequest::unsafe_arena_release_sync() {
  // @@protoc_insertion_point(field_release:nakama.api.AuthenticateFacebookRequest.sync)
  
  PROTOBUF_NAMESPACE_ID::BoolValue* temp = sync_;
  sync_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* AuthenticateFacebookRequest::_internal_mutable_sync() {
  
  if (sync_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::BoolValue>(GetArena());
    sync_ = p;
  }
  return sync_;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* AuthenticateFacebookRequest::mutable_sync() {
  // @@protoc_insertion_point(field_mutable:nakama.api.AuthenticateFacebookRequest.sync)
  return _internal_mutable_sync();
}
inline void AuthenticateFacebookRequest::set_allocated_sync(PROTOBUF_NAMESPACE_ID::BoolValue* sync) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(sync_);
  }
  if (sync) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sync)->GetArena();
    if (message_arena != submessage_arena) {
      sync = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sync, submessage_arena);
    }
    
  } else {
    
  }
  sync_ = sync;
  // @@protoc_insertion_point(field_set_allocated:nakama.api.AuthenticateFacebookRequest.sync)
}

// -------------------------------------------------------------------

// AuthenticateFacebookInstantGameRequest

// .nakama.api.AccountFacebookInstantGame account = 1;
inline bool AuthenticateFacebookInstantGameRequest::_internal_has_account() const {
  return this != internal_default_instance() && account_ != nullptr;
}
inline bool AuthenticateFacebookInstantGameRequest::has_account() const {
  return _internal_has_account();
}
inline void AuthenticateFacebookInstantGameRequest::clear_account() {
  if (GetArena() == nullptr && account_ != nullptr) {
    delete account_;
  }
  account_ = nullptr;
}
inline const ::nakama::api::AccountFacebookInstantGame& AuthenticateFacebookInstantGameRequest::_internal_account() const {
  const ::nakama::api::AccountFacebookInstantGame* p = account_;
  return p != nullptr ? *p : reinterpret_cast<const ::nakama::api::AccountFacebookInstantGame&>(
      ::nakama::api::_AccountFacebookInstantGame_default_instance_);
}
inline const ::nakama::api::AccountFacebookInstantGame& AuthenticateFacebookInstantGameRequest::account() const {
  // @@protoc_insertion_point(field_get:nakama.api.AuthenticateFacebookInstantGameRequest.account)
  return _internal_account();
}
inline void AuthenticateFacebookInstantGameRequest::unsafe_arena_set_allocated_account(
    ::nakama::api::AccountFacebookInstantGame* account) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(account_);
  }
  account_ = account;
  if (account) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nakama.api.AuthenticateFacebookInstantGameRequest.account)
}
inline ::nakama::api::AccountFacebookInstantGame* AuthenticateFacebookInstantGameRequest::release_account() {
  
  ::nakama::api::AccountFacebookInstantGame* temp = account_;
  account_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::nakama::api::AccountFacebookInstantGame* AuthenticateFacebookInstantGameRequest::unsafe_arena_release_account() {
  // @@protoc_insertion_point(field_release:nakama.api.AuthenticateFacebookInstantGameRequest.account)
  
  ::nakama::api::AccountFacebookInstantGame* temp = account_;
  account_ = nullptr;
  return temp;
}
inline ::nakama::api::AccountFacebookInstantGame* AuthenticateFacebookInstantGameRequest::_internal_mutable_account() {
  
  if (account_ == nullptr) {
    auto* p = CreateMaybeMessage<::nakama::api::AccountFacebookInstantGame>(GetArena());
    account_ = p;
  }
  return account_;
}
inline ::nakama::api::AccountFacebookInstantGame* AuthenticateFacebookInstantGameRequest::mutable_account() {
  // @@protoc_insertion_point(field_mutable:nakama.api.AuthenticateFacebookInstantGameRequest.account)
  return _internal_mutable_account();
}
inline void AuthenticateFacebookInstantGameRequest::set_allocated_account(::nakama::api::AccountFacebookInstantGame* account) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete account_;
  }
  if (account) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(account);
    if (message_arena != submessage_arena) {
      account = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, account, submessage_arena);
    }
    
  } else {
    
  }
  account_ = account;
  // @@protoc_insertion_point(field_set_allocated:nakama.api.AuthenticateFacebookInstantGameRequest.account)
}

// .google.protobuf.BoolValue create = 2;
inline bool AuthenticateFacebookInstantGameRequest::_internal_has_create() const {
  return this != internal_default_instance() && create_ != nullptr;
}
inline bool AuthenticateFacebookInstantGameRequest::has_create() const {
  return _internal_has_create();
}
inline const PROTOBUF_NAMESPACE_ID::BoolValue& AuthenticateFacebookInstantGameRequest::_internal_create() const {
  const PROTOBUF_NAMESPACE_ID::BoolValue* p = create_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::BoolValue&>(
      PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::BoolValue& AuthenticateFacebookInstantGameRequest::create() const {
  // @@protoc_insertion_point(field_get:nakama.api.AuthenticateFacebookInstantGameRequest.create)
  return _internal_create();
}
inline void AuthenticateFacebookInstantGameRequest::unsafe_arena_set_allocated_create(
    PROTOBUF_NAMESPACE_ID::BoolValue* create) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(create_);
  }
  create_ = create;
  if (create) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nakama.api.AuthenticateFacebookInstantGameRequest.create)
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* AuthenticateFacebookInstantGameRequest::release_create() {
  
  PROTOBUF_NAMESPACE_ID::BoolValue* temp = create_;
  create_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* AuthenticateFacebookInstantGameRequest::unsafe_arena_release_create() {
  // @@protoc_insertion_point(field_release:nakama.api.AuthenticateFacebookInstantGameRequest.create)
  
  PROTOBUF_NAMESPACE_ID::BoolValue* temp = create_;
  create_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* AuthenticateFacebookInstantGameRequest::_internal_mutable_create() {
  
  if (create_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::BoolValue>(GetArena());
    create_ = p;
  }
  return create_;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* AuthenticateFacebookInstantGameRequest::mutable_create() {
  // @@protoc_insertion_point(field_mutable:nakama.api.AuthenticateFacebookInstantGameRequest.create)
  return _internal_mutable_create();
}
inline void AuthenticateFacebookInstantGameRequest::set_allocated_create(PROTOBUF_NAMESPACE_ID::BoolValue* create) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(create_);
  }
  if (create) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(create)->GetArena();
    if (message_arena != submessage_arena) {
      create = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, create, submessage_arena);
    }
    
  } else {
    
  }
  create_ = create;
  // @@protoc_insertion_point(field_set_allocated:nakama.api.AuthenticateFacebookInstantGameRequest.create)
}

// string username = 3;
inline void AuthenticateFacebookInstantGameRequest::clear_username() {
  username_.ClearToEmpty();
}
inline const std::string& AuthenticateFacebookInstantGameRequest::username() const {
  // @@protoc_insertion_point(field_get:nakama.api.AuthenticateFacebookInstantGameRequest.username)
  return _internal_username();
}
inline void AuthenticateFacebookInstantGameRequest::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:nakama.api.AuthenticateFacebookInstantGameRequest.username)
}
inline std::string* AuthenticateFacebookInstantGameRequest::mutable_username() {
  // @@protoc_insertion_point(field_mutable:nakama.api.AuthenticateFacebookInstantGameRequest.username)
  return _internal_mutable_username();
}
inline const std::string& AuthenticateFacebookInstantGameRequest::_internal_username() const {
  return username_.Get();
}
inline void AuthenticateFacebookInstantGameRequest::_internal_set_username(const std::string& value) {
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AuthenticateFacebookInstantGameRequest::set_username(std::string&& value) {
  
  username_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.AuthenticateFacebookInstantGameRequest.username)
}
inline void AuthenticateFacebookInstantGameRequest::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.AuthenticateFacebookInstantGameRequest.username)
}
inline void AuthenticateFacebookInstantGameRequest::set_username(const char* value,
    size_t size) {
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.AuthenticateFacebookInstantGameRequest.username)
}
inline std::string* AuthenticateFacebookInstantGameRequest::_internal_mutable_username() {
  
  return username_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AuthenticateFacebookInstantGameRequest::release_username() {
  // @@protoc_insertion_point(field_release:nakama.api.AuthenticateFacebookInstantGameRequest.username)
  return username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AuthenticateFacebookInstantGameRequest::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.AuthenticateFacebookInstantGameRequest.username)
}

// -------------------------------------------------------------------

// AuthenticateGameCenterRequest

// .nakama.api.AccountGameCenter account = 1;
inline bool AuthenticateGameCenterRequest::_internal_has_account() const {
  return this != internal_default_instance() && account_ != nullptr;
}
inline bool AuthenticateGameCenterRequest::has_account() const {
  return _internal_has_account();
}
inline void AuthenticateGameCenterRequest::clear_account() {
  if (GetArena() == nullptr && account_ != nullptr) {
    delete account_;
  }
  account_ = nullptr;
}
inline const ::nakama::api::AccountGameCenter& AuthenticateGameCenterRequest::_internal_account() const {
  const ::nakama::api::AccountGameCenter* p = account_;
  return p != nullptr ? *p : reinterpret_cast<const ::nakama::api::AccountGameCenter&>(
      ::nakama::api::_AccountGameCenter_default_instance_);
}
inline const ::nakama::api::AccountGameCenter& AuthenticateGameCenterRequest::account() const {
  // @@protoc_insertion_point(field_get:nakama.api.AuthenticateGameCenterRequest.account)
  return _internal_account();
}
inline void AuthenticateGameCenterRequest::unsafe_arena_set_allocated_account(
    ::nakama::api::AccountGameCenter* account) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(account_);
  }
  account_ = account;
  if (account) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nakama.api.AuthenticateGameCenterRequest.account)
}
inline ::nakama::api::AccountGameCenter* AuthenticateGameCenterRequest::release_account() {
  
  ::nakama::api::AccountGameCenter* temp = account_;
  account_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::nakama::api::AccountGameCenter* AuthenticateGameCenterRequest::unsafe_arena_release_account() {
  // @@protoc_insertion_point(field_release:nakama.api.AuthenticateGameCenterRequest.account)
  
  ::nakama::api::AccountGameCenter* temp = account_;
  account_ = nullptr;
  return temp;
}
inline ::nakama::api::AccountGameCenter* AuthenticateGameCenterRequest::_internal_mutable_account() {
  
  if (account_ == nullptr) {
    auto* p = CreateMaybeMessage<::nakama::api::AccountGameCenter>(GetArena());
    account_ = p;
  }
  return account_;
}
inline ::nakama::api::AccountGameCenter* AuthenticateGameCenterRequest::mutable_account() {
  // @@protoc_insertion_point(field_mutable:nakama.api.AuthenticateGameCenterRequest.account)
  return _internal_mutable_account();
}
inline void AuthenticateGameCenterRequest::set_allocated_account(::nakama::api::AccountGameCenter* account) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete account_;
  }
  if (account) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(account);
    if (message_arena != submessage_arena) {
      account = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, account, submessage_arena);
    }
    
  } else {
    
  }
  account_ = account;
  // @@protoc_insertion_point(field_set_allocated:nakama.api.AuthenticateGameCenterRequest.account)
}

// .google.protobuf.BoolValue create = 2;
inline bool AuthenticateGameCenterRequest::_internal_has_create() const {
  return this != internal_default_instance() && create_ != nullptr;
}
inline bool AuthenticateGameCenterRequest::has_create() const {
  return _internal_has_create();
}
inline const PROTOBUF_NAMESPACE_ID::BoolValue& AuthenticateGameCenterRequest::_internal_create() const {
  const PROTOBUF_NAMESPACE_ID::BoolValue* p = create_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::BoolValue&>(
      PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::BoolValue& AuthenticateGameCenterRequest::create() const {
  // @@protoc_insertion_point(field_get:nakama.api.AuthenticateGameCenterRequest.create)
  return _internal_create();
}
inline void AuthenticateGameCenterRequest::unsafe_arena_set_allocated_create(
    PROTOBUF_NAMESPACE_ID::BoolValue* create) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(create_);
  }
  create_ = create;
  if (create) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nakama.api.AuthenticateGameCenterRequest.create)
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* AuthenticateGameCenterRequest::release_create() {
  
  PROTOBUF_NAMESPACE_ID::BoolValue* temp = create_;
  create_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* AuthenticateGameCenterRequest::unsafe_arena_release_create() {
  // @@protoc_insertion_point(field_release:nakama.api.AuthenticateGameCenterRequest.create)
  
  PROTOBUF_NAMESPACE_ID::BoolValue* temp = create_;
  create_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* AuthenticateGameCenterRequest::_internal_mutable_create() {
  
  if (create_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::BoolValue>(GetArena());
    create_ = p;
  }
  return create_;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* AuthenticateGameCenterRequest::mutable_create() {
  // @@protoc_insertion_point(field_mutable:nakama.api.AuthenticateGameCenterRequest.create)
  return _internal_mutable_create();
}
inline void AuthenticateGameCenterRequest::set_allocated_create(PROTOBUF_NAMESPACE_ID::BoolValue* create) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(create_);
  }
  if (create) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(create)->GetArena();
    if (message_arena != submessage_arena) {
      create = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, create, submessage_arena);
    }
    
  } else {
    
  }
  create_ = create;
  // @@protoc_insertion_point(field_set_allocated:nakama.api.AuthenticateGameCenterRequest.create)
}

// string username = 3;
inline void AuthenticateGameCenterRequest::clear_username() {
  username_.ClearToEmpty();
}
inline const std::string& AuthenticateGameCenterRequest::username() const {
  // @@protoc_insertion_point(field_get:nakama.api.AuthenticateGameCenterRequest.username)
  return _internal_username();
}
inline void AuthenticateGameCenterRequest::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:nakama.api.AuthenticateGameCenterRequest.username)
}
inline std::string* AuthenticateGameCenterRequest::mutable_username() {
  // @@protoc_insertion_point(field_mutable:nakama.api.AuthenticateGameCenterRequest.username)
  return _internal_mutable_username();
}
inline const std::string& AuthenticateGameCenterRequest::_internal_username() const {
  return username_.Get();
}
inline void AuthenticateGameCenterRequest::_internal_set_username(const std::string& value) {
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AuthenticateGameCenterRequest::set_username(std::string&& value) {
  
  username_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.AuthenticateGameCenterRequest.username)
}
inline void AuthenticateGameCenterRequest::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.AuthenticateGameCenterRequest.username)
}
inline void AuthenticateGameCenterRequest::set_username(const char* value,
    size_t size) {
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.AuthenticateGameCenterRequest.username)
}
inline std::string* AuthenticateGameCenterRequest::_internal_mutable_username() {
  
  return username_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AuthenticateGameCenterRequest::release_username() {
  // @@protoc_insertion_point(field_release:nakama.api.AuthenticateGameCenterRequest.username)
  return username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AuthenticateGameCenterRequest::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.AuthenticateGameCenterRequest.username)
}

// -------------------------------------------------------------------

// AuthenticateGoogleRequest

// .nakama.api.AccountGoogle account = 1;
inline bool AuthenticateGoogleRequest::_internal_has_account() const {
  return this != internal_default_instance() && account_ != nullptr;
}
inline bool AuthenticateGoogleRequest::has_account() const {
  return _internal_has_account();
}
inline void AuthenticateGoogleRequest::clear_account() {
  if (GetArena() == nullptr && account_ != nullptr) {
    delete account_;
  }
  account_ = nullptr;
}
inline const ::nakama::api::AccountGoogle& AuthenticateGoogleRequest::_internal_account() const {
  const ::nakama::api::AccountGoogle* p = account_;
  return p != nullptr ? *p : reinterpret_cast<const ::nakama::api::AccountGoogle&>(
      ::nakama::api::_AccountGoogle_default_instance_);
}
inline const ::nakama::api::AccountGoogle& AuthenticateGoogleRequest::account() const {
  // @@protoc_insertion_point(field_get:nakama.api.AuthenticateGoogleRequest.account)
  return _internal_account();
}
inline void AuthenticateGoogleRequest::unsafe_arena_set_allocated_account(
    ::nakama::api::AccountGoogle* account) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(account_);
  }
  account_ = account;
  if (account) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nakama.api.AuthenticateGoogleRequest.account)
}
inline ::nakama::api::AccountGoogle* AuthenticateGoogleRequest::release_account() {
  
  ::nakama::api::AccountGoogle* temp = account_;
  account_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::nakama::api::AccountGoogle* AuthenticateGoogleRequest::unsafe_arena_release_account() {
  // @@protoc_insertion_point(field_release:nakama.api.AuthenticateGoogleRequest.account)
  
  ::nakama::api::AccountGoogle* temp = account_;
  account_ = nullptr;
  return temp;
}
inline ::nakama::api::AccountGoogle* AuthenticateGoogleRequest::_internal_mutable_account() {
  
  if (account_ == nullptr) {
    auto* p = CreateMaybeMessage<::nakama::api::AccountGoogle>(GetArena());
    account_ = p;
  }
  return account_;
}
inline ::nakama::api::AccountGoogle* AuthenticateGoogleRequest::mutable_account() {
  // @@protoc_insertion_point(field_mutable:nakama.api.AuthenticateGoogleRequest.account)
  return _internal_mutable_account();
}
inline void AuthenticateGoogleRequest::set_allocated_account(::nakama::api::AccountGoogle* account) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete account_;
  }
  if (account) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(account);
    if (message_arena != submessage_arena) {
      account = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, account, submessage_arena);
    }
    
  } else {
    
  }
  account_ = account;
  // @@protoc_insertion_point(field_set_allocated:nakama.api.AuthenticateGoogleRequest.account)
}

// .google.protobuf.BoolValue create = 2;
inline bool AuthenticateGoogleRequest::_internal_has_create() const {
  return this != internal_default_instance() && create_ != nullptr;
}
inline bool AuthenticateGoogleRequest::has_create() const {
  return _internal_has_create();
}
inline const PROTOBUF_NAMESPACE_ID::BoolValue& AuthenticateGoogleRequest::_internal_create() const {
  const PROTOBUF_NAMESPACE_ID::BoolValue* p = create_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::BoolValue&>(
      PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::BoolValue& AuthenticateGoogleRequest::create() const {
  // @@protoc_insertion_point(field_get:nakama.api.AuthenticateGoogleRequest.create)
  return _internal_create();
}
inline void AuthenticateGoogleRequest::unsafe_arena_set_allocated_create(
    PROTOBUF_NAMESPACE_ID::BoolValue* create) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(create_);
  }
  create_ = create;
  if (create) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nakama.api.AuthenticateGoogleRequest.create)
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* AuthenticateGoogleRequest::release_create() {
  
  PROTOBUF_NAMESPACE_ID::BoolValue* temp = create_;
  create_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* AuthenticateGoogleRequest::unsafe_arena_release_create() {
  // @@protoc_insertion_point(field_release:nakama.api.AuthenticateGoogleRequest.create)
  
  PROTOBUF_NAMESPACE_ID::BoolValue* temp = create_;
  create_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* AuthenticateGoogleRequest::_internal_mutable_create() {
  
  if (create_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::BoolValue>(GetArena());
    create_ = p;
  }
  return create_;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* AuthenticateGoogleRequest::mutable_create() {
  // @@protoc_insertion_point(field_mutable:nakama.api.AuthenticateGoogleRequest.create)
  return _internal_mutable_create();
}
inline void AuthenticateGoogleRequest::set_allocated_create(PROTOBUF_NAMESPACE_ID::BoolValue* create) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(create_);
  }
  if (create) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(create)->GetArena();
    if (message_arena != submessage_arena) {
      create = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, create, submessage_arena);
    }
    
  } else {
    
  }
  create_ = create;
  // @@protoc_insertion_point(field_set_allocated:nakama.api.AuthenticateGoogleRequest.create)
}

// string username = 3;
inline void AuthenticateGoogleRequest::clear_username() {
  username_.ClearToEmpty();
}
inline const std::string& AuthenticateGoogleRequest::username() const {
  // @@protoc_insertion_point(field_get:nakama.api.AuthenticateGoogleRequest.username)
  return _internal_username();
}
inline void AuthenticateGoogleRequest::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:nakama.api.AuthenticateGoogleRequest.username)
}
inline std::string* AuthenticateGoogleRequest::mutable_username() {
  // @@protoc_insertion_point(field_mutable:nakama.api.AuthenticateGoogleRequest.username)
  return _internal_mutable_username();
}
inline const std::string& AuthenticateGoogleRequest::_internal_username() const {
  return username_.Get();
}
inline void AuthenticateGoogleRequest::_internal_set_username(const std::string& value) {
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AuthenticateGoogleRequest::set_username(std::string&& value) {
  
  username_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.AuthenticateGoogleRequest.username)
}
inline void AuthenticateGoogleRequest::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.AuthenticateGoogleRequest.username)
}
inline void AuthenticateGoogleRequest::set_username(const char* value,
    size_t size) {
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.AuthenticateGoogleRequest.username)
}
inline std::string* AuthenticateGoogleRequest::_internal_mutable_username() {
  
  return username_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AuthenticateGoogleRequest::release_username() {
  // @@protoc_insertion_point(field_release:nakama.api.AuthenticateGoogleRequest.username)
  return username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AuthenticateGoogleRequest::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.AuthenticateGoogleRequest.username)
}

// -------------------------------------------------------------------

// AuthenticateSteamRequest

// .nakama.api.AccountSteam account = 1;
inline bool AuthenticateSteamRequest::_internal_has_account() const {
  return this != internal_default_instance() && account_ != nullptr;
}
inline bool AuthenticateSteamRequest::has_account() const {
  return _internal_has_account();
}
inline void AuthenticateSteamRequest::clear_account() {
  if (GetArena() == nullptr && account_ != nullptr) {
    delete account_;
  }
  account_ = nullptr;
}
inline const ::nakama::api::AccountSteam& AuthenticateSteamRequest::_internal_account() const {
  const ::nakama::api::AccountSteam* p = account_;
  return p != nullptr ? *p : reinterpret_cast<const ::nakama::api::AccountSteam&>(
      ::nakama::api::_AccountSteam_default_instance_);
}
inline const ::nakama::api::AccountSteam& AuthenticateSteamRequest::account() const {
  // @@protoc_insertion_point(field_get:nakama.api.AuthenticateSteamRequest.account)
  return _internal_account();
}
inline void AuthenticateSteamRequest::unsafe_arena_set_allocated_account(
    ::nakama::api::AccountSteam* account) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(account_);
  }
  account_ = account;
  if (account) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nakama.api.AuthenticateSteamRequest.account)
}
inline ::nakama::api::AccountSteam* AuthenticateSteamRequest::release_account() {
  
  ::nakama::api::AccountSteam* temp = account_;
  account_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::nakama::api::AccountSteam* AuthenticateSteamRequest::unsafe_arena_release_account() {
  // @@protoc_insertion_point(field_release:nakama.api.AuthenticateSteamRequest.account)
  
  ::nakama::api::AccountSteam* temp = account_;
  account_ = nullptr;
  return temp;
}
inline ::nakama::api::AccountSteam* AuthenticateSteamRequest::_internal_mutable_account() {
  
  if (account_ == nullptr) {
    auto* p = CreateMaybeMessage<::nakama::api::AccountSteam>(GetArena());
    account_ = p;
  }
  return account_;
}
inline ::nakama::api::AccountSteam* AuthenticateSteamRequest::mutable_account() {
  // @@protoc_insertion_point(field_mutable:nakama.api.AuthenticateSteamRequest.account)
  return _internal_mutable_account();
}
inline void AuthenticateSteamRequest::set_allocated_account(::nakama::api::AccountSteam* account) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete account_;
  }
  if (account) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(account);
    if (message_arena != submessage_arena) {
      account = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, account, submessage_arena);
    }
    
  } else {
    
  }
  account_ = account;
  // @@protoc_insertion_point(field_set_allocated:nakama.api.AuthenticateSteamRequest.account)
}

// .google.protobuf.BoolValue create = 2;
inline bool AuthenticateSteamRequest::_internal_has_create() const {
  return this != internal_default_instance() && create_ != nullptr;
}
inline bool AuthenticateSteamRequest::has_create() const {
  return _internal_has_create();
}
inline const PROTOBUF_NAMESPACE_ID::BoolValue& AuthenticateSteamRequest::_internal_create() const {
  const PROTOBUF_NAMESPACE_ID::BoolValue* p = create_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::BoolValue&>(
      PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::BoolValue& AuthenticateSteamRequest::create() const {
  // @@protoc_insertion_point(field_get:nakama.api.AuthenticateSteamRequest.create)
  return _internal_create();
}
inline void AuthenticateSteamRequest::unsafe_arena_set_allocated_create(
    PROTOBUF_NAMESPACE_ID::BoolValue* create) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(create_);
  }
  create_ = create;
  if (create) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nakama.api.AuthenticateSteamRequest.create)
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* AuthenticateSteamRequest::release_create() {
  
  PROTOBUF_NAMESPACE_ID::BoolValue* temp = create_;
  create_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* AuthenticateSteamRequest::unsafe_arena_release_create() {
  // @@protoc_insertion_point(field_release:nakama.api.AuthenticateSteamRequest.create)
  
  PROTOBUF_NAMESPACE_ID::BoolValue* temp = create_;
  create_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* AuthenticateSteamRequest::_internal_mutable_create() {
  
  if (create_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::BoolValue>(GetArena());
    create_ = p;
  }
  return create_;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* AuthenticateSteamRequest::mutable_create() {
  // @@protoc_insertion_point(field_mutable:nakama.api.AuthenticateSteamRequest.create)
  return _internal_mutable_create();
}
inline void AuthenticateSteamRequest::set_allocated_create(PROTOBUF_NAMESPACE_ID::BoolValue* create) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(create_);
  }
  if (create) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(create)->GetArena();
    if (message_arena != submessage_arena) {
      create = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, create, submessage_arena);
    }
    
  } else {
    
  }
  create_ = create;
  // @@protoc_insertion_point(field_set_allocated:nakama.api.AuthenticateSteamRequest.create)
}

// string username = 3;
inline void AuthenticateSteamRequest::clear_username() {
  username_.ClearToEmpty();
}
inline const std::string& AuthenticateSteamRequest::username() const {
  // @@protoc_insertion_point(field_get:nakama.api.AuthenticateSteamRequest.username)
  return _internal_username();
}
inline void AuthenticateSteamRequest::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:nakama.api.AuthenticateSteamRequest.username)
}
inline std::string* AuthenticateSteamRequest::mutable_username() {
  // @@protoc_insertion_point(field_mutable:nakama.api.AuthenticateSteamRequest.username)
  return _internal_mutable_username();
}
inline const std::string& AuthenticateSteamRequest::_internal_username() const {
  return username_.Get();
}
inline void AuthenticateSteamRequest::_internal_set_username(const std::string& value) {
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AuthenticateSteamRequest::set_username(std::string&& value) {
  
  username_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.AuthenticateSteamRequest.username)
}
inline void AuthenticateSteamRequest::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.AuthenticateSteamRequest.username)
}
inline void AuthenticateSteamRequest::set_username(const char* value,
    size_t size) {
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.AuthenticateSteamRequest.username)
}
inline std::string* AuthenticateSteamRequest::_internal_mutable_username() {
  
  return username_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AuthenticateSteamRequest::release_username() {
  // @@protoc_insertion_point(field_release:nakama.api.AuthenticateSteamRequest.username)
  return username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AuthenticateSteamRequest::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.AuthenticateSteamRequest.username)
}

// .google.protobuf.BoolValue sync = 4;
inline bool AuthenticateSteamRequest::_internal_has_sync() const {
  return this != internal_default_instance() && sync_ != nullptr;
}
inline bool AuthenticateSteamRequest::has_sync() const {
  return _internal_has_sync();
}
inline const PROTOBUF_NAMESPACE_ID::BoolValue& AuthenticateSteamRequest::_internal_sync() const {
  const PROTOBUF_NAMESPACE_ID::BoolValue* p = sync_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::BoolValue&>(
      PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::BoolValue& AuthenticateSteamRequest::sync() const {
  // @@protoc_insertion_point(field_get:nakama.api.AuthenticateSteamRequest.sync)
  return _internal_sync();
}
inline void AuthenticateSteamRequest::unsafe_arena_set_allocated_sync(
    PROTOBUF_NAMESPACE_ID::BoolValue* sync) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sync_);
  }
  sync_ = sync;
  if (sync) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nakama.api.AuthenticateSteamRequest.sync)
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* AuthenticateSteamRequest::release_sync() {
  
  PROTOBUF_NAMESPACE_ID::BoolValue* temp = sync_;
  sync_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* AuthenticateSteamRequest::unsafe_arena_release_sync() {
  // @@protoc_insertion_point(field_release:nakama.api.AuthenticateSteamRequest.sync)
  
  PROTOBUF_NAMESPACE_ID::BoolValue* temp = sync_;
  sync_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* AuthenticateSteamRequest::_internal_mutable_sync() {
  
  if (sync_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::BoolValue>(GetArena());
    sync_ = p;
  }
  return sync_;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* AuthenticateSteamRequest::mutable_sync() {
  // @@protoc_insertion_point(field_mutable:nakama.api.AuthenticateSteamRequest.sync)
  return _internal_mutable_sync();
}
inline void AuthenticateSteamRequest::set_allocated_sync(PROTOBUF_NAMESPACE_ID::BoolValue* sync) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(sync_);
  }
  if (sync) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sync)->GetArena();
    if (message_arena != submessage_arena) {
      sync = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sync, submessage_arena);
    }
    
  } else {
    
  }
  sync_ = sync;
  // @@protoc_insertion_point(field_set_allocated:nakama.api.AuthenticateSteamRequest.sync)
}

// -------------------------------------------------------------------

// BanGroupUsersRequest

// string group_id = 1;
inline void BanGroupUsersRequest::clear_group_id() {
  group_id_.ClearToEmpty();
}
inline const std::string& BanGroupUsersRequest::group_id() const {
  // @@protoc_insertion_point(field_get:nakama.api.BanGroupUsersRequest.group_id)
  return _internal_group_id();
}
inline void BanGroupUsersRequest::set_group_id(const std::string& value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:nakama.api.BanGroupUsersRequest.group_id)
}
inline std::string* BanGroupUsersRequest::mutable_group_id() {
  // @@protoc_insertion_point(field_mutable:nakama.api.BanGroupUsersRequest.group_id)
  return _internal_mutable_group_id();
}
inline const std::string& BanGroupUsersRequest::_internal_group_id() const {
  return group_id_.Get();
}
inline void BanGroupUsersRequest::_internal_set_group_id(const std::string& value) {
  
  group_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void BanGroupUsersRequest::set_group_id(std::string&& value) {
  
  group_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.BanGroupUsersRequest.group_id)
}
inline void BanGroupUsersRequest::set_group_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  group_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.BanGroupUsersRequest.group_id)
}
inline void BanGroupUsersRequest::set_group_id(const char* value,
    size_t size) {
  
  group_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.BanGroupUsersRequest.group_id)
}
inline std::string* BanGroupUsersRequest::_internal_mutable_group_id() {
  
  return group_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* BanGroupUsersRequest::release_group_id() {
  // @@protoc_insertion_point(field_release:nakama.api.BanGroupUsersRequest.group_id)
  return group_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BanGroupUsersRequest::set_allocated_group_id(std::string* group_id) {
  if (group_id != nullptr) {
    
  } else {
    
  }
  group_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), group_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.BanGroupUsersRequest.group_id)
}

// repeated string user_ids = 2;
inline int BanGroupUsersRequest::_internal_user_ids_size() const {
  return user_ids_.size();
}
inline int BanGroupUsersRequest::user_ids_size() const {
  return _internal_user_ids_size();
}
inline void BanGroupUsersRequest::clear_user_ids() {
  user_ids_.Clear();
}
inline std::string* BanGroupUsersRequest::add_user_ids() {
  // @@protoc_insertion_point(field_add_mutable:nakama.api.BanGroupUsersRequest.user_ids)
  return _internal_add_user_ids();
}
inline const std::string& BanGroupUsersRequest::_internal_user_ids(int index) const {
  return user_ids_.Get(index);
}
inline const std::string& BanGroupUsersRequest::user_ids(int index) const {
  // @@protoc_insertion_point(field_get:nakama.api.BanGroupUsersRequest.user_ids)
  return _internal_user_ids(index);
}
inline std::string* BanGroupUsersRequest::mutable_user_ids(int index) {
  // @@protoc_insertion_point(field_mutable:nakama.api.BanGroupUsersRequest.user_ids)
  return user_ids_.Mutable(index);
}
inline void BanGroupUsersRequest::set_user_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:nakama.api.BanGroupUsersRequest.user_ids)
  user_ids_.Mutable(index)->assign(value);
}
inline void BanGroupUsersRequest::set_user_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:nakama.api.BanGroupUsersRequest.user_ids)
  user_ids_.Mutable(index)->assign(std::move(value));
}
inline void BanGroupUsersRequest::set_user_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  user_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:nakama.api.BanGroupUsersRequest.user_ids)
}
inline void BanGroupUsersRequest::set_user_ids(int index, const char* value, size_t size) {
  user_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:nakama.api.BanGroupUsersRequest.user_ids)
}
inline std::string* BanGroupUsersRequest::_internal_add_user_ids() {
  return user_ids_.Add();
}
inline void BanGroupUsersRequest::add_user_ids(const std::string& value) {
  user_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:nakama.api.BanGroupUsersRequest.user_ids)
}
inline void BanGroupUsersRequest::add_user_ids(std::string&& value) {
  user_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:nakama.api.BanGroupUsersRequest.user_ids)
}
inline void BanGroupUsersRequest::add_user_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  user_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:nakama.api.BanGroupUsersRequest.user_ids)
}
inline void BanGroupUsersRequest::add_user_ids(const char* value, size_t size) {
  user_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:nakama.api.BanGroupUsersRequest.user_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
BanGroupUsersRequest::user_ids() const {
  // @@protoc_insertion_point(field_list:nakama.api.BanGroupUsersRequest.user_ids)
  return user_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
BanGroupUsersRequest::mutable_user_ids() {
  // @@protoc_insertion_point(field_mutable_list:nakama.api.BanGroupUsersRequest.user_ids)
  return &user_ids_;
}

// -------------------------------------------------------------------

// BlockFriendsRequest

// repeated string ids = 1;
inline int BlockFriendsRequest::_internal_ids_size() const {
  return ids_.size();
}
inline int BlockFriendsRequest::ids_size() const {
  return _internal_ids_size();
}
inline void BlockFriendsRequest::clear_ids() {
  ids_.Clear();
}
inline std::string* BlockFriendsRequest::add_ids() {
  // @@protoc_insertion_point(field_add_mutable:nakama.api.BlockFriendsRequest.ids)
  return _internal_add_ids();
}
inline const std::string& BlockFriendsRequest::_internal_ids(int index) const {
  return ids_.Get(index);
}
inline const std::string& BlockFriendsRequest::ids(int index) const {
  // @@protoc_insertion_point(field_get:nakama.api.BlockFriendsRequest.ids)
  return _internal_ids(index);
}
inline std::string* BlockFriendsRequest::mutable_ids(int index) {
  // @@protoc_insertion_point(field_mutable:nakama.api.BlockFriendsRequest.ids)
  return ids_.Mutable(index);
}
inline void BlockFriendsRequest::set_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:nakama.api.BlockFriendsRequest.ids)
  ids_.Mutable(index)->assign(value);
}
inline void BlockFriendsRequest::set_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:nakama.api.BlockFriendsRequest.ids)
  ids_.Mutable(index)->assign(std::move(value));
}
inline void BlockFriendsRequest::set_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:nakama.api.BlockFriendsRequest.ids)
}
inline void BlockFriendsRequest::set_ids(int index, const char* value, size_t size) {
  ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:nakama.api.BlockFriendsRequest.ids)
}
inline std::string* BlockFriendsRequest::_internal_add_ids() {
  return ids_.Add();
}
inline void BlockFriendsRequest::add_ids(const std::string& value) {
  ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:nakama.api.BlockFriendsRequest.ids)
}
inline void BlockFriendsRequest::add_ids(std::string&& value) {
  ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:nakama.api.BlockFriendsRequest.ids)
}
inline void BlockFriendsRequest::add_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:nakama.api.BlockFriendsRequest.ids)
}
inline void BlockFriendsRequest::add_ids(const char* value, size_t size) {
  ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:nakama.api.BlockFriendsRequest.ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
BlockFriendsRequest::ids() const {
  // @@protoc_insertion_point(field_list:nakama.api.BlockFriendsRequest.ids)
  return ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
BlockFriendsRequest::mutable_ids() {
  // @@protoc_insertion_point(field_mutable_list:nakama.api.BlockFriendsRequest.ids)
  return &ids_;
}

// repeated string usernames = 2;
inline int BlockFriendsRequest::_internal_usernames_size() const {
  return usernames_.size();
}
inline int BlockFriendsRequest::usernames_size() const {
  return _internal_usernames_size();
}
inline void BlockFriendsRequest::clear_usernames() {
  usernames_.Clear();
}
inline std::string* BlockFriendsRequest::add_usernames() {
  // @@protoc_insertion_point(field_add_mutable:nakama.api.BlockFriendsRequest.usernames)
  return _internal_add_usernames();
}
inline const std::string& BlockFriendsRequest::_internal_usernames(int index) const {
  return usernames_.Get(index);
}
inline const std::string& BlockFriendsRequest::usernames(int index) const {
  // @@protoc_insertion_point(field_get:nakama.api.BlockFriendsRequest.usernames)
  return _internal_usernames(index);
}
inline std::string* BlockFriendsRequest::mutable_usernames(int index) {
  // @@protoc_insertion_point(field_mutable:nakama.api.BlockFriendsRequest.usernames)
  return usernames_.Mutable(index);
}
inline void BlockFriendsRequest::set_usernames(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:nakama.api.BlockFriendsRequest.usernames)
  usernames_.Mutable(index)->assign(value);
}
inline void BlockFriendsRequest::set_usernames(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:nakama.api.BlockFriendsRequest.usernames)
  usernames_.Mutable(index)->assign(std::move(value));
}
inline void BlockFriendsRequest::set_usernames(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  usernames_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:nakama.api.BlockFriendsRequest.usernames)
}
inline void BlockFriendsRequest::set_usernames(int index, const char* value, size_t size) {
  usernames_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:nakama.api.BlockFriendsRequest.usernames)
}
inline std::string* BlockFriendsRequest::_internal_add_usernames() {
  return usernames_.Add();
}
inline void BlockFriendsRequest::add_usernames(const std::string& value) {
  usernames_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:nakama.api.BlockFriendsRequest.usernames)
}
inline void BlockFriendsRequest::add_usernames(std::string&& value) {
  usernames_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:nakama.api.BlockFriendsRequest.usernames)
}
inline void BlockFriendsRequest::add_usernames(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  usernames_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:nakama.api.BlockFriendsRequest.usernames)
}
inline void BlockFriendsRequest::add_usernames(const char* value, size_t size) {
  usernames_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:nakama.api.BlockFriendsRequest.usernames)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
BlockFriendsRequest::usernames() const {
  // @@protoc_insertion_point(field_list:nakama.api.BlockFriendsRequest.usernames)
  return usernames_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
BlockFriendsRequest::mutable_usernames() {
  // @@protoc_insertion_point(field_mutable_list:nakama.api.BlockFriendsRequest.usernames)
  return &usernames_;
}

// -------------------------------------------------------------------

// ChannelMessage

// string channel_id = 1;
inline void ChannelMessage::clear_channel_id() {
  channel_id_.ClearToEmpty();
}
inline const std::string& ChannelMessage::channel_id() const {
  // @@protoc_insertion_point(field_get:nakama.api.ChannelMessage.channel_id)
  return _internal_channel_id();
}
inline void ChannelMessage::set_channel_id(const std::string& value) {
  _internal_set_channel_id(value);
  // @@protoc_insertion_point(field_set:nakama.api.ChannelMessage.channel_id)
}
inline std::string* ChannelMessage::mutable_channel_id() {
  // @@protoc_insertion_point(field_mutable:nakama.api.ChannelMessage.channel_id)
  return _internal_mutable_channel_id();
}
inline const std::string& ChannelMessage::_internal_channel_id() const {
  return channel_id_.Get();
}
inline void ChannelMessage::_internal_set_channel_id(const std::string& value) {
  
  channel_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ChannelMessage::set_channel_id(std::string&& value) {
  
  channel_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.ChannelMessage.channel_id)
}
inline void ChannelMessage::set_channel_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  channel_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.ChannelMessage.channel_id)
}
inline void ChannelMessage::set_channel_id(const char* value,
    size_t size) {
  
  channel_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.ChannelMessage.channel_id)
}
inline std::string* ChannelMessage::_internal_mutable_channel_id() {
  
  return channel_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ChannelMessage::release_channel_id() {
  // @@protoc_insertion_point(field_release:nakama.api.ChannelMessage.channel_id)
  return channel_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ChannelMessage::set_allocated_channel_id(std::string* channel_id) {
  if (channel_id != nullptr) {
    
  } else {
    
  }
  channel_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), channel_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.ChannelMessage.channel_id)
}

// string message_id = 2;
inline void ChannelMessage::clear_message_id() {
  message_id_.ClearToEmpty();
}
inline const std::string& ChannelMessage::message_id() const {
  // @@protoc_insertion_point(field_get:nakama.api.ChannelMessage.message_id)
  return _internal_message_id();
}
inline void ChannelMessage::set_message_id(const std::string& value) {
  _internal_set_message_id(value);
  // @@protoc_insertion_point(field_set:nakama.api.ChannelMessage.message_id)
}
inline std::string* ChannelMessage::mutable_message_id() {
  // @@protoc_insertion_point(field_mutable:nakama.api.ChannelMessage.message_id)
  return _internal_mutable_message_id();
}
inline const std::string& ChannelMessage::_internal_message_id() const {
  return message_id_.Get();
}
inline void ChannelMessage::_internal_set_message_id(const std::string& value) {
  
  message_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ChannelMessage::set_message_id(std::string&& value) {
  
  message_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.ChannelMessage.message_id)
}
inline void ChannelMessage::set_message_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.ChannelMessage.message_id)
}
inline void ChannelMessage::set_message_id(const char* value,
    size_t size) {
  
  message_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.ChannelMessage.message_id)
}
inline std::string* ChannelMessage::_internal_mutable_message_id() {
  
  return message_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ChannelMessage::release_message_id() {
  // @@protoc_insertion_point(field_release:nakama.api.ChannelMessage.message_id)
  return message_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ChannelMessage::set_allocated_message_id(std::string* message_id) {
  if (message_id != nullptr) {
    
  } else {
    
  }
  message_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.ChannelMessage.message_id)
}

// .google.protobuf.Int32Value code = 3;
inline bool ChannelMessage::_internal_has_code() const {
  return this != internal_default_instance() && code_ != nullptr;
}
inline bool ChannelMessage::has_code() const {
  return _internal_has_code();
}
inline const PROTOBUF_NAMESPACE_ID::Int32Value& ChannelMessage::_internal_code() const {
  const PROTOBUF_NAMESPACE_ID::Int32Value* p = code_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Int32Value&>(
      PROTOBUF_NAMESPACE_ID::_Int32Value_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Int32Value& ChannelMessage::code() const {
  // @@protoc_insertion_point(field_get:nakama.api.ChannelMessage.code)
  return _internal_code();
}
inline void ChannelMessage::unsafe_arena_set_allocated_code(
    PROTOBUF_NAMESPACE_ID::Int32Value* code) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(code_);
  }
  code_ = code;
  if (code) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nakama.api.ChannelMessage.code)
}
inline PROTOBUF_NAMESPACE_ID::Int32Value* ChannelMessage::release_code() {
  
  PROTOBUF_NAMESPACE_ID::Int32Value* temp = code_;
  code_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Int32Value* ChannelMessage::unsafe_arena_release_code() {
  // @@protoc_insertion_point(field_release:nakama.api.ChannelMessage.code)
  
  PROTOBUF_NAMESPACE_ID::Int32Value* temp = code_;
  code_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Int32Value* ChannelMessage::_internal_mutable_code() {
  
  if (code_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Int32Value>(GetArena());
    code_ = p;
  }
  return code_;
}
inline PROTOBUF_NAMESPACE_ID::Int32Value* ChannelMessage::mutable_code() {
  // @@protoc_insertion_point(field_mutable:nakama.api.ChannelMessage.code)
  return _internal_mutable_code();
}
inline void ChannelMessage::set_allocated_code(PROTOBUF_NAMESPACE_ID::Int32Value* code) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(code_);
  }
  if (code) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(code)->GetArena();
    if (message_arena != submessage_arena) {
      code = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, code, submessage_arena);
    }
    
  } else {
    
  }
  code_ = code;
  // @@protoc_insertion_point(field_set_allocated:nakama.api.ChannelMessage.code)
}

// string sender_id = 4;
inline void ChannelMessage::clear_sender_id() {
  sender_id_.ClearToEmpty();
}
inline const std::string& ChannelMessage::sender_id() const {
  // @@protoc_insertion_point(field_get:nakama.api.ChannelMessage.sender_id)
  return _internal_sender_id();
}
inline void ChannelMessage::set_sender_id(const std::string& value) {
  _internal_set_sender_id(value);
  // @@protoc_insertion_point(field_set:nakama.api.ChannelMessage.sender_id)
}
inline std::string* ChannelMessage::mutable_sender_id() {
  // @@protoc_insertion_point(field_mutable:nakama.api.ChannelMessage.sender_id)
  return _internal_mutable_sender_id();
}
inline const std::string& ChannelMessage::_internal_sender_id() const {
  return sender_id_.Get();
}
inline void ChannelMessage::_internal_set_sender_id(const std::string& value) {
  
  sender_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ChannelMessage::set_sender_id(std::string&& value) {
  
  sender_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.ChannelMessage.sender_id)
}
inline void ChannelMessage::set_sender_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sender_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.ChannelMessage.sender_id)
}
inline void ChannelMessage::set_sender_id(const char* value,
    size_t size) {
  
  sender_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.ChannelMessage.sender_id)
}
inline std::string* ChannelMessage::_internal_mutable_sender_id() {
  
  return sender_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ChannelMessage::release_sender_id() {
  // @@protoc_insertion_point(field_release:nakama.api.ChannelMessage.sender_id)
  return sender_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ChannelMessage::set_allocated_sender_id(std::string* sender_id) {
  if (sender_id != nullptr) {
    
  } else {
    
  }
  sender_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sender_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.ChannelMessage.sender_id)
}

// string username = 5;
inline void ChannelMessage::clear_username() {
  username_.ClearToEmpty();
}
inline const std::string& ChannelMessage::username() const {
  // @@protoc_insertion_point(field_get:nakama.api.ChannelMessage.username)
  return _internal_username();
}
inline void ChannelMessage::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:nakama.api.ChannelMessage.username)
}
inline std::string* ChannelMessage::mutable_username() {
  // @@protoc_insertion_point(field_mutable:nakama.api.ChannelMessage.username)
  return _internal_mutable_username();
}
inline const std::string& ChannelMessage::_internal_username() const {
  return username_.Get();
}
inline void ChannelMessage::_internal_set_username(const std::string& value) {
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ChannelMessage::set_username(std::string&& value) {
  
  username_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.ChannelMessage.username)
}
inline void ChannelMessage::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.ChannelMessage.username)
}
inline void ChannelMessage::set_username(const char* value,
    size_t size) {
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.ChannelMessage.username)
}
inline std::string* ChannelMessage::_internal_mutable_username() {
  
  return username_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ChannelMessage::release_username() {
  // @@protoc_insertion_point(field_release:nakama.api.ChannelMessage.username)
  return username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ChannelMessage::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.ChannelMessage.username)
}

// string content = 6;
inline void ChannelMessage::clear_content() {
  content_.ClearToEmpty();
}
inline const std::string& ChannelMessage::content() const {
  // @@protoc_insertion_point(field_get:nakama.api.ChannelMessage.content)
  return _internal_content();
}
inline void ChannelMessage::set_content(const std::string& value) {
  _internal_set_content(value);
  // @@protoc_insertion_point(field_set:nakama.api.ChannelMessage.content)
}
inline std::string* ChannelMessage::mutable_content() {
  // @@protoc_insertion_point(field_mutable:nakama.api.ChannelMessage.content)
  return _internal_mutable_content();
}
inline const std::string& ChannelMessage::_internal_content() const {
  return content_.Get();
}
inline void ChannelMessage::_internal_set_content(const std::string& value) {
  
  content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ChannelMessage::set_content(std::string&& value) {
  
  content_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.ChannelMessage.content)
}
inline void ChannelMessage::set_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.ChannelMessage.content)
}
inline void ChannelMessage::set_content(const char* value,
    size_t size) {
  
  content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.ChannelMessage.content)
}
inline std::string* ChannelMessage::_internal_mutable_content() {
  
  return content_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ChannelMessage::release_content() {
  // @@protoc_insertion_point(field_release:nakama.api.ChannelMessage.content)
  return content_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ChannelMessage::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  content_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.ChannelMessage.content)
}

// .google.protobuf.Timestamp create_time = 7;
inline bool ChannelMessage::_internal_has_create_time() const {
  return this != internal_default_instance() && create_time_ != nullptr;
}
inline bool ChannelMessage::has_create_time() const {
  return _internal_has_create_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& ChannelMessage::_internal_create_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = create_time_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& ChannelMessage::create_time() const {
  // @@protoc_insertion_point(field_get:nakama.api.ChannelMessage.create_time)
  return _internal_create_time();
}
inline void ChannelMessage::unsafe_arena_set_allocated_create_time(
    PROTOBUF_NAMESPACE_ID::Timestamp* create_time) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(create_time_);
  }
  create_time_ = create_time;
  if (create_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nakama.api.ChannelMessage.create_time)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ChannelMessage::release_create_time() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = create_time_;
  create_time_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ChannelMessage::unsafe_arena_release_create_time() {
  // @@protoc_insertion_point(field_release:nakama.api.ChannelMessage.create_time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = create_time_;
  create_time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ChannelMessage::_internal_mutable_create_time() {
  
  if (create_time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    create_time_ = p;
  }
  return create_time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ChannelMessage::mutable_create_time() {
  // @@protoc_insertion_point(field_mutable:nakama.api.ChannelMessage.create_time)
  return _internal_mutable_create_time();
}
inline void ChannelMessage::set_allocated_create_time(PROTOBUF_NAMESPACE_ID::Timestamp* create_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(create_time_);
  }
  if (create_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(create_time)->GetArena();
    if (message_arena != submessage_arena) {
      create_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, create_time, submessage_arena);
    }
    
  } else {
    
  }
  create_time_ = create_time;
  // @@protoc_insertion_point(field_set_allocated:nakama.api.ChannelMessage.create_time)
}

// .google.protobuf.Timestamp update_time = 8;
inline bool ChannelMessage::_internal_has_update_time() const {
  return this != internal_default_instance() && update_time_ != nullptr;
}
inline bool ChannelMessage::has_update_time() const {
  return _internal_has_update_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& ChannelMessage::_internal_update_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = update_time_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& ChannelMessage::update_time() const {
  // @@protoc_insertion_point(field_get:nakama.api.ChannelMessage.update_time)
  return _internal_update_time();
}
inline void ChannelMessage::unsafe_arena_set_allocated_update_time(
    PROTOBUF_NAMESPACE_ID::Timestamp* update_time) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_time_);
  }
  update_time_ = update_time;
  if (update_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nakama.api.ChannelMessage.update_time)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ChannelMessage::release_update_time() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = update_time_;
  update_time_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ChannelMessage::unsafe_arena_release_update_time() {
  // @@protoc_insertion_point(field_release:nakama.api.ChannelMessage.update_time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = update_time_;
  update_time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ChannelMessage::_internal_mutable_update_time() {
  
  if (update_time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    update_time_ = p;
  }
  return update_time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ChannelMessage::mutable_update_time() {
  // @@protoc_insertion_point(field_mutable:nakama.api.ChannelMessage.update_time)
  return _internal_mutable_update_time();
}
inline void ChannelMessage::set_allocated_update_time(PROTOBUF_NAMESPACE_ID::Timestamp* update_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_time_);
  }
  if (update_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_time)->GetArena();
    if (message_arena != submessage_arena) {
      update_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_time, submessage_arena);
    }
    
  } else {
    
  }
  update_time_ = update_time;
  // @@protoc_insertion_point(field_set_allocated:nakama.api.ChannelMessage.update_time)
}

// .google.protobuf.BoolValue persistent = 9;
inline bool ChannelMessage::_internal_has_persistent() const {
  return this != internal_default_instance() && persistent_ != nullptr;
}
inline bool ChannelMessage::has_persistent() const {
  return _internal_has_persistent();
}
inline const PROTOBUF_NAMESPACE_ID::BoolValue& ChannelMessage::_internal_persistent() const {
  const PROTOBUF_NAMESPACE_ID::BoolValue* p = persistent_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::BoolValue&>(
      PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::BoolValue& ChannelMessage::persistent() const {
  // @@protoc_insertion_point(field_get:nakama.api.ChannelMessage.persistent)
  return _internal_persistent();
}
inline void ChannelMessage::unsafe_arena_set_allocated_persistent(
    PROTOBUF_NAMESPACE_ID::BoolValue* persistent) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(persistent_);
  }
  persistent_ = persistent;
  if (persistent) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nakama.api.ChannelMessage.persistent)
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* ChannelMessage::release_persistent() {
  
  PROTOBUF_NAMESPACE_ID::BoolValue* temp = persistent_;
  persistent_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* ChannelMessage::unsafe_arena_release_persistent() {
  // @@protoc_insertion_point(field_release:nakama.api.ChannelMessage.persistent)
  
  PROTOBUF_NAMESPACE_ID::BoolValue* temp = persistent_;
  persistent_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* ChannelMessage::_internal_mutable_persistent() {
  
  if (persistent_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::BoolValue>(GetArena());
    persistent_ = p;
  }
  return persistent_;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* ChannelMessage::mutable_persistent() {
  // @@protoc_insertion_point(field_mutable:nakama.api.ChannelMessage.persistent)
  return _internal_mutable_persistent();
}
inline void ChannelMessage::set_allocated_persistent(PROTOBUF_NAMESPACE_ID::BoolValue* persistent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(persistent_);
  }
  if (persistent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(persistent)->GetArena();
    if (message_arena != submessage_arena) {
      persistent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, persistent, submessage_arena);
    }
    
  } else {
    
  }
  persistent_ = persistent;
  // @@protoc_insertion_point(field_set_allocated:nakama.api.ChannelMessage.persistent)
}

// string room_name = 10;
inline void ChannelMessage::clear_room_name() {
  room_name_.ClearToEmpty();
}
inline const std::string& ChannelMessage::room_name() const {
  // @@protoc_insertion_point(field_get:nakama.api.ChannelMessage.room_name)
  return _internal_room_name();
}
inline void ChannelMessage::set_room_name(const std::string& value) {
  _internal_set_room_name(value);
  // @@protoc_insertion_point(field_set:nakama.api.ChannelMessage.room_name)
}
inline std::string* ChannelMessage::mutable_room_name() {
  // @@protoc_insertion_point(field_mutable:nakama.api.ChannelMessage.room_name)
  return _internal_mutable_room_name();
}
inline const std::string& ChannelMessage::_internal_room_name() const {
  return room_name_.Get();
}
inline void ChannelMessage::_internal_set_room_name(const std::string& value) {
  
  room_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ChannelMessage::set_room_name(std::string&& value) {
  
  room_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.ChannelMessage.room_name)
}
inline void ChannelMessage::set_room_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  room_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.ChannelMessage.room_name)
}
inline void ChannelMessage::set_room_name(const char* value,
    size_t size) {
  
  room_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.ChannelMessage.room_name)
}
inline std::string* ChannelMessage::_internal_mutable_room_name() {
  
  return room_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ChannelMessage::release_room_name() {
  // @@protoc_insertion_point(field_release:nakama.api.ChannelMessage.room_name)
  return room_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ChannelMessage::set_allocated_room_name(std::string* room_name) {
  if (room_name != nullptr) {
    
  } else {
    
  }
  room_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), room_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.ChannelMessage.room_name)
}

// string group_id = 11;
inline void ChannelMessage::clear_group_id() {
  group_id_.ClearToEmpty();
}
inline const std::string& ChannelMessage::group_id() const {
  // @@protoc_insertion_point(field_get:nakama.api.ChannelMessage.group_id)
  return _internal_group_id();
}
inline void ChannelMessage::set_group_id(const std::string& value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:nakama.api.ChannelMessage.group_id)
}
inline std::string* ChannelMessage::mutable_group_id() {
  // @@protoc_insertion_point(field_mutable:nakama.api.ChannelMessage.group_id)
  return _internal_mutable_group_id();
}
inline const std::string& ChannelMessage::_internal_group_id() const {
  return group_id_.Get();
}
inline void ChannelMessage::_internal_set_group_id(const std::string& value) {
  
  group_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ChannelMessage::set_group_id(std::string&& value) {
  
  group_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.ChannelMessage.group_id)
}
inline void ChannelMessage::set_group_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  group_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.ChannelMessage.group_id)
}
inline void ChannelMessage::set_group_id(const char* value,
    size_t size) {
  
  group_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.ChannelMessage.group_id)
}
inline std::string* ChannelMessage::_internal_mutable_group_id() {
  
  return group_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ChannelMessage::release_group_id() {
  // @@protoc_insertion_point(field_release:nakama.api.ChannelMessage.group_id)
  return group_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ChannelMessage::set_allocated_group_id(std::string* group_id) {
  if (group_id != nullptr) {
    
  } else {
    
  }
  group_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), group_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.ChannelMessage.group_id)
}

// string user_id_one = 12;
inline void ChannelMessage::clear_user_id_one() {
  user_id_one_.ClearToEmpty();
}
inline const std::string& ChannelMessage::user_id_one() const {
  // @@protoc_insertion_point(field_get:nakama.api.ChannelMessage.user_id_one)
  return _internal_user_id_one();
}
inline void ChannelMessage::set_user_id_one(const std::string& value) {
  _internal_set_user_id_one(value);
  // @@protoc_insertion_point(field_set:nakama.api.ChannelMessage.user_id_one)
}
inline std::string* ChannelMessage::mutable_user_id_one() {
  // @@protoc_insertion_point(field_mutable:nakama.api.ChannelMessage.user_id_one)
  return _internal_mutable_user_id_one();
}
inline const std::string& ChannelMessage::_internal_user_id_one() const {
  return user_id_one_.Get();
}
inline void ChannelMessage::_internal_set_user_id_one(const std::string& value) {
  
  user_id_one_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ChannelMessage::set_user_id_one(std::string&& value) {
  
  user_id_one_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.ChannelMessage.user_id_one)
}
inline void ChannelMessage::set_user_id_one(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_one_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.ChannelMessage.user_id_one)
}
inline void ChannelMessage::set_user_id_one(const char* value,
    size_t size) {
  
  user_id_one_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.ChannelMessage.user_id_one)
}
inline std::string* ChannelMessage::_internal_mutable_user_id_one() {
  
  return user_id_one_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ChannelMessage::release_user_id_one() {
  // @@protoc_insertion_point(field_release:nakama.api.ChannelMessage.user_id_one)
  return user_id_one_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ChannelMessage::set_allocated_user_id_one(std::string* user_id_one) {
  if (user_id_one != nullptr) {
    
  } else {
    
  }
  user_id_one_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id_one,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.ChannelMessage.user_id_one)
}

// string user_id_two = 13;
inline void ChannelMessage::clear_user_id_two() {
  user_id_two_.ClearToEmpty();
}
inline const std::string& ChannelMessage::user_id_two() const {
  // @@protoc_insertion_point(field_get:nakama.api.ChannelMessage.user_id_two)
  return _internal_user_id_two();
}
inline void ChannelMessage::set_user_id_two(const std::string& value) {
  _internal_set_user_id_two(value);
  // @@protoc_insertion_point(field_set:nakama.api.ChannelMessage.user_id_two)
}
inline std::string* ChannelMessage::mutable_user_id_two() {
  // @@protoc_insertion_point(field_mutable:nakama.api.ChannelMessage.user_id_two)
  return _internal_mutable_user_id_two();
}
inline const std::string& ChannelMessage::_internal_user_id_two() const {
  return user_id_two_.Get();
}
inline void ChannelMessage::_internal_set_user_id_two(const std::string& value) {
  
  user_id_two_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ChannelMessage::set_user_id_two(std::string&& value) {
  
  user_id_two_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.ChannelMessage.user_id_two)
}
inline void ChannelMessage::set_user_id_two(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_two_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.ChannelMessage.user_id_two)
}
inline void ChannelMessage::set_user_id_two(const char* value,
    size_t size) {
  
  user_id_two_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.ChannelMessage.user_id_two)
}
inline std::string* ChannelMessage::_internal_mutable_user_id_two() {
  
  return user_id_two_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ChannelMessage::release_user_id_two() {
  // @@protoc_insertion_point(field_release:nakama.api.ChannelMessage.user_id_two)
  return user_id_two_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ChannelMessage::set_allocated_user_id_two(std::string* user_id_two) {
  if (user_id_two != nullptr) {
    
  } else {
    
  }
  user_id_two_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id_two,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.ChannelMessage.user_id_two)
}

// -------------------------------------------------------------------

// ChannelMessageList

// repeated .nakama.api.ChannelMessage messages = 1;
inline int ChannelMessageList::_internal_messages_size() const {
  return messages_.size();
}
inline int ChannelMessageList::messages_size() const {
  return _internal_messages_size();
}
inline void ChannelMessageList::clear_messages() {
  messages_.Clear();
}
inline ::nakama::api::ChannelMessage* ChannelMessageList::mutable_messages(int index) {
  // @@protoc_insertion_point(field_mutable:nakama.api.ChannelMessageList.messages)
  return messages_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nakama::api::ChannelMessage >*
ChannelMessageList::mutable_messages() {
  // @@protoc_insertion_point(field_mutable_list:nakama.api.ChannelMessageList.messages)
  return &messages_;
}
inline const ::nakama::api::ChannelMessage& ChannelMessageList::_internal_messages(int index) const {
  return messages_.Get(index);
}
inline const ::nakama::api::ChannelMessage& ChannelMessageList::messages(int index) const {
  // @@protoc_insertion_point(field_get:nakama.api.ChannelMessageList.messages)
  return _internal_messages(index);
}
inline ::nakama::api::ChannelMessage* ChannelMessageList::_internal_add_messages() {
  return messages_.Add();
}
inline ::nakama::api::ChannelMessage* ChannelMessageList::add_messages() {
  // @@protoc_insertion_point(field_add:nakama.api.ChannelMessageList.messages)
  return _internal_add_messages();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nakama::api::ChannelMessage >&
ChannelMessageList::messages() const {
  // @@protoc_insertion_point(field_list:nakama.api.ChannelMessageList.messages)
  return messages_;
}

// string next_cursor = 2;
inline void ChannelMessageList::clear_next_cursor() {
  next_cursor_.ClearToEmpty();
}
inline const std::string& ChannelMessageList::next_cursor() const {
  // @@protoc_insertion_point(field_get:nakama.api.ChannelMessageList.next_cursor)
  return _internal_next_cursor();
}
inline void ChannelMessageList::set_next_cursor(const std::string& value) {
  _internal_set_next_cursor(value);
  // @@protoc_insertion_point(field_set:nakama.api.ChannelMessageList.next_cursor)
}
inline std::string* ChannelMessageList::mutable_next_cursor() {
  // @@protoc_insertion_point(field_mutable:nakama.api.ChannelMessageList.next_cursor)
  return _internal_mutable_next_cursor();
}
inline const std::string& ChannelMessageList::_internal_next_cursor() const {
  return next_cursor_.Get();
}
inline void ChannelMessageList::_internal_set_next_cursor(const std::string& value) {
  
  next_cursor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ChannelMessageList::set_next_cursor(std::string&& value) {
  
  next_cursor_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.ChannelMessageList.next_cursor)
}
inline void ChannelMessageList::set_next_cursor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  next_cursor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.ChannelMessageList.next_cursor)
}
inline void ChannelMessageList::set_next_cursor(const char* value,
    size_t size) {
  
  next_cursor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.ChannelMessageList.next_cursor)
}
inline std::string* ChannelMessageList::_internal_mutable_next_cursor() {
  
  return next_cursor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ChannelMessageList::release_next_cursor() {
  // @@protoc_insertion_point(field_release:nakama.api.ChannelMessageList.next_cursor)
  return next_cursor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ChannelMessageList::set_allocated_next_cursor(std::string* next_cursor) {
  if (next_cursor != nullptr) {
    
  } else {
    
  }
  next_cursor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), next_cursor,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.ChannelMessageList.next_cursor)
}

// string prev_cursor = 3;
inline void ChannelMessageList::clear_prev_cursor() {
  prev_cursor_.ClearToEmpty();
}
inline const std::string& ChannelMessageList::prev_cursor() const {
  // @@protoc_insertion_point(field_get:nakama.api.ChannelMessageList.prev_cursor)
  return _internal_prev_cursor();
}
inline void ChannelMessageList::set_prev_cursor(const std::string& value) {
  _internal_set_prev_cursor(value);
  // @@protoc_insertion_point(field_set:nakama.api.ChannelMessageList.prev_cursor)
}
inline std::string* ChannelMessageList::mutable_prev_cursor() {
  // @@protoc_insertion_point(field_mutable:nakama.api.ChannelMessageList.prev_cursor)
  return _internal_mutable_prev_cursor();
}
inline const std::string& ChannelMessageList::_internal_prev_cursor() const {
  return prev_cursor_.Get();
}
inline void ChannelMessageList::_internal_set_prev_cursor(const std::string& value) {
  
  prev_cursor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ChannelMessageList::set_prev_cursor(std::string&& value) {
  
  prev_cursor_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.ChannelMessageList.prev_cursor)
}
inline void ChannelMessageList::set_prev_cursor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  prev_cursor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.ChannelMessageList.prev_cursor)
}
inline void ChannelMessageList::set_prev_cursor(const char* value,
    size_t size) {
  
  prev_cursor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.ChannelMessageList.prev_cursor)
}
inline std::string* ChannelMessageList::_internal_mutable_prev_cursor() {
  
  return prev_cursor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ChannelMessageList::release_prev_cursor() {
  // @@protoc_insertion_point(field_release:nakama.api.ChannelMessageList.prev_cursor)
  return prev_cursor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ChannelMessageList::set_allocated_prev_cursor(std::string* prev_cursor) {
  if (prev_cursor != nullptr) {
    
  } else {
    
  }
  prev_cursor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), prev_cursor,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.ChannelMessageList.prev_cursor)
}

// string cacheable_cursor = 4;
inline void ChannelMessageList::clear_cacheable_cursor() {
  cacheable_cursor_.ClearToEmpty();
}
inline const std::string& ChannelMessageList::cacheable_cursor() const {
  // @@protoc_insertion_point(field_get:nakama.api.ChannelMessageList.cacheable_cursor)
  return _internal_cacheable_cursor();
}
inline void ChannelMessageList::set_cacheable_cursor(const std::string& value) {
  _internal_set_cacheable_cursor(value);
  // @@protoc_insertion_point(field_set:nakama.api.ChannelMessageList.cacheable_cursor)
}
inline std::string* ChannelMessageList::mutable_cacheable_cursor() {
  // @@protoc_insertion_point(field_mutable:nakama.api.ChannelMessageList.cacheable_cursor)
  return _internal_mutable_cacheable_cursor();
}
inline const std::string& ChannelMessageList::_internal_cacheable_cursor() const {
  return cacheable_cursor_.Get();
}
inline void ChannelMessageList::_internal_set_cacheable_cursor(const std::string& value) {
  
  cacheable_cursor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ChannelMessageList::set_cacheable_cursor(std::string&& value) {
  
  cacheable_cursor_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.ChannelMessageList.cacheable_cursor)
}
inline void ChannelMessageList::set_cacheable_cursor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cacheable_cursor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.ChannelMessageList.cacheable_cursor)
}
inline void ChannelMessageList::set_cacheable_cursor(const char* value,
    size_t size) {
  
  cacheable_cursor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.ChannelMessageList.cacheable_cursor)
}
inline std::string* ChannelMessageList::_internal_mutable_cacheable_cursor() {
  
  return cacheable_cursor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ChannelMessageList::release_cacheable_cursor() {
  // @@protoc_insertion_point(field_release:nakama.api.ChannelMessageList.cacheable_cursor)
  return cacheable_cursor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ChannelMessageList::set_allocated_cacheable_cursor(std::string* cacheable_cursor) {
  if (cacheable_cursor != nullptr) {
    
  } else {
    
  }
  cacheable_cursor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cacheable_cursor,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.ChannelMessageList.cacheable_cursor)
}

// -------------------------------------------------------------------

// CreateGroupRequest

// string name = 1;
inline void CreateGroupRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& CreateGroupRequest::name() const {
  // @@protoc_insertion_point(field_get:nakama.api.CreateGroupRequest.name)
  return _internal_name();
}
inline void CreateGroupRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:nakama.api.CreateGroupRequest.name)
}
inline std::string* CreateGroupRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:nakama.api.CreateGroupRequest.name)
  return _internal_mutable_name();
}
inline const std::string& CreateGroupRequest::_internal_name() const {
  return name_.Get();
}
inline void CreateGroupRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CreateGroupRequest::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.CreateGroupRequest.name)
}
inline void CreateGroupRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.CreateGroupRequest.name)
}
inline void CreateGroupRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.CreateGroupRequest.name)
}
inline std::string* CreateGroupRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CreateGroupRequest::release_name() {
  // @@protoc_insertion_point(field_release:nakama.api.CreateGroupRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateGroupRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.CreateGroupRequest.name)
}

// string description = 2;
inline void CreateGroupRequest::clear_description() {
  description_.ClearToEmpty();
}
inline const std::string& CreateGroupRequest::description() const {
  // @@protoc_insertion_point(field_get:nakama.api.CreateGroupRequest.description)
  return _internal_description();
}
inline void CreateGroupRequest::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:nakama.api.CreateGroupRequest.description)
}
inline std::string* CreateGroupRequest::mutable_description() {
  // @@protoc_insertion_point(field_mutable:nakama.api.CreateGroupRequest.description)
  return _internal_mutable_description();
}
inline const std::string& CreateGroupRequest::_internal_description() const {
  return description_.Get();
}
inline void CreateGroupRequest::_internal_set_description(const std::string& value) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CreateGroupRequest::set_description(std::string&& value) {
  
  description_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.CreateGroupRequest.description)
}
inline void CreateGroupRequest::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.CreateGroupRequest.description)
}
inline void CreateGroupRequest::set_description(const char* value,
    size_t size) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.CreateGroupRequest.description)
}
inline std::string* CreateGroupRequest::_internal_mutable_description() {
  
  return description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CreateGroupRequest::release_description() {
  // @@protoc_insertion_point(field_release:nakama.api.CreateGroupRequest.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateGroupRequest::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.CreateGroupRequest.description)
}

// string lang_tag = 3;
inline void CreateGroupRequest::clear_lang_tag() {
  lang_tag_.ClearToEmpty();
}
inline const std::string& CreateGroupRequest::lang_tag() const {
  // @@protoc_insertion_point(field_get:nakama.api.CreateGroupRequest.lang_tag)
  return _internal_lang_tag();
}
inline void CreateGroupRequest::set_lang_tag(const std::string& value) {
  _internal_set_lang_tag(value);
  // @@protoc_insertion_point(field_set:nakama.api.CreateGroupRequest.lang_tag)
}
inline std::string* CreateGroupRequest::mutable_lang_tag() {
  // @@protoc_insertion_point(field_mutable:nakama.api.CreateGroupRequest.lang_tag)
  return _internal_mutable_lang_tag();
}
inline const std::string& CreateGroupRequest::_internal_lang_tag() const {
  return lang_tag_.Get();
}
inline void CreateGroupRequest::_internal_set_lang_tag(const std::string& value) {
  
  lang_tag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CreateGroupRequest::set_lang_tag(std::string&& value) {
  
  lang_tag_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.CreateGroupRequest.lang_tag)
}
inline void CreateGroupRequest::set_lang_tag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  lang_tag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.CreateGroupRequest.lang_tag)
}
inline void CreateGroupRequest::set_lang_tag(const char* value,
    size_t size) {
  
  lang_tag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.CreateGroupRequest.lang_tag)
}
inline std::string* CreateGroupRequest::_internal_mutable_lang_tag() {
  
  return lang_tag_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CreateGroupRequest::release_lang_tag() {
  // @@protoc_insertion_point(field_release:nakama.api.CreateGroupRequest.lang_tag)
  return lang_tag_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateGroupRequest::set_allocated_lang_tag(std::string* lang_tag) {
  if (lang_tag != nullptr) {
    
  } else {
    
  }
  lang_tag_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), lang_tag,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.CreateGroupRequest.lang_tag)
}

// string avatar_url = 4;
inline void CreateGroupRequest::clear_avatar_url() {
  avatar_url_.ClearToEmpty();
}
inline const std::string& CreateGroupRequest::avatar_url() const {
  // @@protoc_insertion_point(field_get:nakama.api.CreateGroupRequest.avatar_url)
  return _internal_avatar_url();
}
inline void CreateGroupRequest::set_avatar_url(const std::string& value) {
  _internal_set_avatar_url(value);
  // @@protoc_insertion_point(field_set:nakama.api.CreateGroupRequest.avatar_url)
}
inline std::string* CreateGroupRequest::mutable_avatar_url() {
  // @@protoc_insertion_point(field_mutable:nakama.api.CreateGroupRequest.avatar_url)
  return _internal_mutable_avatar_url();
}
inline const std::string& CreateGroupRequest::_internal_avatar_url() const {
  return avatar_url_.Get();
}
inline void CreateGroupRequest::_internal_set_avatar_url(const std::string& value) {
  
  avatar_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CreateGroupRequest::set_avatar_url(std::string&& value) {
  
  avatar_url_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.CreateGroupRequest.avatar_url)
}
inline void CreateGroupRequest::set_avatar_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  avatar_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.CreateGroupRequest.avatar_url)
}
inline void CreateGroupRequest::set_avatar_url(const char* value,
    size_t size) {
  
  avatar_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.CreateGroupRequest.avatar_url)
}
inline std::string* CreateGroupRequest::_internal_mutable_avatar_url() {
  
  return avatar_url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CreateGroupRequest::release_avatar_url() {
  // @@protoc_insertion_point(field_release:nakama.api.CreateGroupRequest.avatar_url)
  return avatar_url_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateGroupRequest::set_allocated_avatar_url(std::string* avatar_url) {
  if (avatar_url != nullptr) {
    
  } else {
    
  }
  avatar_url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), avatar_url,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.CreateGroupRequest.avatar_url)
}

// bool open = 5;
inline void CreateGroupRequest::clear_open() {
  open_ = false;
}
inline bool CreateGroupRequest::_internal_open() const {
  return open_;
}
inline bool CreateGroupRequest::open() const {
  // @@protoc_insertion_point(field_get:nakama.api.CreateGroupRequest.open)
  return _internal_open();
}
inline void CreateGroupRequest::_internal_set_open(bool value) {
  
  open_ = value;
}
inline void CreateGroupRequest::set_open(bool value) {
  _internal_set_open(value);
  // @@protoc_insertion_point(field_set:nakama.api.CreateGroupRequest.open)
}

// int32 max_count = 6;
inline void CreateGroupRequest::clear_max_count() {
  max_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreateGroupRequest::_internal_max_count() const {
  return max_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreateGroupRequest::max_count() const {
  // @@protoc_insertion_point(field_get:nakama.api.CreateGroupRequest.max_count)
  return _internal_max_count();
}
inline void CreateGroupRequest::_internal_set_max_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  max_count_ = value;
}
inline void CreateGroupRequest::set_max_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_max_count(value);
  // @@protoc_insertion_point(field_set:nakama.api.CreateGroupRequest.max_count)
}

// -------------------------------------------------------------------

// DeleteFriendsRequest

// repeated string ids = 1;
inline int DeleteFriendsRequest::_internal_ids_size() const {
  return ids_.size();
}
inline int DeleteFriendsRequest::ids_size() const {
  return _internal_ids_size();
}
inline void DeleteFriendsRequest::clear_ids() {
  ids_.Clear();
}
inline std::string* DeleteFriendsRequest::add_ids() {
  // @@protoc_insertion_point(field_add_mutable:nakama.api.DeleteFriendsRequest.ids)
  return _internal_add_ids();
}
inline const std::string& DeleteFriendsRequest::_internal_ids(int index) const {
  return ids_.Get(index);
}
inline const std::string& DeleteFriendsRequest::ids(int index) const {
  // @@protoc_insertion_point(field_get:nakama.api.DeleteFriendsRequest.ids)
  return _internal_ids(index);
}
inline std::string* DeleteFriendsRequest::mutable_ids(int index) {
  // @@protoc_insertion_point(field_mutable:nakama.api.DeleteFriendsRequest.ids)
  return ids_.Mutable(index);
}
inline void DeleteFriendsRequest::set_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:nakama.api.DeleteFriendsRequest.ids)
  ids_.Mutable(index)->assign(value);
}
inline void DeleteFriendsRequest::set_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:nakama.api.DeleteFriendsRequest.ids)
  ids_.Mutable(index)->assign(std::move(value));
}
inline void DeleteFriendsRequest::set_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:nakama.api.DeleteFriendsRequest.ids)
}
inline void DeleteFriendsRequest::set_ids(int index, const char* value, size_t size) {
  ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:nakama.api.DeleteFriendsRequest.ids)
}
inline std::string* DeleteFriendsRequest::_internal_add_ids() {
  return ids_.Add();
}
inline void DeleteFriendsRequest::add_ids(const std::string& value) {
  ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:nakama.api.DeleteFriendsRequest.ids)
}
inline void DeleteFriendsRequest::add_ids(std::string&& value) {
  ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:nakama.api.DeleteFriendsRequest.ids)
}
inline void DeleteFriendsRequest::add_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:nakama.api.DeleteFriendsRequest.ids)
}
inline void DeleteFriendsRequest::add_ids(const char* value, size_t size) {
  ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:nakama.api.DeleteFriendsRequest.ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
DeleteFriendsRequest::ids() const {
  // @@protoc_insertion_point(field_list:nakama.api.DeleteFriendsRequest.ids)
  return ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
DeleteFriendsRequest::mutable_ids() {
  // @@protoc_insertion_point(field_mutable_list:nakama.api.DeleteFriendsRequest.ids)
  return &ids_;
}

// repeated string usernames = 2;
inline int DeleteFriendsRequest::_internal_usernames_size() const {
  return usernames_.size();
}
inline int DeleteFriendsRequest::usernames_size() const {
  return _internal_usernames_size();
}
inline void DeleteFriendsRequest::clear_usernames() {
  usernames_.Clear();
}
inline std::string* DeleteFriendsRequest::add_usernames() {
  // @@protoc_insertion_point(field_add_mutable:nakama.api.DeleteFriendsRequest.usernames)
  return _internal_add_usernames();
}
inline const std::string& DeleteFriendsRequest::_internal_usernames(int index) const {
  return usernames_.Get(index);
}
inline const std::string& DeleteFriendsRequest::usernames(int index) const {
  // @@protoc_insertion_point(field_get:nakama.api.DeleteFriendsRequest.usernames)
  return _internal_usernames(index);
}
inline std::string* DeleteFriendsRequest::mutable_usernames(int index) {
  // @@protoc_insertion_point(field_mutable:nakama.api.DeleteFriendsRequest.usernames)
  return usernames_.Mutable(index);
}
inline void DeleteFriendsRequest::set_usernames(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:nakama.api.DeleteFriendsRequest.usernames)
  usernames_.Mutable(index)->assign(value);
}
inline void DeleteFriendsRequest::set_usernames(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:nakama.api.DeleteFriendsRequest.usernames)
  usernames_.Mutable(index)->assign(std::move(value));
}
inline void DeleteFriendsRequest::set_usernames(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  usernames_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:nakama.api.DeleteFriendsRequest.usernames)
}
inline void DeleteFriendsRequest::set_usernames(int index, const char* value, size_t size) {
  usernames_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:nakama.api.DeleteFriendsRequest.usernames)
}
inline std::string* DeleteFriendsRequest::_internal_add_usernames() {
  return usernames_.Add();
}
inline void DeleteFriendsRequest::add_usernames(const std::string& value) {
  usernames_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:nakama.api.DeleteFriendsRequest.usernames)
}
inline void DeleteFriendsRequest::add_usernames(std::string&& value) {
  usernames_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:nakama.api.DeleteFriendsRequest.usernames)
}
inline void DeleteFriendsRequest::add_usernames(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  usernames_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:nakama.api.DeleteFriendsRequest.usernames)
}
inline void DeleteFriendsRequest::add_usernames(const char* value, size_t size) {
  usernames_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:nakama.api.DeleteFriendsRequest.usernames)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
DeleteFriendsRequest::usernames() const {
  // @@protoc_insertion_point(field_list:nakama.api.DeleteFriendsRequest.usernames)
  return usernames_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
DeleteFriendsRequest::mutable_usernames() {
  // @@protoc_insertion_point(field_mutable_list:nakama.api.DeleteFriendsRequest.usernames)
  return &usernames_;
}

// -------------------------------------------------------------------

// DeleteGroupRequest

// string group_id = 1;
inline void DeleteGroupRequest::clear_group_id() {
  group_id_.ClearToEmpty();
}
inline const std::string& DeleteGroupRequest::group_id() const {
  // @@protoc_insertion_point(field_get:nakama.api.DeleteGroupRequest.group_id)
  return _internal_group_id();
}
inline void DeleteGroupRequest::set_group_id(const std::string& value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:nakama.api.DeleteGroupRequest.group_id)
}
inline std::string* DeleteGroupRequest::mutable_group_id() {
  // @@protoc_insertion_point(field_mutable:nakama.api.DeleteGroupRequest.group_id)
  return _internal_mutable_group_id();
}
inline const std::string& DeleteGroupRequest::_internal_group_id() const {
  return group_id_.Get();
}
inline void DeleteGroupRequest::_internal_set_group_id(const std::string& value) {
  
  group_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DeleteGroupRequest::set_group_id(std::string&& value) {
  
  group_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.DeleteGroupRequest.group_id)
}
inline void DeleteGroupRequest::set_group_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  group_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.DeleteGroupRequest.group_id)
}
inline void DeleteGroupRequest::set_group_id(const char* value,
    size_t size) {
  
  group_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.DeleteGroupRequest.group_id)
}
inline std::string* DeleteGroupRequest::_internal_mutable_group_id() {
  
  return group_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DeleteGroupRequest::release_group_id() {
  // @@protoc_insertion_point(field_release:nakama.api.DeleteGroupRequest.group_id)
  return group_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeleteGroupRequest::set_allocated_group_id(std::string* group_id) {
  if (group_id != nullptr) {
    
  } else {
    
  }
  group_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), group_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.DeleteGroupRequest.group_id)
}

// -------------------------------------------------------------------

// DeleteLeaderboardRecordRequest

// string leaderboard_id = 1;
inline void DeleteLeaderboardRecordRequest::clear_leaderboard_id() {
  leaderboard_id_.ClearToEmpty();
}
inline const std::string& DeleteLeaderboardRecordRequest::leaderboard_id() const {
  // @@protoc_insertion_point(field_get:nakama.api.DeleteLeaderboardRecordRequest.leaderboard_id)
  return _internal_leaderboard_id();
}
inline void DeleteLeaderboardRecordRequest::set_leaderboard_id(const std::string& value) {
  _internal_set_leaderboard_id(value);
  // @@protoc_insertion_point(field_set:nakama.api.DeleteLeaderboardRecordRequest.leaderboard_id)
}
inline std::string* DeleteLeaderboardRecordRequest::mutable_leaderboard_id() {
  // @@protoc_insertion_point(field_mutable:nakama.api.DeleteLeaderboardRecordRequest.leaderboard_id)
  return _internal_mutable_leaderboard_id();
}
inline const std::string& DeleteLeaderboardRecordRequest::_internal_leaderboard_id() const {
  return leaderboard_id_.Get();
}
inline void DeleteLeaderboardRecordRequest::_internal_set_leaderboard_id(const std::string& value) {
  
  leaderboard_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DeleteLeaderboardRecordRequest::set_leaderboard_id(std::string&& value) {
  
  leaderboard_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.DeleteLeaderboardRecordRequest.leaderboard_id)
}
inline void DeleteLeaderboardRecordRequest::set_leaderboard_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  leaderboard_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.DeleteLeaderboardRecordRequest.leaderboard_id)
}
inline void DeleteLeaderboardRecordRequest::set_leaderboard_id(const char* value,
    size_t size) {
  
  leaderboard_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.DeleteLeaderboardRecordRequest.leaderboard_id)
}
inline std::string* DeleteLeaderboardRecordRequest::_internal_mutable_leaderboard_id() {
  
  return leaderboard_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DeleteLeaderboardRecordRequest::release_leaderboard_id() {
  // @@protoc_insertion_point(field_release:nakama.api.DeleteLeaderboardRecordRequest.leaderboard_id)
  return leaderboard_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeleteLeaderboardRecordRequest::set_allocated_leaderboard_id(std::string* leaderboard_id) {
  if (leaderboard_id != nullptr) {
    
  } else {
    
  }
  leaderboard_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), leaderboard_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.DeleteLeaderboardRecordRequest.leaderboard_id)
}

// -------------------------------------------------------------------

// DeleteNotificationsRequest

// repeated string ids = 1;
inline int DeleteNotificationsRequest::_internal_ids_size() const {
  return ids_.size();
}
inline int DeleteNotificationsRequest::ids_size() const {
  return _internal_ids_size();
}
inline void DeleteNotificationsRequest::clear_ids() {
  ids_.Clear();
}
inline std::string* DeleteNotificationsRequest::add_ids() {
  // @@protoc_insertion_point(field_add_mutable:nakama.api.DeleteNotificationsRequest.ids)
  return _internal_add_ids();
}
inline const std::string& DeleteNotificationsRequest::_internal_ids(int index) const {
  return ids_.Get(index);
}
inline const std::string& DeleteNotificationsRequest::ids(int index) const {
  // @@protoc_insertion_point(field_get:nakama.api.DeleteNotificationsRequest.ids)
  return _internal_ids(index);
}
inline std::string* DeleteNotificationsRequest::mutable_ids(int index) {
  // @@protoc_insertion_point(field_mutable:nakama.api.DeleteNotificationsRequest.ids)
  return ids_.Mutable(index);
}
inline void DeleteNotificationsRequest::set_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:nakama.api.DeleteNotificationsRequest.ids)
  ids_.Mutable(index)->assign(value);
}
inline void DeleteNotificationsRequest::set_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:nakama.api.DeleteNotificationsRequest.ids)
  ids_.Mutable(index)->assign(std::move(value));
}
inline void DeleteNotificationsRequest::set_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:nakama.api.DeleteNotificationsRequest.ids)
}
inline void DeleteNotificationsRequest::set_ids(int index, const char* value, size_t size) {
  ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:nakama.api.DeleteNotificationsRequest.ids)
}
inline std::string* DeleteNotificationsRequest::_internal_add_ids() {
  return ids_.Add();
}
inline void DeleteNotificationsRequest::add_ids(const std::string& value) {
  ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:nakama.api.DeleteNotificationsRequest.ids)
}
inline void DeleteNotificationsRequest::add_ids(std::string&& value) {
  ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:nakama.api.DeleteNotificationsRequest.ids)
}
inline void DeleteNotificationsRequest::add_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:nakama.api.DeleteNotificationsRequest.ids)
}
inline void DeleteNotificationsRequest::add_ids(const char* value, size_t size) {
  ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:nakama.api.DeleteNotificationsRequest.ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
DeleteNotificationsRequest::ids() const {
  // @@protoc_insertion_point(field_list:nakama.api.DeleteNotificationsRequest.ids)
  return ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
DeleteNotificationsRequest::mutable_ids() {
  // @@protoc_insertion_point(field_mutable_list:nakama.api.DeleteNotificationsRequest.ids)
  return &ids_;
}

// -------------------------------------------------------------------

// DeleteStorageObjectId

// string collection = 1;
inline void DeleteStorageObjectId::clear_collection() {
  collection_.ClearToEmpty();
}
inline const std::string& DeleteStorageObjectId::collection() const {
  // @@protoc_insertion_point(field_get:nakama.api.DeleteStorageObjectId.collection)
  return _internal_collection();
}
inline void DeleteStorageObjectId::set_collection(const std::string& value) {
  _internal_set_collection(value);
  // @@protoc_insertion_point(field_set:nakama.api.DeleteStorageObjectId.collection)
}
inline std::string* DeleteStorageObjectId::mutable_collection() {
  // @@protoc_insertion_point(field_mutable:nakama.api.DeleteStorageObjectId.collection)
  return _internal_mutable_collection();
}
inline const std::string& DeleteStorageObjectId::_internal_collection() const {
  return collection_.Get();
}
inline void DeleteStorageObjectId::_internal_set_collection(const std::string& value) {
  
  collection_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DeleteStorageObjectId::set_collection(std::string&& value) {
  
  collection_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.DeleteStorageObjectId.collection)
}
inline void DeleteStorageObjectId::set_collection(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  collection_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.DeleteStorageObjectId.collection)
}
inline void DeleteStorageObjectId::set_collection(const char* value,
    size_t size) {
  
  collection_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.DeleteStorageObjectId.collection)
}
inline std::string* DeleteStorageObjectId::_internal_mutable_collection() {
  
  return collection_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DeleteStorageObjectId::release_collection() {
  // @@protoc_insertion_point(field_release:nakama.api.DeleteStorageObjectId.collection)
  return collection_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeleteStorageObjectId::set_allocated_collection(std::string* collection) {
  if (collection != nullptr) {
    
  } else {
    
  }
  collection_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), collection,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.DeleteStorageObjectId.collection)
}

// string key = 2;
inline void DeleteStorageObjectId::clear_key() {
  key_.ClearToEmpty();
}
inline const std::string& DeleteStorageObjectId::key() const {
  // @@protoc_insertion_point(field_get:nakama.api.DeleteStorageObjectId.key)
  return _internal_key();
}
inline void DeleteStorageObjectId::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:nakama.api.DeleteStorageObjectId.key)
}
inline std::string* DeleteStorageObjectId::mutable_key() {
  // @@protoc_insertion_point(field_mutable:nakama.api.DeleteStorageObjectId.key)
  return _internal_mutable_key();
}
inline const std::string& DeleteStorageObjectId::_internal_key() const {
  return key_.Get();
}
inline void DeleteStorageObjectId::_internal_set_key(const std::string& value) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DeleteStorageObjectId::set_key(std::string&& value) {
  
  key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.DeleteStorageObjectId.key)
}
inline void DeleteStorageObjectId::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.DeleteStorageObjectId.key)
}
inline void DeleteStorageObjectId::set_key(const char* value,
    size_t size) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.DeleteStorageObjectId.key)
}
inline std::string* DeleteStorageObjectId::_internal_mutable_key() {
  
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DeleteStorageObjectId::release_key() {
  // @@protoc_insertion_point(field_release:nakama.api.DeleteStorageObjectId.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeleteStorageObjectId::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.DeleteStorageObjectId.key)
}

// string version = 3;
inline void DeleteStorageObjectId::clear_version() {
  version_.ClearToEmpty();
}
inline const std::string& DeleteStorageObjectId::version() const {
  // @@protoc_insertion_point(field_get:nakama.api.DeleteStorageObjectId.version)
  return _internal_version();
}
inline void DeleteStorageObjectId::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:nakama.api.DeleteStorageObjectId.version)
}
inline std::string* DeleteStorageObjectId::mutable_version() {
  // @@protoc_insertion_point(field_mutable:nakama.api.DeleteStorageObjectId.version)
  return _internal_mutable_version();
}
inline const std::string& DeleteStorageObjectId::_internal_version() const {
  return version_.Get();
}
inline void DeleteStorageObjectId::_internal_set_version(const std::string& value) {
  
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DeleteStorageObjectId::set_version(std::string&& value) {
  
  version_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.DeleteStorageObjectId.version)
}
inline void DeleteStorageObjectId::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.DeleteStorageObjectId.version)
}
inline void DeleteStorageObjectId::set_version(const char* value,
    size_t size) {
  
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.DeleteStorageObjectId.version)
}
inline std::string* DeleteStorageObjectId::_internal_mutable_version() {
  
  return version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DeleteStorageObjectId::release_version() {
  // @@protoc_insertion_point(field_release:nakama.api.DeleteStorageObjectId.version)
  return version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeleteStorageObjectId::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.DeleteStorageObjectId.version)
}

// -------------------------------------------------------------------

// DeleteStorageObjectsRequest

// repeated .nakama.api.DeleteStorageObjectId object_ids = 1;
inline int DeleteStorageObjectsRequest::_internal_object_ids_size() const {
  return object_ids_.size();
}
inline int DeleteStorageObjectsRequest::object_ids_size() const {
  return _internal_object_ids_size();
}
inline void DeleteStorageObjectsRequest::clear_object_ids() {
  object_ids_.Clear();
}
inline ::nakama::api::DeleteStorageObjectId* DeleteStorageObjectsRequest::mutable_object_ids(int index) {
  // @@protoc_insertion_point(field_mutable:nakama.api.DeleteStorageObjectsRequest.object_ids)
  return object_ids_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nakama::api::DeleteStorageObjectId >*
DeleteStorageObjectsRequest::mutable_object_ids() {
  // @@protoc_insertion_point(field_mutable_list:nakama.api.DeleteStorageObjectsRequest.object_ids)
  return &object_ids_;
}
inline const ::nakama::api::DeleteStorageObjectId& DeleteStorageObjectsRequest::_internal_object_ids(int index) const {
  return object_ids_.Get(index);
}
inline const ::nakama::api::DeleteStorageObjectId& DeleteStorageObjectsRequest::object_ids(int index) const {
  // @@protoc_insertion_point(field_get:nakama.api.DeleteStorageObjectsRequest.object_ids)
  return _internal_object_ids(index);
}
inline ::nakama::api::DeleteStorageObjectId* DeleteStorageObjectsRequest::_internal_add_object_ids() {
  return object_ids_.Add();
}
inline ::nakama::api::DeleteStorageObjectId* DeleteStorageObjectsRequest::add_object_ids() {
  // @@protoc_insertion_point(field_add:nakama.api.DeleteStorageObjectsRequest.object_ids)
  return _internal_add_object_ids();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nakama::api::DeleteStorageObjectId >&
DeleteStorageObjectsRequest::object_ids() const {
  // @@protoc_insertion_point(field_list:nakama.api.DeleteStorageObjectsRequest.object_ids)
  return object_ids_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Event

// string name = 1;
inline void Event::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Event::name() const {
  // @@protoc_insertion_point(field_get:nakama.api.Event.name)
  return _internal_name();
}
inline void Event::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:nakama.api.Event.name)
}
inline std::string* Event::mutable_name() {
  // @@protoc_insertion_point(field_mutable:nakama.api.Event.name)
  return _internal_mutable_name();
}
inline const std::string& Event::_internal_name() const {
  return name_.Get();
}
inline void Event::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Event::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.Event.name)
}
inline void Event::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.Event.name)
}
inline void Event::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.Event.name)
}
inline std::string* Event::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Event::release_name() {
  // @@protoc_insertion_point(field_release:nakama.api.Event.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Event::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.Event.name)
}

// map<string, string> properties = 2;
inline int Event::_internal_properties_size() const {
  return properties_.size();
}
inline int Event::properties_size() const {
  return _internal_properties_size();
}
inline void Event::clear_properties() {
  properties_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Event::_internal_properties() const {
  return properties_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Event::properties() const {
  // @@protoc_insertion_point(field_map:nakama.api.Event.properties)
  return _internal_properties();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Event::_internal_mutable_properties() {
  return properties_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Event::mutable_properties() {
  // @@protoc_insertion_point(field_mutable_map:nakama.api.Event.properties)
  return _internal_mutable_properties();
}

// .google.protobuf.Timestamp timestamp = 3;
inline bool Event::_internal_has_timestamp() const {
  return this != internal_default_instance() && timestamp_ != nullptr;
}
inline bool Event::has_timestamp() const {
  return _internal_has_timestamp();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Event::_internal_timestamp() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = timestamp_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Event::timestamp() const {
  // @@protoc_insertion_point(field_get:nakama.api.Event.timestamp)
  return _internal_timestamp();
}
inline void Event::unsafe_arena_set_allocated_timestamp(
    PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp_);
  }
  timestamp_ = timestamp;
  if (timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nakama.api.Event.timestamp)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Event::release_timestamp() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = timestamp_;
  timestamp_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Event::unsafe_arena_release_timestamp() {
  // @@protoc_insertion_point(field_release:nakama.api.Event.timestamp)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = timestamp_;
  timestamp_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Event::_internal_mutable_timestamp() {
  
  if (timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    timestamp_ = p;
  }
  return timestamp_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Event::mutable_timestamp() {
  // @@protoc_insertion_point(field_mutable:nakama.api.Event.timestamp)
  return _internal_mutable_timestamp();
}
inline void Event::set_allocated_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp_);
  }
  if (timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp)->GetArena();
    if (message_arena != submessage_arena) {
      timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timestamp, submessage_arena);
    }
    
  } else {
    
  }
  timestamp_ = timestamp;
  // @@protoc_insertion_point(field_set_allocated:nakama.api.Event.timestamp)
}

// bool external = 4;
inline void Event::clear_external() {
  external_ = false;
}
inline bool Event::_internal_external() const {
  return external_;
}
inline bool Event::external() const {
  // @@protoc_insertion_point(field_get:nakama.api.Event.external)
  return _internal_external();
}
inline void Event::_internal_set_external(bool value) {
  
  external_ = value;
}
inline void Event::set_external(bool value) {
  _internal_set_external(value);
  // @@protoc_insertion_point(field_set:nakama.api.Event.external)
}

// -------------------------------------------------------------------

// Friend

// .nakama.api.User user = 1;
inline bool Friend::_internal_has_user() const {
  return this != internal_default_instance() && user_ != nullptr;
}
inline bool Friend::has_user() const {
  return _internal_has_user();
}
inline void Friend::clear_user() {
  if (GetArena() == nullptr && user_ != nullptr) {
    delete user_;
  }
  user_ = nullptr;
}
inline const ::nakama::api::User& Friend::_internal_user() const {
  const ::nakama::api::User* p = user_;
  return p != nullptr ? *p : reinterpret_cast<const ::nakama::api::User&>(
      ::nakama::api::_User_default_instance_);
}
inline const ::nakama::api::User& Friend::user() const {
  // @@protoc_insertion_point(field_get:nakama.api.Friend.user)
  return _internal_user();
}
inline void Friend::unsafe_arena_set_allocated_user(
    ::nakama::api::User* user) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_);
  }
  user_ = user;
  if (user) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nakama.api.Friend.user)
}
inline ::nakama::api::User* Friend::release_user() {
  
  ::nakama::api::User* temp = user_;
  user_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::nakama::api::User* Friend::unsafe_arena_release_user() {
  // @@protoc_insertion_point(field_release:nakama.api.Friend.user)
  
  ::nakama::api::User* temp = user_;
  user_ = nullptr;
  return temp;
}
inline ::nakama::api::User* Friend::_internal_mutable_user() {
  
  if (user_ == nullptr) {
    auto* p = CreateMaybeMessage<::nakama::api::User>(GetArena());
    user_ = p;
  }
  return user_;
}
inline ::nakama::api::User* Friend::mutable_user() {
  // @@protoc_insertion_point(field_mutable:nakama.api.Friend.user)
  return _internal_mutable_user();
}
inline void Friend::set_allocated_user(::nakama::api::User* user) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete user_;
  }
  if (user) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(user);
    if (message_arena != submessage_arena) {
      user = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user, submessage_arena);
    }
    
  } else {
    
  }
  user_ = user;
  // @@protoc_insertion_point(field_set_allocated:nakama.api.Friend.user)
}

// .google.protobuf.Int32Value state = 2;
inline bool Friend::_internal_has_state() const {
  return this != internal_default_instance() && state_ != nullptr;
}
inline bool Friend::has_state() const {
  return _internal_has_state();
}
inline const PROTOBUF_NAMESPACE_ID::Int32Value& Friend::_internal_state() const {
  const PROTOBUF_NAMESPACE_ID::Int32Value* p = state_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Int32Value&>(
      PROTOBUF_NAMESPACE_ID::_Int32Value_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Int32Value& Friend::state() const {
  // @@protoc_insertion_point(field_get:nakama.api.Friend.state)
  return _internal_state();
}
inline void Friend::unsafe_arena_set_allocated_state(
    PROTOBUF_NAMESPACE_ID::Int32Value* state) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(state_);
  }
  state_ = state;
  if (state) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nakama.api.Friend.state)
}
inline PROTOBUF_NAMESPACE_ID::Int32Value* Friend::release_state() {
  
  PROTOBUF_NAMESPACE_ID::Int32Value* temp = state_;
  state_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Int32Value* Friend::unsafe_arena_release_state() {
  // @@protoc_insertion_point(field_release:nakama.api.Friend.state)
  
  PROTOBUF_NAMESPACE_ID::Int32Value* temp = state_;
  state_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Int32Value* Friend::_internal_mutable_state() {
  
  if (state_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Int32Value>(GetArena());
    state_ = p;
  }
  return state_;
}
inline PROTOBUF_NAMESPACE_ID::Int32Value* Friend::mutable_state() {
  // @@protoc_insertion_point(field_mutable:nakama.api.Friend.state)
  return _internal_mutable_state();
}
inline void Friend::set_allocated_state(PROTOBUF_NAMESPACE_ID::Int32Value* state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(state_);
  }
  if (state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(state)->GetArena();
    if (message_arena != submessage_arena) {
      state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:nakama.api.Friend.state)
}

// .google.protobuf.Timestamp update_time = 3;
inline bool Friend::_internal_has_update_time() const {
  return this != internal_default_instance() && update_time_ != nullptr;
}
inline bool Friend::has_update_time() const {
  return _internal_has_update_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Friend::_internal_update_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = update_time_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Friend::update_time() const {
  // @@protoc_insertion_point(field_get:nakama.api.Friend.update_time)
  return _internal_update_time();
}
inline void Friend::unsafe_arena_set_allocated_update_time(
    PROTOBUF_NAMESPACE_ID::Timestamp* update_time) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_time_);
  }
  update_time_ = update_time;
  if (update_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nakama.api.Friend.update_time)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Friend::release_update_time() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = update_time_;
  update_time_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Friend::unsafe_arena_release_update_time() {
  // @@protoc_insertion_point(field_release:nakama.api.Friend.update_time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = update_time_;
  update_time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Friend::_internal_mutable_update_time() {
  
  if (update_time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    update_time_ = p;
  }
  return update_time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Friend::mutable_update_time() {
  // @@protoc_insertion_point(field_mutable:nakama.api.Friend.update_time)
  return _internal_mutable_update_time();
}
inline void Friend::set_allocated_update_time(PROTOBUF_NAMESPACE_ID::Timestamp* update_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_time_);
  }
  if (update_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_time)->GetArena();
    if (message_arena != submessage_arena) {
      update_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_time, submessage_arena);
    }
    
  } else {
    
  }
  update_time_ = update_time;
  // @@protoc_insertion_point(field_set_allocated:nakama.api.Friend.update_time)
}

// -------------------------------------------------------------------

// FriendList

// repeated .nakama.api.Friend friends = 1;
inline int FriendList::_internal_friends_size() const {
  return friends_.size();
}
inline int FriendList::friends_size() const {
  return _internal_friends_size();
}
inline void FriendList::clear_friends() {
  friends_.Clear();
}
inline ::nakama::api::Friend* FriendList::mutable_friends(int index) {
  // @@protoc_insertion_point(field_mutable:nakama.api.FriendList.friends)
  return friends_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nakama::api::Friend >*
FriendList::mutable_friends() {
  // @@protoc_insertion_point(field_mutable_list:nakama.api.FriendList.friends)
  return &friends_;
}
inline const ::nakama::api::Friend& FriendList::_internal_friends(int index) const {
  return friends_.Get(index);
}
inline const ::nakama::api::Friend& FriendList::friends(int index) const {
  // @@protoc_insertion_point(field_get:nakama.api.FriendList.friends)
  return _internal_friends(index);
}
inline ::nakama::api::Friend* FriendList::_internal_add_friends() {
  return friends_.Add();
}
inline ::nakama::api::Friend* FriendList::add_friends() {
  // @@protoc_insertion_point(field_add:nakama.api.FriendList.friends)
  return _internal_add_friends();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nakama::api::Friend >&
FriendList::friends() const {
  // @@protoc_insertion_point(field_list:nakama.api.FriendList.friends)
  return friends_;
}

// string cursor = 2;
inline void FriendList::clear_cursor() {
  cursor_.ClearToEmpty();
}
inline const std::string& FriendList::cursor() const {
  // @@protoc_insertion_point(field_get:nakama.api.FriendList.cursor)
  return _internal_cursor();
}
inline void FriendList::set_cursor(const std::string& value) {
  _internal_set_cursor(value);
  // @@protoc_insertion_point(field_set:nakama.api.FriendList.cursor)
}
inline std::string* FriendList::mutable_cursor() {
  // @@protoc_insertion_point(field_mutable:nakama.api.FriendList.cursor)
  return _internal_mutable_cursor();
}
inline const std::string& FriendList::_internal_cursor() const {
  return cursor_.Get();
}
inline void FriendList::_internal_set_cursor(const std::string& value) {
  
  cursor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void FriendList::set_cursor(std::string&& value) {
  
  cursor_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.FriendList.cursor)
}
inline void FriendList::set_cursor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cursor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.FriendList.cursor)
}
inline void FriendList::set_cursor(const char* value,
    size_t size) {
  
  cursor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.FriendList.cursor)
}
inline std::string* FriendList::_internal_mutable_cursor() {
  
  return cursor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FriendList::release_cursor() {
  // @@protoc_insertion_point(field_release:nakama.api.FriendList.cursor)
  return cursor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FriendList::set_allocated_cursor(std::string* cursor) {
  if (cursor != nullptr) {
    
  } else {
    
  }
  cursor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cursor,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.FriendList.cursor)
}

// -------------------------------------------------------------------

// GetUsersRequest

// repeated string ids = 1;
inline int GetUsersRequest::_internal_ids_size() const {
  return ids_.size();
}
inline int GetUsersRequest::ids_size() const {
  return _internal_ids_size();
}
inline void GetUsersRequest::clear_ids() {
  ids_.Clear();
}
inline std::string* GetUsersRequest::add_ids() {
  // @@protoc_insertion_point(field_add_mutable:nakama.api.GetUsersRequest.ids)
  return _internal_add_ids();
}
inline const std::string& GetUsersRequest::_internal_ids(int index) const {
  return ids_.Get(index);
}
inline const std::string& GetUsersRequest::ids(int index) const {
  // @@protoc_insertion_point(field_get:nakama.api.GetUsersRequest.ids)
  return _internal_ids(index);
}
inline std::string* GetUsersRequest::mutable_ids(int index) {
  // @@protoc_insertion_point(field_mutable:nakama.api.GetUsersRequest.ids)
  return ids_.Mutable(index);
}
inline void GetUsersRequest::set_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:nakama.api.GetUsersRequest.ids)
  ids_.Mutable(index)->assign(value);
}
inline void GetUsersRequest::set_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:nakama.api.GetUsersRequest.ids)
  ids_.Mutable(index)->assign(std::move(value));
}
inline void GetUsersRequest::set_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:nakama.api.GetUsersRequest.ids)
}
inline void GetUsersRequest::set_ids(int index, const char* value, size_t size) {
  ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:nakama.api.GetUsersRequest.ids)
}
inline std::string* GetUsersRequest::_internal_add_ids() {
  return ids_.Add();
}
inline void GetUsersRequest::add_ids(const std::string& value) {
  ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:nakama.api.GetUsersRequest.ids)
}
inline void GetUsersRequest::add_ids(std::string&& value) {
  ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:nakama.api.GetUsersRequest.ids)
}
inline void GetUsersRequest::add_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:nakama.api.GetUsersRequest.ids)
}
inline void GetUsersRequest::add_ids(const char* value, size_t size) {
  ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:nakama.api.GetUsersRequest.ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetUsersRequest::ids() const {
  // @@protoc_insertion_point(field_list:nakama.api.GetUsersRequest.ids)
  return ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetUsersRequest::mutable_ids() {
  // @@protoc_insertion_point(field_mutable_list:nakama.api.GetUsersRequest.ids)
  return &ids_;
}

// repeated string usernames = 2;
inline int GetUsersRequest::_internal_usernames_size() const {
  return usernames_.size();
}
inline int GetUsersRequest::usernames_size() const {
  return _internal_usernames_size();
}
inline void GetUsersRequest::clear_usernames() {
  usernames_.Clear();
}
inline std::string* GetUsersRequest::add_usernames() {
  // @@protoc_insertion_point(field_add_mutable:nakama.api.GetUsersRequest.usernames)
  return _internal_add_usernames();
}
inline const std::string& GetUsersRequest::_internal_usernames(int index) const {
  return usernames_.Get(index);
}
inline const std::string& GetUsersRequest::usernames(int index) const {
  // @@protoc_insertion_point(field_get:nakama.api.GetUsersRequest.usernames)
  return _internal_usernames(index);
}
inline std::string* GetUsersRequest::mutable_usernames(int index) {
  // @@protoc_insertion_point(field_mutable:nakama.api.GetUsersRequest.usernames)
  return usernames_.Mutable(index);
}
inline void GetUsersRequest::set_usernames(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:nakama.api.GetUsersRequest.usernames)
  usernames_.Mutable(index)->assign(value);
}
inline void GetUsersRequest::set_usernames(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:nakama.api.GetUsersRequest.usernames)
  usernames_.Mutable(index)->assign(std::move(value));
}
inline void GetUsersRequest::set_usernames(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  usernames_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:nakama.api.GetUsersRequest.usernames)
}
inline void GetUsersRequest::set_usernames(int index, const char* value, size_t size) {
  usernames_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:nakama.api.GetUsersRequest.usernames)
}
inline std::string* GetUsersRequest::_internal_add_usernames() {
  return usernames_.Add();
}
inline void GetUsersRequest::add_usernames(const std::string& value) {
  usernames_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:nakama.api.GetUsersRequest.usernames)
}
inline void GetUsersRequest::add_usernames(std::string&& value) {
  usernames_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:nakama.api.GetUsersRequest.usernames)
}
inline void GetUsersRequest::add_usernames(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  usernames_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:nakama.api.GetUsersRequest.usernames)
}
inline void GetUsersRequest::add_usernames(const char* value, size_t size) {
  usernames_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:nakama.api.GetUsersRequest.usernames)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetUsersRequest::usernames() const {
  // @@protoc_insertion_point(field_list:nakama.api.GetUsersRequest.usernames)
  return usernames_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetUsersRequest::mutable_usernames() {
  // @@protoc_insertion_point(field_mutable_list:nakama.api.GetUsersRequest.usernames)
  return &usernames_;
}

// repeated string facebook_ids = 3;
inline int GetUsersRequest::_internal_facebook_ids_size() const {
  return facebook_ids_.size();
}
inline int GetUsersRequest::facebook_ids_size() const {
  return _internal_facebook_ids_size();
}
inline void GetUsersRequest::clear_facebook_ids() {
  facebook_ids_.Clear();
}
inline std::string* GetUsersRequest::add_facebook_ids() {
  // @@protoc_insertion_point(field_add_mutable:nakama.api.GetUsersRequest.facebook_ids)
  return _internal_add_facebook_ids();
}
inline const std::string& GetUsersRequest::_internal_facebook_ids(int index) const {
  return facebook_ids_.Get(index);
}
inline const std::string& GetUsersRequest::facebook_ids(int index) const {
  // @@protoc_insertion_point(field_get:nakama.api.GetUsersRequest.facebook_ids)
  return _internal_facebook_ids(index);
}
inline std::string* GetUsersRequest::mutable_facebook_ids(int index) {
  // @@protoc_insertion_point(field_mutable:nakama.api.GetUsersRequest.facebook_ids)
  return facebook_ids_.Mutable(index);
}
inline void GetUsersRequest::set_facebook_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:nakama.api.GetUsersRequest.facebook_ids)
  facebook_ids_.Mutable(index)->assign(value);
}
inline void GetUsersRequest::set_facebook_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:nakama.api.GetUsersRequest.facebook_ids)
  facebook_ids_.Mutable(index)->assign(std::move(value));
}
inline void GetUsersRequest::set_facebook_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  facebook_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:nakama.api.GetUsersRequest.facebook_ids)
}
inline void GetUsersRequest::set_facebook_ids(int index, const char* value, size_t size) {
  facebook_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:nakama.api.GetUsersRequest.facebook_ids)
}
inline std::string* GetUsersRequest::_internal_add_facebook_ids() {
  return facebook_ids_.Add();
}
inline void GetUsersRequest::add_facebook_ids(const std::string& value) {
  facebook_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:nakama.api.GetUsersRequest.facebook_ids)
}
inline void GetUsersRequest::add_facebook_ids(std::string&& value) {
  facebook_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:nakama.api.GetUsersRequest.facebook_ids)
}
inline void GetUsersRequest::add_facebook_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  facebook_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:nakama.api.GetUsersRequest.facebook_ids)
}
inline void GetUsersRequest::add_facebook_ids(const char* value, size_t size) {
  facebook_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:nakama.api.GetUsersRequest.facebook_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetUsersRequest::facebook_ids() const {
  // @@protoc_insertion_point(field_list:nakama.api.GetUsersRequest.facebook_ids)
  return facebook_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetUsersRequest::mutable_facebook_ids() {
  // @@protoc_insertion_point(field_mutable_list:nakama.api.GetUsersRequest.facebook_ids)
  return &facebook_ids_;
}

// -------------------------------------------------------------------

// GetSubscriptionRequest

// string product_id = 1;
inline void GetSubscriptionRequest::clear_product_id() {
  product_id_.ClearToEmpty();
}
inline const std::string& GetSubscriptionRequest::product_id() const {
  // @@protoc_insertion_point(field_get:nakama.api.GetSubscriptionRequest.product_id)
  return _internal_product_id();
}
inline void GetSubscriptionRequest::set_product_id(const std::string& value) {
  _internal_set_product_id(value);
  // @@protoc_insertion_point(field_set:nakama.api.GetSubscriptionRequest.product_id)
}
inline std::string* GetSubscriptionRequest::mutable_product_id() {
  // @@protoc_insertion_point(field_mutable:nakama.api.GetSubscriptionRequest.product_id)
  return _internal_mutable_product_id();
}
inline const std::string& GetSubscriptionRequest::_internal_product_id() const {
  return product_id_.Get();
}
inline void GetSubscriptionRequest::_internal_set_product_id(const std::string& value) {
  
  product_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetSubscriptionRequest::set_product_id(std::string&& value) {
  
  product_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.GetSubscriptionRequest.product_id)
}
inline void GetSubscriptionRequest::set_product_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  product_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.GetSubscriptionRequest.product_id)
}
inline void GetSubscriptionRequest::set_product_id(const char* value,
    size_t size) {
  
  product_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.GetSubscriptionRequest.product_id)
}
inline std::string* GetSubscriptionRequest::_internal_mutable_product_id() {
  
  return product_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetSubscriptionRequest::release_product_id() {
  // @@protoc_insertion_point(field_release:nakama.api.GetSubscriptionRequest.product_id)
  return product_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetSubscriptionRequest::set_allocated_product_id(std::string* product_id) {
  if (product_id != nullptr) {
    
  } else {
    
  }
  product_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), product_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.GetSubscriptionRequest.product_id)
}

// -------------------------------------------------------------------

// Group

// string id = 1;
inline void Group::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& Group::id() const {
  // @@protoc_insertion_point(field_get:nakama.api.Group.id)
  return _internal_id();
}
inline void Group::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:nakama.api.Group.id)
}
inline std::string* Group::mutable_id() {
  // @@protoc_insertion_point(field_mutable:nakama.api.Group.id)
  return _internal_mutable_id();
}
inline const std::string& Group::_internal_id() const {
  return id_.Get();
}
inline void Group::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Group::set_id(std::string&& value) {
  
  id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.Group.id)
}
inline void Group::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.Group.id)
}
inline void Group::set_id(const char* value,
    size_t size) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.Group.id)
}
inline std::string* Group::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Group::release_id() {
  // @@protoc_insertion_point(field_release:nakama.api.Group.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Group::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.Group.id)
}

// string creator_id = 2;
inline void Group::clear_creator_id() {
  creator_id_.ClearToEmpty();
}
inline const std::string& Group::creator_id() const {
  // @@protoc_insertion_point(field_get:nakama.api.Group.creator_id)
  return _internal_creator_id();
}
inline void Group::set_creator_id(const std::string& value) {
  _internal_set_creator_id(value);
  // @@protoc_insertion_point(field_set:nakama.api.Group.creator_id)
}
inline std::string* Group::mutable_creator_id() {
  // @@protoc_insertion_point(field_mutable:nakama.api.Group.creator_id)
  return _internal_mutable_creator_id();
}
inline const std::string& Group::_internal_creator_id() const {
  return creator_id_.Get();
}
inline void Group::_internal_set_creator_id(const std::string& value) {
  
  creator_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Group::set_creator_id(std::string&& value) {
  
  creator_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.Group.creator_id)
}
inline void Group::set_creator_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  creator_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.Group.creator_id)
}
inline void Group::set_creator_id(const char* value,
    size_t size) {
  
  creator_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.Group.creator_id)
}
inline std::string* Group::_internal_mutable_creator_id() {
  
  return creator_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Group::release_creator_id() {
  // @@protoc_insertion_point(field_release:nakama.api.Group.creator_id)
  return creator_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Group::set_allocated_creator_id(std::string* creator_id) {
  if (creator_id != nullptr) {
    
  } else {
    
  }
  creator_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), creator_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.Group.creator_id)
}

// string name = 3;
inline void Group::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Group::name() const {
  // @@protoc_insertion_point(field_get:nakama.api.Group.name)
  return _internal_name();
}
inline void Group::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:nakama.api.Group.name)
}
inline std::string* Group::mutable_name() {
  // @@protoc_insertion_point(field_mutable:nakama.api.Group.name)
  return _internal_mutable_name();
}
inline const std::string& Group::_internal_name() const {
  return name_.Get();
}
inline void Group::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Group::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.Group.name)
}
inline void Group::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.Group.name)
}
inline void Group::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.Group.name)
}
inline std::string* Group::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Group::release_name() {
  // @@protoc_insertion_point(field_release:nakama.api.Group.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Group::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.Group.name)
}

// string description = 4;
inline void Group::clear_description() {
  description_.ClearToEmpty();
}
inline const std::string& Group::description() const {
  // @@protoc_insertion_point(field_get:nakama.api.Group.description)
  return _internal_description();
}
inline void Group::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:nakama.api.Group.description)
}
inline std::string* Group::mutable_description() {
  // @@protoc_insertion_point(field_mutable:nakama.api.Group.description)
  return _internal_mutable_description();
}
inline const std::string& Group::_internal_description() const {
  return description_.Get();
}
inline void Group::_internal_set_description(const std::string& value) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Group::set_description(std::string&& value) {
  
  description_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.Group.description)
}
inline void Group::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.Group.description)
}
inline void Group::set_description(const char* value,
    size_t size) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.Group.description)
}
inline std::string* Group::_internal_mutable_description() {
  
  return description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Group::release_description() {
  // @@protoc_insertion_point(field_release:nakama.api.Group.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Group::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.Group.description)
}

// string lang_tag = 5;
inline void Group::clear_lang_tag() {
  lang_tag_.ClearToEmpty();
}
inline const std::string& Group::lang_tag() const {
  // @@protoc_insertion_point(field_get:nakama.api.Group.lang_tag)
  return _internal_lang_tag();
}
inline void Group::set_lang_tag(const std::string& value) {
  _internal_set_lang_tag(value);
  // @@protoc_insertion_point(field_set:nakama.api.Group.lang_tag)
}
inline std::string* Group::mutable_lang_tag() {
  // @@protoc_insertion_point(field_mutable:nakama.api.Group.lang_tag)
  return _internal_mutable_lang_tag();
}
inline const std::string& Group::_internal_lang_tag() const {
  return lang_tag_.Get();
}
inline void Group::_internal_set_lang_tag(const std::string& value) {
  
  lang_tag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Group::set_lang_tag(std::string&& value) {
  
  lang_tag_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.Group.lang_tag)
}
inline void Group::set_lang_tag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  lang_tag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.Group.lang_tag)
}
inline void Group::set_lang_tag(const char* value,
    size_t size) {
  
  lang_tag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.Group.lang_tag)
}
inline std::string* Group::_internal_mutable_lang_tag() {
  
  return lang_tag_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Group::release_lang_tag() {
  // @@protoc_insertion_point(field_release:nakama.api.Group.lang_tag)
  return lang_tag_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Group::set_allocated_lang_tag(std::string* lang_tag) {
  if (lang_tag != nullptr) {
    
  } else {
    
  }
  lang_tag_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), lang_tag,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.Group.lang_tag)
}

// string metadata = 6;
inline void Group::clear_metadata() {
  metadata_.ClearToEmpty();
}
inline const std::string& Group::metadata() const {
  // @@protoc_insertion_point(field_get:nakama.api.Group.metadata)
  return _internal_metadata();
}
inline void Group::set_metadata(const std::string& value) {
  _internal_set_metadata(value);
  // @@protoc_insertion_point(field_set:nakama.api.Group.metadata)
}
inline std::string* Group::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable:nakama.api.Group.metadata)
  return _internal_mutable_metadata();
}
inline const std::string& Group::_internal_metadata() const {
  return metadata_.Get();
}
inline void Group::_internal_set_metadata(const std::string& value) {
  
  metadata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Group::set_metadata(std::string&& value) {
  
  metadata_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.Group.metadata)
}
inline void Group::set_metadata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  metadata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.Group.metadata)
}
inline void Group::set_metadata(const char* value,
    size_t size) {
  
  metadata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.Group.metadata)
}
inline std::string* Group::_internal_mutable_metadata() {
  
  return metadata_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Group::release_metadata() {
  // @@protoc_insertion_point(field_release:nakama.api.Group.metadata)
  return metadata_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Group::set_allocated_metadata(std::string* metadata) {
  if (metadata != nullptr) {
    
  } else {
    
  }
  metadata_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), metadata,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.Group.metadata)
}

// string avatar_url = 7;
inline void Group::clear_avatar_url() {
  avatar_url_.ClearToEmpty();
}
inline const std::string& Group::avatar_url() const {
  // @@protoc_insertion_point(field_get:nakama.api.Group.avatar_url)
  return _internal_avatar_url();
}
inline void Group::set_avatar_url(const std::string& value) {
  _internal_set_avatar_url(value);
  // @@protoc_insertion_point(field_set:nakama.api.Group.avatar_url)
}
inline std::string* Group::mutable_avatar_url() {
  // @@protoc_insertion_point(field_mutable:nakama.api.Group.avatar_url)
  return _internal_mutable_avatar_url();
}
inline const std::string& Group::_internal_avatar_url() const {
  return avatar_url_.Get();
}
inline void Group::_internal_set_avatar_url(const std::string& value) {
  
  avatar_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Group::set_avatar_url(std::string&& value) {
  
  avatar_url_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.Group.avatar_url)
}
inline void Group::set_avatar_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  avatar_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.Group.avatar_url)
}
inline void Group::set_avatar_url(const char* value,
    size_t size) {
  
  avatar_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.Group.avatar_url)
}
inline std::string* Group::_internal_mutable_avatar_url() {
  
  return avatar_url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Group::release_avatar_url() {
  // @@protoc_insertion_point(field_release:nakama.api.Group.avatar_url)
  return avatar_url_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Group::set_allocated_avatar_url(std::string* avatar_url) {
  if (avatar_url != nullptr) {
    
  } else {
    
  }
  avatar_url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), avatar_url,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.Group.avatar_url)
}

// .google.protobuf.BoolValue open = 8;
inline bool Group::_internal_has_open() const {
  return this != internal_default_instance() && open_ != nullptr;
}
inline bool Group::has_open() const {
  return _internal_has_open();
}
inline const PROTOBUF_NAMESPACE_ID::BoolValue& Group::_internal_open() const {
  const PROTOBUF_NAMESPACE_ID::BoolValue* p = open_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::BoolValue&>(
      PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::BoolValue& Group::open() const {
  // @@protoc_insertion_point(field_get:nakama.api.Group.open)
  return _internal_open();
}
inline void Group::unsafe_arena_set_allocated_open(
    PROTOBUF_NAMESPACE_ID::BoolValue* open) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(open_);
  }
  open_ = open;
  if (open) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nakama.api.Group.open)
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* Group::release_open() {
  
  PROTOBUF_NAMESPACE_ID::BoolValue* temp = open_;
  open_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* Group::unsafe_arena_release_open() {
  // @@protoc_insertion_point(field_release:nakama.api.Group.open)
  
  PROTOBUF_NAMESPACE_ID::BoolValue* temp = open_;
  open_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* Group::_internal_mutable_open() {
  
  if (open_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::BoolValue>(GetArena());
    open_ = p;
  }
  return open_;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* Group::mutable_open() {
  // @@protoc_insertion_point(field_mutable:nakama.api.Group.open)
  return _internal_mutable_open();
}
inline void Group::set_allocated_open(PROTOBUF_NAMESPACE_ID::BoolValue* open) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(open_);
  }
  if (open) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(open)->GetArena();
    if (message_arena != submessage_arena) {
      open = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, open, submessage_arena);
    }
    
  } else {
    
  }
  open_ = open;
  // @@protoc_insertion_point(field_set_allocated:nakama.api.Group.open)
}

// int32 edge_count = 9;
inline void Group::clear_edge_count() {
  edge_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Group::_internal_edge_count() const {
  return edge_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Group::edge_count() const {
  // @@protoc_insertion_point(field_get:nakama.api.Group.edge_count)
  return _internal_edge_count();
}
inline void Group::_internal_set_edge_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  edge_count_ = value;
}
inline void Group::set_edge_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_edge_count(value);
  // @@protoc_insertion_point(field_set:nakama.api.Group.edge_count)
}

// int32 max_count = 10;
inline void Group::clear_max_count() {
  max_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Group::_internal_max_count() const {
  return max_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Group::max_count() const {
  // @@protoc_insertion_point(field_get:nakama.api.Group.max_count)
  return _internal_max_count();
}
inline void Group::_internal_set_max_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  max_count_ = value;
}
inline void Group::set_max_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_max_count(value);
  // @@protoc_insertion_point(field_set:nakama.api.Group.max_count)
}

// .google.protobuf.Timestamp create_time = 11;
inline bool Group::_internal_has_create_time() const {
  return this != internal_default_instance() && create_time_ != nullptr;
}
inline bool Group::has_create_time() const {
  return _internal_has_create_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Group::_internal_create_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = create_time_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Group::create_time() const {
  // @@protoc_insertion_point(field_get:nakama.api.Group.create_time)
  return _internal_create_time();
}
inline void Group::unsafe_arena_set_allocated_create_time(
    PROTOBUF_NAMESPACE_ID::Timestamp* create_time) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(create_time_);
  }
  create_time_ = create_time;
  if (create_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nakama.api.Group.create_time)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Group::release_create_time() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = create_time_;
  create_time_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Group::unsafe_arena_release_create_time() {
  // @@protoc_insertion_point(field_release:nakama.api.Group.create_time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = create_time_;
  create_time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Group::_internal_mutable_create_time() {
  
  if (create_time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    create_time_ = p;
  }
  return create_time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Group::mutable_create_time() {
  // @@protoc_insertion_point(field_mutable:nakama.api.Group.create_time)
  return _internal_mutable_create_time();
}
inline void Group::set_allocated_create_time(PROTOBUF_NAMESPACE_ID::Timestamp* create_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(create_time_);
  }
  if (create_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(create_time)->GetArena();
    if (message_arena != submessage_arena) {
      create_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, create_time, submessage_arena);
    }
    
  } else {
    
  }
  create_time_ = create_time;
  // @@protoc_insertion_point(field_set_allocated:nakama.api.Group.create_time)
}

// .google.protobuf.Timestamp update_time = 12;
inline bool Group::_internal_has_update_time() const {
  return this != internal_default_instance() && update_time_ != nullptr;
}
inline bool Group::has_update_time() const {
  return _internal_has_update_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Group::_internal_update_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = update_time_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Group::update_time() const {
  // @@protoc_insertion_point(field_get:nakama.api.Group.update_time)
  return _internal_update_time();
}
inline void Group::unsafe_arena_set_allocated_update_time(
    PROTOBUF_NAMESPACE_ID::Timestamp* update_time) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_time_);
  }
  update_time_ = update_time;
  if (update_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nakama.api.Group.update_time)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Group::release_update_time() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = update_time_;
  update_time_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Group::unsafe_arena_release_update_time() {
  // @@protoc_insertion_point(field_release:nakama.api.Group.update_time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = update_time_;
  update_time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Group::_internal_mutable_update_time() {
  
  if (update_time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    update_time_ = p;
  }
  return update_time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Group::mutable_update_time() {
  // @@protoc_insertion_point(field_mutable:nakama.api.Group.update_time)
  return _internal_mutable_update_time();
}
inline void Group::set_allocated_update_time(PROTOBUF_NAMESPACE_ID::Timestamp* update_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_time_);
  }
  if (update_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_time)->GetArena();
    if (message_arena != submessage_arena) {
      update_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_time, submessage_arena);
    }
    
  } else {
    
  }
  update_time_ = update_time;
  // @@protoc_insertion_point(field_set_allocated:nakama.api.Group.update_time)
}

// -------------------------------------------------------------------

// GroupList

// repeated .nakama.api.Group groups = 1;
inline int GroupList::_internal_groups_size() const {
  return groups_.size();
}
inline int GroupList::groups_size() const {
  return _internal_groups_size();
}
inline void GroupList::clear_groups() {
  groups_.Clear();
}
inline ::nakama::api::Group* GroupList::mutable_groups(int index) {
  // @@protoc_insertion_point(field_mutable:nakama.api.GroupList.groups)
  return groups_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nakama::api::Group >*
GroupList::mutable_groups() {
  // @@protoc_insertion_point(field_mutable_list:nakama.api.GroupList.groups)
  return &groups_;
}
inline const ::nakama::api::Group& GroupList::_internal_groups(int index) const {
  return groups_.Get(index);
}
inline const ::nakama::api::Group& GroupList::groups(int index) const {
  // @@protoc_insertion_point(field_get:nakama.api.GroupList.groups)
  return _internal_groups(index);
}
inline ::nakama::api::Group* GroupList::_internal_add_groups() {
  return groups_.Add();
}
inline ::nakama::api::Group* GroupList::add_groups() {
  // @@protoc_insertion_point(field_add:nakama.api.GroupList.groups)
  return _internal_add_groups();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nakama::api::Group >&
GroupList::groups() const {
  // @@protoc_insertion_point(field_list:nakama.api.GroupList.groups)
  return groups_;
}

// string cursor = 2;
inline void GroupList::clear_cursor() {
  cursor_.ClearToEmpty();
}
inline const std::string& GroupList::cursor() const {
  // @@protoc_insertion_point(field_get:nakama.api.GroupList.cursor)
  return _internal_cursor();
}
inline void GroupList::set_cursor(const std::string& value) {
  _internal_set_cursor(value);
  // @@protoc_insertion_point(field_set:nakama.api.GroupList.cursor)
}
inline std::string* GroupList::mutable_cursor() {
  // @@protoc_insertion_point(field_mutable:nakama.api.GroupList.cursor)
  return _internal_mutable_cursor();
}
inline const std::string& GroupList::_internal_cursor() const {
  return cursor_.Get();
}
inline void GroupList::_internal_set_cursor(const std::string& value) {
  
  cursor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GroupList::set_cursor(std::string&& value) {
  
  cursor_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.GroupList.cursor)
}
inline void GroupList::set_cursor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cursor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.GroupList.cursor)
}
inline void GroupList::set_cursor(const char* value,
    size_t size) {
  
  cursor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.GroupList.cursor)
}
inline std::string* GroupList::_internal_mutable_cursor() {
  
  return cursor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GroupList::release_cursor() {
  // @@protoc_insertion_point(field_release:nakama.api.GroupList.cursor)
  return cursor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GroupList::set_allocated_cursor(std::string* cursor) {
  if (cursor != nullptr) {
    
  } else {
    
  }
  cursor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cursor,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.GroupList.cursor)
}

// -------------------------------------------------------------------

// GroupUserList_GroupUser

// .nakama.api.User user = 1;
inline bool GroupUserList_GroupUser::_internal_has_user() const {
  return this != internal_default_instance() && user_ != nullptr;
}
inline bool GroupUserList_GroupUser::has_user() const {
  return _internal_has_user();
}
inline void GroupUserList_GroupUser::clear_user() {
  if (GetArena() == nullptr && user_ != nullptr) {
    delete user_;
  }
  user_ = nullptr;
}
inline const ::nakama::api::User& GroupUserList_GroupUser::_internal_user() const {
  const ::nakama::api::User* p = user_;
  return p != nullptr ? *p : reinterpret_cast<const ::nakama::api::User&>(
      ::nakama::api::_User_default_instance_);
}
inline const ::nakama::api::User& GroupUserList_GroupUser::user() const {
  // @@protoc_insertion_point(field_get:nakama.api.GroupUserList.GroupUser.user)
  return _internal_user();
}
inline void GroupUserList_GroupUser::unsafe_arena_set_allocated_user(
    ::nakama::api::User* user) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_);
  }
  user_ = user;
  if (user) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nakama.api.GroupUserList.GroupUser.user)
}
inline ::nakama::api::User* GroupUserList_GroupUser::release_user() {
  
  ::nakama::api::User* temp = user_;
  user_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::nakama::api::User* GroupUserList_GroupUser::unsafe_arena_release_user() {
  // @@protoc_insertion_point(field_release:nakama.api.GroupUserList.GroupUser.user)
  
  ::nakama::api::User* temp = user_;
  user_ = nullptr;
  return temp;
}
inline ::nakama::api::User* GroupUserList_GroupUser::_internal_mutable_user() {
  
  if (user_ == nullptr) {
    auto* p = CreateMaybeMessage<::nakama::api::User>(GetArena());
    user_ = p;
  }
  return user_;
}
inline ::nakama::api::User* GroupUserList_GroupUser::mutable_user() {
  // @@protoc_insertion_point(field_mutable:nakama.api.GroupUserList.GroupUser.user)
  return _internal_mutable_user();
}
inline void GroupUserList_GroupUser::set_allocated_user(::nakama::api::User* user) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete user_;
  }
  if (user) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(user);
    if (message_arena != submessage_arena) {
      user = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user, submessage_arena);
    }
    
  } else {
    
  }
  user_ = user;
  // @@protoc_insertion_point(field_set_allocated:nakama.api.GroupUserList.GroupUser.user)
}

// .google.protobuf.Int32Value state = 2;
inline bool GroupUserList_GroupUser::_internal_has_state() const {
  return this != internal_default_instance() && state_ != nullptr;
}
inline bool GroupUserList_GroupUser::has_state() const {
  return _internal_has_state();
}
inline const PROTOBUF_NAMESPACE_ID::Int32Value& GroupUserList_GroupUser::_internal_state() const {
  const PROTOBUF_NAMESPACE_ID::Int32Value* p = state_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Int32Value&>(
      PROTOBUF_NAMESPACE_ID::_Int32Value_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Int32Value& GroupUserList_GroupUser::state() const {
  // @@protoc_insertion_point(field_get:nakama.api.GroupUserList.GroupUser.state)
  return _internal_state();
}
inline void GroupUserList_GroupUser::unsafe_arena_set_allocated_state(
    PROTOBUF_NAMESPACE_ID::Int32Value* state) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(state_);
  }
  state_ = state;
  if (state) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nakama.api.GroupUserList.GroupUser.state)
}
inline PROTOBUF_NAMESPACE_ID::Int32Value* GroupUserList_GroupUser::release_state() {
  
  PROTOBUF_NAMESPACE_ID::Int32Value* temp = state_;
  state_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Int32Value* GroupUserList_GroupUser::unsafe_arena_release_state() {
  // @@protoc_insertion_point(field_release:nakama.api.GroupUserList.GroupUser.state)
  
  PROTOBUF_NAMESPACE_ID::Int32Value* temp = state_;
  state_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Int32Value* GroupUserList_GroupUser::_internal_mutable_state() {
  
  if (state_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Int32Value>(GetArena());
    state_ = p;
  }
  return state_;
}
inline PROTOBUF_NAMESPACE_ID::Int32Value* GroupUserList_GroupUser::mutable_state() {
  // @@protoc_insertion_point(field_mutable:nakama.api.GroupUserList.GroupUser.state)
  return _internal_mutable_state();
}
inline void GroupUserList_GroupUser::set_allocated_state(PROTOBUF_NAMESPACE_ID::Int32Value* state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(state_);
  }
  if (state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(state)->GetArena();
    if (message_arena != submessage_arena) {
      state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:nakama.api.GroupUserList.GroupUser.state)
}

// -------------------------------------------------------------------

// GroupUserList

// repeated .nakama.api.GroupUserList.GroupUser group_users = 1;
inline int GroupUserList::_internal_group_users_size() const {
  return group_users_.size();
}
inline int GroupUserList::group_users_size() const {
  return _internal_group_users_size();
}
inline void GroupUserList::clear_group_users() {
  group_users_.Clear();
}
inline ::nakama::api::GroupUserList_GroupUser* GroupUserList::mutable_group_users(int index) {
  // @@protoc_insertion_point(field_mutable:nakama.api.GroupUserList.group_users)
  return group_users_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nakama::api::GroupUserList_GroupUser >*
GroupUserList::mutable_group_users() {
  // @@protoc_insertion_point(field_mutable_list:nakama.api.GroupUserList.group_users)
  return &group_users_;
}
inline const ::nakama::api::GroupUserList_GroupUser& GroupUserList::_internal_group_users(int index) const {
  return group_users_.Get(index);
}
inline const ::nakama::api::GroupUserList_GroupUser& GroupUserList::group_users(int index) const {
  // @@protoc_insertion_point(field_get:nakama.api.GroupUserList.group_users)
  return _internal_group_users(index);
}
inline ::nakama::api::GroupUserList_GroupUser* GroupUserList::_internal_add_group_users() {
  return group_users_.Add();
}
inline ::nakama::api::GroupUserList_GroupUser* GroupUserList::add_group_users() {
  // @@protoc_insertion_point(field_add:nakama.api.GroupUserList.group_users)
  return _internal_add_group_users();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nakama::api::GroupUserList_GroupUser >&
GroupUserList::group_users() const {
  // @@protoc_insertion_point(field_list:nakama.api.GroupUserList.group_users)
  return group_users_;
}

// string cursor = 2;
inline void GroupUserList::clear_cursor() {
  cursor_.ClearToEmpty();
}
inline const std::string& GroupUserList::cursor() const {
  // @@protoc_insertion_point(field_get:nakama.api.GroupUserList.cursor)
  return _internal_cursor();
}
inline void GroupUserList::set_cursor(const std::string& value) {
  _internal_set_cursor(value);
  // @@protoc_insertion_point(field_set:nakama.api.GroupUserList.cursor)
}
inline std::string* GroupUserList::mutable_cursor() {
  // @@protoc_insertion_point(field_mutable:nakama.api.GroupUserList.cursor)
  return _internal_mutable_cursor();
}
inline const std::string& GroupUserList::_internal_cursor() const {
  return cursor_.Get();
}
inline void GroupUserList::_internal_set_cursor(const std::string& value) {
  
  cursor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GroupUserList::set_cursor(std::string&& value) {
  
  cursor_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.GroupUserList.cursor)
}
inline void GroupUserList::set_cursor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cursor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.GroupUserList.cursor)
}
inline void GroupUserList::set_cursor(const char* value,
    size_t size) {
  
  cursor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.GroupUserList.cursor)
}
inline std::string* GroupUserList::_internal_mutable_cursor() {
  
  return cursor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GroupUserList::release_cursor() {
  // @@protoc_insertion_point(field_release:nakama.api.GroupUserList.cursor)
  return cursor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GroupUserList::set_allocated_cursor(std::string* cursor) {
  if (cursor != nullptr) {
    
  } else {
    
  }
  cursor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cursor,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.GroupUserList.cursor)
}

// -------------------------------------------------------------------

// ImportFacebookFriendsRequest

// .nakama.api.AccountFacebook account = 1;
inline bool ImportFacebookFriendsRequest::_internal_has_account() const {
  return this != internal_default_instance() && account_ != nullptr;
}
inline bool ImportFacebookFriendsRequest::has_account() const {
  return _internal_has_account();
}
inline void ImportFacebookFriendsRequest::clear_account() {
  if (GetArena() == nullptr && account_ != nullptr) {
    delete account_;
  }
  account_ = nullptr;
}
inline const ::nakama::api::AccountFacebook& ImportFacebookFriendsRequest::_internal_account() const {
  const ::nakama::api::AccountFacebook* p = account_;
  return p != nullptr ? *p : reinterpret_cast<const ::nakama::api::AccountFacebook&>(
      ::nakama::api::_AccountFacebook_default_instance_);
}
inline const ::nakama::api::AccountFacebook& ImportFacebookFriendsRequest::account() const {
  // @@protoc_insertion_point(field_get:nakama.api.ImportFacebookFriendsRequest.account)
  return _internal_account();
}
inline void ImportFacebookFriendsRequest::unsafe_arena_set_allocated_account(
    ::nakama::api::AccountFacebook* account) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(account_);
  }
  account_ = account;
  if (account) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nakama.api.ImportFacebookFriendsRequest.account)
}
inline ::nakama::api::AccountFacebook* ImportFacebookFriendsRequest::release_account() {
  
  ::nakama::api::AccountFacebook* temp = account_;
  account_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::nakama::api::AccountFacebook* ImportFacebookFriendsRequest::unsafe_arena_release_account() {
  // @@protoc_insertion_point(field_release:nakama.api.ImportFacebookFriendsRequest.account)
  
  ::nakama::api::AccountFacebook* temp = account_;
  account_ = nullptr;
  return temp;
}
inline ::nakama::api::AccountFacebook* ImportFacebookFriendsRequest::_internal_mutable_account() {
  
  if (account_ == nullptr) {
    auto* p = CreateMaybeMessage<::nakama::api::AccountFacebook>(GetArena());
    account_ = p;
  }
  return account_;
}
inline ::nakama::api::AccountFacebook* ImportFacebookFriendsRequest::mutable_account() {
  // @@protoc_insertion_point(field_mutable:nakama.api.ImportFacebookFriendsRequest.account)
  return _internal_mutable_account();
}
inline void ImportFacebookFriendsRequest::set_allocated_account(::nakama::api::AccountFacebook* account) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete account_;
  }
  if (account) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(account);
    if (message_arena != submessage_arena) {
      account = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, account, submessage_arena);
    }
    
  } else {
    
  }
  account_ = account;
  // @@protoc_insertion_point(field_set_allocated:nakama.api.ImportFacebookFriendsRequest.account)
}

// .google.protobuf.BoolValue reset = 2;
inline bool ImportFacebookFriendsRequest::_internal_has_reset() const {
  return this != internal_default_instance() && reset_ != nullptr;
}
inline bool ImportFacebookFriendsRequest::has_reset() const {
  return _internal_has_reset();
}
inline const PROTOBUF_NAMESPACE_ID::BoolValue& ImportFacebookFriendsRequest::_internal_reset() const {
  const PROTOBUF_NAMESPACE_ID::BoolValue* p = reset_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::BoolValue&>(
      PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::BoolValue& ImportFacebookFriendsRequest::reset() const {
  // @@protoc_insertion_point(field_get:nakama.api.ImportFacebookFriendsRequest.reset)
  return _internal_reset();
}
inline void ImportFacebookFriendsRequest::unsafe_arena_set_allocated_reset(
    PROTOBUF_NAMESPACE_ID::BoolValue* reset) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reset_);
  }
  reset_ = reset;
  if (reset) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nakama.api.ImportFacebookFriendsRequest.reset)
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* ImportFacebookFriendsRequest::release_reset() {
  
  PROTOBUF_NAMESPACE_ID::BoolValue* temp = reset_;
  reset_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* ImportFacebookFriendsRequest::unsafe_arena_release_reset() {
  // @@protoc_insertion_point(field_release:nakama.api.ImportFacebookFriendsRequest.reset)
  
  PROTOBUF_NAMESPACE_ID::BoolValue* temp = reset_;
  reset_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* ImportFacebookFriendsRequest::_internal_mutable_reset() {
  
  if (reset_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::BoolValue>(GetArena());
    reset_ = p;
  }
  return reset_;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* ImportFacebookFriendsRequest::mutable_reset() {
  // @@protoc_insertion_point(field_mutable:nakama.api.ImportFacebookFriendsRequest.reset)
  return _internal_mutable_reset();
}
inline void ImportFacebookFriendsRequest::set_allocated_reset(PROTOBUF_NAMESPACE_ID::BoolValue* reset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(reset_);
  }
  if (reset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reset)->GetArena();
    if (message_arena != submessage_arena) {
      reset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reset, submessage_arena);
    }
    
  } else {
    
  }
  reset_ = reset;
  // @@protoc_insertion_point(field_set_allocated:nakama.api.ImportFacebookFriendsRequest.reset)
}

// -------------------------------------------------------------------

// ImportSteamFriendsRequest

// .nakama.api.AccountSteam account = 1;
inline bool ImportSteamFriendsRequest::_internal_has_account() const {
  return this != internal_default_instance() && account_ != nullptr;
}
inline bool ImportSteamFriendsRequest::has_account() const {
  return _internal_has_account();
}
inline void ImportSteamFriendsRequest::clear_account() {
  if (GetArena() == nullptr && account_ != nullptr) {
    delete account_;
  }
  account_ = nullptr;
}
inline const ::nakama::api::AccountSteam& ImportSteamFriendsRequest::_internal_account() const {
  const ::nakama::api::AccountSteam* p = account_;
  return p != nullptr ? *p : reinterpret_cast<const ::nakama::api::AccountSteam&>(
      ::nakama::api::_AccountSteam_default_instance_);
}
inline const ::nakama::api::AccountSteam& ImportSteamFriendsRequest::account() const {
  // @@protoc_insertion_point(field_get:nakama.api.ImportSteamFriendsRequest.account)
  return _internal_account();
}
inline void ImportSteamFriendsRequest::unsafe_arena_set_allocated_account(
    ::nakama::api::AccountSteam* account) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(account_);
  }
  account_ = account;
  if (account) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nakama.api.ImportSteamFriendsRequest.account)
}
inline ::nakama::api::AccountSteam* ImportSteamFriendsRequest::release_account() {
  
  ::nakama::api::AccountSteam* temp = account_;
  account_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::nakama::api::AccountSteam* ImportSteamFriendsRequest::unsafe_arena_release_account() {
  // @@protoc_insertion_point(field_release:nakama.api.ImportSteamFriendsRequest.account)
  
  ::nakama::api::AccountSteam* temp = account_;
  account_ = nullptr;
  return temp;
}
inline ::nakama::api::AccountSteam* ImportSteamFriendsRequest::_internal_mutable_account() {
  
  if (account_ == nullptr) {
    auto* p = CreateMaybeMessage<::nakama::api::AccountSteam>(GetArena());
    account_ = p;
  }
  return account_;
}
inline ::nakama::api::AccountSteam* ImportSteamFriendsRequest::mutable_account() {
  // @@protoc_insertion_point(field_mutable:nakama.api.ImportSteamFriendsRequest.account)
  return _internal_mutable_account();
}
inline void ImportSteamFriendsRequest::set_allocated_account(::nakama::api::AccountSteam* account) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete account_;
  }
  if (account) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(account);
    if (message_arena != submessage_arena) {
      account = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, account, submessage_arena);
    }
    
  } else {
    
  }
  account_ = account;
  // @@protoc_insertion_point(field_set_allocated:nakama.api.ImportSteamFriendsRequest.account)
}

// .google.protobuf.BoolValue reset = 2;
inline bool ImportSteamFriendsRequest::_internal_has_reset() const {
  return this != internal_default_instance() && reset_ != nullptr;
}
inline bool ImportSteamFriendsRequest::has_reset() const {
  return _internal_has_reset();
}
inline const PROTOBUF_NAMESPACE_ID::BoolValue& ImportSteamFriendsRequest::_internal_reset() const {
  const PROTOBUF_NAMESPACE_ID::BoolValue* p = reset_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::BoolValue&>(
      PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::BoolValue& ImportSteamFriendsRequest::reset() const {
  // @@protoc_insertion_point(field_get:nakama.api.ImportSteamFriendsRequest.reset)
  return _internal_reset();
}
inline void ImportSteamFriendsRequest::unsafe_arena_set_allocated_reset(
    PROTOBUF_NAMESPACE_ID::BoolValue* reset) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reset_);
  }
  reset_ = reset;
  if (reset) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nakama.api.ImportSteamFriendsRequest.reset)
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* ImportSteamFriendsRequest::release_reset() {
  
  PROTOBUF_NAMESPACE_ID::BoolValue* temp = reset_;
  reset_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* ImportSteamFriendsRequest::unsafe_arena_release_reset() {
  // @@protoc_insertion_point(field_release:nakama.api.ImportSteamFriendsRequest.reset)
  
  PROTOBUF_NAMESPACE_ID::BoolValue* temp = reset_;
  reset_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* ImportSteamFriendsRequest::_internal_mutable_reset() {
  
  if (reset_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::BoolValue>(GetArena());
    reset_ = p;
  }
  return reset_;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* ImportSteamFriendsRequest::mutable_reset() {
  // @@protoc_insertion_point(field_mutable:nakama.api.ImportSteamFriendsRequest.reset)
  return _internal_mutable_reset();
}
inline void ImportSteamFriendsRequest::set_allocated_reset(PROTOBUF_NAMESPACE_ID::BoolValue* reset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(reset_);
  }
  if (reset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reset)->GetArena();
    if (message_arena != submessage_arena) {
      reset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reset, submessage_arena);
    }
    
  } else {
    
  }
  reset_ = reset;
  // @@protoc_insertion_point(field_set_allocated:nakama.api.ImportSteamFriendsRequest.reset)
}

// -------------------------------------------------------------------

// JoinGroupRequest

// string group_id = 1;
inline void JoinGroupRequest::clear_group_id() {
  group_id_.ClearToEmpty();
}
inline const std::string& JoinGroupRequest::group_id() const {
  // @@protoc_insertion_point(field_get:nakama.api.JoinGroupRequest.group_id)
  return _internal_group_id();
}
inline void JoinGroupRequest::set_group_id(const std::string& value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:nakama.api.JoinGroupRequest.group_id)
}
inline std::string* JoinGroupRequest::mutable_group_id() {
  // @@protoc_insertion_point(field_mutable:nakama.api.JoinGroupRequest.group_id)
  return _internal_mutable_group_id();
}
inline const std::string& JoinGroupRequest::_internal_group_id() const {
  return group_id_.Get();
}
inline void JoinGroupRequest::_internal_set_group_id(const std::string& value) {
  
  group_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void JoinGroupRequest::set_group_id(std::string&& value) {
  
  group_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.JoinGroupRequest.group_id)
}
inline void JoinGroupRequest::set_group_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  group_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.JoinGroupRequest.group_id)
}
inline void JoinGroupRequest::set_group_id(const char* value,
    size_t size) {
  
  group_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.JoinGroupRequest.group_id)
}
inline std::string* JoinGroupRequest::_internal_mutable_group_id() {
  
  return group_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* JoinGroupRequest::release_group_id() {
  // @@protoc_insertion_point(field_release:nakama.api.JoinGroupRequest.group_id)
  return group_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void JoinGroupRequest::set_allocated_group_id(std::string* group_id) {
  if (group_id != nullptr) {
    
  } else {
    
  }
  group_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), group_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.JoinGroupRequest.group_id)
}

// -------------------------------------------------------------------

// JoinTournamentRequest

// string tournament_id = 1;
inline void JoinTournamentRequest::clear_tournament_id() {
  tournament_id_.ClearToEmpty();
}
inline const std::string& JoinTournamentRequest::tournament_id() const {
  // @@protoc_insertion_point(field_get:nakama.api.JoinTournamentRequest.tournament_id)
  return _internal_tournament_id();
}
inline void JoinTournamentRequest::set_tournament_id(const std::string& value) {
  _internal_set_tournament_id(value);
  // @@protoc_insertion_point(field_set:nakama.api.JoinTournamentRequest.tournament_id)
}
inline std::string* JoinTournamentRequest::mutable_tournament_id() {
  // @@protoc_insertion_point(field_mutable:nakama.api.JoinTournamentRequest.tournament_id)
  return _internal_mutable_tournament_id();
}
inline const std::string& JoinTournamentRequest::_internal_tournament_id() const {
  return tournament_id_.Get();
}
inline void JoinTournamentRequest::_internal_set_tournament_id(const std::string& value) {
  
  tournament_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void JoinTournamentRequest::set_tournament_id(std::string&& value) {
  
  tournament_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.JoinTournamentRequest.tournament_id)
}
inline void JoinTournamentRequest::set_tournament_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tournament_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.JoinTournamentRequest.tournament_id)
}
inline void JoinTournamentRequest::set_tournament_id(const char* value,
    size_t size) {
  
  tournament_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.JoinTournamentRequest.tournament_id)
}
inline std::string* JoinTournamentRequest::_internal_mutable_tournament_id() {
  
  return tournament_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* JoinTournamentRequest::release_tournament_id() {
  // @@protoc_insertion_point(field_release:nakama.api.JoinTournamentRequest.tournament_id)
  return tournament_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void JoinTournamentRequest::set_allocated_tournament_id(std::string* tournament_id) {
  if (tournament_id != nullptr) {
    
  } else {
    
  }
  tournament_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tournament_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.JoinTournamentRequest.tournament_id)
}

// -------------------------------------------------------------------

// KickGroupUsersRequest

// string group_id = 1;
inline void KickGroupUsersRequest::clear_group_id() {
  group_id_.ClearToEmpty();
}
inline const std::string& KickGroupUsersRequest::group_id() const {
  // @@protoc_insertion_point(field_get:nakama.api.KickGroupUsersRequest.group_id)
  return _internal_group_id();
}
inline void KickGroupUsersRequest::set_group_id(const std::string& value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:nakama.api.KickGroupUsersRequest.group_id)
}
inline std::string* KickGroupUsersRequest::mutable_group_id() {
  // @@protoc_insertion_point(field_mutable:nakama.api.KickGroupUsersRequest.group_id)
  return _internal_mutable_group_id();
}
inline const std::string& KickGroupUsersRequest::_internal_group_id() const {
  return group_id_.Get();
}
inline void KickGroupUsersRequest::_internal_set_group_id(const std::string& value) {
  
  group_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void KickGroupUsersRequest::set_group_id(std::string&& value) {
  
  group_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.KickGroupUsersRequest.group_id)
}
inline void KickGroupUsersRequest::set_group_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  group_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.KickGroupUsersRequest.group_id)
}
inline void KickGroupUsersRequest::set_group_id(const char* value,
    size_t size) {
  
  group_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.KickGroupUsersRequest.group_id)
}
inline std::string* KickGroupUsersRequest::_internal_mutable_group_id() {
  
  return group_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* KickGroupUsersRequest::release_group_id() {
  // @@protoc_insertion_point(field_release:nakama.api.KickGroupUsersRequest.group_id)
  return group_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KickGroupUsersRequest::set_allocated_group_id(std::string* group_id) {
  if (group_id != nullptr) {
    
  } else {
    
  }
  group_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), group_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.KickGroupUsersRequest.group_id)
}

// repeated string user_ids = 2;
inline int KickGroupUsersRequest::_internal_user_ids_size() const {
  return user_ids_.size();
}
inline int KickGroupUsersRequest::user_ids_size() const {
  return _internal_user_ids_size();
}
inline void KickGroupUsersRequest::clear_user_ids() {
  user_ids_.Clear();
}
inline std::string* KickGroupUsersRequest::add_user_ids() {
  // @@protoc_insertion_point(field_add_mutable:nakama.api.KickGroupUsersRequest.user_ids)
  return _internal_add_user_ids();
}
inline const std::string& KickGroupUsersRequest::_internal_user_ids(int index) const {
  return user_ids_.Get(index);
}
inline const std::string& KickGroupUsersRequest::user_ids(int index) const {
  // @@protoc_insertion_point(field_get:nakama.api.KickGroupUsersRequest.user_ids)
  return _internal_user_ids(index);
}
inline std::string* KickGroupUsersRequest::mutable_user_ids(int index) {
  // @@protoc_insertion_point(field_mutable:nakama.api.KickGroupUsersRequest.user_ids)
  return user_ids_.Mutable(index);
}
inline void KickGroupUsersRequest::set_user_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:nakama.api.KickGroupUsersRequest.user_ids)
  user_ids_.Mutable(index)->assign(value);
}
inline void KickGroupUsersRequest::set_user_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:nakama.api.KickGroupUsersRequest.user_ids)
  user_ids_.Mutable(index)->assign(std::move(value));
}
inline void KickGroupUsersRequest::set_user_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  user_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:nakama.api.KickGroupUsersRequest.user_ids)
}
inline void KickGroupUsersRequest::set_user_ids(int index, const char* value, size_t size) {
  user_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:nakama.api.KickGroupUsersRequest.user_ids)
}
inline std::string* KickGroupUsersRequest::_internal_add_user_ids() {
  return user_ids_.Add();
}
inline void KickGroupUsersRequest::add_user_ids(const std::string& value) {
  user_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:nakama.api.KickGroupUsersRequest.user_ids)
}
inline void KickGroupUsersRequest::add_user_ids(std::string&& value) {
  user_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:nakama.api.KickGroupUsersRequest.user_ids)
}
inline void KickGroupUsersRequest::add_user_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  user_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:nakama.api.KickGroupUsersRequest.user_ids)
}
inline void KickGroupUsersRequest::add_user_ids(const char* value, size_t size) {
  user_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:nakama.api.KickGroupUsersRequest.user_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
KickGroupUsersRequest::user_ids() const {
  // @@protoc_insertion_point(field_list:nakama.api.KickGroupUsersRequest.user_ids)
  return user_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
KickGroupUsersRequest::mutable_user_ids() {
  // @@protoc_insertion_point(field_mutable_list:nakama.api.KickGroupUsersRequest.user_ids)
  return &user_ids_;
}

// -------------------------------------------------------------------

// Leaderboard

// string id = 1;
inline void Leaderboard::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& Leaderboard::id() const {
  // @@protoc_insertion_point(field_get:nakama.api.Leaderboard.id)
  return _internal_id();
}
inline void Leaderboard::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:nakama.api.Leaderboard.id)
}
inline std::string* Leaderboard::mutable_id() {
  // @@protoc_insertion_point(field_mutable:nakama.api.Leaderboard.id)
  return _internal_mutable_id();
}
inline const std::string& Leaderboard::_internal_id() const {
  return id_.Get();
}
inline void Leaderboard::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Leaderboard::set_id(std::string&& value) {
  
  id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.Leaderboard.id)
}
inline void Leaderboard::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.Leaderboard.id)
}
inline void Leaderboard::set_id(const char* value,
    size_t size) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.Leaderboard.id)
}
inline std::string* Leaderboard::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Leaderboard::release_id() {
  // @@protoc_insertion_point(field_release:nakama.api.Leaderboard.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Leaderboard::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.Leaderboard.id)
}

// uint32 sort_order = 2;
inline void Leaderboard::clear_sort_order() {
  sort_order_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Leaderboard::_internal_sort_order() const {
  return sort_order_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Leaderboard::sort_order() const {
  // @@protoc_insertion_point(field_get:nakama.api.Leaderboard.sort_order)
  return _internal_sort_order();
}
inline void Leaderboard::_internal_set_sort_order(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  sort_order_ = value;
}
inline void Leaderboard::set_sort_order(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sort_order(value);
  // @@protoc_insertion_point(field_set:nakama.api.Leaderboard.sort_order)
}

// .nakama.api.Operator operator = 3;
inline void Leaderboard::clear_operator_() {
  operator__ = 0;
}
inline ::nakama::api::Operator Leaderboard::_internal_operator_() const {
  return static_cast< ::nakama::api::Operator >(operator__);
}
inline ::nakama::api::Operator Leaderboard::operator_() const {
  // @@protoc_insertion_point(field_get:nakama.api.Leaderboard.operator)
  return _internal_operator_();
}
inline void Leaderboard::_internal_set_operator_(::nakama::api::Operator value) {
  
  operator__ = value;
}
inline void Leaderboard::set_operator_(::nakama::api::Operator value) {
  _internal_set_operator_(value);
  // @@protoc_insertion_point(field_set:nakama.api.Leaderboard.operator)
}

// uint32 prev_reset = 4;
inline void Leaderboard::clear_prev_reset() {
  prev_reset_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Leaderboard::_internal_prev_reset() const {
  return prev_reset_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Leaderboard::prev_reset() const {
  // @@protoc_insertion_point(field_get:nakama.api.Leaderboard.prev_reset)
  return _internal_prev_reset();
}
inline void Leaderboard::_internal_set_prev_reset(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  prev_reset_ = value;
}
inline void Leaderboard::set_prev_reset(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_prev_reset(value);
  // @@protoc_insertion_point(field_set:nakama.api.Leaderboard.prev_reset)
}

// uint32 next_reset = 5;
inline void Leaderboard::clear_next_reset() {
  next_reset_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Leaderboard::_internal_next_reset() const {
  return next_reset_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Leaderboard::next_reset() const {
  // @@protoc_insertion_point(field_get:nakama.api.Leaderboard.next_reset)
  return _internal_next_reset();
}
inline void Leaderboard::_internal_set_next_reset(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  next_reset_ = value;
}
inline void Leaderboard::set_next_reset(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_next_reset(value);
  // @@protoc_insertion_point(field_set:nakama.api.Leaderboard.next_reset)
}

// string metadata = 6;
inline void Leaderboard::clear_metadata() {
  metadata_.ClearToEmpty();
}
inline const std::string& Leaderboard::metadata() const {
  // @@protoc_insertion_point(field_get:nakama.api.Leaderboard.metadata)
  return _internal_metadata();
}
inline void Leaderboard::set_metadata(const std::string& value) {
  _internal_set_metadata(value);
  // @@protoc_insertion_point(field_set:nakama.api.Leaderboard.metadata)
}
inline std::string* Leaderboard::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable:nakama.api.Leaderboard.metadata)
  return _internal_mutable_metadata();
}
inline const std::string& Leaderboard::_internal_metadata() const {
  return metadata_.Get();
}
inline void Leaderboard::_internal_set_metadata(const std::string& value) {
  
  metadata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Leaderboard::set_metadata(std::string&& value) {
  
  metadata_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.Leaderboard.metadata)
}
inline void Leaderboard::set_metadata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  metadata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.Leaderboard.metadata)
}
inline void Leaderboard::set_metadata(const char* value,
    size_t size) {
  
  metadata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.Leaderboard.metadata)
}
inline std::string* Leaderboard::_internal_mutable_metadata() {
  
  return metadata_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Leaderboard::release_metadata() {
  // @@protoc_insertion_point(field_release:nakama.api.Leaderboard.metadata)
  return metadata_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Leaderboard::set_allocated_metadata(std::string* metadata) {
  if (metadata != nullptr) {
    
  } else {
    
  }
  metadata_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), metadata,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.Leaderboard.metadata)
}

// .google.protobuf.Timestamp create_time = 7;
inline bool Leaderboard::_internal_has_create_time() const {
  return this != internal_default_instance() && create_time_ != nullptr;
}
inline bool Leaderboard::has_create_time() const {
  return _internal_has_create_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Leaderboard::_internal_create_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = create_time_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Leaderboard::create_time() const {
  // @@protoc_insertion_point(field_get:nakama.api.Leaderboard.create_time)
  return _internal_create_time();
}
inline void Leaderboard::unsafe_arena_set_allocated_create_time(
    PROTOBUF_NAMESPACE_ID::Timestamp* create_time) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(create_time_);
  }
  create_time_ = create_time;
  if (create_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nakama.api.Leaderboard.create_time)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Leaderboard::release_create_time() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = create_time_;
  create_time_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Leaderboard::unsafe_arena_release_create_time() {
  // @@protoc_insertion_point(field_release:nakama.api.Leaderboard.create_time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = create_time_;
  create_time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Leaderboard::_internal_mutable_create_time() {
  
  if (create_time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    create_time_ = p;
  }
  return create_time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Leaderboard::mutable_create_time() {
  // @@protoc_insertion_point(field_mutable:nakama.api.Leaderboard.create_time)
  return _internal_mutable_create_time();
}
inline void Leaderboard::set_allocated_create_time(PROTOBUF_NAMESPACE_ID::Timestamp* create_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(create_time_);
  }
  if (create_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(create_time)->GetArena();
    if (message_arena != submessage_arena) {
      create_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, create_time, submessage_arena);
    }
    
  } else {
    
  }
  create_time_ = create_time;
  // @@protoc_insertion_point(field_set_allocated:nakama.api.Leaderboard.create_time)
}

// bool authoritative = 8;
inline void Leaderboard::clear_authoritative() {
  authoritative_ = false;
}
inline bool Leaderboard::_internal_authoritative() const {
  return authoritative_;
}
inline bool Leaderboard::authoritative() const {
  // @@protoc_insertion_point(field_get:nakama.api.Leaderboard.authoritative)
  return _internal_authoritative();
}
inline void Leaderboard::_internal_set_authoritative(bool value) {
  
  authoritative_ = value;
}
inline void Leaderboard::set_authoritative(bool value) {
  _internal_set_authoritative(value);
  // @@protoc_insertion_point(field_set:nakama.api.Leaderboard.authoritative)
}

// -------------------------------------------------------------------

// LeaderboardList

// repeated .nakama.api.Leaderboard leaderboards = 1;
inline int LeaderboardList::_internal_leaderboards_size() const {
  return leaderboards_.size();
}
inline int LeaderboardList::leaderboards_size() const {
  return _internal_leaderboards_size();
}
inline void LeaderboardList::clear_leaderboards() {
  leaderboards_.Clear();
}
inline ::nakama::api::Leaderboard* LeaderboardList::mutable_leaderboards(int index) {
  // @@protoc_insertion_point(field_mutable:nakama.api.LeaderboardList.leaderboards)
  return leaderboards_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nakama::api::Leaderboard >*
LeaderboardList::mutable_leaderboards() {
  // @@protoc_insertion_point(field_mutable_list:nakama.api.LeaderboardList.leaderboards)
  return &leaderboards_;
}
inline const ::nakama::api::Leaderboard& LeaderboardList::_internal_leaderboards(int index) const {
  return leaderboards_.Get(index);
}
inline const ::nakama::api::Leaderboard& LeaderboardList::leaderboards(int index) const {
  // @@protoc_insertion_point(field_get:nakama.api.LeaderboardList.leaderboards)
  return _internal_leaderboards(index);
}
inline ::nakama::api::Leaderboard* LeaderboardList::_internal_add_leaderboards() {
  return leaderboards_.Add();
}
inline ::nakama::api::Leaderboard* LeaderboardList::add_leaderboards() {
  // @@protoc_insertion_point(field_add:nakama.api.LeaderboardList.leaderboards)
  return _internal_add_leaderboards();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nakama::api::Leaderboard >&
LeaderboardList::leaderboards() const {
  // @@protoc_insertion_point(field_list:nakama.api.LeaderboardList.leaderboards)
  return leaderboards_;
}

// string cursor = 2;
inline void LeaderboardList::clear_cursor() {
  cursor_.ClearToEmpty();
}
inline const std::string& LeaderboardList::cursor() const {
  // @@protoc_insertion_point(field_get:nakama.api.LeaderboardList.cursor)
  return _internal_cursor();
}
inline void LeaderboardList::set_cursor(const std::string& value) {
  _internal_set_cursor(value);
  // @@protoc_insertion_point(field_set:nakama.api.LeaderboardList.cursor)
}
inline std::string* LeaderboardList::mutable_cursor() {
  // @@protoc_insertion_point(field_mutable:nakama.api.LeaderboardList.cursor)
  return _internal_mutable_cursor();
}
inline const std::string& LeaderboardList::_internal_cursor() const {
  return cursor_.Get();
}
inline void LeaderboardList::_internal_set_cursor(const std::string& value) {
  
  cursor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LeaderboardList::set_cursor(std::string&& value) {
  
  cursor_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.LeaderboardList.cursor)
}
inline void LeaderboardList::set_cursor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cursor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.LeaderboardList.cursor)
}
inline void LeaderboardList::set_cursor(const char* value,
    size_t size) {
  
  cursor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.LeaderboardList.cursor)
}
inline std::string* LeaderboardList::_internal_mutable_cursor() {
  
  return cursor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LeaderboardList::release_cursor() {
  // @@protoc_insertion_point(field_release:nakama.api.LeaderboardList.cursor)
  return cursor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LeaderboardList::set_allocated_cursor(std::string* cursor) {
  if (cursor != nullptr) {
    
  } else {
    
  }
  cursor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cursor,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.LeaderboardList.cursor)
}

// -------------------------------------------------------------------

// LeaderboardRecord

// string leaderboard_id = 1;
inline void LeaderboardRecord::clear_leaderboard_id() {
  leaderboard_id_.ClearToEmpty();
}
inline const std::string& LeaderboardRecord::leaderboard_id() const {
  // @@protoc_insertion_point(field_get:nakama.api.LeaderboardRecord.leaderboard_id)
  return _internal_leaderboard_id();
}
inline void LeaderboardRecord::set_leaderboard_id(const std::string& value) {
  _internal_set_leaderboard_id(value);
  // @@protoc_insertion_point(field_set:nakama.api.LeaderboardRecord.leaderboard_id)
}
inline std::string* LeaderboardRecord::mutable_leaderboard_id() {
  // @@protoc_insertion_point(field_mutable:nakama.api.LeaderboardRecord.leaderboard_id)
  return _internal_mutable_leaderboard_id();
}
inline const std::string& LeaderboardRecord::_internal_leaderboard_id() const {
  return leaderboard_id_.Get();
}
inline void LeaderboardRecord::_internal_set_leaderboard_id(const std::string& value) {
  
  leaderboard_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LeaderboardRecord::set_leaderboard_id(std::string&& value) {
  
  leaderboard_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.LeaderboardRecord.leaderboard_id)
}
inline void LeaderboardRecord::set_leaderboard_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  leaderboard_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.LeaderboardRecord.leaderboard_id)
}
inline void LeaderboardRecord::set_leaderboard_id(const char* value,
    size_t size) {
  
  leaderboard_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.LeaderboardRecord.leaderboard_id)
}
inline std::string* LeaderboardRecord::_internal_mutable_leaderboard_id() {
  
  return leaderboard_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LeaderboardRecord::release_leaderboard_id() {
  // @@protoc_insertion_point(field_release:nakama.api.LeaderboardRecord.leaderboard_id)
  return leaderboard_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LeaderboardRecord::set_allocated_leaderboard_id(std::string* leaderboard_id) {
  if (leaderboard_id != nullptr) {
    
  } else {
    
  }
  leaderboard_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), leaderboard_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.LeaderboardRecord.leaderboard_id)
}

// string owner_id = 2;
inline void LeaderboardRecord::clear_owner_id() {
  owner_id_.ClearToEmpty();
}
inline const std::string& LeaderboardRecord::owner_id() const {
  // @@protoc_insertion_point(field_get:nakama.api.LeaderboardRecord.owner_id)
  return _internal_owner_id();
}
inline void LeaderboardRecord::set_owner_id(const std::string& value) {
  _internal_set_owner_id(value);
  // @@protoc_insertion_point(field_set:nakama.api.LeaderboardRecord.owner_id)
}
inline std::string* LeaderboardRecord::mutable_owner_id() {
  // @@protoc_insertion_point(field_mutable:nakama.api.LeaderboardRecord.owner_id)
  return _internal_mutable_owner_id();
}
inline const std::string& LeaderboardRecord::_internal_owner_id() const {
  return owner_id_.Get();
}
inline void LeaderboardRecord::_internal_set_owner_id(const std::string& value) {
  
  owner_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LeaderboardRecord::set_owner_id(std::string&& value) {
  
  owner_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.LeaderboardRecord.owner_id)
}
inline void LeaderboardRecord::set_owner_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  owner_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.LeaderboardRecord.owner_id)
}
inline void LeaderboardRecord::set_owner_id(const char* value,
    size_t size) {
  
  owner_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.LeaderboardRecord.owner_id)
}
inline std::string* LeaderboardRecord::_internal_mutable_owner_id() {
  
  return owner_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LeaderboardRecord::release_owner_id() {
  // @@protoc_insertion_point(field_release:nakama.api.LeaderboardRecord.owner_id)
  return owner_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LeaderboardRecord::set_allocated_owner_id(std::string* owner_id) {
  if (owner_id != nullptr) {
    
  } else {
    
  }
  owner_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), owner_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.LeaderboardRecord.owner_id)
}

// .google.protobuf.StringValue username = 3;
inline bool LeaderboardRecord::_internal_has_username() const {
  return this != internal_default_instance() && username_ != nullptr;
}
inline bool LeaderboardRecord::has_username() const {
  return _internal_has_username();
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& LeaderboardRecord::_internal_username() const {
  const PROTOBUF_NAMESPACE_ID::StringValue* p = username_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::StringValue&>(
      PROTOBUF_NAMESPACE_ID::_StringValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& LeaderboardRecord::username() const {
  // @@protoc_insertion_point(field_get:nakama.api.LeaderboardRecord.username)
  return _internal_username();
}
inline void LeaderboardRecord::unsafe_arena_set_allocated_username(
    PROTOBUF_NAMESPACE_ID::StringValue* username) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(username_);
  }
  username_ = username;
  if (username) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nakama.api.LeaderboardRecord.username)
}
inline PROTOBUF_NAMESPACE_ID::StringValue* LeaderboardRecord::release_username() {
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = username_;
  username_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* LeaderboardRecord::unsafe_arena_release_username() {
  // @@protoc_insertion_point(field_release:nakama.api.LeaderboardRecord.username)
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = username_;
  username_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* LeaderboardRecord::_internal_mutable_username() {
  
  if (username_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::StringValue>(GetArena());
    username_ = p;
  }
  return username_;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* LeaderboardRecord::mutable_username() {
  // @@protoc_insertion_point(field_mutable:nakama.api.LeaderboardRecord.username)
  return _internal_mutable_username();
}
inline void LeaderboardRecord::set_allocated_username(PROTOBUF_NAMESPACE_ID::StringValue* username) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(username_);
  }
  if (username) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(username)->GetArena();
    if (message_arena != submessage_arena) {
      username = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, username, submessage_arena);
    }
    
  } else {
    
  }
  username_ = username;
  // @@protoc_insertion_point(field_set_allocated:nakama.api.LeaderboardRecord.username)
}

// int64 score = 4;
inline void LeaderboardRecord::clear_score() {
  score_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LeaderboardRecord::_internal_score() const {
  return score_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LeaderboardRecord::score() const {
  // @@protoc_insertion_point(field_get:nakama.api.LeaderboardRecord.score)
  return _internal_score();
}
inline void LeaderboardRecord::_internal_set_score(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  score_ = value;
}
inline void LeaderboardRecord::set_score(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:nakama.api.LeaderboardRecord.score)
}

// int64 subscore = 5;
inline void LeaderboardRecord::clear_subscore() {
  subscore_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LeaderboardRecord::_internal_subscore() const {
  return subscore_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LeaderboardRecord::subscore() const {
  // @@protoc_insertion_point(field_get:nakama.api.LeaderboardRecord.subscore)
  return _internal_subscore();
}
inline void LeaderboardRecord::_internal_set_subscore(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  subscore_ = value;
}
inline void LeaderboardRecord::set_subscore(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_subscore(value);
  // @@protoc_insertion_point(field_set:nakama.api.LeaderboardRecord.subscore)
}

// int32 num_score = 6;
inline void LeaderboardRecord::clear_num_score() {
  num_score_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LeaderboardRecord::_internal_num_score() const {
  return num_score_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LeaderboardRecord::num_score() const {
  // @@protoc_insertion_point(field_get:nakama.api.LeaderboardRecord.num_score)
  return _internal_num_score();
}
inline void LeaderboardRecord::_internal_set_num_score(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  num_score_ = value;
}
inline void LeaderboardRecord::set_num_score(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num_score(value);
  // @@protoc_insertion_point(field_set:nakama.api.LeaderboardRecord.num_score)
}

// string metadata = 7;
inline void LeaderboardRecord::clear_metadata() {
  metadata_.ClearToEmpty();
}
inline const std::string& LeaderboardRecord::metadata() const {
  // @@protoc_insertion_point(field_get:nakama.api.LeaderboardRecord.metadata)
  return _internal_metadata();
}
inline void LeaderboardRecord::set_metadata(const std::string& value) {
  _internal_set_metadata(value);
  // @@protoc_insertion_point(field_set:nakama.api.LeaderboardRecord.metadata)
}
inline std::string* LeaderboardRecord::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable:nakama.api.LeaderboardRecord.metadata)
  return _internal_mutable_metadata();
}
inline const std::string& LeaderboardRecord::_internal_metadata() const {
  return metadata_.Get();
}
inline void LeaderboardRecord::_internal_set_metadata(const std::string& value) {
  
  metadata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LeaderboardRecord::set_metadata(std::string&& value) {
  
  metadata_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.LeaderboardRecord.metadata)
}
inline void LeaderboardRecord::set_metadata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  metadata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.LeaderboardRecord.metadata)
}
inline void LeaderboardRecord::set_metadata(const char* value,
    size_t size) {
  
  metadata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.LeaderboardRecord.metadata)
}
inline std::string* LeaderboardRecord::_internal_mutable_metadata() {
  
  return metadata_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LeaderboardRecord::release_metadata() {
  // @@protoc_insertion_point(field_release:nakama.api.LeaderboardRecord.metadata)
  return metadata_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LeaderboardRecord::set_allocated_metadata(std::string* metadata) {
  if (metadata != nullptr) {
    
  } else {
    
  }
  metadata_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), metadata,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.LeaderboardRecord.metadata)
}

// .google.protobuf.Timestamp create_time = 8;
inline bool LeaderboardRecord::_internal_has_create_time() const {
  return this != internal_default_instance() && create_time_ != nullptr;
}
inline bool LeaderboardRecord::has_create_time() const {
  return _internal_has_create_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& LeaderboardRecord::_internal_create_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = create_time_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& LeaderboardRecord::create_time() const {
  // @@protoc_insertion_point(field_get:nakama.api.LeaderboardRecord.create_time)
  return _internal_create_time();
}
inline void LeaderboardRecord::unsafe_arena_set_allocated_create_time(
    PROTOBUF_NAMESPACE_ID::Timestamp* create_time) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(create_time_);
  }
  create_time_ = create_time;
  if (create_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nakama.api.LeaderboardRecord.create_time)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* LeaderboardRecord::release_create_time() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = create_time_;
  create_time_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* LeaderboardRecord::unsafe_arena_release_create_time() {
  // @@protoc_insertion_point(field_release:nakama.api.LeaderboardRecord.create_time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = create_time_;
  create_time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* LeaderboardRecord::_internal_mutable_create_time() {
  
  if (create_time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    create_time_ = p;
  }
  return create_time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* LeaderboardRecord::mutable_create_time() {
  // @@protoc_insertion_point(field_mutable:nakama.api.LeaderboardRecord.create_time)
  return _internal_mutable_create_time();
}
inline void LeaderboardRecord::set_allocated_create_time(PROTOBUF_NAMESPACE_ID::Timestamp* create_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(create_time_);
  }
  if (create_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(create_time)->GetArena();
    if (message_arena != submessage_arena) {
      create_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, create_time, submessage_arena);
    }
    
  } else {
    
  }
  create_time_ = create_time;
  // @@protoc_insertion_point(field_set_allocated:nakama.api.LeaderboardRecord.create_time)
}

// .google.protobuf.Timestamp update_time = 9;
inline bool LeaderboardRecord::_internal_has_update_time() const {
  return this != internal_default_instance() && update_time_ != nullptr;
}
inline bool LeaderboardRecord::has_update_time() const {
  return _internal_has_update_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& LeaderboardRecord::_internal_update_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = update_time_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& LeaderboardRecord::update_time() const {
  // @@protoc_insertion_point(field_get:nakama.api.LeaderboardRecord.update_time)
  return _internal_update_time();
}
inline void LeaderboardRecord::unsafe_arena_set_allocated_update_time(
    PROTOBUF_NAMESPACE_ID::Timestamp* update_time) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_time_);
  }
  update_time_ = update_time;
  if (update_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nakama.api.LeaderboardRecord.update_time)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* LeaderboardRecord::release_update_time() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = update_time_;
  update_time_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* LeaderboardRecord::unsafe_arena_release_update_time() {
  // @@protoc_insertion_point(field_release:nakama.api.LeaderboardRecord.update_time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = update_time_;
  update_time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* LeaderboardRecord::_internal_mutable_update_time() {
  
  if (update_time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    update_time_ = p;
  }
  return update_time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* LeaderboardRecord::mutable_update_time() {
  // @@protoc_insertion_point(field_mutable:nakama.api.LeaderboardRecord.update_time)
  return _internal_mutable_update_time();
}
inline void LeaderboardRecord::set_allocated_update_time(PROTOBUF_NAMESPACE_ID::Timestamp* update_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_time_);
  }
  if (update_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_time)->GetArena();
    if (message_arena != submessage_arena) {
      update_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_time, submessage_arena);
    }
    
  } else {
    
  }
  update_time_ = update_time;
  // @@protoc_insertion_point(field_set_allocated:nakama.api.LeaderboardRecord.update_time)
}

// .google.protobuf.Timestamp expiry_time = 10;
inline bool LeaderboardRecord::_internal_has_expiry_time() const {
  return this != internal_default_instance() && expiry_time_ != nullptr;
}
inline bool LeaderboardRecord::has_expiry_time() const {
  return _internal_has_expiry_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& LeaderboardRecord::_internal_expiry_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = expiry_time_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& LeaderboardRecord::expiry_time() const {
  // @@protoc_insertion_point(field_get:nakama.api.LeaderboardRecord.expiry_time)
  return _internal_expiry_time();
}
inline void LeaderboardRecord::unsafe_arena_set_allocated_expiry_time(
    PROTOBUF_NAMESPACE_ID::Timestamp* expiry_time) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expiry_time_);
  }
  expiry_time_ = expiry_time;
  if (expiry_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nakama.api.LeaderboardRecord.expiry_time)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* LeaderboardRecord::release_expiry_time() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = expiry_time_;
  expiry_time_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* LeaderboardRecord::unsafe_arena_release_expiry_time() {
  // @@protoc_insertion_point(field_release:nakama.api.LeaderboardRecord.expiry_time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = expiry_time_;
  expiry_time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* LeaderboardRecord::_internal_mutable_expiry_time() {
  
  if (expiry_time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    expiry_time_ = p;
  }
  return expiry_time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* LeaderboardRecord::mutable_expiry_time() {
  // @@protoc_insertion_point(field_mutable:nakama.api.LeaderboardRecord.expiry_time)
  return _internal_mutable_expiry_time();
}
inline void LeaderboardRecord::set_allocated_expiry_time(PROTOBUF_NAMESPACE_ID::Timestamp* expiry_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(expiry_time_);
  }
  if (expiry_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expiry_time)->GetArena();
    if (message_arena != submessage_arena) {
      expiry_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expiry_time, submessage_arena);
    }
    
  } else {
    
  }
  expiry_time_ = expiry_time;
  // @@protoc_insertion_point(field_set_allocated:nakama.api.LeaderboardRecord.expiry_time)
}

// int64 rank = 11;
inline void LeaderboardRecord::clear_rank() {
  rank_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LeaderboardRecord::_internal_rank() const {
  return rank_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LeaderboardRecord::rank() const {
  // @@protoc_insertion_point(field_get:nakama.api.LeaderboardRecord.rank)
  return _internal_rank();
}
inline void LeaderboardRecord::_internal_set_rank(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  rank_ = value;
}
inline void LeaderboardRecord::set_rank(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_rank(value);
  // @@protoc_insertion_point(field_set:nakama.api.LeaderboardRecord.rank)
}

// uint32 max_num_score = 12;
inline void LeaderboardRecord::clear_max_num_score() {
  max_num_score_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LeaderboardRecord::_internal_max_num_score() const {
  return max_num_score_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LeaderboardRecord::max_num_score() const {
  // @@protoc_insertion_point(field_get:nakama.api.LeaderboardRecord.max_num_score)
  return _internal_max_num_score();
}
inline void LeaderboardRecord::_internal_set_max_num_score(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  max_num_score_ = value;
}
inline void LeaderboardRecord::set_max_num_score(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_num_score(value);
  // @@protoc_insertion_point(field_set:nakama.api.LeaderboardRecord.max_num_score)
}

// -------------------------------------------------------------------

// LeaderboardRecordList

// repeated .nakama.api.LeaderboardRecord records = 1;
inline int LeaderboardRecordList::_internal_records_size() const {
  return records_.size();
}
inline int LeaderboardRecordList::records_size() const {
  return _internal_records_size();
}
inline void LeaderboardRecordList::clear_records() {
  records_.Clear();
}
inline ::nakama::api::LeaderboardRecord* LeaderboardRecordList::mutable_records(int index) {
  // @@protoc_insertion_point(field_mutable:nakama.api.LeaderboardRecordList.records)
  return records_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nakama::api::LeaderboardRecord >*
LeaderboardRecordList::mutable_records() {
  // @@protoc_insertion_point(field_mutable_list:nakama.api.LeaderboardRecordList.records)
  return &records_;
}
inline const ::nakama::api::LeaderboardRecord& LeaderboardRecordList::_internal_records(int index) const {
  return records_.Get(index);
}
inline const ::nakama::api::LeaderboardRecord& LeaderboardRecordList::records(int index) const {
  // @@protoc_insertion_point(field_get:nakama.api.LeaderboardRecordList.records)
  return _internal_records(index);
}
inline ::nakama::api::LeaderboardRecord* LeaderboardRecordList::_internal_add_records() {
  return records_.Add();
}
inline ::nakama::api::LeaderboardRecord* LeaderboardRecordList::add_records() {
  // @@protoc_insertion_point(field_add:nakama.api.LeaderboardRecordList.records)
  return _internal_add_records();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nakama::api::LeaderboardRecord >&
LeaderboardRecordList::records() const {
  // @@protoc_insertion_point(field_list:nakama.api.LeaderboardRecordList.records)
  return records_;
}

// repeated .nakama.api.LeaderboardRecord owner_records = 2;
inline int LeaderboardRecordList::_internal_owner_records_size() const {
  return owner_records_.size();
}
inline int LeaderboardRecordList::owner_records_size() const {
  return _internal_owner_records_size();
}
inline void LeaderboardRecordList::clear_owner_records() {
  owner_records_.Clear();
}
inline ::nakama::api::LeaderboardRecord* LeaderboardRecordList::mutable_owner_records(int index) {
  // @@protoc_insertion_point(field_mutable:nakama.api.LeaderboardRecordList.owner_records)
  return owner_records_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nakama::api::LeaderboardRecord >*
LeaderboardRecordList::mutable_owner_records() {
  // @@protoc_insertion_point(field_mutable_list:nakama.api.LeaderboardRecordList.owner_records)
  return &owner_records_;
}
inline const ::nakama::api::LeaderboardRecord& LeaderboardRecordList::_internal_owner_records(int index) const {
  return owner_records_.Get(index);
}
inline const ::nakama::api::LeaderboardRecord& LeaderboardRecordList::owner_records(int index) const {
  // @@protoc_insertion_point(field_get:nakama.api.LeaderboardRecordList.owner_records)
  return _internal_owner_records(index);
}
inline ::nakama::api::LeaderboardRecord* LeaderboardRecordList::_internal_add_owner_records() {
  return owner_records_.Add();
}
inline ::nakama::api::LeaderboardRecord* LeaderboardRecordList::add_owner_records() {
  // @@protoc_insertion_point(field_add:nakama.api.LeaderboardRecordList.owner_records)
  return _internal_add_owner_records();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nakama::api::LeaderboardRecord >&
LeaderboardRecordList::owner_records() const {
  // @@protoc_insertion_point(field_list:nakama.api.LeaderboardRecordList.owner_records)
  return owner_records_;
}

// string next_cursor = 3;
inline void LeaderboardRecordList::clear_next_cursor() {
  next_cursor_.ClearToEmpty();
}
inline const std::string& LeaderboardRecordList::next_cursor() const {
  // @@protoc_insertion_point(field_get:nakama.api.LeaderboardRecordList.next_cursor)
  return _internal_next_cursor();
}
inline void LeaderboardRecordList::set_next_cursor(const std::string& value) {
  _internal_set_next_cursor(value);
  // @@protoc_insertion_point(field_set:nakama.api.LeaderboardRecordList.next_cursor)
}
inline std::string* LeaderboardRecordList::mutable_next_cursor() {
  // @@protoc_insertion_point(field_mutable:nakama.api.LeaderboardRecordList.next_cursor)
  return _internal_mutable_next_cursor();
}
inline const std::string& LeaderboardRecordList::_internal_next_cursor() const {
  return next_cursor_.Get();
}
inline void LeaderboardRecordList::_internal_set_next_cursor(const std::string& value) {
  
  next_cursor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LeaderboardRecordList::set_next_cursor(std::string&& value) {
  
  next_cursor_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.LeaderboardRecordList.next_cursor)
}
inline void LeaderboardRecordList::set_next_cursor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  next_cursor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.LeaderboardRecordList.next_cursor)
}
inline void LeaderboardRecordList::set_next_cursor(const char* value,
    size_t size) {
  
  next_cursor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.LeaderboardRecordList.next_cursor)
}
inline std::string* LeaderboardRecordList::_internal_mutable_next_cursor() {
  
  return next_cursor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LeaderboardRecordList::release_next_cursor() {
  // @@protoc_insertion_point(field_release:nakama.api.LeaderboardRecordList.next_cursor)
  return next_cursor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LeaderboardRecordList::set_allocated_next_cursor(std::string* next_cursor) {
  if (next_cursor != nullptr) {
    
  } else {
    
  }
  next_cursor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), next_cursor,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.LeaderboardRecordList.next_cursor)
}

// string prev_cursor = 4;
inline void LeaderboardRecordList::clear_prev_cursor() {
  prev_cursor_.ClearToEmpty();
}
inline const std::string& LeaderboardRecordList::prev_cursor() const {
  // @@protoc_insertion_point(field_get:nakama.api.LeaderboardRecordList.prev_cursor)
  return _internal_prev_cursor();
}
inline void LeaderboardRecordList::set_prev_cursor(const std::string& value) {
  _internal_set_prev_cursor(value);
  // @@protoc_insertion_point(field_set:nakama.api.LeaderboardRecordList.prev_cursor)
}
inline std::string* LeaderboardRecordList::mutable_prev_cursor() {
  // @@protoc_insertion_point(field_mutable:nakama.api.LeaderboardRecordList.prev_cursor)
  return _internal_mutable_prev_cursor();
}
inline const std::string& LeaderboardRecordList::_internal_prev_cursor() const {
  return prev_cursor_.Get();
}
inline void LeaderboardRecordList::_internal_set_prev_cursor(const std::string& value) {
  
  prev_cursor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LeaderboardRecordList::set_prev_cursor(std::string&& value) {
  
  prev_cursor_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.LeaderboardRecordList.prev_cursor)
}
inline void LeaderboardRecordList::set_prev_cursor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  prev_cursor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.LeaderboardRecordList.prev_cursor)
}
inline void LeaderboardRecordList::set_prev_cursor(const char* value,
    size_t size) {
  
  prev_cursor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.LeaderboardRecordList.prev_cursor)
}
inline std::string* LeaderboardRecordList::_internal_mutable_prev_cursor() {
  
  return prev_cursor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LeaderboardRecordList::release_prev_cursor() {
  // @@protoc_insertion_point(field_release:nakama.api.LeaderboardRecordList.prev_cursor)
  return prev_cursor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LeaderboardRecordList::set_allocated_prev_cursor(std::string* prev_cursor) {
  if (prev_cursor != nullptr) {
    
  } else {
    
  }
  prev_cursor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), prev_cursor,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.LeaderboardRecordList.prev_cursor)
}

// -------------------------------------------------------------------

// LeaveGroupRequest

// string group_id = 1;
inline void LeaveGroupRequest::clear_group_id() {
  group_id_.ClearToEmpty();
}
inline const std::string& LeaveGroupRequest::group_id() const {
  // @@protoc_insertion_point(field_get:nakama.api.LeaveGroupRequest.group_id)
  return _internal_group_id();
}
inline void LeaveGroupRequest::set_group_id(const std::string& value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:nakama.api.LeaveGroupRequest.group_id)
}
inline std::string* LeaveGroupRequest::mutable_group_id() {
  // @@protoc_insertion_point(field_mutable:nakama.api.LeaveGroupRequest.group_id)
  return _internal_mutable_group_id();
}
inline const std::string& LeaveGroupRequest::_internal_group_id() const {
  return group_id_.Get();
}
inline void LeaveGroupRequest::_internal_set_group_id(const std::string& value) {
  
  group_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LeaveGroupRequest::set_group_id(std::string&& value) {
  
  group_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.LeaveGroupRequest.group_id)
}
inline void LeaveGroupRequest::set_group_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  group_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.LeaveGroupRequest.group_id)
}
inline void LeaveGroupRequest::set_group_id(const char* value,
    size_t size) {
  
  group_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.LeaveGroupRequest.group_id)
}
inline std::string* LeaveGroupRequest::_internal_mutable_group_id() {
  
  return group_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LeaveGroupRequest::release_group_id() {
  // @@protoc_insertion_point(field_release:nakama.api.LeaveGroupRequest.group_id)
  return group_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LeaveGroupRequest::set_allocated_group_id(std::string* group_id) {
  if (group_id != nullptr) {
    
  } else {
    
  }
  group_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), group_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.LeaveGroupRequest.group_id)
}

// -------------------------------------------------------------------

// LinkFacebookRequest

// .nakama.api.AccountFacebook account = 1;
inline bool LinkFacebookRequest::_internal_has_account() const {
  return this != internal_default_instance() && account_ != nullptr;
}
inline bool LinkFacebookRequest::has_account() const {
  return _internal_has_account();
}
inline void LinkFacebookRequest::clear_account() {
  if (GetArena() == nullptr && account_ != nullptr) {
    delete account_;
  }
  account_ = nullptr;
}
inline const ::nakama::api::AccountFacebook& LinkFacebookRequest::_internal_account() const {
  const ::nakama::api::AccountFacebook* p = account_;
  return p != nullptr ? *p : reinterpret_cast<const ::nakama::api::AccountFacebook&>(
      ::nakama::api::_AccountFacebook_default_instance_);
}
inline const ::nakama::api::AccountFacebook& LinkFacebookRequest::account() const {
  // @@protoc_insertion_point(field_get:nakama.api.LinkFacebookRequest.account)
  return _internal_account();
}
inline void LinkFacebookRequest::unsafe_arena_set_allocated_account(
    ::nakama::api::AccountFacebook* account) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(account_);
  }
  account_ = account;
  if (account) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nakama.api.LinkFacebookRequest.account)
}
inline ::nakama::api::AccountFacebook* LinkFacebookRequest::release_account() {
  
  ::nakama::api::AccountFacebook* temp = account_;
  account_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::nakama::api::AccountFacebook* LinkFacebookRequest::unsafe_arena_release_account() {
  // @@protoc_insertion_point(field_release:nakama.api.LinkFacebookRequest.account)
  
  ::nakama::api::AccountFacebook* temp = account_;
  account_ = nullptr;
  return temp;
}
inline ::nakama::api::AccountFacebook* LinkFacebookRequest::_internal_mutable_account() {
  
  if (account_ == nullptr) {
    auto* p = CreateMaybeMessage<::nakama::api::AccountFacebook>(GetArena());
    account_ = p;
  }
  return account_;
}
inline ::nakama::api::AccountFacebook* LinkFacebookRequest::mutable_account() {
  // @@protoc_insertion_point(field_mutable:nakama.api.LinkFacebookRequest.account)
  return _internal_mutable_account();
}
inline void LinkFacebookRequest::set_allocated_account(::nakama::api::AccountFacebook* account) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete account_;
  }
  if (account) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(account);
    if (message_arena != submessage_arena) {
      account = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, account, submessage_arena);
    }
    
  } else {
    
  }
  account_ = account;
  // @@protoc_insertion_point(field_set_allocated:nakama.api.LinkFacebookRequest.account)
}

// .google.protobuf.BoolValue sync = 2;
inline bool LinkFacebookRequest::_internal_has_sync() const {
  return this != internal_default_instance() && sync_ != nullptr;
}
inline bool LinkFacebookRequest::has_sync() const {
  return _internal_has_sync();
}
inline const PROTOBUF_NAMESPACE_ID::BoolValue& LinkFacebookRequest::_internal_sync() const {
  const PROTOBUF_NAMESPACE_ID::BoolValue* p = sync_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::BoolValue&>(
      PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::BoolValue& LinkFacebookRequest::sync() const {
  // @@protoc_insertion_point(field_get:nakama.api.LinkFacebookRequest.sync)
  return _internal_sync();
}
inline void LinkFacebookRequest::unsafe_arena_set_allocated_sync(
    PROTOBUF_NAMESPACE_ID::BoolValue* sync) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sync_);
  }
  sync_ = sync;
  if (sync) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nakama.api.LinkFacebookRequest.sync)
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* LinkFacebookRequest::release_sync() {
  
  PROTOBUF_NAMESPACE_ID::BoolValue* temp = sync_;
  sync_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* LinkFacebookRequest::unsafe_arena_release_sync() {
  // @@protoc_insertion_point(field_release:nakama.api.LinkFacebookRequest.sync)
  
  PROTOBUF_NAMESPACE_ID::BoolValue* temp = sync_;
  sync_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* LinkFacebookRequest::_internal_mutable_sync() {
  
  if (sync_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::BoolValue>(GetArena());
    sync_ = p;
  }
  return sync_;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* LinkFacebookRequest::mutable_sync() {
  // @@protoc_insertion_point(field_mutable:nakama.api.LinkFacebookRequest.sync)
  return _internal_mutable_sync();
}
inline void LinkFacebookRequest::set_allocated_sync(PROTOBUF_NAMESPACE_ID::BoolValue* sync) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(sync_);
  }
  if (sync) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sync)->GetArena();
    if (message_arena != submessage_arena) {
      sync = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sync, submessage_arena);
    }
    
  } else {
    
  }
  sync_ = sync;
  // @@protoc_insertion_point(field_set_allocated:nakama.api.LinkFacebookRequest.sync)
}

// -------------------------------------------------------------------

// LinkSteamRequest

// .nakama.api.AccountSteam account = 1;
inline bool LinkSteamRequest::_internal_has_account() const {
  return this != internal_default_instance() && account_ != nullptr;
}
inline bool LinkSteamRequest::has_account() const {
  return _internal_has_account();
}
inline void LinkSteamRequest::clear_account() {
  if (GetArena() == nullptr && account_ != nullptr) {
    delete account_;
  }
  account_ = nullptr;
}
inline const ::nakama::api::AccountSteam& LinkSteamRequest::_internal_account() const {
  const ::nakama::api::AccountSteam* p = account_;
  return p != nullptr ? *p : reinterpret_cast<const ::nakama::api::AccountSteam&>(
      ::nakama::api::_AccountSteam_default_instance_);
}
inline const ::nakama::api::AccountSteam& LinkSteamRequest::account() const {
  // @@protoc_insertion_point(field_get:nakama.api.LinkSteamRequest.account)
  return _internal_account();
}
inline void LinkSteamRequest::unsafe_arena_set_allocated_account(
    ::nakama::api::AccountSteam* account) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(account_);
  }
  account_ = account;
  if (account) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nakama.api.LinkSteamRequest.account)
}
inline ::nakama::api::AccountSteam* LinkSteamRequest::release_account() {
  
  ::nakama::api::AccountSteam* temp = account_;
  account_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::nakama::api::AccountSteam* LinkSteamRequest::unsafe_arena_release_account() {
  // @@protoc_insertion_point(field_release:nakama.api.LinkSteamRequest.account)
  
  ::nakama::api::AccountSteam* temp = account_;
  account_ = nullptr;
  return temp;
}
inline ::nakama::api::AccountSteam* LinkSteamRequest::_internal_mutable_account() {
  
  if (account_ == nullptr) {
    auto* p = CreateMaybeMessage<::nakama::api::AccountSteam>(GetArena());
    account_ = p;
  }
  return account_;
}
inline ::nakama::api::AccountSteam* LinkSteamRequest::mutable_account() {
  // @@protoc_insertion_point(field_mutable:nakama.api.LinkSteamRequest.account)
  return _internal_mutable_account();
}
inline void LinkSteamRequest::set_allocated_account(::nakama::api::AccountSteam* account) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete account_;
  }
  if (account) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(account);
    if (message_arena != submessage_arena) {
      account = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, account, submessage_arena);
    }
    
  } else {
    
  }
  account_ = account;
  // @@protoc_insertion_point(field_set_allocated:nakama.api.LinkSteamRequest.account)
}

// .google.protobuf.BoolValue sync = 2;
inline bool LinkSteamRequest::_internal_has_sync() const {
  return this != internal_default_instance() && sync_ != nullptr;
}
inline bool LinkSteamRequest::has_sync() const {
  return _internal_has_sync();
}
inline const PROTOBUF_NAMESPACE_ID::BoolValue& LinkSteamRequest::_internal_sync() const {
  const PROTOBUF_NAMESPACE_ID::BoolValue* p = sync_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::BoolValue&>(
      PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::BoolValue& LinkSteamRequest::sync() const {
  // @@protoc_insertion_point(field_get:nakama.api.LinkSteamRequest.sync)
  return _internal_sync();
}
inline void LinkSteamRequest::unsafe_arena_set_allocated_sync(
    PROTOBUF_NAMESPACE_ID::BoolValue* sync) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sync_);
  }
  sync_ = sync;
  if (sync) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nakama.api.LinkSteamRequest.sync)
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* LinkSteamRequest::release_sync() {
  
  PROTOBUF_NAMESPACE_ID::BoolValue* temp = sync_;
  sync_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* LinkSteamRequest::unsafe_arena_release_sync() {
  // @@protoc_insertion_point(field_release:nakama.api.LinkSteamRequest.sync)
  
  PROTOBUF_NAMESPACE_ID::BoolValue* temp = sync_;
  sync_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* LinkSteamRequest::_internal_mutable_sync() {
  
  if (sync_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::BoolValue>(GetArena());
    sync_ = p;
  }
  return sync_;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* LinkSteamRequest::mutable_sync() {
  // @@protoc_insertion_point(field_mutable:nakama.api.LinkSteamRequest.sync)
  return _internal_mutable_sync();
}
inline void LinkSteamRequest::set_allocated_sync(PROTOBUF_NAMESPACE_ID::BoolValue* sync) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(sync_);
  }
  if (sync) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sync)->GetArena();
    if (message_arena != submessage_arena) {
      sync = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sync, submessage_arena);
    }
    
  } else {
    
  }
  sync_ = sync;
  // @@protoc_insertion_point(field_set_allocated:nakama.api.LinkSteamRequest.sync)
}

// -------------------------------------------------------------------

// ListChannelMessagesRequest

// string channel_id = 1;
inline void ListChannelMessagesRequest::clear_channel_id() {
  channel_id_.ClearToEmpty();
}
inline const std::string& ListChannelMessagesRequest::channel_id() const {
  // @@protoc_insertion_point(field_get:nakama.api.ListChannelMessagesRequest.channel_id)
  return _internal_channel_id();
}
inline void ListChannelMessagesRequest::set_channel_id(const std::string& value) {
  _internal_set_channel_id(value);
  // @@protoc_insertion_point(field_set:nakama.api.ListChannelMessagesRequest.channel_id)
}
inline std::string* ListChannelMessagesRequest::mutable_channel_id() {
  // @@protoc_insertion_point(field_mutable:nakama.api.ListChannelMessagesRequest.channel_id)
  return _internal_mutable_channel_id();
}
inline const std::string& ListChannelMessagesRequest::_internal_channel_id() const {
  return channel_id_.Get();
}
inline void ListChannelMessagesRequest::_internal_set_channel_id(const std::string& value) {
  
  channel_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListChannelMessagesRequest::set_channel_id(std::string&& value) {
  
  channel_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.ListChannelMessagesRequest.channel_id)
}
inline void ListChannelMessagesRequest::set_channel_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  channel_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.ListChannelMessagesRequest.channel_id)
}
inline void ListChannelMessagesRequest::set_channel_id(const char* value,
    size_t size) {
  
  channel_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.ListChannelMessagesRequest.channel_id)
}
inline std::string* ListChannelMessagesRequest::_internal_mutable_channel_id() {
  
  return channel_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListChannelMessagesRequest::release_channel_id() {
  // @@protoc_insertion_point(field_release:nakama.api.ListChannelMessagesRequest.channel_id)
  return channel_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListChannelMessagesRequest::set_allocated_channel_id(std::string* channel_id) {
  if (channel_id != nullptr) {
    
  } else {
    
  }
  channel_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), channel_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.ListChannelMessagesRequest.channel_id)
}

// .google.protobuf.Int32Value limit = 2;
inline bool ListChannelMessagesRequest::_internal_has_limit() const {
  return this != internal_default_instance() && limit_ != nullptr;
}
inline bool ListChannelMessagesRequest::has_limit() const {
  return _internal_has_limit();
}
inline const PROTOBUF_NAMESPACE_ID::Int32Value& ListChannelMessagesRequest::_internal_limit() const {
  const PROTOBUF_NAMESPACE_ID::Int32Value* p = limit_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Int32Value&>(
      PROTOBUF_NAMESPACE_ID::_Int32Value_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Int32Value& ListChannelMessagesRequest::limit() const {
  // @@protoc_insertion_point(field_get:nakama.api.ListChannelMessagesRequest.limit)
  return _internal_limit();
}
inline void ListChannelMessagesRequest::unsafe_arena_set_allocated_limit(
    PROTOBUF_NAMESPACE_ID::Int32Value* limit) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(limit_);
  }
  limit_ = limit;
  if (limit) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nakama.api.ListChannelMessagesRequest.limit)
}
inline PROTOBUF_NAMESPACE_ID::Int32Value* ListChannelMessagesRequest::release_limit() {
  
  PROTOBUF_NAMESPACE_ID::Int32Value* temp = limit_;
  limit_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Int32Value* ListChannelMessagesRequest::unsafe_arena_release_limit() {
  // @@protoc_insertion_point(field_release:nakama.api.ListChannelMessagesRequest.limit)
  
  PROTOBUF_NAMESPACE_ID::Int32Value* temp = limit_;
  limit_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Int32Value* ListChannelMessagesRequest::_internal_mutable_limit() {
  
  if (limit_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Int32Value>(GetArena());
    limit_ = p;
  }
  return limit_;
}
inline PROTOBUF_NAMESPACE_ID::Int32Value* ListChannelMessagesRequest::mutable_limit() {
  // @@protoc_insertion_point(field_mutable:nakama.api.ListChannelMessagesRequest.limit)
  return _internal_mutable_limit();
}
inline void ListChannelMessagesRequest::set_allocated_limit(PROTOBUF_NAMESPACE_ID::Int32Value* limit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(limit_);
  }
  if (limit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(limit)->GetArena();
    if (message_arena != submessage_arena) {
      limit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, limit, submessage_arena);
    }
    
  } else {
    
  }
  limit_ = limit;
  // @@protoc_insertion_point(field_set_allocated:nakama.api.ListChannelMessagesRequest.limit)
}

// .google.protobuf.BoolValue forward = 3;
inline bool ListChannelMessagesRequest::_internal_has_forward() const {
  return this != internal_default_instance() && forward_ != nullptr;
}
inline bool ListChannelMessagesRequest::has_forward() const {
  return _internal_has_forward();
}
inline const PROTOBUF_NAMESPACE_ID::BoolValue& ListChannelMessagesRequest::_internal_forward() const {
  const PROTOBUF_NAMESPACE_ID::BoolValue* p = forward_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::BoolValue&>(
      PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::BoolValue& ListChannelMessagesRequest::forward() const {
  // @@protoc_insertion_point(field_get:nakama.api.ListChannelMessagesRequest.forward)
  return _internal_forward();
}
inline void ListChannelMessagesRequest::unsafe_arena_set_allocated_forward(
    PROTOBUF_NAMESPACE_ID::BoolValue* forward) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(forward_);
  }
  forward_ = forward;
  if (forward) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nakama.api.ListChannelMessagesRequest.forward)
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* ListChannelMessagesRequest::release_forward() {
  
  PROTOBUF_NAMESPACE_ID::BoolValue* temp = forward_;
  forward_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* ListChannelMessagesRequest::unsafe_arena_release_forward() {
  // @@protoc_insertion_point(field_release:nakama.api.ListChannelMessagesRequest.forward)
  
  PROTOBUF_NAMESPACE_ID::BoolValue* temp = forward_;
  forward_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* ListChannelMessagesRequest::_internal_mutable_forward() {
  
  if (forward_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::BoolValue>(GetArena());
    forward_ = p;
  }
  return forward_;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* ListChannelMessagesRequest::mutable_forward() {
  // @@protoc_insertion_point(field_mutable:nakama.api.ListChannelMessagesRequest.forward)
  return _internal_mutable_forward();
}
inline void ListChannelMessagesRequest::set_allocated_forward(PROTOBUF_NAMESPACE_ID::BoolValue* forward) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(forward_);
  }
  if (forward) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(forward)->GetArena();
    if (message_arena != submessage_arena) {
      forward = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, forward, submessage_arena);
    }
    
  } else {
    
  }
  forward_ = forward;
  // @@protoc_insertion_point(field_set_allocated:nakama.api.ListChannelMessagesRequest.forward)
}

// string cursor = 4;
inline void ListChannelMessagesRequest::clear_cursor() {
  cursor_.ClearToEmpty();
}
inline const std::string& ListChannelMessagesRequest::cursor() const {
  // @@protoc_insertion_point(field_get:nakama.api.ListChannelMessagesRequest.cursor)
  return _internal_cursor();
}
inline void ListChannelMessagesRequest::set_cursor(const std::string& value) {
  _internal_set_cursor(value);
  // @@protoc_insertion_point(field_set:nakama.api.ListChannelMessagesRequest.cursor)
}
inline std::string* ListChannelMessagesRequest::mutable_cursor() {
  // @@protoc_insertion_point(field_mutable:nakama.api.ListChannelMessagesRequest.cursor)
  return _internal_mutable_cursor();
}
inline const std::string& ListChannelMessagesRequest::_internal_cursor() const {
  return cursor_.Get();
}
inline void ListChannelMessagesRequest::_internal_set_cursor(const std::string& value) {
  
  cursor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListChannelMessagesRequest::set_cursor(std::string&& value) {
  
  cursor_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.ListChannelMessagesRequest.cursor)
}
inline void ListChannelMessagesRequest::set_cursor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cursor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.ListChannelMessagesRequest.cursor)
}
inline void ListChannelMessagesRequest::set_cursor(const char* value,
    size_t size) {
  
  cursor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.ListChannelMessagesRequest.cursor)
}
inline std::string* ListChannelMessagesRequest::_internal_mutable_cursor() {
  
  return cursor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListChannelMessagesRequest::release_cursor() {
  // @@protoc_insertion_point(field_release:nakama.api.ListChannelMessagesRequest.cursor)
  return cursor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListChannelMessagesRequest::set_allocated_cursor(std::string* cursor) {
  if (cursor != nullptr) {
    
  } else {
    
  }
  cursor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cursor,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.ListChannelMessagesRequest.cursor)
}

// -------------------------------------------------------------------

// ListFriendsRequest

// .google.protobuf.Int32Value limit = 1;
inline bool ListFriendsRequest::_internal_has_limit() const {
  return this != internal_default_instance() && limit_ != nullptr;
}
inline bool ListFriendsRequest::has_limit() const {
  return _internal_has_limit();
}
inline const PROTOBUF_NAMESPACE_ID::Int32Value& ListFriendsRequest::_internal_limit() const {
  const PROTOBUF_NAMESPACE_ID::Int32Value* p = limit_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Int32Value&>(
      PROTOBUF_NAMESPACE_ID::_Int32Value_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Int32Value& ListFriendsRequest::limit() const {
  // @@protoc_insertion_point(field_get:nakama.api.ListFriendsRequest.limit)
  return _internal_limit();
}
inline void ListFriendsRequest::unsafe_arena_set_allocated_limit(
    PROTOBUF_NAMESPACE_ID::Int32Value* limit) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(limit_);
  }
  limit_ = limit;
  if (limit) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nakama.api.ListFriendsRequest.limit)
}
inline PROTOBUF_NAMESPACE_ID::Int32Value* ListFriendsRequest::release_limit() {
  
  PROTOBUF_NAMESPACE_ID::Int32Value* temp = limit_;
  limit_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Int32Value* ListFriendsRequest::unsafe_arena_release_limit() {
  // @@protoc_insertion_point(field_release:nakama.api.ListFriendsRequest.limit)
  
  PROTOBUF_NAMESPACE_ID::Int32Value* temp = limit_;
  limit_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Int32Value* ListFriendsRequest::_internal_mutable_limit() {
  
  if (limit_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Int32Value>(GetArena());
    limit_ = p;
  }
  return limit_;
}
inline PROTOBUF_NAMESPACE_ID::Int32Value* ListFriendsRequest::mutable_limit() {
  // @@protoc_insertion_point(field_mutable:nakama.api.ListFriendsRequest.limit)
  return _internal_mutable_limit();
}
inline void ListFriendsRequest::set_allocated_limit(PROTOBUF_NAMESPACE_ID::Int32Value* limit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(limit_);
  }
  if (limit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(limit)->GetArena();
    if (message_arena != submessage_arena) {
      limit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, limit, submessage_arena);
    }
    
  } else {
    
  }
  limit_ = limit;
  // @@protoc_insertion_point(field_set_allocated:nakama.api.ListFriendsRequest.limit)
}

// .google.protobuf.Int32Value state = 2;
inline bool ListFriendsRequest::_internal_has_state() const {
  return this != internal_default_instance() && state_ != nullptr;
}
inline bool ListFriendsRequest::has_state() const {
  return _internal_has_state();
}
inline const PROTOBUF_NAMESPACE_ID::Int32Value& ListFriendsRequest::_internal_state() const {
  const PROTOBUF_NAMESPACE_ID::Int32Value* p = state_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Int32Value&>(
      PROTOBUF_NAMESPACE_ID::_Int32Value_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Int32Value& ListFriendsRequest::state() const {
  // @@protoc_insertion_point(field_get:nakama.api.ListFriendsRequest.state)
  return _internal_state();
}
inline void ListFriendsRequest::unsafe_arena_set_allocated_state(
    PROTOBUF_NAMESPACE_ID::Int32Value* state) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(state_);
  }
  state_ = state;
  if (state) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nakama.api.ListFriendsRequest.state)
}
inline PROTOBUF_NAMESPACE_ID::Int32Value* ListFriendsRequest::release_state() {
  
  PROTOBUF_NAMESPACE_ID::Int32Value* temp = state_;
  state_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Int32Value* ListFriendsRequest::unsafe_arena_release_state() {
  // @@protoc_insertion_point(field_release:nakama.api.ListFriendsRequest.state)
  
  PROTOBUF_NAMESPACE_ID::Int32Value* temp = state_;
  state_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Int32Value* ListFriendsRequest::_internal_mutable_state() {
  
  if (state_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Int32Value>(GetArena());
    state_ = p;
  }
  return state_;
}
inline PROTOBUF_NAMESPACE_ID::Int32Value* ListFriendsRequest::mutable_state() {
  // @@protoc_insertion_point(field_mutable:nakama.api.ListFriendsRequest.state)
  return _internal_mutable_state();
}
inline void ListFriendsRequest::set_allocated_state(PROTOBUF_NAMESPACE_ID::Int32Value* state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(state_);
  }
  if (state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(state)->GetArena();
    if (message_arena != submessage_arena) {
      state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:nakama.api.ListFriendsRequest.state)
}

// string cursor = 3;
inline void ListFriendsRequest::clear_cursor() {
  cursor_.ClearToEmpty();
}
inline const std::string& ListFriendsRequest::cursor() const {
  // @@protoc_insertion_point(field_get:nakama.api.ListFriendsRequest.cursor)
  return _internal_cursor();
}
inline void ListFriendsRequest::set_cursor(const std::string& value) {
  _internal_set_cursor(value);
  // @@protoc_insertion_point(field_set:nakama.api.ListFriendsRequest.cursor)
}
inline std::string* ListFriendsRequest::mutable_cursor() {
  // @@protoc_insertion_point(field_mutable:nakama.api.ListFriendsRequest.cursor)
  return _internal_mutable_cursor();
}
inline const std::string& ListFriendsRequest::_internal_cursor() const {
  return cursor_.Get();
}
inline void ListFriendsRequest::_internal_set_cursor(const std::string& value) {
  
  cursor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListFriendsRequest::set_cursor(std::string&& value) {
  
  cursor_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.ListFriendsRequest.cursor)
}
inline void ListFriendsRequest::set_cursor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cursor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.ListFriendsRequest.cursor)
}
inline void ListFriendsRequest::set_cursor(const char* value,
    size_t size) {
  
  cursor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.ListFriendsRequest.cursor)
}
inline std::string* ListFriendsRequest::_internal_mutable_cursor() {
  
  return cursor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListFriendsRequest::release_cursor() {
  // @@protoc_insertion_point(field_release:nakama.api.ListFriendsRequest.cursor)
  return cursor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListFriendsRequest::set_allocated_cursor(std::string* cursor) {
  if (cursor != nullptr) {
    
  } else {
    
  }
  cursor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cursor,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.ListFriendsRequest.cursor)
}

// -------------------------------------------------------------------

// ListGroupsRequest

// string name = 1;
inline void ListGroupsRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& ListGroupsRequest::name() const {
  // @@protoc_insertion_point(field_get:nakama.api.ListGroupsRequest.name)
  return _internal_name();
}
inline void ListGroupsRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:nakama.api.ListGroupsRequest.name)
}
inline std::string* ListGroupsRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:nakama.api.ListGroupsRequest.name)
  return _internal_mutable_name();
}
inline const std::string& ListGroupsRequest::_internal_name() const {
  return name_.Get();
}
inline void ListGroupsRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListGroupsRequest::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.ListGroupsRequest.name)
}
inline void ListGroupsRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.ListGroupsRequest.name)
}
inline void ListGroupsRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.ListGroupsRequest.name)
}
inline std::string* ListGroupsRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListGroupsRequest::release_name() {
  // @@protoc_insertion_point(field_release:nakama.api.ListGroupsRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListGroupsRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.ListGroupsRequest.name)
}

// string cursor = 2;
inline void ListGroupsRequest::clear_cursor() {
  cursor_.ClearToEmpty();
}
inline const std::string& ListGroupsRequest::cursor() const {
  // @@protoc_insertion_point(field_get:nakama.api.ListGroupsRequest.cursor)
  return _internal_cursor();
}
inline void ListGroupsRequest::set_cursor(const std::string& value) {
  _internal_set_cursor(value);
  // @@protoc_insertion_point(field_set:nakama.api.ListGroupsRequest.cursor)
}
inline std::string* ListGroupsRequest::mutable_cursor() {
  // @@protoc_insertion_point(field_mutable:nakama.api.ListGroupsRequest.cursor)
  return _internal_mutable_cursor();
}
inline const std::string& ListGroupsRequest::_internal_cursor() const {
  return cursor_.Get();
}
inline void ListGroupsRequest::_internal_set_cursor(const std::string& value) {
  
  cursor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListGroupsRequest::set_cursor(std::string&& value) {
  
  cursor_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.ListGroupsRequest.cursor)
}
inline void ListGroupsRequest::set_cursor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cursor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.ListGroupsRequest.cursor)
}
inline void ListGroupsRequest::set_cursor(const char* value,
    size_t size) {
  
  cursor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.ListGroupsRequest.cursor)
}
inline std::string* ListGroupsRequest::_internal_mutable_cursor() {
  
  return cursor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListGroupsRequest::release_cursor() {
  // @@protoc_insertion_point(field_release:nakama.api.ListGroupsRequest.cursor)
  return cursor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListGroupsRequest::set_allocated_cursor(std::string* cursor) {
  if (cursor != nullptr) {
    
  } else {
    
  }
  cursor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cursor,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.ListGroupsRequest.cursor)
}

// .google.protobuf.Int32Value limit = 3;
inline bool ListGroupsRequest::_internal_has_limit() const {
  return this != internal_default_instance() && limit_ != nullptr;
}
inline bool ListGroupsRequest::has_limit() const {
  return _internal_has_limit();
}
inline const PROTOBUF_NAMESPACE_ID::Int32Value& ListGroupsRequest::_internal_limit() const {
  const PROTOBUF_NAMESPACE_ID::Int32Value* p = limit_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Int32Value&>(
      PROTOBUF_NAMESPACE_ID::_Int32Value_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Int32Value& ListGroupsRequest::limit() const {
  // @@protoc_insertion_point(field_get:nakama.api.ListGroupsRequest.limit)
  return _internal_limit();
}
inline void ListGroupsRequest::unsafe_arena_set_allocated_limit(
    PROTOBUF_NAMESPACE_ID::Int32Value* limit) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(limit_);
  }
  limit_ = limit;
  if (limit) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nakama.api.ListGroupsRequest.limit)
}
inline PROTOBUF_NAMESPACE_ID::Int32Value* ListGroupsRequest::release_limit() {
  
  PROTOBUF_NAMESPACE_ID::Int32Value* temp = limit_;
  limit_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Int32Value* ListGroupsRequest::unsafe_arena_release_limit() {
  // @@protoc_insertion_point(field_release:nakama.api.ListGroupsRequest.limit)
  
  PROTOBUF_NAMESPACE_ID::Int32Value* temp = limit_;
  limit_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Int32Value* ListGroupsRequest::_internal_mutable_limit() {
  
  if (limit_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Int32Value>(GetArena());
    limit_ = p;
  }
  return limit_;
}
inline PROTOBUF_NAMESPACE_ID::Int32Value* ListGroupsRequest::mutable_limit() {
  // @@protoc_insertion_point(field_mutable:nakama.api.ListGroupsRequest.limit)
  return _internal_mutable_limit();
}
inline void ListGroupsRequest::set_allocated_limit(PROTOBUF_NAMESPACE_ID::Int32Value* limit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(limit_);
  }
  if (limit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(limit)->GetArena();
    if (message_arena != submessage_arena) {
      limit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, limit, submessage_arena);
    }
    
  } else {
    
  }
  limit_ = limit;
  // @@protoc_insertion_point(field_set_allocated:nakama.api.ListGroupsRequest.limit)
}

// string lang_tag = 4;
inline void ListGroupsRequest::clear_lang_tag() {
  lang_tag_.ClearToEmpty();
}
inline const std::string& ListGroupsRequest::lang_tag() const {
  // @@protoc_insertion_point(field_get:nakama.api.ListGroupsRequest.lang_tag)
  return _internal_lang_tag();
}
inline void ListGroupsRequest::set_lang_tag(const std::string& value) {
  _internal_set_lang_tag(value);
  // @@protoc_insertion_point(field_set:nakama.api.ListGroupsRequest.lang_tag)
}
inline std::string* ListGroupsRequest::mutable_lang_tag() {
  // @@protoc_insertion_point(field_mutable:nakama.api.ListGroupsRequest.lang_tag)
  return _internal_mutable_lang_tag();
}
inline const std::string& ListGroupsRequest::_internal_lang_tag() const {
  return lang_tag_.Get();
}
inline void ListGroupsRequest::_internal_set_lang_tag(const std::string& value) {
  
  lang_tag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListGroupsRequest::set_lang_tag(std::string&& value) {
  
  lang_tag_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.ListGroupsRequest.lang_tag)
}
inline void ListGroupsRequest::set_lang_tag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  lang_tag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.ListGroupsRequest.lang_tag)
}
inline void ListGroupsRequest::set_lang_tag(const char* value,
    size_t size) {
  
  lang_tag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.ListGroupsRequest.lang_tag)
}
inline std::string* ListGroupsRequest::_internal_mutable_lang_tag() {
  
  return lang_tag_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListGroupsRequest::release_lang_tag() {
  // @@protoc_insertion_point(field_release:nakama.api.ListGroupsRequest.lang_tag)
  return lang_tag_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListGroupsRequest::set_allocated_lang_tag(std::string* lang_tag) {
  if (lang_tag != nullptr) {
    
  } else {
    
  }
  lang_tag_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), lang_tag,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.ListGroupsRequest.lang_tag)
}

// .google.protobuf.Int32Value members = 5;
inline bool ListGroupsRequest::_internal_has_members() const {
  return this != internal_default_instance() && members_ != nullptr;
}
inline bool ListGroupsRequest::has_members() const {
  return _internal_has_members();
}
inline const PROTOBUF_NAMESPACE_ID::Int32Value& ListGroupsRequest::_internal_members() const {
  const PROTOBUF_NAMESPACE_ID::Int32Value* p = members_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Int32Value&>(
      PROTOBUF_NAMESPACE_ID::_Int32Value_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Int32Value& ListGroupsRequest::members() const {
  // @@protoc_insertion_point(field_get:nakama.api.ListGroupsRequest.members)
  return _internal_members();
}
inline void ListGroupsRequest::unsafe_arena_set_allocated_members(
    PROTOBUF_NAMESPACE_ID::Int32Value* members) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(members_);
  }
  members_ = members;
  if (members) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nakama.api.ListGroupsRequest.members)
}
inline PROTOBUF_NAMESPACE_ID::Int32Value* ListGroupsRequest::release_members() {
  
  PROTOBUF_NAMESPACE_ID::Int32Value* temp = members_;
  members_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Int32Value* ListGroupsRequest::unsafe_arena_release_members() {
  // @@protoc_insertion_point(field_release:nakama.api.ListGroupsRequest.members)
  
  PROTOBUF_NAMESPACE_ID::Int32Value* temp = members_;
  members_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Int32Value* ListGroupsRequest::_internal_mutable_members() {
  
  if (members_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Int32Value>(GetArena());
    members_ = p;
  }
  return members_;
}
inline PROTOBUF_NAMESPACE_ID::Int32Value* ListGroupsRequest::mutable_members() {
  // @@protoc_insertion_point(field_mutable:nakama.api.ListGroupsRequest.members)
  return _internal_mutable_members();
}
inline void ListGroupsRequest::set_allocated_members(PROTOBUF_NAMESPACE_ID::Int32Value* members) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(members_);
  }
  if (members) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(members)->GetArena();
    if (message_arena != submessage_arena) {
      members = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, members, submessage_arena);
    }
    
  } else {
    
  }
  members_ = members;
  // @@protoc_insertion_point(field_set_allocated:nakama.api.ListGroupsRequest.members)
}

// .google.protobuf.BoolValue open = 6;
inline bool ListGroupsRequest::_internal_has_open() const {
  return this != internal_default_instance() && open_ != nullptr;
}
inline bool ListGroupsRequest::has_open() const {
  return _internal_has_open();
}
inline const PROTOBUF_NAMESPACE_ID::BoolValue& ListGroupsRequest::_internal_open() const {
  const PROTOBUF_NAMESPACE_ID::BoolValue* p = open_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::BoolValue&>(
      PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::BoolValue& ListGroupsRequest::open() const {
  // @@protoc_insertion_point(field_get:nakama.api.ListGroupsRequest.open)
  return _internal_open();
}
inline void ListGroupsRequest::unsafe_arena_set_allocated_open(
    PROTOBUF_NAMESPACE_ID::BoolValue* open) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(open_);
  }
  open_ = open;
  if (open) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nakama.api.ListGroupsRequest.open)
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* ListGroupsRequest::release_open() {
  
  PROTOBUF_NAMESPACE_ID::BoolValue* temp = open_;
  open_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* ListGroupsRequest::unsafe_arena_release_open() {
  // @@protoc_insertion_point(field_release:nakama.api.ListGroupsRequest.open)
  
  PROTOBUF_NAMESPACE_ID::BoolValue* temp = open_;
  open_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* ListGroupsRequest::_internal_mutable_open() {
  
  if (open_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::BoolValue>(GetArena());
    open_ = p;
  }
  return open_;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* ListGroupsRequest::mutable_open() {
  // @@protoc_insertion_point(field_mutable:nakama.api.ListGroupsRequest.open)
  return _internal_mutable_open();
}
inline void ListGroupsRequest::set_allocated_open(PROTOBUF_NAMESPACE_ID::BoolValue* open) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(open_);
  }
  if (open) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(open)->GetArena();
    if (message_arena != submessage_arena) {
      open = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, open, submessage_arena);
    }
    
  } else {
    
  }
  open_ = open;
  // @@protoc_insertion_point(field_set_allocated:nakama.api.ListGroupsRequest.open)
}

// -------------------------------------------------------------------

// ListGroupUsersRequest

// string group_id = 1;
inline void ListGroupUsersRequest::clear_group_id() {
  group_id_.ClearToEmpty();
}
inline const std::string& ListGroupUsersRequest::group_id() const {
  // @@protoc_insertion_point(field_get:nakama.api.ListGroupUsersRequest.group_id)
  return _internal_group_id();
}
inline void ListGroupUsersRequest::set_group_id(const std::string& value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:nakama.api.ListGroupUsersRequest.group_id)
}
inline std::string* ListGroupUsersRequest::mutable_group_id() {
  // @@protoc_insertion_point(field_mutable:nakama.api.ListGroupUsersRequest.group_id)
  return _internal_mutable_group_id();
}
inline const std::string& ListGroupUsersRequest::_internal_group_id() const {
  return group_id_.Get();
}
inline void ListGroupUsersRequest::_internal_set_group_id(const std::string& value) {
  
  group_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListGroupUsersRequest::set_group_id(std::string&& value) {
  
  group_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.ListGroupUsersRequest.group_id)
}
inline void ListGroupUsersRequest::set_group_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  group_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.ListGroupUsersRequest.group_id)
}
inline void ListGroupUsersRequest::set_group_id(const char* value,
    size_t size) {
  
  group_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.ListGroupUsersRequest.group_id)
}
inline std::string* ListGroupUsersRequest::_internal_mutable_group_id() {
  
  return group_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListGroupUsersRequest::release_group_id() {
  // @@protoc_insertion_point(field_release:nakama.api.ListGroupUsersRequest.group_id)
  return group_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListGroupUsersRequest::set_allocated_group_id(std::string* group_id) {
  if (group_id != nullptr) {
    
  } else {
    
  }
  group_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), group_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.ListGroupUsersRequest.group_id)
}

// .google.protobuf.Int32Value limit = 2;
inline bool ListGroupUsersRequest::_internal_has_limit() const {
  return this != internal_default_instance() && limit_ != nullptr;
}
inline bool ListGroupUsersRequest::has_limit() const {
  return _internal_has_limit();
}
inline const PROTOBUF_NAMESPACE_ID::Int32Value& ListGroupUsersRequest::_internal_limit() const {
  const PROTOBUF_NAMESPACE_ID::Int32Value* p = limit_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Int32Value&>(
      PROTOBUF_NAMESPACE_ID::_Int32Value_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Int32Value& ListGroupUsersRequest::limit() const {
  // @@protoc_insertion_point(field_get:nakama.api.ListGroupUsersRequest.limit)
  return _internal_limit();
}
inline void ListGroupUsersRequest::unsafe_arena_set_allocated_limit(
    PROTOBUF_NAMESPACE_ID::Int32Value* limit) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(limit_);
  }
  limit_ = limit;
  if (limit) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nakama.api.ListGroupUsersRequest.limit)
}
inline PROTOBUF_NAMESPACE_ID::Int32Value* ListGroupUsersRequest::release_limit() {
  
  PROTOBUF_NAMESPACE_ID::Int32Value* temp = limit_;
  limit_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Int32Value* ListGroupUsersRequest::unsafe_arena_release_limit() {
  // @@protoc_insertion_point(field_release:nakama.api.ListGroupUsersRequest.limit)
  
  PROTOBUF_NAMESPACE_ID::Int32Value* temp = limit_;
  limit_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Int32Value* ListGroupUsersRequest::_internal_mutable_limit() {
  
  if (limit_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Int32Value>(GetArena());
    limit_ = p;
  }
  return limit_;
}
inline PROTOBUF_NAMESPACE_ID::Int32Value* ListGroupUsersRequest::mutable_limit() {
  // @@protoc_insertion_point(field_mutable:nakama.api.ListGroupUsersRequest.limit)
  return _internal_mutable_limit();
}
inline void ListGroupUsersRequest::set_allocated_limit(PROTOBUF_NAMESPACE_ID::Int32Value* limit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(limit_);
  }
  if (limit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(limit)->GetArena();
    if (message_arena != submessage_arena) {
      limit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, limit, submessage_arena);
    }
    
  } else {
    
  }
  limit_ = limit;
  // @@protoc_insertion_point(field_set_allocated:nakama.api.ListGroupUsersRequest.limit)
}

// .google.protobuf.Int32Value state = 3;
inline bool ListGroupUsersRequest::_internal_has_state() const {
  return this != internal_default_instance() && state_ != nullptr;
}
inline bool ListGroupUsersRequest::has_state() const {
  return _internal_has_state();
}
inline const PROTOBUF_NAMESPACE_ID::Int32Value& ListGroupUsersRequest::_internal_state() const {
  const PROTOBUF_NAMESPACE_ID::Int32Value* p = state_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Int32Value&>(
      PROTOBUF_NAMESPACE_ID::_Int32Value_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Int32Value& ListGroupUsersRequest::state() const {
  // @@protoc_insertion_point(field_get:nakama.api.ListGroupUsersRequest.state)
  return _internal_state();
}
inline void ListGroupUsersRequest::unsafe_arena_set_allocated_state(
    PROTOBUF_NAMESPACE_ID::Int32Value* state) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(state_);
  }
  state_ = state;
  if (state) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nakama.api.ListGroupUsersRequest.state)
}
inline PROTOBUF_NAMESPACE_ID::Int32Value* ListGroupUsersRequest::release_state() {
  
  PROTOBUF_NAMESPACE_ID::Int32Value* temp = state_;
  state_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Int32Value* ListGroupUsersRequest::unsafe_arena_release_state() {
  // @@protoc_insertion_point(field_release:nakama.api.ListGroupUsersRequest.state)
  
  PROTOBUF_NAMESPACE_ID::Int32Value* temp = state_;
  state_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Int32Value* ListGroupUsersRequest::_internal_mutable_state() {
  
  if (state_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Int32Value>(GetArena());
    state_ = p;
  }
  return state_;
}
inline PROTOBUF_NAMESPACE_ID::Int32Value* ListGroupUsersRequest::mutable_state() {
  // @@protoc_insertion_point(field_mutable:nakama.api.ListGroupUsersRequest.state)
  return _internal_mutable_state();
}
inline void ListGroupUsersRequest::set_allocated_state(PROTOBUF_NAMESPACE_ID::Int32Value* state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(state_);
  }
  if (state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(state)->GetArena();
    if (message_arena != submessage_arena) {
      state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:nakama.api.ListGroupUsersRequest.state)
}

// string cursor = 4;
inline void ListGroupUsersRequest::clear_cursor() {
  cursor_.ClearToEmpty();
}
inline const std::string& ListGroupUsersRequest::cursor() const {
  // @@protoc_insertion_point(field_get:nakama.api.ListGroupUsersRequest.cursor)
  return _internal_cursor();
}
inline void ListGroupUsersRequest::set_cursor(const std::string& value) {
  _internal_set_cursor(value);
  // @@protoc_insertion_point(field_set:nakama.api.ListGroupUsersRequest.cursor)
}
inline std::string* ListGroupUsersRequest::mutable_cursor() {
  // @@protoc_insertion_point(field_mutable:nakama.api.ListGroupUsersRequest.cursor)
  return _internal_mutable_cursor();
}
inline const std::string& ListGroupUsersRequest::_internal_cursor() const {
  return cursor_.Get();
}
inline void ListGroupUsersRequest::_internal_set_cursor(const std::string& value) {
  
  cursor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListGroupUsersRequest::set_cursor(std::string&& value) {
  
  cursor_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.ListGroupUsersRequest.cursor)
}
inline void ListGroupUsersRequest::set_cursor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cursor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.ListGroupUsersRequest.cursor)
}
inline void ListGroupUsersRequest::set_cursor(const char* value,
    size_t size) {
  
  cursor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.ListGroupUsersRequest.cursor)
}
inline std::string* ListGroupUsersRequest::_internal_mutable_cursor() {
  
  return cursor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListGroupUsersRequest::release_cursor() {
  // @@protoc_insertion_point(field_release:nakama.api.ListGroupUsersRequest.cursor)
  return cursor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListGroupUsersRequest::set_allocated_cursor(std::string* cursor) {
  if (cursor != nullptr) {
    
  } else {
    
  }
  cursor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cursor,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.ListGroupUsersRequest.cursor)
}

// -------------------------------------------------------------------

// ListLeaderboardRecordsAroundOwnerRequest

// string leaderboard_id = 1;
inline void ListLeaderboardRecordsAroundOwnerRequest::clear_leaderboard_id() {
  leaderboard_id_.ClearToEmpty();
}
inline const std::string& ListLeaderboardRecordsAroundOwnerRequest::leaderboard_id() const {
  // @@protoc_insertion_point(field_get:nakama.api.ListLeaderboardRecordsAroundOwnerRequest.leaderboard_id)
  return _internal_leaderboard_id();
}
inline void ListLeaderboardRecordsAroundOwnerRequest::set_leaderboard_id(const std::string& value) {
  _internal_set_leaderboard_id(value);
  // @@protoc_insertion_point(field_set:nakama.api.ListLeaderboardRecordsAroundOwnerRequest.leaderboard_id)
}
inline std::string* ListLeaderboardRecordsAroundOwnerRequest::mutable_leaderboard_id() {
  // @@protoc_insertion_point(field_mutable:nakama.api.ListLeaderboardRecordsAroundOwnerRequest.leaderboard_id)
  return _internal_mutable_leaderboard_id();
}
inline const std::string& ListLeaderboardRecordsAroundOwnerRequest::_internal_leaderboard_id() const {
  return leaderboard_id_.Get();
}
inline void ListLeaderboardRecordsAroundOwnerRequest::_internal_set_leaderboard_id(const std::string& value) {
  
  leaderboard_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListLeaderboardRecordsAroundOwnerRequest::set_leaderboard_id(std::string&& value) {
  
  leaderboard_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.ListLeaderboardRecordsAroundOwnerRequest.leaderboard_id)
}
inline void ListLeaderboardRecordsAroundOwnerRequest::set_leaderboard_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  leaderboard_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.ListLeaderboardRecordsAroundOwnerRequest.leaderboard_id)
}
inline void ListLeaderboardRecordsAroundOwnerRequest::set_leaderboard_id(const char* value,
    size_t size) {
  
  leaderboard_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.ListLeaderboardRecordsAroundOwnerRequest.leaderboard_id)
}
inline std::string* ListLeaderboardRecordsAroundOwnerRequest::_internal_mutable_leaderboard_id() {
  
  return leaderboard_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListLeaderboardRecordsAroundOwnerRequest::release_leaderboard_id() {
  // @@protoc_insertion_point(field_release:nakama.api.ListLeaderboardRecordsAroundOwnerRequest.leaderboard_id)
  return leaderboard_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListLeaderboardRecordsAroundOwnerRequest::set_allocated_leaderboard_id(std::string* leaderboard_id) {
  if (leaderboard_id != nullptr) {
    
  } else {
    
  }
  leaderboard_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), leaderboard_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.ListLeaderboardRecordsAroundOwnerRequest.leaderboard_id)
}

// .google.protobuf.UInt32Value limit = 2;
inline bool ListLeaderboardRecordsAroundOwnerRequest::_internal_has_limit() const {
  return this != internal_default_instance() && limit_ != nullptr;
}
inline bool ListLeaderboardRecordsAroundOwnerRequest::has_limit() const {
  return _internal_has_limit();
}
inline const PROTOBUF_NAMESPACE_ID::UInt32Value& ListLeaderboardRecordsAroundOwnerRequest::_internal_limit() const {
  const PROTOBUF_NAMESPACE_ID::UInt32Value* p = limit_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::UInt32Value&>(
      PROTOBUF_NAMESPACE_ID::_UInt32Value_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::UInt32Value& ListLeaderboardRecordsAroundOwnerRequest::limit() const {
  // @@protoc_insertion_point(field_get:nakama.api.ListLeaderboardRecordsAroundOwnerRequest.limit)
  return _internal_limit();
}
inline void ListLeaderboardRecordsAroundOwnerRequest::unsafe_arena_set_allocated_limit(
    PROTOBUF_NAMESPACE_ID::UInt32Value* limit) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(limit_);
  }
  limit_ = limit;
  if (limit) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nakama.api.ListLeaderboardRecordsAroundOwnerRequest.limit)
}
inline PROTOBUF_NAMESPACE_ID::UInt32Value* ListLeaderboardRecordsAroundOwnerRequest::release_limit() {
  
  PROTOBUF_NAMESPACE_ID::UInt32Value* temp = limit_;
  limit_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::UInt32Value* ListLeaderboardRecordsAroundOwnerRequest::unsafe_arena_release_limit() {
  // @@protoc_insertion_point(field_release:nakama.api.ListLeaderboardRecordsAroundOwnerRequest.limit)
  
  PROTOBUF_NAMESPACE_ID::UInt32Value* temp = limit_;
  limit_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::UInt32Value* ListLeaderboardRecordsAroundOwnerRequest::_internal_mutable_limit() {
  
  if (limit_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::UInt32Value>(GetArena());
    limit_ = p;
  }
  return limit_;
}
inline PROTOBUF_NAMESPACE_ID::UInt32Value* ListLeaderboardRecordsAroundOwnerRequest::mutable_limit() {
  // @@protoc_insertion_point(field_mutable:nakama.api.ListLeaderboardRecordsAroundOwnerRequest.limit)
  return _internal_mutable_limit();
}
inline void ListLeaderboardRecordsAroundOwnerRequest::set_allocated_limit(PROTOBUF_NAMESPACE_ID::UInt32Value* limit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(limit_);
  }
  if (limit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(limit)->GetArena();
    if (message_arena != submessage_arena) {
      limit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, limit, submessage_arena);
    }
    
  } else {
    
  }
  limit_ = limit;
  // @@protoc_insertion_point(field_set_allocated:nakama.api.ListLeaderboardRecordsAroundOwnerRequest.limit)
}

// string owner_id = 3;
inline void ListLeaderboardRecordsAroundOwnerRequest::clear_owner_id() {
  owner_id_.ClearToEmpty();
}
inline const std::string& ListLeaderboardRecordsAroundOwnerRequest::owner_id() const {
  // @@protoc_insertion_point(field_get:nakama.api.ListLeaderboardRecordsAroundOwnerRequest.owner_id)
  return _internal_owner_id();
}
inline void ListLeaderboardRecordsAroundOwnerRequest::set_owner_id(const std::string& value) {
  _internal_set_owner_id(value);
  // @@protoc_insertion_point(field_set:nakama.api.ListLeaderboardRecordsAroundOwnerRequest.owner_id)
}
inline std::string* ListLeaderboardRecordsAroundOwnerRequest::mutable_owner_id() {
  // @@protoc_insertion_point(field_mutable:nakama.api.ListLeaderboardRecordsAroundOwnerRequest.owner_id)
  return _internal_mutable_owner_id();
}
inline const std::string& ListLeaderboardRecordsAroundOwnerRequest::_internal_owner_id() const {
  return owner_id_.Get();
}
inline void ListLeaderboardRecordsAroundOwnerRequest::_internal_set_owner_id(const std::string& value) {
  
  owner_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListLeaderboardRecordsAroundOwnerRequest::set_owner_id(std::string&& value) {
  
  owner_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.ListLeaderboardRecordsAroundOwnerRequest.owner_id)
}
inline void ListLeaderboardRecordsAroundOwnerRequest::set_owner_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  owner_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.ListLeaderboardRecordsAroundOwnerRequest.owner_id)
}
inline void ListLeaderboardRecordsAroundOwnerRequest::set_owner_id(const char* value,
    size_t size) {
  
  owner_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.ListLeaderboardRecordsAroundOwnerRequest.owner_id)
}
inline std::string* ListLeaderboardRecordsAroundOwnerRequest::_internal_mutable_owner_id() {
  
  return owner_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListLeaderboardRecordsAroundOwnerRequest::release_owner_id() {
  // @@protoc_insertion_point(field_release:nakama.api.ListLeaderboardRecordsAroundOwnerRequest.owner_id)
  return owner_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListLeaderboardRecordsAroundOwnerRequest::set_allocated_owner_id(std::string* owner_id) {
  if (owner_id != nullptr) {
    
  } else {
    
  }
  owner_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), owner_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.ListLeaderboardRecordsAroundOwnerRequest.owner_id)
}

// .google.protobuf.Int64Value expiry = 4;
inline bool ListLeaderboardRecordsAroundOwnerRequest::_internal_has_expiry() const {
  return this != internal_default_instance() && expiry_ != nullptr;
}
inline bool ListLeaderboardRecordsAroundOwnerRequest::has_expiry() const {
  return _internal_has_expiry();
}
inline const PROTOBUF_NAMESPACE_ID::Int64Value& ListLeaderboardRecordsAroundOwnerRequest::_internal_expiry() const {
  const PROTOBUF_NAMESPACE_ID::Int64Value* p = expiry_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Int64Value&>(
      PROTOBUF_NAMESPACE_ID::_Int64Value_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Int64Value& ListLeaderboardRecordsAroundOwnerRequest::expiry() const {
  // @@protoc_insertion_point(field_get:nakama.api.ListLeaderboardRecordsAroundOwnerRequest.expiry)
  return _internal_expiry();
}
inline void ListLeaderboardRecordsAroundOwnerRequest::unsafe_arena_set_allocated_expiry(
    PROTOBUF_NAMESPACE_ID::Int64Value* expiry) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expiry_);
  }
  expiry_ = expiry;
  if (expiry) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nakama.api.ListLeaderboardRecordsAroundOwnerRequest.expiry)
}
inline PROTOBUF_NAMESPACE_ID::Int64Value* ListLeaderboardRecordsAroundOwnerRequest::release_expiry() {
  
  PROTOBUF_NAMESPACE_ID::Int64Value* temp = expiry_;
  expiry_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Int64Value* ListLeaderboardRecordsAroundOwnerRequest::unsafe_arena_release_expiry() {
  // @@protoc_insertion_point(field_release:nakama.api.ListLeaderboardRecordsAroundOwnerRequest.expiry)
  
  PROTOBUF_NAMESPACE_ID::Int64Value* temp = expiry_;
  expiry_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Int64Value* ListLeaderboardRecordsAroundOwnerRequest::_internal_mutable_expiry() {
  
  if (expiry_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Int64Value>(GetArena());
    expiry_ = p;
  }
  return expiry_;
}
inline PROTOBUF_NAMESPACE_ID::Int64Value* ListLeaderboardRecordsAroundOwnerRequest::mutable_expiry() {
  // @@protoc_insertion_point(field_mutable:nakama.api.ListLeaderboardRecordsAroundOwnerRequest.expiry)
  return _internal_mutable_expiry();
}
inline void ListLeaderboardRecordsAroundOwnerRequest::set_allocated_expiry(PROTOBUF_NAMESPACE_ID::Int64Value* expiry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(expiry_);
  }
  if (expiry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expiry)->GetArena();
    if (message_arena != submessage_arena) {
      expiry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expiry, submessage_arena);
    }
    
  } else {
    
  }
  expiry_ = expiry;
  // @@protoc_insertion_point(field_set_allocated:nakama.api.ListLeaderboardRecordsAroundOwnerRequest.expiry)
}

// string cursor = 5;
inline void ListLeaderboardRecordsAroundOwnerRequest::clear_cursor() {
  cursor_.ClearToEmpty();
}
inline const std::string& ListLeaderboardRecordsAroundOwnerRequest::cursor() const {
  // @@protoc_insertion_point(field_get:nakama.api.ListLeaderboardRecordsAroundOwnerRequest.cursor)
  return _internal_cursor();
}
inline void ListLeaderboardRecordsAroundOwnerRequest::set_cursor(const std::string& value) {
  _internal_set_cursor(value);
  // @@protoc_insertion_point(field_set:nakama.api.ListLeaderboardRecordsAroundOwnerRequest.cursor)
}
inline std::string* ListLeaderboardRecordsAroundOwnerRequest::mutable_cursor() {
  // @@protoc_insertion_point(field_mutable:nakama.api.ListLeaderboardRecordsAroundOwnerRequest.cursor)
  return _internal_mutable_cursor();
}
inline const std::string& ListLeaderboardRecordsAroundOwnerRequest::_internal_cursor() const {
  return cursor_.Get();
}
inline void ListLeaderboardRecordsAroundOwnerRequest::_internal_set_cursor(const std::string& value) {
  
  cursor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListLeaderboardRecordsAroundOwnerRequest::set_cursor(std::string&& value) {
  
  cursor_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.ListLeaderboardRecordsAroundOwnerRequest.cursor)
}
inline void ListLeaderboardRecordsAroundOwnerRequest::set_cursor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cursor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.ListLeaderboardRecordsAroundOwnerRequest.cursor)
}
inline void ListLeaderboardRecordsAroundOwnerRequest::set_cursor(const char* value,
    size_t size) {
  
  cursor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.ListLeaderboardRecordsAroundOwnerRequest.cursor)
}
inline std::string* ListLeaderboardRecordsAroundOwnerRequest::_internal_mutable_cursor() {
  
  return cursor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListLeaderboardRecordsAroundOwnerRequest::release_cursor() {
  // @@protoc_insertion_point(field_release:nakama.api.ListLeaderboardRecordsAroundOwnerRequest.cursor)
  return cursor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListLeaderboardRecordsAroundOwnerRequest::set_allocated_cursor(std::string* cursor) {
  if (cursor != nullptr) {
    
  } else {
    
  }
  cursor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cursor,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.ListLeaderboardRecordsAroundOwnerRequest.cursor)
}

// -------------------------------------------------------------------

// ListLeaderboardRecordsRequest

// string leaderboard_id = 1;
inline void ListLeaderboardRecordsRequest::clear_leaderboard_id() {
  leaderboard_id_.ClearToEmpty();
}
inline const std::string& ListLeaderboardRecordsRequest::leaderboard_id() const {
  // @@protoc_insertion_point(field_get:nakama.api.ListLeaderboardRecordsRequest.leaderboard_id)
  return _internal_leaderboard_id();
}
inline void ListLeaderboardRecordsRequest::set_leaderboard_id(const std::string& value) {
  _internal_set_leaderboard_id(value);
  // @@protoc_insertion_point(field_set:nakama.api.ListLeaderboardRecordsRequest.leaderboard_id)
}
inline std::string* ListLeaderboardRecordsRequest::mutable_leaderboard_id() {
  // @@protoc_insertion_point(field_mutable:nakama.api.ListLeaderboardRecordsRequest.leaderboard_id)
  return _internal_mutable_leaderboard_id();
}
inline const std::string& ListLeaderboardRecordsRequest::_internal_leaderboard_id() const {
  return leaderboard_id_.Get();
}
inline void ListLeaderboardRecordsRequest::_internal_set_leaderboard_id(const std::string& value) {
  
  leaderboard_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListLeaderboardRecordsRequest::set_leaderboard_id(std::string&& value) {
  
  leaderboard_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.ListLeaderboardRecordsRequest.leaderboard_id)
}
inline void ListLeaderboardRecordsRequest::set_leaderboard_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  leaderboard_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.ListLeaderboardRecordsRequest.leaderboard_id)
}
inline void ListLeaderboardRecordsRequest::set_leaderboard_id(const char* value,
    size_t size) {
  
  leaderboard_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.ListLeaderboardRecordsRequest.leaderboard_id)
}
inline std::string* ListLeaderboardRecordsRequest::_internal_mutable_leaderboard_id() {
  
  return leaderboard_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListLeaderboardRecordsRequest::release_leaderboard_id() {
  // @@protoc_insertion_point(field_release:nakama.api.ListLeaderboardRecordsRequest.leaderboard_id)
  return leaderboard_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListLeaderboardRecordsRequest::set_allocated_leaderboard_id(std::string* leaderboard_id) {
  if (leaderboard_id != nullptr) {
    
  } else {
    
  }
  leaderboard_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), leaderboard_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.ListLeaderboardRecordsRequest.leaderboard_id)
}

// repeated string owner_ids = 2;
inline int ListLeaderboardRecordsRequest::_internal_owner_ids_size() const {
  return owner_ids_.size();
}
inline int ListLeaderboardRecordsRequest::owner_ids_size() const {
  return _internal_owner_ids_size();
}
inline void ListLeaderboardRecordsRequest::clear_owner_ids() {
  owner_ids_.Clear();
}
inline std::string* ListLeaderboardRecordsRequest::add_owner_ids() {
  // @@protoc_insertion_point(field_add_mutable:nakama.api.ListLeaderboardRecordsRequest.owner_ids)
  return _internal_add_owner_ids();
}
inline const std::string& ListLeaderboardRecordsRequest::_internal_owner_ids(int index) const {
  return owner_ids_.Get(index);
}
inline const std::string& ListLeaderboardRecordsRequest::owner_ids(int index) const {
  // @@protoc_insertion_point(field_get:nakama.api.ListLeaderboardRecordsRequest.owner_ids)
  return _internal_owner_ids(index);
}
inline std::string* ListLeaderboardRecordsRequest::mutable_owner_ids(int index) {
  // @@protoc_insertion_point(field_mutable:nakama.api.ListLeaderboardRecordsRequest.owner_ids)
  return owner_ids_.Mutable(index);
}
inline void ListLeaderboardRecordsRequest::set_owner_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:nakama.api.ListLeaderboardRecordsRequest.owner_ids)
  owner_ids_.Mutable(index)->assign(value);
}
inline void ListLeaderboardRecordsRequest::set_owner_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:nakama.api.ListLeaderboardRecordsRequest.owner_ids)
  owner_ids_.Mutable(index)->assign(std::move(value));
}
inline void ListLeaderboardRecordsRequest::set_owner_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  owner_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:nakama.api.ListLeaderboardRecordsRequest.owner_ids)
}
inline void ListLeaderboardRecordsRequest::set_owner_ids(int index, const char* value, size_t size) {
  owner_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:nakama.api.ListLeaderboardRecordsRequest.owner_ids)
}
inline std::string* ListLeaderboardRecordsRequest::_internal_add_owner_ids() {
  return owner_ids_.Add();
}
inline void ListLeaderboardRecordsRequest::add_owner_ids(const std::string& value) {
  owner_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:nakama.api.ListLeaderboardRecordsRequest.owner_ids)
}
inline void ListLeaderboardRecordsRequest::add_owner_ids(std::string&& value) {
  owner_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:nakama.api.ListLeaderboardRecordsRequest.owner_ids)
}
inline void ListLeaderboardRecordsRequest::add_owner_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  owner_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:nakama.api.ListLeaderboardRecordsRequest.owner_ids)
}
inline void ListLeaderboardRecordsRequest::add_owner_ids(const char* value, size_t size) {
  owner_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:nakama.api.ListLeaderboardRecordsRequest.owner_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ListLeaderboardRecordsRequest::owner_ids() const {
  // @@protoc_insertion_point(field_list:nakama.api.ListLeaderboardRecordsRequest.owner_ids)
  return owner_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ListLeaderboardRecordsRequest::mutable_owner_ids() {
  // @@protoc_insertion_point(field_mutable_list:nakama.api.ListLeaderboardRecordsRequest.owner_ids)
  return &owner_ids_;
}

// .google.protobuf.Int32Value limit = 3;
inline bool ListLeaderboardRecordsRequest::_internal_has_limit() const {
  return this != internal_default_instance() && limit_ != nullptr;
}
inline bool ListLeaderboardRecordsRequest::has_limit() const {
  return _internal_has_limit();
}
inline const PROTOBUF_NAMESPACE_ID::Int32Value& ListLeaderboardRecordsRequest::_internal_limit() const {
  const PROTOBUF_NAMESPACE_ID::Int32Value* p = limit_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Int32Value&>(
      PROTOBUF_NAMESPACE_ID::_Int32Value_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Int32Value& ListLeaderboardRecordsRequest::limit() const {
  // @@protoc_insertion_point(field_get:nakama.api.ListLeaderboardRecordsRequest.limit)
  return _internal_limit();
}
inline void ListLeaderboardRecordsRequest::unsafe_arena_set_allocated_limit(
    PROTOBUF_NAMESPACE_ID::Int32Value* limit) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(limit_);
  }
  limit_ = limit;
  if (limit) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nakama.api.ListLeaderboardRecordsRequest.limit)
}
inline PROTOBUF_NAMESPACE_ID::Int32Value* ListLeaderboardRecordsRequest::release_limit() {
  
  PROTOBUF_NAMESPACE_ID::Int32Value* temp = limit_;
  limit_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Int32Value* ListLeaderboardRecordsRequest::unsafe_arena_release_limit() {
  // @@protoc_insertion_point(field_release:nakama.api.ListLeaderboardRecordsRequest.limit)
  
  PROTOBUF_NAMESPACE_ID::Int32Value* temp = limit_;
  limit_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Int32Value* ListLeaderboardRecordsRequest::_internal_mutable_limit() {
  
  if (limit_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Int32Value>(GetArena());
    limit_ = p;
  }
  return limit_;
}
inline PROTOBUF_NAMESPACE_ID::Int32Value* ListLeaderboardRecordsRequest::mutable_limit() {
  // @@protoc_insertion_point(field_mutable:nakama.api.ListLeaderboardRecordsRequest.limit)
  return _internal_mutable_limit();
}
inline void ListLeaderboardRecordsRequest::set_allocated_limit(PROTOBUF_NAMESPACE_ID::Int32Value* limit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(limit_);
  }
  if (limit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(limit)->GetArena();
    if (message_arena != submessage_arena) {
      limit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, limit, submessage_arena);
    }
    
  } else {
    
  }
  limit_ = limit;
  // @@protoc_insertion_point(field_set_allocated:nakama.api.ListLeaderboardRecordsRequest.limit)
}

// string cursor = 4;
inline void ListLeaderboardRecordsRequest::clear_cursor() {
  cursor_.ClearToEmpty();
}
inline const std::string& ListLeaderboardRecordsRequest::cursor() const {
  // @@protoc_insertion_point(field_get:nakama.api.ListLeaderboardRecordsRequest.cursor)
  return _internal_cursor();
}
inline void ListLeaderboardRecordsRequest::set_cursor(const std::string& value) {
  _internal_set_cursor(value);
  // @@protoc_insertion_point(field_set:nakama.api.ListLeaderboardRecordsRequest.cursor)
}
inline std::string* ListLeaderboardRecordsRequest::mutable_cursor() {
  // @@protoc_insertion_point(field_mutable:nakama.api.ListLeaderboardRecordsRequest.cursor)
  return _internal_mutable_cursor();
}
inline const std::string& ListLeaderboardRecordsRequest::_internal_cursor() const {
  return cursor_.Get();
}
inline void ListLeaderboardRecordsRequest::_internal_set_cursor(const std::string& value) {
  
  cursor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListLeaderboardRecordsRequest::set_cursor(std::string&& value) {
  
  cursor_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.ListLeaderboardRecordsRequest.cursor)
}
inline void ListLeaderboardRecordsRequest::set_cursor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cursor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.ListLeaderboardRecordsRequest.cursor)
}
inline void ListLeaderboardRecordsRequest::set_cursor(const char* value,
    size_t size) {
  
  cursor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.ListLeaderboardRecordsRequest.cursor)
}
inline std::string* ListLeaderboardRecordsRequest::_internal_mutable_cursor() {
  
  return cursor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListLeaderboardRecordsRequest::release_cursor() {
  // @@protoc_insertion_point(field_release:nakama.api.ListLeaderboardRecordsRequest.cursor)
  return cursor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListLeaderboardRecordsRequest::set_allocated_cursor(std::string* cursor) {
  if (cursor != nullptr) {
    
  } else {
    
  }
  cursor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cursor,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.ListLeaderboardRecordsRequest.cursor)
}

// .google.protobuf.Int64Value expiry = 5;
inline bool ListLeaderboardRecordsRequest::_internal_has_expiry() const {
  return this != internal_default_instance() && expiry_ != nullptr;
}
inline bool ListLeaderboardRecordsRequest::has_expiry() const {
  return _internal_has_expiry();
}
inline const PROTOBUF_NAMESPACE_ID::Int64Value& ListLeaderboardRecordsRequest::_internal_expiry() const {
  const PROTOBUF_NAMESPACE_ID::Int64Value* p = expiry_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Int64Value&>(
      PROTOBUF_NAMESPACE_ID::_Int64Value_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Int64Value& ListLeaderboardRecordsRequest::expiry() const {
  // @@protoc_insertion_point(field_get:nakama.api.ListLeaderboardRecordsRequest.expiry)
  return _internal_expiry();
}
inline void ListLeaderboardRecordsRequest::unsafe_arena_set_allocated_expiry(
    PROTOBUF_NAMESPACE_ID::Int64Value* expiry) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expiry_);
  }
  expiry_ = expiry;
  if (expiry) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nakama.api.ListLeaderboardRecordsRequest.expiry)
}
inline PROTOBUF_NAMESPACE_ID::Int64Value* ListLeaderboardRecordsRequest::release_expiry() {
  
  PROTOBUF_NAMESPACE_ID::Int64Value* temp = expiry_;
  expiry_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Int64Value* ListLeaderboardRecordsRequest::unsafe_arena_release_expiry() {
  // @@protoc_insertion_point(field_release:nakama.api.ListLeaderboardRecordsRequest.expiry)
  
  PROTOBUF_NAMESPACE_ID::Int64Value* temp = expiry_;
  expiry_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Int64Value* ListLeaderboardRecordsRequest::_internal_mutable_expiry() {
  
  if (expiry_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Int64Value>(GetArena());
    expiry_ = p;
  }
  return expiry_;
}
inline PROTOBUF_NAMESPACE_ID::Int64Value* ListLeaderboardRecordsRequest::mutable_expiry() {
  // @@protoc_insertion_point(field_mutable:nakama.api.ListLeaderboardRecordsRequest.expiry)
  return _internal_mutable_expiry();
}
inline void ListLeaderboardRecordsRequest::set_allocated_expiry(PROTOBUF_NAMESPACE_ID::Int64Value* expiry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(expiry_);
  }
  if (expiry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expiry)->GetArena();
    if (message_arena != submessage_arena) {
      expiry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expiry, submessage_arena);
    }
    
  } else {
    
  }
  expiry_ = expiry;
  // @@protoc_insertion_point(field_set_allocated:nakama.api.ListLeaderboardRecordsRequest.expiry)
}

// -------------------------------------------------------------------

// ListMatchesRequest

// .google.protobuf.Int32Value limit = 1;
inline bool ListMatchesRequest::_internal_has_limit() const {
  return this != internal_default_instance() && limit_ != nullptr;
}
inline bool ListMatchesRequest::has_limit() const {
  return _internal_has_limit();
}
inline const PROTOBUF_NAMESPACE_ID::Int32Value& ListMatchesRequest::_internal_limit() const {
  const PROTOBUF_NAMESPACE_ID::Int32Value* p = limit_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Int32Value&>(
      PROTOBUF_NAMESPACE_ID::_Int32Value_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Int32Value& ListMatchesRequest::limit() const {
  // @@protoc_insertion_point(field_get:nakama.api.ListMatchesRequest.limit)
  return _internal_limit();
}
inline void ListMatchesRequest::unsafe_arena_set_allocated_limit(
    PROTOBUF_NAMESPACE_ID::Int32Value* limit) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(limit_);
  }
  limit_ = limit;
  if (limit) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nakama.api.ListMatchesRequest.limit)
}
inline PROTOBUF_NAMESPACE_ID::Int32Value* ListMatchesRequest::release_limit() {
  
  PROTOBUF_NAMESPACE_ID::Int32Value* temp = limit_;
  limit_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Int32Value* ListMatchesRequest::unsafe_arena_release_limit() {
  // @@protoc_insertion_point(field_release:nakama.api.ListMatchesRequest.limit)
  
  PROTOBUF_NAMESPACE_ID::Int32Value* temp = limit_;
  limit_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Int32Value* ListMatchesRequest::_internal_mutable_limit() {
  
  if (limit_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Int32Value>(GetArena());
    limit_ = p;
  }
  return limit_;
}
inline PROTOBUF_NAMESPACE_ID::Int32Value* ListMatchesRequest::mutable_limit() {
  // @@protoc_insertion_point(field_mutable:nakama.api.ListMatchesRequest.limit)
  return _internal_mutable_limit();
}
inline void ListMatchesRequest::set_allocated_limit(PROTOBUF_NAMESPACE_ID::Int32Value* limit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(limit_);
  }
  if (limit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(limit)->GetArena();
    if (message_arena != submessage_arena) {
      limit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, limit, submessage_arena);
    }
    
  } else {
    
  }
  limit_ = limit;
  // @@protoc_insertion_point(field_set_allocated:nakama.api.ListMatchesRequest.limit)
}

// .google.protobuf.BoolValue authoritative = 2;
inline bool ListMatchesRequest::_internal_has_authoritative() const {
  return this != internal_default_instance() && authoritative_ != nullptr;
}
inline bool ListMatchesRequest::has_authoritative() const {
  return _internal_has_authoritative();
}
inline const PROTOBUF_NAMESPACE_ID::BoolValue& ListMatchesRequest::_internal_authoritative() const {
  const PROTOBUF_NAMESPACE_ID::BoolValue* p = authoritative_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::BoolValue&>(
      PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::BoolValue& ListMatchesRequest::authoritative() const {
  // @@protoc_insertion_point(field_get:nakama.api.ListMatchesRequest.authoritative)
  return _internal_authoritative();
}
inline void ListMatchesRequest::unsafe_arena_set_allocated_authoritative(
    PROTOBUF_NAMESPACE_ID::BoolValue* authoritative) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(authoritative_);
  }
  authoritative_ = authoritative;
  if (authoritative) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nakama.api.ListMatchesRequest.authoritative)
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* ListMatchesRequest::release_authoritative() {
  
  PROTOBUF_NAMESPACE_ID::BoolValue* temp = authoritative_;
  authoritative_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* ListMatchesRequest::unsafe_arena_release_authoritative() {
  // @@protoc_insertion_point(field_release:nakama.api.ListMatchesRequest.authoritative)
  
  PROTOBUF_NAMESPACE_ID::BoolValue* temp = authoritative_;
  authoritative_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* ListMatchesRequest::_internal_mutable_authoritative() {
  
  if (authoritative_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::BoolValue>(GetArena());
    authoritative_ = p;
  }
  return authoritative_;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* ListMatchesRequest::mutable_authoritative() {
  // @@protoc_insertion_point(field_mutable:nakama.api.ListMatchesRequest.authoritative)
  return _internal_mutable_authoritative();
}
inline void ListMatchesRequest::set_allocated_authoritative(PROTOBUF_NAMESPACE_ID::BoolValue* authoritative) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(authoritative_);
  }
  if (authoritative) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(authoritative)->GetArena();
    if (message_arena != submessage_arena) {
      authoritative = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, authoritative, submessage_arena);
    }
    
  } else {
    
  }
  authoritative_ = authoritative;
  // @@protoc_insertion_point(field_set_allocated:nakama.api.ListMatchesRequest.authoritative)
}

// .google.protobuf.StringValue label = 3;
inline bool ListMatchesRequest::_internal_has_label() const {
  return this != internal_default_instance() && label_ != nullptr;
}
inline bool ListMatchesRequest::has_label() const {
  return _internal_has_label();
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& ListMatchesRequest::_internal_label() const {
  const PROTOBUF_NAMESPACE_ID::StringValue* p = label_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::StringValue&>(
      PROTOBUF_NAMESPACE_ID::_StringValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& ListMatchesRequest::label() const {
  // @@protoc_insertion_point(field_get:nakama.api.ListMatchesRequest.label)
  return _internal_label();
}
inline void ListMatchesRequest::unsafe_arena_set_allocated_label(
    PROTOBUF_NAMESPACE_ID::StringValue* label) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(label_);
  }
  label_ = label;
  if (label) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nakama.api.ListMatchesRequest.label)
}
inline PROTOBUF_NAMESPACE_ID::StringValue* ListMatchesRequest::release_label() {
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = label_;
  label_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* ListMatchesRequest::unsafe_arena_release_label() {
  // @@protoc_insertion_point(field_release:nakama.api.ListMatchesRequest.label)
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = label_;
  label_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* ListMatchesRequest::_internal_mutable_label() {
  
  if (label_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::StringValue>(GetArena());
    label_ = p;
  }
  return label_;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* ListMatchesRequest::mutable_label() {
  // @@protoc_insertion_point(field_mutable:nakama.api.ListMatchesRequest.label)
  return _internal_mutable_label();
}
inline void ListMatchesRequest::set_allocated_label(PROTOBUF_NAMESPACE_ID::StringValue* label) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(label_);
  }
  if (label) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(label)->GetArena();
    if (message_arena != submessage_arena) {
      label = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, label, submessage_arena);
    }
    
  } else {
    
  }
  label_ = label;
  // @@protoc_insertion_point(field_set_allocated:nakama.api.ListMatchesRequest.label)
}

// .google.protobuf.Int32Value min_size = 4;
inline bool ListMatchesRequest::_internal_has_min_size() const {
  return this != internal_default_instance() && min_size_ != nullptr;
}
inline bool ListMatchesRequest::has_min_size() const {
  return _internal_has_min_size();
}
inline const PROTOBUF_NAMESPACE_ID::Int32Value& ListMatchesRequest::_internal_min_size() const {
  const PROTOBUF_NAMESPACE_ID::Int32Value* p = min_size_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Int32Value&>(
      PROTOBUF_NAMESPACE_ID::_Int32Value_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Int32Value& ListMatchesRequest::min_size() const {
  // @@protoc_insertion_point(field_get:nakama.api.ListMatchesRequest.min_size)
  return _internal_min_size();
}
inline void ListMatchesRequest::unsafe_arena_set_allocated_min_size(
    PROTOBUF_NAMESPACE_ID::Int32Value* min_size) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(min_size_);
  }
  min_size_ = min_size;
  if (min_size) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nakama.api.ListMatchesRequest.min_size)
}
inline PROTOBUF_NAMESPACE_ID::Int32Value* ListMatchesRequest::release_min_size() {
  
  PROTOBUF_NAMESPACE_ID::Int32Value* temp = min_size_;
  min_size_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Int32Value* ListMatchesRequest::unsafe_arena_release_min_size() {
  // @@protoc_insertion_point(field_release:nakama.api.ListMatchesRequest.min_size)
  
  PROTOBUF_NAMESPACE_ID::Int32Value* temp = min_size_;
  min_size_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Int32Value* ListMatchesRequest::_internal_mutable_min_size() {
  
  if (min_size_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Int32Value>(GetArena());
    min_size_ = p;
  }
  return min_size_;
}
inline PROTOBUF_NAMESPACE_ID::Int32Value* ListMatchesRequest::mutable_min_size() {
  // @@protoc_insertion_point(field_mutable:nakama.api.ListMatchesRequest.min_size)
  return _internal_mutable_min_size();
}
inline void ListMatchesRequest::set_allocated_min_size(PROTOBUF_NAMESPACE_ID::Int32Value* min_size) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(min_size_);
  }
  if (min_size) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(min_size)->GetArena();
    if (message_arena != submessage_arena) {
      min_size = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, min_size, submessage_arena);
    }
    
  } else {
    
  }
  min_size_ = min_size;
  // @@protoc_insertion_point(field_set_allocated:nakama.api.ListMatchesRequest.min_size)
}

// .google.protobuf.Int32Value max_size = 5;
inline bool ListMatchesRequest::_internal_has_max_size() const {
  return this != internal_default_instance() && max_size_ != nullptr;
}
inline bool ListMatchesRequest::has_max_size() const {
  return _internal_has_max_size();
}
inline const PROTOBUF_NAMESPACE_ID::Int32Value& ListMatchesRequest::_internal_max_size() const {
  const PROTOBUF_NAMESPACE_ID::Int32Value* p = max_size_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Int32Value&>(
      PROTOBUF_NAMESPACE_ID::_Int32Value_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Int32Value& ListMatchesRequest::max_size() const {
  // @@protoc_insertion_point(field_get:nakama.api.ListMatchesRequest.max_size)
  return _internal_max_size();
}
inline void ListMatchesRequest::unsafe_arena_set_allocated_max_size(
    PROTOBUF_NAMESPACE_ID::Int32Value* max_size) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(max_size_);
  }
  max_size_ = max_size;
  if (max_size) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nakama.api.ListMatchesRequest.max_size)
}
inline PROTOBUF_NAMESPACE_ID::Int32Value* ListMatchesRequest::release_max_size() {
  
  PROTOBUF_NAMESPACE_ID::Int32Value* temp = max_size_;
  max_size_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Int32Value* ListMatchesRequest::unsafe_arena_release_max_size() {
  // @@protoc_insertion_point(field_release:nakama.api.ListMatchesRequest.max_size)
  
  PROTOBUF_NAMESPACE_ID::Int32Value* temp = max_size_;
  max_size_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Int32Value* ListMatchesRequest::_internal_mutable_max_size() {
  
  if (max_size_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Int32Value>(GetArena());
    max_size_ = p;
  }
  return max_size_;
}
inline PROTOBUF_NAMESPACE_ID::Int32Value* ListMatchesRequest::mutable_max_size() {
  // @@protoc_insertion_point(field_mutable:nakama.api.ListMatchesRequest.max_size)
  return _internal_mutable_max_size();
}
inline void ListMatchesRequest::set_allocated_max_size(PROTOBUF_NAMESPACE_ID::Int32Value* max_size) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(max_size_);
  }
  if (max_size) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(max_size)->GetArena();
    if (message_arena != submessage_arena) {
      max_size = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, max_size, submessage_arena);
    }
    
  } else {
    
  }
  max_size_ = max_size;
  // @@protoc_insertion_point(field_set_allocated:nakama.api.ListMatchesRequest.max_size)
}

// .google.protobuf.StringValue query = 6;
inline bool ListMatchesRequest::_internal_has_query() const {
  return this != internal_default_instance() && query_ != nullptr;
}
inline bool ListMatchesRequest::has_query() const {
  return _internal_has_query();
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& ListMatchesRequest::_internal_query() const {
  const PROTOBUF_NAMESPACE_ID::StringValue* p = query_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::StringValue&>(
      PROTOBUF_NAMESPACE_ID::_StringValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& ListMatchesRequest::query() const {
  // @@protoc_insertion_point(field_get:nakama.api.ListMatchesRequest.query)
  return _internal_query();
}
inline void ListMatchesRequest::unsafe_arena_set_allocated_query(
    PROTOBUF_NAMESPACE_ID::StringValue* query) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(query_);
  }
  query_ = query;
  if (query) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nakama.api.ListMatchesRequest.query)
}
inline PROTOBUF_NAMESPACE_ID::StringValue* ListMatchesRequest::release_query() {
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = query_;
  query_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* ListMatchesRequest::unsafe_arena_release_query() {
  // @@protoc_insertion_point(field_release:nakama.api.ListMatchesRequest.query)
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = query_;
  query_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* ListMatchesRequest::_internal_mutable_query() {
  
  if (query_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::StringValue>(GetArena());
    query_ = p;
  }
  return query_;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* ListMatchesRequest::mutable_query() {
  // @@protoc_insertion_point(field_mutable:nakama.api.ListMatchesRequest.query)
  return _internal_mutable_query();
}
inline void ListMatchesRequest::set_allocated_query(PROTOBUF_NAMESPACE_ID::StringValue* query) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(query_);
  }
  if (query) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(query)->GetArena();
    if (message_arena != submessage_arena) {
      query = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, query, submessage_arena);
    }
    
  } else {
    
  }
  query_ = query;
  // @@protoc_insertion_point(field_set_allocated:nakama.api.ListMatchesRequest.query)
}

// -------------------------------------------------------------------

// ListNotificationsRequest

// .google.protobuf.Int32Value limit = 1;
inline bool ListNotificationsRequest::_internal_has_limit() const {
  return this != internal_default_instance() && limit_ != nullptr;
}
inline bool ListNotificationsRequest::has_limit() const {
  return _internal_has_limit();
}
inline const PROTOBUF_NAMESPACE_ID::Int32Value& ListNotificationsRequest::_internal_limit() const {
  const PROTOBUF_NAMESPACE_ID::Int32Value* p = limit_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Int32Value&>(
      PROTOBUF_NAMESPACE_ID::_Int32Value_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Int32Value& ListNotificationsRequest::limit() const {
  // @@protoc_insertion_point(field_get:nakama.api.ListNotificationsRequest.limit)
  return _internal_limit();
}
inline void ListNotificationsRequest::unsafe_arena_set_allocated_limit(
    PROTOBUF_NAMESPACE_ID::Int32Value* limit) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(limit_);
  }
  limit_ = limit;
  if (limit) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nakama.api.ListNotificationsRequest.limit)
}
inline PROTOBUF_NAMESPACE_ID::Int32Value* ListNotificationsRequest::release_limit() {
  
  PROTOBUF_NAMESPACE_ID::Int32Value* temp = limit_;
  limit_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Int32Value* ListNotificationsRequest::unsafe_arena_release_limit() {
  // @@protoc_insertion_point(field_release:nakama.api.ListNotificationsRequest.limit)
  
  PROTOBUF_NAMESPACE_ID::Int32Value* temp = limit_;
  limit_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Int32Value* ListNotificationsRequest::_internal_mutable_limit() {
  
  if (limit_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Int32Value>(GetArena());
    limit_ = p;
  }
  return limit_;
}
inline PROTOBUF_NAMESPACE_ID::Int32Value* ListNotificationsRequest::mutable_limit() {
  // @@protoc_insertion_point(field_mutable:nakama.api.ListNotificationsRequest.limit)
  return _internal_mutable_limit();
}
inline void ListNotificationsRequest::set_allocated_limit(PROTOBUF_NAMESPACE_ID::Int32Value* limit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(limit_);
  }
  if (limit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(limit)->GetArena();
    if (message_arena != submessage_arena) {
      limit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, limit, submessage_arena);
    }
    
  } else {
    
  }
  limit_ = limit;
  // @@protoc_insertion_point(field_set_allocated:nakama.api.ListNotificationsRequest.limit)
}

// string cacheable_cursor = 2;
inline void ListNotificationsRequest::clear_cacheable_cursor() {
  cacheable_cursor_.ClearToEmpty();
}
inline const std::string& ListNotificationsRequest::cacheable_cursor() const {
  // @@protoc_insertion_point(field_get:nakama.api.ListNotificationsRequest.cacheable_cursor)
  return _internal_cacheable_cursor();
}
inline void ListNotificationsRequest::set_cacheable_cursor(const std::string& value) {
  _internal_set_cacheable_cursor(value);
  // @@protoc_insertion_point(field_set:nakama.api.ListNotificationsRequest.cacheable_cursor)
}
inline std::string* ListNotificationsRequest::mutable_cacheable_cursor() {
  // @@protoc_insertion_point(field_mutable:nakama.api.ListNotificationsRequest.cacheable_cursor)
  return _internal_mutable_cacheable_cursor();
}
inline const std::string& ListNotificationsRequest::_internal_cacheable_cursor() const {
  return cacheable_cursor_.Get();
}
inline void ListNotificationsRequest::_internal_set_cacheable_cursor(const std::string& value) {
  
  cacheable_cursor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListNotificationsRequest::set_cacheable_cursor(std::string&& value) {
  
  cacheable_cursor_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.ListNotificationsRequest.cacheable_cursor)
}
inline void ListNotificationsRequest::set_cacheable_cursor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cacheable_cursor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.ListNotificationsRequest.cacheable_cursor)
}
inline void ListNotificationsRequest::set_cacheable_cursor(const char* value,
    size_t size) {
  
  cacheable_cursor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.ListNotificationsRequest.cacheable_cursor)
}
inline std::string* ListNotificationsRequest::_internal_mutable_cacheable_cursor() {
  
  return cacheable_cursor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListNotificationsRequest::release_cacheable_cursor() {
  // @@protoc_insertion_point(field_release:nakama.api.ListNotificationsRequest.cacheable_cursor)
  return cacheable_cursor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListNotificationsRequest::set_allocated_cacheable_cursor(std::string* cacheable_cursor) {
  if (cacheable_cursor != nullptr) {
    
  } else {
    
  }
  cacheable_cursor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cacheable_cursor,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.ListNotificationsRequest.cacheable_cursor)
}

// -------------------------------------------------------------------

// ListStorageObjectsRequest

// string user_id = 1;
inline void ListStorageObjectsRequest::clear_user_id() {
  user_id_.ClearToEmpty();
}
inline const std::string& ListStorageObjectsRequest::user_id() const {
  // @@protoc_insertion_point(field_get:nakama.api.ListStorageObjectsRequest.user_id)
  return _internal_user_id();
}
inline void ListStorageObjectsRequest::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:nakama.api.ListStorageObjectsRequest.user_id)
}
inline std::string* ListStorageObjectsRequest::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:nakama.api.ListStorageObjectsRequest.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& ListStorageObjectsRequest::_internal_user_id() const {
  return user_id_.Get();
}
inline void ListStorageObjectsRequest::_internal_set_user_id(const std::string& value) {
  
  user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListStorageObjectsRequest::set_user_id(std::string&& value) {
  
  user_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.ListStorageObjectsRequest.user_id)
}
inline void ListStorageObjectsRequest::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.ListStorageObjectsRequest.user_id)
}
inline void ListStorageObjectsRequest::set_user_id(const char* value,
    size_t size) {
  
  user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.ListStorageObjectsRequest.user_id)
}
inline std::string* ListStorageObjectsRequest::_internal_mutable_user_id() {
  
  return user_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListStorageObjectsRequest::release_user_id() {
  // @@protoc_insertion_point(field_release:nakama.api.ListStorageObjectsRequest.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListStorageObjectsRequest::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.ListStorageObjectsRequest.user_id)
}

// string collection = 2;
inline void ListStorageObjectsRequest::clear_collection() {
  collection_.ClearToEmpty();
}
inline const std::string& ListStorageObjectsRequest::collection() const {
  // @@protoc_insertion_point(field_get:nakama.api.ListStorageObjectsRequest.collection)
  return _internal_collection();
}
inline void ListStorageObjectsRequest::set_collection(const std::string& value) {
  _internal_set_collection(value);
  // @@protoc_insertion_point(field_set:nakama.api.ListStorageObjectsRequest.collection)
}
inline std::string* ListStorageObjectsRequest::mutable_collection() {
  // @@protoc_insertion_point(field_mutable:nakama.api.ListStorageObjectsRequest.collection)
  return _internal_mutable_collection();
}
inline const std::string& ListStorageObjectsRequest::_internal_collection() const {
  return collection_.Get();
}
inline void ListStorageObjectsRequest::_internal_set_collection(const std::string& value) {
  
  collection_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListStorageObjectsRequest::set_collection(std::string&& value) {
  
  collection_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.ListStorageObjectsRequest.collection)
}
inline void ListStorageObjectsRequest::set_collection(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  collection_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.ListStorageObjectsRequest.collection)
}
inline void ListStorageObjectsRequest::set_collection(const char* value,
    size_t size) {
  
  collection_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.ListStorageObjectsRequest.collection)
}
inline std::string* ListStorageObjectsRequest::_internal_mutable_collection() {
  
  return collection_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListStorageObjectsRequest::release_collection() {
  // @@protoc_insertion_point(field_release:nakama.api.ListStorageObjectsRequest.collection)
  return collection_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListStorageObjectsRequest::set_allocated_collection(std::string* collection) {
  if (collection != nullptr) {
    
  } else {
    
  }
  collection_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), collection,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.ListStorageObjectsRequest.collection)
}

// .google.protobuf.Int32Value limit = 3;
inline bool ListStorageObjectsRequest::_internal_has_limit() const {
  return this != internal_default_instance() && limit_ != nullptr;
}
inline bool ListStorageObjectsRequest::has_limit() const {
  return _internal_has_limit();
}
inline const PROTOBUF_NAMESPACE_ID::Int32Value& ListStorageObjectsRequest::_internal_limit() const {
  const PROTOBUF_NAMESPACE_ID::Int32Value* p = limit_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Int32Value&>(
      PROTOBUF_NAMESPACE_ID::_Int32Value_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Int32Value& ListStorageObjectsRequest::limit() const {
  // @@protoc_insertion_point(field_get:nakama.api.ListStorageObjectsRequest.limit)
  return _internal_limit();
}
inline void ListStorageObjectsRequest::unsafe_arena_set_allocated_limit(
    PROTOBUF_NAMESPACE_ID::Int32Value* limit) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(limit_);
  }
  limit_ = limit;
  if (limit) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nakama.api.ListStorageObjectsRequest.limit)
}
inline PROTOBUF_NAMESPACE_ID::Int32Value* ListStorageObjectsRequest::release_limit() {
  
  PROTOBUF_NAMESPACE_ID::Int32Value* temp = limit_;
  limit_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Int32Value* ListStorageObjectsRequest::unsafe_arena_release_limit() {
  // @@protoc_insertion_point(field_release:nakama.api.ListStorageObjectsRequest.limit)
  
  PROTOBUF_NAMESPACE_ID::Int32Value* temp = limit_;
  limit_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Int32Value* ListStorageObjectsRequest::_internal_mutable_limit() {
  
  if (limit_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Int32Value>(GetArena());
    limit_ = p;
  }
  return limit_;
}
inline PROTOBUF_NAMESPACE_ID::Int32Value* ListStorageObjectsRequest::mutable_limit() {
  // @@protoc_insertion_point(field_mutable:nakama.api.ListStorageObjectsRequest.limit)
  return _internal_mutable_limit();
}
inline void ListStorageObjectsRequest::set_allocated_limit(PROTOBUF_NAMESPACE_ID::Int32Value* limit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(limit_);
  }
  if (limit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(limit)->GetArena();
    if (message_arena != submessage_arena) {
      limit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, limit, submessage_arena);
    }
    
  } else {
    
  }
  limit_ = limit;
  // @@protoc_insertion_point(field_set_allocated:nakama.api.ListStorageObjectsRequest.limit)
}

// string cursor = 4;
inline void ListStorageObjectsRequest::clear_cursor() {
  cursor_.ClearToEmpty();
}
inline const std::string& ListStorageObjectsRequest::cursor() const {
  // @@protoc_insertion_point(field_get:nakama.api.ListStorageObjectsRequest.cursor)
  return _internal_cursor();
}
inline void ListStorageObjectsRequest::set_cursor(const std::string& value) {
  _internal_set_cursor(value);
  // @@protoc_insertion_point(field_set:nakama.api.ListStorageObjectsRequest.cursor)
}
inline std::string* ListStorageObjectsRequest::mutable_cursor() {
  // @@protoc_insertion_point(field_mutable:nakama.api.ListStorageObjectsRequest.cursor)
  return _internal_mutable_cursor();
}
inline const std::string& ListStorageObjectsRequest::_internal_cursor() const {
  return cursor_.Get();
}
inline void ListStorageObjectsRequest::_internal_set_cursor(const std::string& value) {
  
  cursor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListStorageObjectsRequest::set_cursor(std::string&& value) {
  
  cursor_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.ListStorageObjectsRequest.cursor)
}
inline void ListStorageObjectsRequest::set_cursor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cursor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.ListStorageObjectsRequest.cursor)
}
inline void ListStorageObjectsRequest::set_cursor(const char* value,
    size_t size) {
  
  cursor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.ListStorageObjectsRequest.cursor)
}
inline std::string* ListStorageObjectsRequest::_internal_mutable_cursor() {
  
  return cursor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListStorageObjectsRequest::release_cursor() {
  // @@protoc_insertion_point(field_release:nakama.api.ListStorageObjectsRequest.cursor)
  return cursor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListStorageObjectsRequest::set_allocated_cursor(std::string* cursor) {
  if (cursor != nullptr) {
    
  } else {
    
  }
  cursor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cursor,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.ListStorageObjectsRequest.cursor)
}

// -------------------------------------------------------------------

// ListSubscriptionsRequest

// .google.protobuf.Int32Value limit = 1;
inline bool ListSubscriptionsRequest::_internal_has_limit() const {
  return this != internal_default_instance() && limit_ != nullptr;
}
inline bool ListSubscriptionsRequest::has_limit() const {
  return _internal_has_limit();
}
inline const PROTOBUF_NAMESPACE_ID::Int32Value& ListSubscriptionsRequest::_internal_limit() const {
  const PROTOBUF_NAMESPACE_ID::Int32Value* p = limit_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Int32Value&>(
      PROTOBUF_NAMESPACE_ID::_Int32Value_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Int32Value& ListSubscriptionsRequest::limit() const {
  // @@protoc_insertion_point(field_get:nakama.api.ListSubscriptionsRequest.limit)
  return _internal_limit();
}
inline void ListSubscriptionsRequest::unsafe_arena_set_allocated_limit(
    PROTOBUF_NAMESPACE_ID::Int32Value* limit) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(limit_);
  }
  limit_ = limit;
  if (limit) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nakama.api.ListSubscriptionsRequest.limit)
}
inline PROTOBUF_NAMESPACE_ID::Int32Value* ListSubscriptionsRequest::release_limit() {
  
  PROTOBUF_NAMESPACE_ID::Int32Value* temp = limit_;
  limit_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Int32Value* ListSubscriptionsRequest::unsafe_arena_release_limit() {
  // @@protoc_insertion_point(field_release:nakama.api.ListSubscriptionsRequest.limit)
  
  PROTOBUF_NAMESPACE_ID::Int32Value* temp = limit_;
  limit_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Int32Value* ListSubscriptionsRequest::_internal_mutable_limit() {
  
  if (limit_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Int32Value>(GetArena());
    limit_ = p;
  }
  return limit_;
}
inline PROTOBUF_NAMESPACE_ID::Int32Value* ListSubscriptionsRequest::mutable_limit() {
  // @@protoc_insertion_point(field_mutable:nakama.api.ListSubscriptionsRequest.limit)
  return _internal_mutable_limit();
}
inline void ListSubscriptionsRequest::set_allocated_limit(PROTOBUF_NAMESPACE_ID::Int32Value* limit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(limit_);
  }
  if (limit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(limit)->GetArena();
    if (message_arena != submessage_arena) {
      limit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, limit, submessage_arena);
    }
    
  } else {
    
  }
  limit_ = limit;
  // @@protoc_insertion_point(field_set_allocated:nakama.api.ListSubscriptionsRequest.limit)
}

// string cursor = 2;
inline void ListSubscriptionsRequest::clear_cursor() {
  cursor_.ClearToEmpty();
}
inline const std::string& ListSubscriptionsRequest::cursor() const {
  // @@protoc_insertion_point(field_get:nakama.api.ListSubscriptionsRequest.cursor)
  return _internal_cursor();
}
inline void ListSubscriptionsRequest::set_cursor(const std::string& value) {
  _internal_set_cursor(value);
  // @@protoc_insertion_point(field_set:nakama.api.ListSubscriptionsRequest.cursor)
}
inline std::string* ListSubscriptionsRequest::mutable_cursor() {
  // @@protoc_insertion_point(field_mutable:nakama.api.ListSubscriptionsRequest.cursor)
  return _internal_mutable_cursor();
}
inline const std::string& ListSubscriptionsRequest::_internal_cursor() const {
  return cursor_.Get();
}
inline void ListSubscriptionsRequest::_internal_set_cursor(const std::string& value) {
  
  cursor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListSubscriptionsRequest::set_cursor(std::string&& value) {
  
  cursor_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.ListSubscriptionsRequest.cursor)
}
inline void ListSubscriptionsRequest::set_cursor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cursor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.ListSubscriptionsRequest.cursor)
}
inline void ListSubscriptionsRequest::set_cursor(const char* value,
    size_t size) {
  
  cursor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.ListSubscriptionsRequest.cursor)
}
inline std::string* ListSubscriptionsRequest::_internal_mutable_cursor() {
  
  return cursor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListSubscriptionsRequest::release_cursor() {
  // @@protoc_insertion_point(field_release:nakama.api.ListSubscriptionsRequest.cursor)
  return cursor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListSubscriptionsRequest::set_allocated_cursor(std::string* cursor) {
  if (cursor != nullptr) {
    
  } else {
    
  }
  cursor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cursor,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.ListSubscriptionsRequest.cursor)
}

// -------------------------------------------------------------------

// ListTournamentRecordsAroundOwnerRequest

// string tournament_id = 1;
inline void ListTournamentRecordsAroundOwnerRequest::clear_tournament_id() {
  tournament_id_.ClearToEmpty();
}
inline const std::string& ListTournamentRecordsAroundOwnerRequest::tournament_id() const {
  // @@protoc_insertion_point(field_get:nakama.api.ListTournamentRecordsAroundOwnerRequest.tournament_id)
  return _internal_tournament_id();
}
inline void ListTournamentRecordsAroundOwnerRequest::set_tournament_id(const std::string& value) {
  _internal_set_tournament_id(value);
  // @@protoc_insertion_point(field_set:nakama.api.ListTournamentRecordsAroundOwnerRequest.tournament_id)
}
inline std::string* ListTournamentRecordsAroundOwnerRequest::mutable_tournament_id() {
  // @@protoc_insertion_point(field_mutable:nakama.api.ListTournamentRecordsAroundOwnerRequest.tournament_id)
  return _internal_mutable_tournament_id();
}
inline const std::string& ListTournamentRecordsAroundOwnerRequest::_internal_tournament_id() const {
  return tournament_id_.Get();
}
inline void ListTournamentRecordsAroundOwnerRequest::_internal_set_tournament_id(const std::string& value) {
  
  tournament_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListTournamentRecordsAroundOwnerRequest::set_tournament_id(std::string&& value) {
  
  tournament_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.ListTournamentRecordsAroundOwnerRequest.tournament_id)
}
inline void ListTournamentRecordsAroundOwnerRequest::set_tournament_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tournament_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.ListTournamentRecordsAroundOwnerRequest.tournament_id)
}
inline void ListTournamentRecordsAroundOwnerRequest::set_tournament_id(const char* value,
    size_t size) {
  
  tournament_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.ListTournamentRecordsAroundOwnerRequest.tournament_id)
}
inline std::string* ListTournamentRecordsAroundOwnerRequest::_internal_mutable_tournament_id() {
  
  return tournament_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListTournamentRecordsAroundOwnerRequest::release_tournament_id() {
  // @@protoc_insertion_point(field_release:nakama.api.ListTournamentRecordsAroundOwnerRequest.tournament_id)
  return tournament_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListTournamentRecordsAroundOwnerRequest::set_allocated_tournament_id(std::string* tournament_id) {
  if (tournament_id != nullptr) {
    
  } else {
    
  }
  tournament_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tournament_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.ListTournamentRecordsAroundOwnerRequest.tournament_id)
}

// .google.protobuf.UInt32Value limit = 2;
inline bool ListTournamentRecordsAroundOwnerRequest::_internal_has_limit() const {
  return this != internal_default_instance() && limit_ != nullptr;
}
inline bool ListTournamentRecordsAroundOwnerRequest::has_limit() const {
  return _internal_has_limit();
}
inline const PROTOBUF_NAMESPACE_ID::UInt32Value& ListTournamentRecordsAroundOwnerRequest::_internal_limit() const {
  const PROTOBUF_NAMESPACE_ID::UInt32Value* p = limit_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::UInt32Value&>(
      PROTOBUF_NAMESPACE_ID::_UInt32Value_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::UInt32Value& ListTournamentRecordsAroundOwnerRequest::limit() const {
  // @@protoc_insertion_point(field_get:nakama.api.ListTournamentRecordsAroundOwnerRequest.limit)
  return _internal_limit();
}
inline void ListTournamentRecordsAroundOwnerRequest::unsafe_arena_set_allocated_limit(
    PROTOBUF_NAMESPACE_ID::UInt32Value* limit) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(limit_);
  }
  limit_ = limit;
  if (limit) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nakama.api.ListTournamentRecordsAroundOwnerRequest.limit)
}
inline PROTOBUF_NAMESPACE_ID::UInt32Value* ListTournamentRecordsAroundOwnerRequest::release_limit() {
  
  PROTOBUF_NAMESPACE_ID::UInt32Value* temp = limit_;
  limit_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::UInt32Value* ListTournamentRecordsAroundOwnerRequest::unsafe_arena_release_limit() {
  // @@protoc_insertion_point(field_release:nakama.api.ListTournamentRecordsAroundOwnerRequest.limit)
  
  PROTOBUF_NAMESPACE_ID::UInt32Value* temp = limit_;
  limit_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::UInt32Value* ListTournamentRecordsAroundOwnerRequest::_internal_mutable_limit() {
  
  if (limit_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::UInt32Value>(GetArena());
    limit_ = p;
  }
  return limit_;
}
inline PROTOBUF_NAMESPACE_ID::UInt32Value* ListTournamentRecordsAroundOwnerRequest::mutable_limit() {
  // @@protoc_insertion_point(field_mutable:nakama.api.ListTournamentRecordsAroundOwnerRequest.limit)
  return _internal_mutable_limit();
}
inline void ListTournamentRecordsAroundOwnerRequest::set_allocated_limit(PROTOBUF_NAMESPACE_ID::UInt32Value* limit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(limit_);
  }
  if (limit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(limit)->GetArena();
    if (message_arena != submessage_arena) {
      limit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, limit, submessage_arena);
    }
    
  } else {
    
  }
  limit_ = limit;
  // @@protoc_insertion_point(field_set_allocated:nakama.api.ListTournamentRecordsAroundOwnerRequest.limit)
}

// string owner_id = 3;
inline void ListTournamentRecordsAroundOwnerRequest::clear_owner_id() {
  owner_id_.ClearToEmpty();
}
inline const std::string& ListTournamentRecordsAroundOwnerRequest::owner_id() const {
  // @@protoc_insertion_point(field_get:nakama.api.ListTournamentRecordsAroundOwnerRequest.owner_id)
  return _internal_owner_id();
}
inline void ListTournamentRecordsAroundOwnerRequest::set_owner_id(const std::string& value) {
  _internal_set_owner_id(value);
  // @@protoc_insertion_point(field_set:nakama.api.ListTournamentRecordsAroundOwnerRequest.owner_id)
}
inline std::string* ListTournamentRecordsAroundOwnerRequest::mutable_owner_id() {
  // @@protoc_insertion_point(field_mutable:nakama.api.ListTournamentRecordsAroundOwnerRequest.owner_id)
  return _internal_mutable_owner_id();
}
inline const std::string& ListTournamentRecordsAroundOwnerRequest::_internal_owner_id() const {
  return owner_id_.Get();
}
inline void ListTournamentRecordsAroundOwnerRequest::_internal_set_owner_id(const std::string& value) {
  
  owner_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListTournamentRecordsAroundOwnerRequest::set_owner_id(std::string&& value) {
  
  owner_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.ListTournamentRecordsAroundOwnerRequest.owner_id)
}
inline void ListTournamentRecordsAroundOwnerRequest::set_owner_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  owner_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.ListTournamentRecordsAroundOwnerRequest.owner_id)
}
inline void ListTournamentRecordsAroundOwnerRequest::set_owner_id(const char* value,
    size_t size) {
  
  owner_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.ListTournamentRecordsAroundOwnerRequest.owner_id)
}
inline std::string* ListTournamentRecordsAroundOwnerRequest::_internal_mutable_owner_id() {
  
  return owner_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListTournamentRecordsAroundOwnerRequest::release_owner_id() {
  // @@protoc_insertion_point(field_release:nakama.api.ListTournamentRecordsAroundOwnerRequest.owner_id)
  return owner_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListTournamentRecordsAroundOwnerRequest::set_allocated_owner_id(std::string* owner_id) {
  if (owner_id != nullptr) {
    
  } else {
    
  }
  owner_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), owner_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.ListTournamentRecordsAroundOwnerRequest.owner_id)
}

// .google.protobuf.Int64Value expiry = 4;
inline bool ListTournamentRecordsAroundOwnerRequest::_internal_has_expiry() const {
  return this != internal_default_instance() && expiry_ != nullptr;
}
inline bool ListTournamentRecordsAroundOwnerRequest::has_expiry() const {
  return _internal_has_expiry();
}
inline const PROTOBUF_NAMESPACE_ID::Int64Value& ListTournamentRecordsAroundOwnerRequest::_internal_expiry() const {
  const PROTOBUF_NAMESPACE_ID::Int64Value* p = expiry_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Int64Value&>(
      PROTOBUF_NAMESPACE_ID::_Int64Value_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Int64Value& ListTournamentRecordsAroundOwnerRequest::expiry() const {
  // @@protoc_insertion_point(field_get:nakama.api.ListTournamentRecordsAroundOwnerRequest.expiry)
  return _internal_expiry();
}
inline void ListTournamentRecordsAroundOwnerRequest::unsafe_arena_set_allocated_expiry(
    PROTOBUF_NAMESPACE_ID::Int64Value* expiry) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expiry_);
  }
  expiry_ = expiry;
  if (expiry) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nakama.api.ListTournamentRecordsAroundOwnerRequest.expiry)
}
inline PROTOBUF_NAMESPACE_ID::Int64Value* ListTournamentRecordsAroundOwnerRequest::release_expiry() {
  
  PROTOBUF_NAMESPACE_ID::Int64Value* temp = expiry_;
  expiry_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Int64Value* ListTournamentRecordsAroundOwnerRequest::unsafe_arena_release_expiry() {
  // @@protoc_insertion_point(field_release:nakama.api.ListTournamentRecordsAroundOwnerRequest.expiry)
  
  PROTOBUF_NAMESPACE_ID::Int64Value* temp = expiry_;
  expiry_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Int64Value* ListTournamentRecordsAroundOwnerRequest::_internal_mutable_expiry() {
  
  if (expiry_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Int64Value>(GetArena());
    expiry_ = p;
  }
  return expiry_;
}
inline PROTOBUF_NAMESPACE_ID::Int64Value* ListTournamentRecordsAroundOwnerRequest::mutable_expiry() {
  // @@protoc_insertion_point(field_mutable:nakama.api.ListTournamentRecordsAroundOwnerRequest.expiry)
  return _internal_mutable_expiry();
}
inline void ListTournamentRecordsAroundOwnerRequest::set_allocated_expiry(PROTOBUF_NAMESPACE_ID::Int64Value* expiry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(expiry_);
  }
  if (expiry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expiry)->GetArena();
    if (message_arena != submessage_arena) {
      expiry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expiry, submessage_arena);
    }
    
  } else {
    
  }
  expiry_ = expiry;
  // @@protoc_insertion_point(field_set_allocated:nakama.api.ListTournamentRecordsAroundOwnerRequest.expiry)
}

// string cursor = 5;
inline void ListTournamentRecordsAroundOwnerRequest::clear_cursor() {
  cursor_.ClearToEmpty();
}
inline const std::string& ListTournamentRecordsAroundOwnerRequest::cursor() const {
  // @@protoc_insertion_point(field_get:nakama.api.ListTournamentRecordsAroundOwnerRequest.cursor)
  return _internal_cursor();
}
inline void ListTournamentRecordsAroundOwnerRequest::set_cursor(const std::string& value) {
  _internal_set_cursor(value);
  // @@protoc_insertion_point(field_set:nakama.api.ListTournamentRecordsAroundOwnerRequest.cursor)
}
inline std::string* ListTournamentRecordsAroundOwnerRequest::mutable_cursor() {
  // @@protoc_insertion_point(field_mutable:nakama.api.ListTournamentRecordsAroundOwnerRequest.cursor)
  return _internal_mutable_cursor();
}
inline const std::string& ListTournamentRecordsAroundOwnerRequest::_internal_cursor() const {
  return cursor_.Get();
}
inline void ListTournamentRecordsAroundOwnerRequest::_internal_set_cursor(const std::string& value) {
  
  cursor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListTournamentRecordsAroundOwnerRequest::set_cursor(std::string&& value) {
  
  cursor_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.ListTournamentRecordsAroundOwnerRequest.cursor)
}
inline void ListTournamentRecordsAroundOwnerRequest::set_cursor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cursor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.ListTournamentRecordsAroundOwnerRequest.cursor)
}
inline void ListTournamentRecordsAroundOwnerRequest::set_cursor(const char* value,
    size_t size) {
  
  cursor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.ListTournamentRecordsAroundOwnerRequest.cursor)
}
inline std::string* ListTournamentRecordsAroundOwnerRequest::_internal_mutable_cursor() {
  
  return cursor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListTournamentRecordsAroundOwnerRequest::release_cursor() {
  // @@protoc_insertion_point(field_release:nakama.api.ListTournamentRecordsAroundOwnerRequest.cursor)
  return cursor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListTournamentRecordsAroundOwnerRequest::set_allocated_cursor(std::string* cursor) {
  if (cursor != nullptr) {
    
  } else {
    
  }
  cursor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cursor,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.ListTournamentRecordsAroundOwnerRequest.cursor)
}

// -------------------------------------------------------------------

// ListTournamentRecordsRequest

// string tournament_id = 1;
inline void ListTournamentRecordsRequest::clear_tournament_id() {
  tournament_id_.ClearToEmpty();
}
inline const std::string& ListTournamentRecordsRequest::tournament_id() const {
  // @@protoc_insertion_point(field_get:nakama.api.ListTournamentRecordsRequest.tournament_id)
  return _internal_tournament_id();
}
inline void ListTournamentRecordsRequest::set_tournament_id(const std::string& value) {
  _internal_set_tournament_id(value);
  // @@protoc_insertion_point(field_set:nakama.api.ListTournamentRecordsRequest.tournament_id)
}
inline std::string* ListTournamentRecordsRequest::mutable_tournament_id() {
  // @@protoc_insertion_point(field_mutable:nakama.api.ListTournamentRecordsRequest.tournament_id)
  return _internal_mutable_tournament_id();
}
inline const std::string& ListTournamentRecordsRequest::_internal_tournament_id() const {
  return tournament_id_.Get();
}
inline void ListTournamentRecordsRequest::_internal_set_tournament_id(const std::string& value) {
  
  tournament_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListTournamentRecordsRequest::set_tournament_id(std::string&& value) {
  
  tournament_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.ListTournamentRecordsRequest.tournament_id)
}
inline void ListTournamentRecordsRequest::set_tournament_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tournament_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.ListTournamentRecordsRequest.tournament_id)
}
inline void ListTournamentRecordsRequest::set_tournament_id(const char* value,
    size_t size) {
  
  tournament_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.ListTournamentRecordsRequest.tournament_id)
}
inline std::string* ListTournamentRecordsRequest::_internal_mutable_tournament_id() {
  
  return tournament_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListTournamentRecordsRequest::release_tournament_id() {
  // @@protoc_insertion_point(field_release:nakama.api.ListTournamentRecordsRequest.tournament_id)
  return tournament_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListTournamentRecordsRequest::set_allocated_tournament_id(std::string* tournament_id) {
  if (tournament_id != nullptr) {
    
  } else {
    
  }
  tournament_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tournament_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.ListTournamentRecordsRequest.tournament_id)
}

// repeated string owner_ids = 2;
inline int ListTournamentRecordsRequest::_internal_owner_ids_size() const {
  return owner_ids_.size();
}
inline int ListTournamentRecordsRequest::owner_ids_size() const {
  return _internal_owner_ids_size();
}
inline void ListTournamentRecordsRequest::clear_owner_ids() {
  owner_ids_.Clear();
}
inline std::string* ListTournamentRecordsRequest::add_owner_ids() {
  // @@protoc_insertion_point(field_add_mutable:nakama.api.ListTournamentRecordsRequest.owner_ids)
  return _internal_add_owner_ids();
}
inline const std::string& ListTournamentRecordsRequest::_internal_owner_ids(int index) const {
  return owner_ids_.Get(index);
}
inline const std::string& ListTournamentRecordsRequest::owner_ids(int index) const {
  // @@protoc_insertion_point(field_get:nakama.api.ListTournamentRecordsRequest.owner_ids)
  return _internal_owner_ids(index);
}
inline std::string* ListTournamentRecordsRequest::mutable_owner_ids(int index) {
  // @@protoc_insertion_point(field_mutable:nakama.api.ListTournamentRecordsRequest.owner_ids)
  return owner_ids_.Mutable(index);
}
inline void ListTournamentRecordsRequest::set_owner_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:nakama.api.ListTournamentRecordsRequest.owner_ids)
  owner_ids_.Mutable(index)->assign(value);
}
inline void ListTournamentRecordsRequest::set_owner_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:nakama.api.ListTournamentRecordsRequest.owner_ids)
  owner_ids_.Mutable(index)->assign(std::move(value));
}
inline void ListTournamentRecordsRequest::set_owner_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  owner_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:nakama.api.ListTournamentRecordsRequest.owner_ids)
}
inline void ListTournamentRecordsRequest::set_owner_ids(int index, const char* value, size_t size) {
  owner_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:nakama.api.ListTournamentRecordsRequest.owner_ids)
}
inline std::string* ListTournamentRecordsRequest::_internal_add_owner_ids() {
  return owner_ids_.Add();
}
inline void ListTournamentRecordsRequest::add_owner_ids(const std::string& value) {
  owner_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:nakama.api.ListTournamentRecordsRequest.owner_ids)
}
inline void ListTournamentRecordsRequest::add_owner_ids(std::string&& value) {
  owner_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:nakama.api.ListTournamentRecordsRequest.owner_ids)
}
inline void ListTournamentRecordsRequest::add_owner_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  owner_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:nakama.api.ListTournamentRecordsRequest.owner_ids)
}
inline void ListTournamentRecordsRequest::add_owner_ids(const char* value, size_t size) {
  owner_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:nakama.api.ListTournamentRecordsRequest.owner_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ListTournamentRecordsRequest::owner_ids() const {
  // @@protoc_insertion_point(field_list:nakama.api.ListTournamentRecordsRequest.owner_ids)
  return owner_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ListTournamentRecordsRequest::mutable_owner_ids() {
  // @@protoc_insertion_point(field_mutable_list:nakama.api.ListTournamentRecordsRequest.owner_ids)
  return &owner_ids_;
}

// .google.protobuf.Int32Value limit = 3;
inline bool ListTournamentRecordsRequest::_internal_has_limit() const {
  return this != internal_default_instance() && limit_ != nullptr;
}
inline bool ListTournamentRecordsRequest::has_limit() const {
  return _internal_has_limit();
}
inline const PROTOBUF_NAMESPACE_ID::Int32Value& ListTournamentRecordsRequest::_internal_limit() const {
  const PROTOBUF_NAMESPACE_ID::Int32Value* p = limit_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Int32Value&>(
      PROTOBUF_NAMESPACE_ID::_Int32Value_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Int32Value& ListTournamentRecordsRequest::limit() const {
  // @@protoc_insertion_point(field_get:nakama.api.ListTournamentRecordsRequest.limit)
  return _internal_limit();
}
inline void ListTournamentRecordsRequest::unsafe_arena_set_allocated_limit(
    PROTOBUF_NAMESPACE_ID::Int32Value* limit) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(limit_);
  }
  limit_ = limit;
  if (limit) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nakama.api.ListTournamentRecordsRequest.limit)
}
inline PROTOBUF_NAMESPACE_ID::Int32Value* ListTournamentRecordsRequest::release_limit() {
  
  PROTOBUF_NAMESPACE_ID::Int32Value* temp = limit_;
  limit_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Int32Value* ListTournamentRecordsRequest::unsafe_arena_release_limit() {
  // @@protoc_insertion_point(field_release:nakama.api.ListTournamentRecordsRequest.limit)
  
  PROTOBUF_NAMESPACE_ID::Int32Value* temp = limit_;
  limit_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Int32Value* ListTournamentRecordsRequest::_internal_mutable_limit() {
  
  if (limit_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Int32Value>(GetArena());
    limit_ = p;
  }
  return limit_;
}
inline PROTOBUF_NAMESPACE_ID::Int32Value* ListTournamentRecordsRequest::mutable_limit() {
  // @@protoc_insertion_point(field_mutable:nakama.api.ListTournamentRecordsRequest.limit)
  return _internal_mutable_limit();
}
inline void ListTournamentRecordsRequest::set_allocated_limit(PROTOBUF_NAMESPACE_ID::Int32Value* limit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(limit_);
  }
  if (limit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(limit)->GetArena();
    if (message_arena != submessage_arena) {
      limit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, limit, submessage_arena);
    }
    
  } else {
    
  }
  limit_ = limit;
  // @@protoc_insertion_point(field_set_allocated:nakama.api.ListTournamentRecordsRequest.limit)
}

// string cursor = 4;
inline void ListTournamentRecordsRequest::clear_cursor() {
  cursor_.ClearToEmpty();
}
inline const std::string& ListTournamentRecordsRequest::cursor() const {
  // @@protoc_insertion_point(field_get:nakama.api.ListTournamentRecordsRequest.cursor)
  return _internal_cursor();
}
inline void ListTournamentRecordsRequest::set_cursor(const std::string& value) {
  _internal_set_cursor(value);
  // @@protoc_insertion_point(field_set:nakama.api.ListTournamentRecordsRequest.cursor)
}
inline std::string* ListTournamentRecordsRequest::mutable_cursor() {
  // @@protoc_insertion_point(field_mutable:nakama.api.ListTournamentRecordsRequest.cursor)
  return _internal_mutable_cursor();
}
inline const std::string& ListTournamentRecordsRequest::_internal_cursor() const {
  return cursor_.Get();
}
inline void ListTournamentRecordsRequest::_internal_set_cursor(const std::string& value) {
  
  cursor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListTournamentRecordsRequest::set_cursor(std::string&& value) {
  
  cursor_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.ListTournamentRecordsRequest.cursor)
}
inline void ListTournamentRecordsRequest::set_cursor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cursor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.ListTournamentRecordsRequest.cursor)
}
inline void ListTournamentRecordsRequest::set_cursor(const char* value,
    size_t size) {
  
  cursor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.ListTournamentRecordsRequest.cursor)
}
inline std::string* ListTournamentRecordsRequest::_internal_mutable_cursor() {
  
  return cursor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListTournamentRecordsRequest::release_cursor() {
  // @@protoc_insertion_point(field_release:nakama.api.ListTournamentRecordsRequest.cursor)
  return cursor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListTournamentRecordsRequest::set_allocated_cursor(std::string* cursor) {
  if (cursor != nullptr) {
    
  } else {
    
  }
  cursor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cursor,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.ListTournamentRecordsRequest.cursor)
}

// .google.protobuf.Int64Value expiry = 5;
inline bool ListTournamentRecordsRequest::_internal_has_expiry() const {
  return this != internal_default_instance() && expiry_ != nullptr;
}
inline bool ListTournamentRecordsRequest::has_expiry() const {
  return _internal_has_expiry();
}
inline const PROTOBUF_NAMESPACE_ID::Int64Value& ListTournamentRecordsRequest::_internal_expiry() const {
  const PROTOBUF_NAMESPACE_ID::Int64Value* p = expiry_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Int64Value&>(
      PROTOBUF_NAMESPACE_ID::_Int64Value_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Int64Value& ListTournamentRecordsRequest::expiry() const {
  // @@protoc_insertion_point(field_get:nakama.api.ListTournamentRecordsRequest.expiry)
  return _internal_expiry();
}
inline void ListTournamentRecordsRequest::unsafe_arena_set_allocated_expiry(
    PROTOBUF_NAMESPACE_ID::Int64Value* expiry) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expiry_);
  }
  expiry_ = expiry;
  if (expiry) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nakama.api.ListTournamentRecordsRequest.expiry)
}
inline PROTOBUF_NAMESPACE_ID::Int64Value* ListTournamentRecordsRequest::release_expiry() {
  
  PROTOBUF_NAMESPACE_ID::Int64Value* temp = expiry_;
  expiry_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Int64Value* ListTournamentRecordsRequest::unsafe_arena_release_expiry() {
  // @@protoc_insertion_point(field_release:nakama.api.ListTournamentRecordsRequest.expiry)
  
  PROTOBUF_NAMESPACE_ID::Int64Value* temp = expiry_;
  expiry_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Int64Value* ListTournamentRecordsRequest::_internal_mutable_expiry() {
  
  if (expiry_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Int64Value>(GetArena());
    expiry_ = p;
  }
  return expiry_;
}
inline PROTOBUF_NAMESPACE_ID::Int64Value* ListTournamentRecordsRequest::mutable_expiry() {
  // @@protoc_insertion_point(field_mutable:nakama.api.ListTournamentRecordsRequest.expiry)
  return _internal_mutable_expiry();
}
inline void ListTournamentRecordsRequest::set_allocated_expiry(PROTOBUF_NAMESPACE_ID::Int64Value* expiry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(expiry_);
  }
  if (expiry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expiry)->GetArena();
    if (message_arena != submessage_arena) {
      expiry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expiry, submessage_arena);
    }
    
  } else {
    
  }
  expiry_ = expiry;
  // @@protoc_insertion_point(field_set_allocated:nakama.api.ListTournamentRecordsRequest.expiry)
}

// -------------------------------------------------------------------

// ListTournamentsRequest

// .google.protobuf.UInt32Value category_start = 1;
inline bool ListTournamentsRequest::_internal_has_category_start() const {
  return this != internal_default_instance() && category_start_ != nullptr;
}
inline bool ListTournamentsRequest::has_category_start() const {
  return _internal_has_category_start();
}
inline const PROTOBUF_NAMESPACE_ID::UInt32Value& ListTournamentsRequest::_internal_category_start() const {
  const PROTOBUF_NAMESPACE_ID::UInt32Value* p = category_start_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::UInt32Value&>(
      PROTOBUF_NAMESPACE_ID::_UInt32Value_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::UInt32Value& ListTournamentsRequest::category_start() const {
  // @@protoc_insertion_point(field_get:nakama.api.ListTournamentsRequest.category_start)
  return _internal_category_start();
}
inline void ListTournamentsRequest::unsafe_arena_set_allocated_category_start(
    PROTOBUF_NAMESPACE_ID::UInt32Value* category_start) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(category_start_);
  }
  category_start_ = category_start;
  if (category_start) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nakama.api.ListTournamentsRequest.category_start)
}
inline PROTOBUF_NAMESPACE_ID::UInt32Value* ListTournamentsRequest::release_category_start() {
  
  PROTOBUF_NAMESPACE_ID::UInt32Value* temp = category_start_;
  category_start_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::UInt32Value* ListTournamentsRequest::unsafe_arena_release_category_start() {
  // @@protoc_insertion_point(field_release:nakama.api.ListTournamentsRequest.category_start)
  
  PROTOBUF_NAMESPACE_ID::UInt32Value* temp = category_start_;
  category_start_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::UInt32Value* ListTournamentsRequest::_internal_mutable_category_start() {
  
  if (category_start_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::UInt32Value>(GetArena());
    category_start_ = p;
  }
  return category_start_;
}
inline PROTOBUF_NAMESPACE_ID::UInt32Value* ListTournamentsRequest::mutable_category_start() {
  // @@protoc_insertion_point(field_mutable:nakama.api.ListTournamentsRequest.category_start)
  return _internal_mutable_category_start();
}
inline void ListTournamentsRequest::set_allocated_category_start(PROTOBUF_NAMESPACE_ID::UInt32Value* category_start) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(category_start_);
  }
  if (category_start) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(category_start)->GetArena();
    if (message_arena != submessage_arena) {
      category_start = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, category_start, submessage_arena);
    }
    
  } else {
    
  }
  category_start_ = category_start;
  // @@protoc_insertion_point(field_set_allocated:nakama.api.ListTournamentsRequest.category_start)
}

// .google.protobuf.UInt32Value category_end = 2;
inline bool ListTournamentsRequest::_internal_has_category_end() const {
  return this != internal_default_instance() && category_end_ != nullptr;
}
inline bool ListTournamentsRequest::has_category_end() const {
  return _internal_has_category_end();
}
inline const PROTOBUF_NAMESPACE_ID::UInt32Value& ListTournamentsRequest::_internal_category_end() const {
  const PROTOBUF_NAMESPACE_ID::UInt32Value* p = category_end_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::UInt32Value&>(
      PROTOBUF_NAMESPACE_ID::_UInt32Value_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::UInt32Value& ListTournamentsRequest::category_end() const {
  // @@protoc_insertion_point(field_get:nakama.api.ListTournamentsRequest.category_end)
  return _internal_category_end();
}
inline void ListTournamentsRequest::unsafe_arena_set_allocated_category_end(
    PROTOBUF_NAMESPACE_ID::UInt32Value* category_end) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(category_end_);
  }
  category_end_ = category_end;
  if (category_end) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nakama.api.ListTournamentsRequest.category_end)
}
inline PROTOBUF_NAMESPACE_ID::UInt32Value* ListTournamentsRequest::release_category_end() {
  
  PROTOBUF_NAMESPACE_ID::UInt32Value* temp = category_end_;
  category_end_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::UInt32Value* ListTournamentsRequest::unsafe_arena_release_category_end() {
  // @@protoc_insertion_point(field_release:nakama.api.ListTournamentsRequest.category_end)
  
  PROTOBUF_NAMESPACE_ID::UInt32Value* temp = category_end_;
  category_end_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::UInt32Value* ListTournamentsRequest::_internal_mutable_category_end() {
  
  if (category_end_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::UInt32Value>(GetArena());
    category_end_ = p;
  }
  return category_end_;
}
inline PROTOBUF_NAMESPACE_ID::UInt32Value* ListTournamentsRequest::mutable_category_end() {
  // @@protoc_insertion_point(field_mutable:nakama.api.ListTournamentsRequest.category_end)
  return _internal_mutable_category_end();
}
inline void ListTournamentsRequest::set_allocated_category_end(PROTOBUF_NAMESPACE_ID::UInt32Value* category_end) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(category_end_);
  }
  if (category_end) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(category_end)->GetArena();
    if (message_arena != submessage_arena) {
      category_end = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, category_end, submessage_arena);
    }
    
  } else {
    
  }
  category_end_ = category_end;
  // @@protoc_insertion_point(field_set_allocated:nakama.api.ListTournamentsRequest.category_end)
}

// .google.protobuf.UInt32Value start_time = 3;
inline bool ListTournamentsRequest::_internal_has_start_time() const {
  return this != internal_default_instance() && start_time_ != nullptr;
}
inline bool ListTournamentsRequest::has_start_time() const {
  return _internal_has_start_time();
}
inline const PROTOBUF_NAMESPACE_ID::UInt32Value& ListTournamentsRequest::_internal_start_time() const {
  const PROTOBUF_NAMESPACE_ID::UInt32Value* p = start_time_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::UInt32Value&>(
      PROTOBUF_NAMESPACE_ID::_UInt32Value_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::UInt32Value& ListTournamentsRequest::start_time() const {
  // @@protoc_insertion_point(field_get:nakama.api.ListTournamentsRequest.start_time)
  return _internal_start_time();
}
inline void ListTournamentsRequest::unsafe_arena_set_allocated_start_time(
    PROTOBUF_NAMESPACE_ID::UInt32Value* start_time) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_time_);
  }
  start_time_ = start_time;
  if (start_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nakama.api.ListTournamentsRequest.start_time)
}
inline PROTOBUF_NAMESPACE_ID::UInt32Value* ListTournamentsRequest::release_start_time() {
  
  PROTOBUF_NAMESPACE_ID::UInt32Value* temp = start_time_;
  start_time_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::UInt32Value* ListTournamentsRequest::unsafe_arena_release_start_time() {
  // @@protoc_insertion_point(field_release:nakama.api.ListTournamentsRequest.start_time)
  
  PROTOBUF_NAMESPACE_ID::UInt32Value* temp = start_time_;
  start_time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::UInt32Value* ListTournamentsRequest::_internal_mutable_start_time() {
  
  if (start_time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::UInt32Value>(GetArena());
    start_time_ = p;
  }
  return start_time_;
}
inline PROTOBUF_NAMESPACE_ID::UInt32Value* ListTournamentsRequest::mutable_start_time() {
  // @@protoc_insertion_point(field_mutable:nakama.api.ListTournamentsRequest.start_time)
  return _internal_mutable_start_time();
}
inline void ListTournamentsRequest::set_allocated_start_time(PROTOBUF_NAMESPACE_ID::UInt32Value* start_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_time_);
  }
  if (start_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_time)->GetArena();
    if (message_arena != submessage_arena) {
      start_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start_time, submessage_arena);
    }
    
  } else {
    
  }
  start_time_ = start_time;
  // @@protoc_insertion_point(field_set_allocated:nakama.api.ListTournamentsRequest.start_time)
}

// .google.protobuf.UInt32Value end_time = 4;
inline bool ListTournamentsRequest::_internal_has_end_time() const {
  return this != internal_default_instance() && end_time_ != nullptr;
}
inline bool ListTournamentsRequest::has_end_time() const {
  return _internal_has_end_time();
}
inline const PROTOBUF_NAMESPACE_ID::UInt32Value& ListTournamentsRequest::_internal_end_time() const {
  const PROTOBUF_NAMESPACE_ID::UInt32Value* p = end_time_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::UInt32Value&>(
      PROTOBUF_NAMESPACE_ID::_UInt32Value_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::UInt32Value& ListTournamentsRequest::end_time() const {
  // @@protoc_insertion_point(field_get:nakama.api.ListTournamentsRequest.end_time)
  return _internal_end_time();
}
inline void ListTournamentsRequest::unsafe_arena_set_allocated_end_time(
    PROTOBUF_NAMESPACE_ID::UInt32Value* end_time) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_time_);
  }
  end_time_ = end_time;
  if (end_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nakama.api.ListTournamentsRequest.end_time)
}
inline PROTOBUF_NAMESPACE_ID::UInt32Value* ListTournamentsRequest::release_end_time() {
  
  PROTOBUF_NAMESPACE_ID::UInt32Value* temp = end_time_;
  end_time_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::UInt32Value* ListTournamentsRequest::unsafe_arena_release_end_time() {
  // @@protoc_insertion_point(field_release:nakama.api.ListTournamentsRequest.end_time)
  
  PROTOBUF_NAMESPACE_ID::UInt32Value* temp = end_time_;
  end_time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::UInt32Value* ListTournamentsRequest::_internal_mutable_end_time() {
  
  if (end_time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::UInt32Value>(GetArena());
    end_time_ = p;
  }
  return end_time_;
}
inline PROTOBUF_NAMESPACE_ID::UInt32Value* ListTournamentsRequest::mutable_end_time() {
  // @@protoc_insertion_point(field_mutable:nakama.api.ListTournamentsRequest.end_time)
  return _internal_mutable_end_time();
}
inline void ListTournamentsRequest::set_allocated_end_time(PROTOBUF_NAMESPACE_ID::UInt32Value* end_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_time_);
  }
  if (end_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_time)->GetArena();
    if (message_arena != submessage_arena) {
      end_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end_time, submessage_arena);
    }
    
  } else {
    
  }
  end_time_ = end_time;
  // @@protoc_insertion_point(field_set_allocated:nakama.api.ListTournamentsRequest.end_time)
}

// .google.protobuf.Int32Value limit = 6;
inline bool ListTournamentsRequest::_internal_has_limit() const {
  return this != internal_default_instance() && limit_ != nullptr;
}
inline bool ListTournamentsRequest::has_limit() const {
  return _internal_has_limit();
}
inline const PROTOBUF_NAMESPACE_ID::Int32Value& ListTournamentsRequest::_internal_limit() const {
  const PROTOBUF_NAMESPACE_ID::Int32Value* p = limit_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Int32Value&>(
      PROTOBUF_NAMESPACE_ID::_Int32Value_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Int32Value& ListTournamentsRequest::limit() const {
  // @@protoc_insertion_point(field_get:nakama.api.ListTournamentsRequest.limit)
  return _internal_limit();
}
inline void ListTournamentsRequest::unsafe_arena_set_allocated_limit(
    PROTOBUF_NAMESPACE_ID::Int32Value* limit) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(limit_);
  }
  limit_ = limit;
  if (limit) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nakama.api.ListTournamentsRequest.limit)
}
inline PROTOBUF_NAMESPACE_ID::Int32Value* ListTournamentsRequest::release_limit() {
  
  PROTOBUF_NAMESPACE_ID::Int32Value* temp = limit_;
  limit_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Int32Value* ListTournamentsRequest::unsafe_arena_release_limit() {
  // @@protoc_insertion_point(field_release:nakama.api.ListTournamentsRequest.limit)
  
  PROTOBUF_NAMESPACE_ID::Int32Value* temp = limit_;
  limit_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Int32Value* ListTournamentsRequest::_internal_mutable_limit() {
  
  if (limit_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Int32Value>(GetArena());
    limit_ = p;
  }
  return limit_;
}
inline PROTOBUF_NAMESPACE_ID::Int32Value* ListTournamentsRequest::mutable_limit() {
  // @@protoc_insertion_point(field_mutable:nakama.api.ListTournamentsRequest.limit)
  return _internal_mutable_limit();
}
inline void ListTournamentsRequest::set_allocated_limit(PROTOBUF_NAMESPACE_ID::Int32Value* limit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(limit_);
  }
  if (limit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(limit)->GetArena();
    if (message_arena != submessage_arena) {
      limit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, limit, submessage_arena);
    }
    
  } else {
    
  }
  limit_ = limit;
  // @@protoc_insertion_point(field_set_allocated:nakama.api.ListTournamentsRequest.limit)
}

// string cursor = 8;
inline void ListTournamentsRequest::clear_cursor() {
  cursor_.ClearToEmpty();
}
inline const std::string& ListTournamentsRequest::cursor() const {
  // @@protoc_insertion_point(field_get:nakama.api.ListTournamentsRequest.cursor)
  return _internal_cursor();
}
inline void ListTournamentsRequest::set_cursor(const std::string& value) {
  _internal_set_cursor(value);
  // @@protoc_insertion_point(field_set:nakama.api.ListTournamentsRequest.cursor)
}
inline std::string* ListTournamentsRequest::mutable_cursor() {
  // @@protoc_insertion_point(field_mutable:nakama.api.ListTournamentsRequest.cursor)
  return _internal_mutable_cursor();
}
inline const std::string& ListTournamentsRequest::_internal_cursor() const {
  return cursor_.Get();
}
inline void ListTournamentsRequest::_internal_set_cursor(const std::string& value) {
  
  cursor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListTournamentsRequest::set_cursor(std::string&& value) {
  
  cursor_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.ListTournamentsRequest.cursor)
}
inline void ListTournamentsRequest::set_cursor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cursor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.ListTournamentsRequest.cursor)
}
inline void ListTournamentsRequest::set_cursor(const char* value,
    size_t size) {
  
  cursor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.ListTournamentsRequest.cursor)
}
inline std::string* ListTournamentsRequest::_internal_mutable_cursor() {
  
  return cursor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListTournamentsRequest::release_cursor() {
  // @@protoc_insertion_point(field_release:nakama.api.ListTournamentsRequest.cursor)
  return cursor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListTournamentsRequest::set_allocated_cursor(std::string* cursor) {
  if (cursor != nullptr) {
    
  } else {
    
  }
  cursor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cursor,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.ListTournamentsRequest.cursor)
}

// -------------------------------------------------------------------

// ListUserGroupsRequest

// string user_id = 1;
inline void ListUserGroupsRequest::clear_user_id() {
  user_id_.ClearToEmpty();
}
inline const std::string& ListUserGroupsRequest::user_id() const {
  // @@protoc_insertion_point(field_get:nakama.api.ListUserGroupsRequest.user_id)
  return _internal_user_id();
}
inline void ListUserGroupsRequest::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:nakama.api.ListUserGroupsRequest.user_id)
}
inline std::string* ListUserGroupsRequest::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:nakama.api.ListUserGroupsRequest.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& ListUserGroupsRequest::_internal_user_id() const {
  return user_id_.Get();
}
inline void ListUserGroupsRequest::_internal_set_user_id(const std::string& value) {
  
  user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListUserGroupsRequest::set_user_id(std::string&& value) {
  
  user_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.ListUserGroupsRequest.user_id)
}
inline void ListUserGroupsRequest::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.ListUserGroupsRequest.user_id)
}
inline void ListUserGroupsRequest::set_user_id(const char* value,
    size_t size) {
  
  user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.ListUserGroupsRequest.user_id)
}
inline std::string* ListUserGroupsRequest::_internal_mutable_user_id() {
  
  return user_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListUserGroupsRequest::release_user_id() {
  // @@protoc_insertion_point(field_release:nakama.api.ListUserGroupsRequest.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListUserGroupsRequest::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.ListUserGroupsRequest.user_id)
}

// .google.protobuf.Int32Value limit = 2;
inline bool ListUserGroupsRequest::_internal_has_limit() const {
  return this != internal_default_instance() && limit_ != nullptr;
}
inline bool ListUserGroupsRequest::has_limit() const {
  return _internal_has_limit();
}
inline const PROTOBUF_NAMESPACE_ID::Int32Value& ListUserGroupsRequest::_internal_limit() const {
  const PROTOBUF_NAMESPACE_ID::Int32Value* p = limit_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Int32Value&>(
      PROTOBUF_NAMESPACE_ID::_Int32Value_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Int32Value& ListUserGroupsRequest::limit() const {
  // @@protoc_insertion_point(field_get:nakama.api.ListUserGroupsRequest.limit)
  return _internal_limit();
}
inline void ListUserGroupsRequest::unsafe_arena_set_allocated_limit(
    PROTOBUF_NAMESPACE_ID::Int32Value* limit) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(limit_);
  }
  limit_ = limit;
  if (limit) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nakama.api.ListUserGroupsRequest.limit)
}
inline PROTOBUF_NAMESPACE_ID::Int32Value* ListUserGroupsRequest::release_limit() {
  
  PROTOBUF_NAMESPACE_ID::Int32Value* temp = limit_;
  limit_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Int32Value* ListUserGroupsRequest::unsafe_arena_release_limit() {
  // @@protoc_insertion_point(field_release:nakama.api.ListUserGroupsRequest.limit)
  
  PROTOBUF_NAMESPACE_ID::Int32Value* temp = limit_;
  limit_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Int32Value* ListUserGroupsRequest::_internal_mutable_limit() {
  
  if (limit_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Int32Value>(GetArena());
    limit_ = p;
  }
  return limit_;
}
inline PROTOBUF_NAMESPACE_ID::Int32Value* ListUserGroupsRequest::mutable_limit() {
  // @@protoc_insertion_point(field_mutable:nakama.api.ListUserGroupsRequest.limit)
  return _internal_mutable_limit();
}
inline void ListUserGroupsRequest::set_allocated_limit(PROTOBUF_NAMESPACE_ID::Int32Value* limit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(limit_);
  }
  if (limit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(limit)->GetArena();
    if (message_arena != submessage_arena) {
      limit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, limit, submessage_arena);
    }
    
  } else {
    
  }
  limit_ = limit;
  // @@protoc_insertion_point(field_set_allocated:nakama.api.ListUserGroupsRequest.limit)
}

// .google.protobuf.Int32Value state = 3;
inline bool ListUserGroupsRequest::_internal_has_state() const {
  return this != internal_default_instance() && state_ != nullptr;
}
inline bool ListUserGroupsRequest::has_state() const {
  return _internal_has_state();
}
inline const PROTOBUF_NAMESPACE_ID::Int32Value& ListUserGroupsRequest::_internal_state() const {
  const PROTOBUF_NAMESPACE_ID::Int32Value* p = state_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Int32Value&>(
      PROTOBUF_NAMESPACE_ID::_Int32Value_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Int32Value& ListUserGroupsRequest::state() const {
  // @@protoc_insertion_point(field_get:nakama.api.ListUserGroupsRequest.state)
  return _internal_state();
}
inline void ListUserGroupsRequest::unsafe_arena_set_allocated_state(
    PROTOBUF_NAMESPACE_ID::Int32Value* state) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(state_);
  }
  state_ = state;
  if (state) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nakama.api.ListUserGroupsRequest.state)
}
inline PROTOBUF_NAMESPACE_ID::Int32Value* ListUserGroupsRequest::release_state() {
  
  PROTOBUF_NAMESPACE_ID::Int32Value* temp = state_;
  state_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Int32Value* ListUserGroupsRequest::unsafe_arena_release_state() {
  // @@protoc_insertion_point(field_release:nakama.api.ListUserGroupsRequest.state)
  
  PROTOBUF_NAMESPACE_ID::Int32Value* temp = state_;
  state_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Int32Value* ListUserGroupsRequest::_internal_mutable_state() {
  
  if (state_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Int32Value>(GetArena());
    state_ = p;
  }
  return state_;
}
inline PROTOBUF_NAMESPACE_ID::Int32Value* ListUserGroupsRequest::mutable_state() {
  // @@protoc_insertion_point(field_mutable:nakama.api.ListUserGroupsRequest.state)
  return _internal_mutable_state();
}
inline void ListUserGroupsRequest::set_allocated_state(PROTOBUF_NAMESPACE_ID::Int32Value* state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(state_);
  }
  if (state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(state)->GetArena();
    if (message_arena != submessage_arena) {
      state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:nakama.api.ListUserGroupsRequest.state)
}

// string cursor = 4;
inline void ListUserGroupsRequest::clear_cursor() {
  cursor_.ClearToEmpty();
}
inline const std::string& ListUserGroupsRequest::cursor() const {
  // @@protoc_insertion_point(field_get:nakama.api.ListUserGroupsRequest.cursor)
  return _internal_cursor();
}
inline void ListUserGroupsRequest::set_cursor(const std::string& value) {
  _internal_set_cursor(value);
  // @@protoc_insertion_point(field_set:nakama.api.ListUserGroupsRequest.cursor)
}
inline std::string* ListUserGroupsRequest::mutable_cursor() {
  // @@protoc_insertion_point(field_mutable:nakama.api.ListUserGroupsRequest.cursor)
  return _internal_mutable_cursor();
}
inline const std::string& ListUserGroupsRequest::_internal_cursor() const {
  return cursor_.Get();
}
inline void ListUserGroupsRequest::_internal_set_cursor(const std::string& value) {
  
  cursor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListUserGroupsRequest::set_cursor(std::string&& value) {
  
  cursor_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.ListUserGroupsRequest.cursor)
}
inline void ListUserGroupsRequest::set_cursor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cursor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.ListUserGroupsRequest.cursor)
}
inline void ListUserGroupsRequest::set_cursor(const char* value,
    size_t size) {
  
  cursor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.ListUserGroupsRequest.cursor)
}
inline std::string* ListUserGroupsRequest::_internal_mutable_cursor() {
  
  return cursor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListUserGroupsRequest::release_cursor() {
  // @@protoc_insertion_point(field_release:nakama.api.ListUserGroupsRequest.cursor)
  return cursor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListUserGroupsRequest::set_allocated_cursor(std::string* cursor) {
  if (cursor != nullptr) {
    
  } else {
    
  }
  cursor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cursor,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.ListUserGroupsRequest.cursor)
}

// -------------------------------------------------------------------

// Match

// string match_id = 1;
inline void Match::clear_match_id() {
  match_id_.ClearToEmpty();
}
inline const std::string& Match::match_id() const {
  // @@protoc_insertion_point(field_get:nakama.api.Match.match_id)
  return _internal_match_id();
}
inline void Match::set_match_id(const std::string& value) {
  _internal_set_match_id(value);
  // @@protoc_insertion_point(field_set:nakama.api.Match.match_id)
}
inline std::string* Match::mutable_match_id() {
  // @@protoc_insertion_point(field_mutable:nakama.api.Match.match_id)
  return _internal_mutable_match_id();
}
inline const std::string& Match::_internal_match_id() const {
  return match_id_.Get();
}
inline void Match::_internal_set_match_id(const std::string& value) {
  
  match_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Match::set_match_id(std::string&& value) {
  
  match_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.Match.match_id)
}
inline void Match::set_match_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  match_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.Match.match_id)
}
inline void Match::set_match_id(const char* value,
    size_t size) {
  
  match_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.Match.match_id)
}
inline std::string* Match::_internal_mutable_match_id() {
  
  return match_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Match::release_match_id() {
  // @@protoc_insertion_point(field_release:nakama.api.Match.match_id)
  return match_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Match::set_allocated_match_id(std::string* match_id) {
  if (match_id != nullptr) {
    
  } else {
    
  }
  match_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), match_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.Match.match_id)
}

// bool authoritative = 2;
inline void Match::clear_authoritative() {
  authoritative_ = false;
}
inline bool Match::_internal_authoritative() const {
  return authoritative_;
}
inline bool Match::authoritative() const {
  // @@protoc_insertion_point(field_get:nakama.api.Match.authoritative)
  return _internal_authoritative();
}
inline void Match::_internal_set_authoritative(bool value) {
  
  authoritative_ = value;
}
inline void Match::set_authoritative(bool value) {
  _internal_set_authoritative(value);
  // @@protoc_insertion_point(field_set:nakama.api.Match.authoritative)
}

// .google.protobuf.StringValue label = 3;
inline bool Match::_internal_has_label() const {
  return this != internal_default_instance() && label_ != nullptr;
}
inline bool Match::has_label() const {
  return _internal_has_label();
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& Match::_internal_label() const {
  const PROTOBUF_NAMESPACE_ID::StringValue* p = label_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::StringValue&>(
      PROTOBUF_NAMESPACE_ID::_StringValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& Match::label() const {
  // @@protoc_insertion_point(field_get:nakama.api.Match.label)
  return _internal_label();
}
inline void Match::unsafe_arena_set_allocated_label(
    PROTOBUF_NAMESPACE_ID::StringValue* label) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(label_);
  }
  label_ = label;
  if (label) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nakama.api.Match.label)
}
inline PROTOBUF_NAMESPACE_ID::StringValue* Match::release_label() {
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = label_;
  label_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* Match::unsafe_arena_release_label() {
  // @@protoc_insertion_point(field_release:nakama.api.Match.label)
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = label_;
  label_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* Match::_internal_mutable_label() {
  
  if (label_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::StringValue>(GetArena());
    label_ = p;
  }
  return label_;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* Match::mutable_label() {
  // @@protoc_insertion_point(field_mutable:nakama.api.Match.label)
  return _internal_mutable_label();
}
inline void Match::set_allocated_label(PROTOBUF_NAMESPACE_ID::StringValue* label) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(label_);
  }
  if (label) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(label)->GetArena();
    if (message_arena != submessage_arena) {
      label = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, label, submessage_arena);
    }
    
  } else {
    
  }
  label_ = label;
  // @@protoc_insertion_point(field_set_allocated:nakama.api.Match.label)
}

// int32 size = 4;
inline void Match::clear_size() {
  size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Match::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Match::size() const {
  // @@protoc_insertion_point(field_get:nakama.api.Match.size)
  return _internal_size();
}
inline void Match::_internal_set_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  size_ = value;
}
inline void Match::set_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:nakama.api.Match.size)
}

// int32 tick_rate = 5;
inline void Match::clear_tick_rate() {
  tick_rate_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Match::_internal_tick_rate() const {
  return tick_rate_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Match::tick_rate() const {
  // @@protoc_insertion_point(field_get:nakama.api.Match.tick_rate)
  return _internal_tick_rate();
}
inline void Match::_internal_set_tick_rate(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  tick_rate_ = value;
}
inline void Match::set_tick_rate(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tick_rate(value);
  // @@protoc_insertion_point(field_set:nakama.api.Match.tick_rate)
}

// string handler_name = 6;
inline void Match::clear_handler_name() {
  handler_name_.ClearToEmpty();
}
inline const std::string& Match::handler_name() const {
  // @@protoc_insertion_point(field_get:nakama.api.Match.handler_name)
  return _internal_handler_name();
}
inline void Match::set_handler_name(const std::string& value) {
  _internal_set_handler_name(value);
  // @@protoc_insertion_point(field_set:nakama.api.Match.handler_name)
}
inline std::string* Match::mutable_handler_name() {
  // @@protoc_insertion_point(field_mutable:nakama.api.Match.handler_name)
  return _internal_mutable_handler_name();
}
inline const std::string& Match::_internal_handler_name() const {
  return handler_name_.Get();
}
inline void Match::_internal_set_handler_name(const std::string& value) {
  
  handler_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Match::set_handler_name(std::string&& value) {
  
  handler_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.Match.handler_name)
}
inline void Match::set_handler_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  handler_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.Match.handler_name)
}
inline void Match::set_handler_name(const char* value,
    size_t size) {
  
  handler_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.Match.handler_name)
}
inline std::string* Match::_internal_mutable_handler_name() {
  
  return handler_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Match::release_handler_name() {
  // @@protoc_insertion_point(field_release:nakama.api.Match.handler_name)
  return handler_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Match::set_allocated_handler_name(std::string* handler_name) {
  if (handler_name != nullptr) {
    
  } else {
    
  }
  handler_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), handler_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.Match.handler_name)
}

// -------------------------------------------------------------------

// MatchList

// repeated .nakama.api.Match matches = 1;
inline int MatchList::_internal_matches_size() const {
  return matches_.size();
}
inline int MatchList::matches_size() const {
  return _internal_matches_size();
}
inline void MatchList::clear_matches() {
  matches_.Clear();
}
inline ::nakama::api::Match* MatchList::mutable_matches(int index) {
  // @@protoc_insertion_point(field_mutable:nakama.api.MatchList.matches)
  return matches_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nakama::api::Match >*
MatchList::mutable_matches() {
  // @@protoc_insertion_point(field_mutable_list:nakama.api.MatchList.matches)
  return &matches_;
}
inline const ::nakama::api::Match& MatchList::_internal_matches(int index) const {
  return matches_.Get(index);
}
inline const ::nakama::api::Match& MatchList::matches(int index) const {
  // @@protoc_insertion_point(field_get:nakama.api.MatchList.matches)
  return _internal_matches(index);
}
inline ::nakama::api::Match* MatchList::_internal_add_matches() {
  return matches_.Add();
}
inline ::nakama::api::Match* MatchList::add_matches() {
  // @@protoc_insertion_point(field_add:nakama.api.MatchList.matches)
  return _internal_add_matches();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nakama::api::Match >&
MatchList::matches() const {
  // @@protoc_insertion_point(field_list:nakama.api.MatchList.matches)
  return matches_;
}

// -------------------------------------------------------------------

// Notification

// string id = 1;
inline void Notification::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& Notification::id() const {
  // @@protoc_insertion_point(field_get:nakama.api.Notification.id)
  return _internal_id();
}
inline void Notification::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:nakama.api.Notification.id)
}
inline std::string* Notification::mutable_id() {
  // @@protoc_insertion_point(field_mutable:nakama.api.Notification.id)
  return _internal_mutable_id();
}
inline const std::string& Notification::_internal_id() const {
  return id_.Get();
}
inline void Notification::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Notification::set_id(std::string&& value) {
  
  id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.Notification.id)
}
inline void Notification::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.Notification.id)
}
inline void Notification::set_id(const char* value,
    size_t size) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.Notification.id)
}
inline std::string* Notification::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Notification::release_id() {
  // @@protoc_insertion_point(field_release:nakama.api.Notification.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Notification::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.Notification.id)
}

// string subject = 2;
inline void Notification::clear_subject() {
  subject_.ClearToEmpty();
}
inline const std::string& Notification::subject() const {
  // @@protoc_insertion_point(field_get:nakama.api.Notification.subject)
  return _internal_subject();
}
inline void Notification::set_subject(const std::string& value) {
  _internal_set_subject(value);
  // @@protoc_insertion_point(field_set:nakama.api.Notification.subject)
}
inline std::string* Notification::mutable_subject() {
  // @@protoc_insertion_point(field_mutable:nakama.api.Notification.subject)
  return _internal_mutable_subject();
}
inline const std::string& Notification::_internal_subject() const {
  return subject_.Get();
}
inline void Notification::_internal_set_subject(const std::string& value) {
  
  subject_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Notification::set_subject(std::string&& value) {
  
  subject_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.Notification.subject)
}
inline void Notification::set_subject(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  subject_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.Notification.subject)
}
inline void Notification::set_subject(const char* value,
    size_t size) {
  
  subject_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.Notification.subject)
}
inline std::string* Notification::_internal_mutable_subject() {
  
  return subject_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Notification::release_subject() {
  // @@protoc_insertion_point(field_release:nakama.api.Notification.subject)
  return subject_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Notification::set_allocated_subject(std::string* subject) {
  if (subject != nullptr) {
    
  } else {
    
  }
  subject_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), subject,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.Notification.subject)
}

// string content = 3;
inline void Notification::clear_content() {
  content_.ClearToEmpty();
}
inline const std::string& Notification::content() const {
  // @@protoc_insertion_point(field_get:nakama.api.Notification.content)
  return _internal_content();
}
inline void Notification::set_content(const std::string& value) {
  _internal_set_content(value);
  // @@protoc_insertion_point(field_set:nakama.api.Notification.content)
}
inline std::string* Notification::mutable_content() {
  // @@protoc_insertion_point(field_mutable:nakama.api.Notification.content)
  return _internal_mutable_content();
}
inline const std::string& Notification::_internal_content() const {
  return content_.Get();
}
inline void Notification::_internal_set_content(const std::string& value) {
  
  content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Notification::set_content(std::string&& value) {
  
  content_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.Notification.content)
}
inline void Notification::set_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.Notification.content)
}
inline void Notification::set_content(const char* value,
    size_t size) {
  
  content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.Notification.content)
}
inline std::string* Notification::_internal_mutable_content() {
  
  return content_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Notification::release_content() {
  // @@protoc_insertion_point(field_release:nakama.api.Notification.content)
  return content_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Notification::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  content_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.Notification.content)
}

// int32 code = 4;
inline void Notification::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Notification::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Notification::code() const {
  // @@protoc_insertion_point(field_get:nakama.api.Notification.code)
  return _internal_code();
}
inline void Notification::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void Notification::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:nakama.api.Notification.code)
}

// string sender_id = 5;
inline void Notification::clear_sender_id() {
  sender_id_.ClearToEmpty();
}
inline const std::string& Notification::sender_id() const {
  // @@protoc_insertion_point(field_get:nakama.api.Notification.sender_id)
  return _internal_sender_id();
}
inline void Notification::set_sender_id(const std::string& value) {
  _internal_set_sender_id(value);
  // @@protoc_insertion_point(field_set:nakama.api.Notification.sender_id)
}
inline std::string* Notification::mutable_sender_id() {
  // @@protoc_insertion_point(field_mutable:nakama.api.Notification.sender_id)
  return _internal_mutable_sender_id();
}
inline const std::string& Notification::_internal_sender_id() const {
  return sender_id_.Get();
}
inline void Notification::_internal_set_sender_id(const std::string& value) {
  
  sender_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Notification::set_sender_id(std::string&& value) {
  
  sender_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.Notification.sender_id)
}
inline void Notification::set_sender_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sender_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.Notification.sender_id)
}
inline void Notification::set_sender_id(const char* value,
    size_t size) {
  
  sender_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.Notification.sender_id)
}
inline std::string* Notification::_internal_mutable_sender_id() {
  
  return sender_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Notification::release_sender_id() {
  // @@protoc_insertion_point(field_release:nakama.api.Notification.sender_id)
  return sender_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Notification::set_allocated_sender_id(std::string* sender_id) {
  if (sender_id != nullptr) {
    
  } else {
    
  }
  sender_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sender_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.Notification.sender_id)
}

// .google.protobuf.Timestamp create_time = 6;
inline bool Notification::_internal_has_create_time() const {
  return this != internal_default_instance() && create_time_ != nullptr;
}
inline bool Notification::has_create_time() const {
  return _internal_has_create_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Notification::_internal_create_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = create_time_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Notification::create_time() const {
  // @@protoc_insertion_point(field_get:nakama.api.Notification.create_time)
  return _internal_create_time();
}
inline void Notification::unsafe_arena_set_allocated_create_time(
    PROTOBUF_NAMESPACE_ID::Timestamp* create_time) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(create_time_);
  }
  create_time_ = create_time;
  if (create_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nakama.api.Notification.create_time)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Notification::release_create_time() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = create_time_;
  create_time_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Notification::unsafe_arena_release_create_time() {
  // @@protoc_insertion_point(field_release:nakama.api.Notification.create_time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = create_time_;
  create_time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Notification::_internal_mutable_create_time() {
  
  if (create_time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    create_time_ = p;
  }
  return create_time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Notification::mutable_create_time() {
  // @@protoc_insertion_point(field_mutable:nakama.api.Notification.create_time)
  return _internal_mutable_create_time();
}
inline void Notification::set_allocated_create_time(PROTOBUF_NAMESPACE_ID::Timestamp* create_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(create_time_);
  }
  if (create_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(create_time)->GetArena();
    if (message_arena != submessage_arena) {
      create_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, create_time, submessage_arena);
    }
    
  } else {
    
  }
  create_time_ = create_time;
  // @@protoc_insertion_point(field_set_allocated:nakama.api.Notification.create_time)
}

// bool persistent = 7;
inline void Notification::clear_persistent() {
  persistent_ = false;
}
inline bool Notification::_internal_persistent() const {
  return persistent_;
}
inline bool Notification::persistent() const {
  // @@protoc_insertion_point(field_get:nakama.api.Notification.persistent)
  return _internal_persistent();
}
inline void Notification::_internal_set_persistent(bool value) {
  
  persistent_ = value;
}
inline void Notification::set_persistent(bool value) {
  _internal_set_persistent(value);
  // @@protoc_insertion_point(field_set:nakama.api.Notification.persistent)
}

// -------------------------------------------------------------------

// NotificationList

// repeated .nakama.api.Notification notifications = 1;
inline int NotificationList::_internal_notifications_size() const {
  return notifications_.size();
}
inline int NotificationList::notifications_size() const {
  return _internal_notifications_size();
}
inline void NotificationList::clear_notifications() {
  notifications_.Clear();
}
inline ::nakama::api::Notification* NotificationList::mutable_notifications(int index) {
  // @@protoc_insertion_point(field_mutable:nakama.api.NotificationList.notifications)
  return notifications_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nakama::api::Notification >*
NotificationList::mutable_notifications() {
  // @@protoc_insertion_point(field_mutable_list:nakama.api.NotificationList.notifications)
  return &notifications_;
}
inline const ::nakama::api::Notification& NotificationList::_internal_notifications(int index) const {
  return notifications_.Get(index);
}
inline const ::nakama::api::Notification& NotificationList::notifications(int index) const {
  // @@protoc_insertion_point(field_get:nakama.api.NotificationList.notifications)
  return _internal_notifications(index);
}
inline ::nakama::api::Notification* NotificationList::_internal_add_notifications() {
  return notifications_.Add();
}
inline ::nakama::api::Notification* NotificationList::add_notifications() {
  // @@protoc_insertion_point(field_add:nakama.api.NotificationList.notifications)
  return _internal_add_notifications();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nakama::api::Notification >&
NotificationList::notifications() const {
  // @@protoc_insertion_point(field_list:nakama.api.NotificationList.notifications)
  return notifications_;
}

// string cacheable_cursor = 2;
inline void NotificationList::clear_cacheable_cursor() {
  cacheable_cursor_.ClearToEmpty();
}
inline const std::string& NotificationList::cacheable_cursor() const {
  // @@protoc_insertion_point(field_get:nakama.api.NotificationList.cacheable_cursor)
  return _internal_cacheable_cursor();
}
inline void NotificationList::set_cacheable_cursor(const std::string& value) {
  _internal_set_cacheable_cursor(value);
  // @@protoc_insertion_point(field_set:nakama.api.NotificationList.cacheable_cursor)
}
inline std::string* NotificationList::mutable_cacheable_cursor() {
  // @@protoc_insertion_point(field_mutable:nakama.api.NotificationList.cacheable_cursor)
  return _internal_mutable_cacheable_cursor();
}
inline const std::string& NotificationList::_internal_cacheable_cursor() const {
  return cacheable_cursor_.Get();
}
inline void NotificationList::_internal_set_cacheable_cursor(const std::string& value) {
  
  cacheable_cursor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void NotificationList::set_cacheable_cursor(std::string&& value) {
  
  cacheable_cursor_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.NotificationList.cacheable_cursor)
}
inline void NotificationList::set_cacheable_cursor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cacheable_cursor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.NotificationList.cacheable_cursor)
}
inline void NotificationList::set_cacheable_cursor(const char* value,
    size_t size) {
  
  cacheable_cursor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.NotificationList.cacheable_cursor)
}
inline std::string* NotificationList::_internal_mutable_cacheable_cursor() {
  
  return cacheable_cursor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* NotificationList::release_cacheable_cursor() {
  // @@protoc_insertion_point(field_release:nakama.api.NotificationList.cacheable_cursor)
  return cacheable_cursor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NotificationList::set_allocated_cacheable_cursor(std::string* cacheable_cursor) {
  if (cacheable_cursor != nullptr) {
    
  } else {
    
  }
  cacheable_cursor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cacheable_cursor,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.NotificationList.cacheable_cursor)
}

// -------------------------------------------------------------------

// PromoteGroupUsersRequest

// string group_id = 1;
inline void PromoteGroupUsersRequest::clear_group_id() {
  group_id_.ClearToEmpty();
}
inline const std::string& PromoteGroupUsersRequest::group_id() const {
  // @@protoc_insertion_point(field_get:nakama.api.PromoteGroupUsersRequest.group_id)
  return _internal_group_id();
}
inline void PromoteGroupUsersRequest::set_group_id(const std::string& value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:nakama.api.PromoteGroupUsersRequest.group_id)
}
inline std::string* PromoteGroupUsersRequest::mutable_group_id() {
  // @@protoc_insertion_point(field_mutable:nakama.api.PromoteGroupUsersRequest.group_id)
  return _internal_mutable_group_id();
}
inline const std::string& PromoteGroupUsersRequest::_internal_group_id() const {
  return group_id_.Get();
}
inline void PromoteGroupUsersRequest::_internal_set_group_id(const std::string& value) {
  
  group_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PromoteGroupUsersRequest::set_group_id(std::string&& value) {
  
  group_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.PromoteGroupUsersRequest.group_id)
}
inline void PromoteGroupUsersRequest::set_group_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  group_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.PromoteGroupUsersRequest.group_id)
}
inline void PromoteGroupUsersRequest::set_group_id(const char* value,
    size_t size) {
  
  group_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.PromoteGroupUsersRequest.group_id)
}
inline std::string* PromoteGroupUsersRequest::_internal_mutable_group_id() {
  
  return group_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PromoteGroupUsersRequest::release_group_id() {
  // @@protoc_insertion_point(field_release:nakama.api.PromoteGroupUsersRequest.group_id)
  return group_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PromoteGroupUsersRequest::set_allocated_group_id(std::string* group_id) {
  if (group_id != nullptr) {
    
  } else {
    
  }
  group_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), group_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.PromoteGroupUsersRequest.group_id)
}

// repeated string user_ids = 2;
inline int PromoteGroupUsersRequest::_internal_user_ids_size() const {
  return user_ids_.size();
}
inline int PromoteGroupUsersRequest::user_ids_size() const {
  return _internal_user_ids_size();
}
inline void PromoteGroupUsersRequest::clear_user_ids() {
  user_ids_.Clear();
}
inline std::string* PromoteGroupUsersRequest::add_user_ids() {
  // @@protoc_insertion_point(field_add_mutable:nakama.api.PromoteGroupUsersRequest.user_ids)
  return _internal_add_user_ids();
}
inline const std::string& PromoteGroupUsersRequest::_internal_user_ids(int index) const {
  return user_ids_.Get(index);
}
inline const std::string& PromoteGroupUsersRequest::user_ids(int index) const {
  // @@protoc_insertion_point(field_get:nakama.api.PromoteGroupUsersRequest.user_ids)
  return _internal_user_ids(index);
}
inline std::string* PromoteGroupUsersRequest::mutable_user_ids(int index) {
  // @@protoc_insertion_point(field_mutable:nakama.api.PromoteGroupUsersRequest.user_ids)
  return user_ids_.Mutable(index);
}
inline void PromoteGroupUsersRequest::set_user_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:nakama.api.PromoteGroupUsersRequest.user_ids)
  user_ids_.Mutable(index)->assign(value);
}
inline void PromoteGroupUsersRequest::set_user_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:nakama.api.PromoteGroupUsersRequest.user_ids)
  user_ids_.Mutable(index)->assign(std::move(value));
}
inline void PromoteGroupUsersRequest::set_user_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  user_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:nakama.api.PromoteGroupUsersRequest.user_ids)
}
inline void PromoteGroupUsersRequest::set_user_ids(int index, const char* value, size_t size) {
  user_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:nakama.api.PromoteGroupUsersRequest.user_ids)
}
inline std::string* PromoteGroupUsersRequest::_internal_add_user_ids() {
  return user_ids_.Add();
}
inline void PromoteGroupUsersRequest::add_user_ids(const std::string& value) {
  user_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:nakama.api.PromoteGroupUsersRequest.user_ids)
}
inline void PromoteGroupUsersRequest::add_user_ids(std::string&& value) {
  user_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:nakama.api.PromoteGroupUsersRequest.user_ids)
}
inline void PromoteGroupUsersRequest::add_user_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  user_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:nakama.api.PromoteGroupUsersRequest.user_ids)
}
inline void PromoteGroupUsersRequest::add_user_ids(const char* value, size_t size) {
  user_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:nakama.api.PromoteGroupUsersRequest.user_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PromoteGroupUsersRequest::user_ids() const {
  // @@protoc_insertion_point(field_list:nakama.api.PromoteGroupUsersRequest.user_ids)
  return user_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
PromoteGroupUsersRequest::mutable_user_ids() {
  // @@protoc_insertion_point(field_mutable_list:nakama.api.PromoteGroupUsersRequest.user_ids)
  return &user_ids_;
}

// -------------------------------------------------------------------

// DemoteGroupUsersRequest

// string group_id = 1;
inline void DemoteGroupUsersRequest::clear_group_id() {
  group_id_.ClearToEmpty();
}
inline const std::string& DemoteGroupUsersRequest::group_id() const {
  // @@protoc_insertion_point(field_get:nakama.api.DemoteGroupUsersRequest.group_id)
  return _internal_group_id();
}
inline void DemoteGroupUsersRequest::set_group_id(const std::string& value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:nakama.api.DemoteGroupUsersRequest.group_id)
}
inline std::string* DemoteGroupUsersRequest::mutable_group_id() {
  // @@protoc_insertion_point(field_mutable:nakama.api.DemoteGroupUsersRequest.group_id)
  return _internal_mutable_group_id();
}
inline const std::string& DemoteGroupUsersRequest::_internal_group_id() const {
  return group_id_.Get();
}
inline void DemoteGroupUsersRequest::_internal_set_group_id(const std::string& value) {
  
  group_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DemoteGroupUsersRequest::set_group_id(std::string&& value) {
  
  group_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.DemoteGroupUsersRequest.group_id)
}
inline void DemoteGroupUsersRequest::set_group_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  group_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.DemoteGroupUsersRequest.group_id)
}
inline void DemoteGroupUsersRequest::set_group_id(const char* value,
    size_t size) {
  
  group_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.DemoteGroupUsersRequest.group_id)
}
inline std::string* DemoteGroupUsersRequest::_internal_mutable_group_id() {
  
  return group_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DemoteGroupUsersRequest::release_group_id() {
  // @@protoc_insertion_point(field_release:nakama.api.DemoteGroupUsersRequest.group_id)
  return group_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DemoteGroupUsersRequest::set_allocated_group_id(std::string* group_id) {
  if (group_id != nullptr) {
    
  } else {
    
  }
  group_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), group_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.DemoteGroupUsersRequest.group_id)
}

// repeated string user_ids = 2;
inline int DemoteGroupUsersRequest::_internal_user_ids_size() const {
  return user_ids_.size();
}
inline int DemoteGroupUsersRequest::user_ids_size() const {
  return _internal_user_ids_size();
}
inline void DemoteGroupUsersRequest::clear_user_ids() {
  user_ids_.Clear();
}
inline std::string* DemoteGroupUsersRequest::add_user_ids() {
  // @@protoc_insertion_point(field_add_mutable:nakama.api.DemoteGroupUsersRequest.user_ids)
  return _internal_add_user_ids();
}
inline const std::string& DemoteGroupUsersRequest::_internal_user_ids(int index) const {
  return user_ids_.Get(index);
}
inline const std::string& DemoteGroupUsersRequest::user_ids(int index) const {
  // @@protoc_insertion_point(field_get:nakama.api.DemoteGroupUsersRequest.user_ids)
  return _internal_user_ids(index);
}
inline std::string* DemoteGroupUsersRequest::mutable_user_ids(int index) {
  // @@protoc_insertion_point(field_mutable:nakama.api.DemoteGroupUsersRequest.user_ids)
  return user_ids_.Mutable(index);
}
inline void DemoteGroupUsersRequest::set_user_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:nakama.api.DemoteGroupUsersRequest.user_ids)
  user_ids_.Mutable(index)->assign(value);
}
inline void DemoteGroupUsersRequest::set_user_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:nakama.api.DemoteGroupUsersRequest.user_ids)
  user_ids_.Mutable(index)->assign(std::move(value));
}
inline void DemoteGroupUsersRequest::set_user_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  user_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:nakama.api.DemoteGroupUsersRequest.user_ids)
}
inline void DemoteGroupUsersRequest::set_user_ids(int index, const char* value, size_t size) {
  user_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:nakama.api.DemoteGroupUsersRequest.user_ids)
}
inline std::string* DemoteGroupUsersRequest::_internal_add_user_ids() {
  return user_ids_.Add();
}
inline void DemoteGroupUsersRequest::add_user_ids(const std::string& value) {
  user_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:nakama.api.DemoteGroupUsersRequest.user_ids)
}
inline void DemoteGroupUsersRequest::add_user_ids(std::string&& value) {
  user_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:nakama.api.DemoteGroupUsersRequest.user_ids)
}
inline void DemoteGroupUsersRequest::add_user_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  user_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:nakama.api.DemoteGroupUsersRequest.user_ids)
}
inline void DemoteGroupUsersRequest::add_user_ids(const char* value, size_t size) {
  user_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:nakama.api.DemoteGroupUsersRequest.user_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
DemoteGroupUsersRequest::user_ids() const {
  // @@protoc_insertion_point(field_list:nakama.api.DemoteGroupUsersRequest.user_ids)
  return user_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
DemoteGroupUsersRequest::mutable_user_ids() {
  // @@protoc_insertion_point(field_mutable_list:nakama.api.DemoteGroupUsersRequest.user_ids)
  return &user_ids_;
}

// -------------------------------------------------------------------

// ReadStorageObjectId

// string collection = 1;
inline void ReadStorageObjectId::clear_collection() {
  collection_.ClearToEmpty();
}
inline const std::string& ReadStorageObjectId::collection() const {
  // @@protoc_insertion_point(field_get:nakama.api.ReadStorageObjectId.collection)
  return _internal_collection();
}
inline void ReadStorageObjectId::set_collection(const std::string& value) {
  _internal_set_collection(value);
  // @@protoc_insertion_point(field_set:nakama.api.ReadStorageObjectId.collection)
}
inline std::string* ReadStorageObjectId::mutable_collection() {
  // @@protoc_insertion_point(field_mutable:nakama.api.ReadStorageObjectId.collection)
  return _internal_mutable_collection();
}
inline const std::string& ReadStorageObjectId::_internal_collection() const {
  return collection_.Get();
}
inline void ReadStorageObjectId::_internal_set_collection(const std::string& value) {
  
  collection_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ReadStorageObjectId::set_collection(std::string&& value) {
  
  collection_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.ReadStorageObjectId.collection)
}
inline void ReadStorageObjectId::set_collection(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  collection_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.ReadStorageObjectId.collection)
}
inline void ReadStorageObjectId::set_collection(const char* value,
    size_t size) {
  
  collection_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.ReadStorageObjectId.collection)
}
inline std::string* ReadStorageObjectId::_internal_mutable_collection() {
  
  return collection_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ReadStorageObjectId::release_collection() {
  // @@protoc_insertion_point(field_release:nakama.api.ReadStorageObjectId.collection)
  return collection_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ReadStorageObjectId::set_allocated_collection(std::string* collection) {
  if (collection != nullptr) {
    
  } else {
    
  }
  collection_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), collection,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.ReadStorageObjectId.collection)
}

// string key = 2;
inline void ReadStorageObjectId::clear_key() {
  key_.ClearToEmpty();
}
inline const std::string& ReadStorageObjectId::key() const {
  // @@protoc_insertion_point(field_get:nakama.api.ReadStorageObjectId.key)
  return _internal_key();
}
inline void ReadStorageObjectId::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:nakama.api.ReadStorageObjectId.key)
}
inline std::string* ReadStorageObjectId::mutable_key() {
  // @@protoc_insertion_point(field_mutable:nakama.api.ReadStorageObjectId.key)
  return _internal_mutable_key();
}
inline const std::string& ReadStorageObjectId::_internal_key() const {
  return key_.Get();
}
inline void ReadStorageObjectId::_internal_set_key(const std::string& value) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ReadStorageObjectId::set_key(std::string&& value) {
  
  key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.ReadStorageObjectId.key)
}
inline void ReadStorageObjectId::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.ReadStorageObjectId.key)
}
inline void ReadStorageObjectId::set_key(const char* value,
    size_t size) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.ReadStorageObjectId.key)
}
inline std::string* ReadStorageObjectId::_internal_mutable_key() {
  
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ReadStorageObjectId::release_key() {
  // @@protoc_insertion_point(field_release:nakama.api.ReadStorageObjectId.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ReadStorageObjectId::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.ReadStorageObjectId.key)
}

// string user_id = 3;
inline void ReadStorageObjectId::clear_user_id() {
  user_id_.ClearToEmpty();
}
inline const std::string& ReadStorageObjectId::user_id() const {
  // @@protoc_insertion_point(field_get:nakama.api.ReadStorageObjectId.user_id)
  return _internal_user_id();
}
inline void ReadStorageObjectId::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:nakama.api.ReadStorageObjectId.user_id)
}
inline std::string* ReadStorageObjectId::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:nakama.api.ReadStorageObjectId.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& ReadStorageObjectId::_internal_user_id() const {
  return user_id_.Get();
}
inline void ReadStorageObjectId::_internal_set_user_id(const std::string& value) {
  
  user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ReadStorageObjectId::set_user_id(std::string&& value) {
  
  user_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.ReadStorageObjectId.user_id)
}
inline void ReadStorageObjectId::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.ReadStorageObjectId.user_id)
}
inline void ReadStorageObjectId::set_user_id(const char* value,
    size_t size) {
  
  user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.ReadStorageObjectId.user_id)
}
inline std::string* ReadStorageObjectId::_internal_mutable_user_id() {
  
  return user_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ReadStorageObjectId::release_user_id() {
  // @@protoc_insertion_point(field_release:nakama.api.ReadStorageObjectId.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ReadStorageObjectId::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.ReadStorageObjectId.user_id)
}

// -------------------------------------------------------------------

// ReadStorageObjectsRequest

// repeated .nakama.api.ReadStorageObjectId object_ids = 1;
inline int ReadStorageObjectsRequest::_internal_object_ids_size() const {
  return object_ids_.size();
}
inline int ReadStorageObjectsRequest::object_ids_size() const {
  return _internal_object_ids_size();
}
inline void ReadStorageObjectsRequest::clear_object_ids() {
  object_ids_.Clear();
}
inline ::nakama::api::ReadStorageObjectId* ReadStorageObjectsRequest::mutable_object_ids(int index) {
  // @@protoc_insertion_point(field_mutable:nakama.api.ReadStorageObjectsRequest.object_ids)
  return object_ids_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nakama::api::ReadStorageObjectId >*
ReadStorageObjectsRequest::mutable_object_ids() {
  // @@protoc_insertion_point(field_mutable_list:nakama.api.ReadStorageObjectsRequest.object_ids)
  return &object_ids_;
}
inline const ::nakama::api::ReadStorageObjectId& ReadStorageObjectsRequest::_internal_object_ids(int index) const {
  return object_ids_.Get(index);
}
inline const ::nakama::api::ReadStorageObjectId& ReadStorageObjectsRequest::object_ids(int index) const {
  // @@protoc_insertion_point(field_get:nakama.api.ReadStorageObjectsRequest.object_ids)
  return _internal_object_ids(index);
}
inline ::nakama::api::ReadStorageObjectId* ReadStorageObjectsRequest::_internal_add_object_ids() {
  return object_ids_.Add();
}
inline ::nakama::api::ReadStorageObjectId* ReadStorageObjectsRequest::add_object_ids() {
  // @@protoc_insertion_point(field_add:nakama.api.ReadStorageObjectsRequest.object_ids)
  return _internal_add_object_ids();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nakama::api::ReadStorageObjectId >&
ReadStorageObjectsRequest::object_ids() const {
  // @@protoc_insertion_point(field_list:nakama.api.ReadStorageObjectsRequest.object_ids)
  return object_ids_;
}

// -------------------------------------------------------------------

// Rpc

// string id = 1;
inline void Rpc::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& Rpc::id() const {
  // @@protoc_insertion_point(field_get:nakama.api.Rpc.id)
  return _internal_id();
}
inline void Rpc::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:nakama.api.Rpc.id)
}
inline std::string* Rpc::mutable_id() {
  // @@protoc_insertion_point(field_mutable:nakama.api.Rpc.id)
  return _internal_mutable_id();
}
inline const std::string& Rpc::_internal_id() const {
  return id_.Get();
}
inline void Rpc::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Rpc::set_id(std::string&& value) {
  
  id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.Rpc.id)
}
inline void Rpc::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.Rpc.id)
}
inline void Rpc::set_id(const char* value,
    size_t size) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.Rpc.id)
}
inline std::string* Rpc::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Rpc::release_id() {
  // @@protoc_insertion_point(field_release:nakama.api.Rpc.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Rpc::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.Rpc.id)
}

// string payload = 2;
inline void Rpc::clear_payload() {
  payload_.ClearToEmpty();
}
inline const std::string& Rpc::payload() const {
  // @@protoc_insertion_point(field_get:nakama.api.Rpc.payload)
  return _internal_payload();
}
inline void Rpc::set_payload(const std::string& value) {
  _internal_set_payload(value);
  // @@protoc_insertion_point(field_set:nakama.api.Rpc.payload)
}
inline std::string* Rpc::mutable_payload() {
  // @@protoc_insertion_point(field_mutable:nakama.api.Rpc.payload)
  return _internal_mutable_payload();
}
inline const std::string& Rpc::_internal_payload() const {
  return payload_.Get();
}
inline void Rpc::_internal_set_payload(const std::string& value) {
  
  payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Rpc::set_payload(std::string&& value) {
  
  payload_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.Rpc.payload)
}
inline void Rpc::set_payload(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.Rpc.payload)
}
inline void Rpc::set_payload(const char* value,
    size_t size) {
  
  payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.Rpc.payload)
}
inline std::string* Rpc::_internal_mutable_payload() {
  
  return payload_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Rpc::release_payload() {
  // @@protoc_insertion_point(field_release:nakama.api.Rpc.payload)
  return payload_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Rpc::set_allocated_payload(std::string* payload) {
  if (payload != nullptr) {
    
  } else {
    
  }
  payload_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payload,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.Rpc.payload)
}

// string http_key = 3;
inline void Rpc::clear_http_key() {
  http_key_.ClearToEmpty();
}
inline const std::string& Rpc::http_key() const {
  // @@protoc_insertion_point(field_get:nakama.api.Rpc.http_key)
  return _internal_http_key();
}
inline void Rpc::set_http_key(const std::string& value) {
  _internal_set_http_key(value);
  // @@protoc_insertion_point(field_set:nakama.api.Rpc.http_key)
}
inline std::string* Rpc::mutable_http_key() {
  // @@protoc_insertion_point(field_mutable:nakama.api.Rpc.http_key)
  return _internal_mutable_http_key();
}
inline const std::string& Rpc::_internal_http_key() const {
  return http_key_.Get();
}
inline void Rpc::_internal_set_http_key(const std::string& value) {
  
  http_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Rpc::set_http_key(std::string&& value) {
  
  http_key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.Rpc.http_key)
}
inline void Rpc::set_http_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  http_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.Rpc.http_key)
}
inline void Rpc::set_http_key(const char* value,
    size_t size) {
  
  http_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.Rpc.http_key)
}
inline std::string* Rpc::_internal_mutable_http_key() {
  
  return http_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Rpc::release_http_key() {
  // @@protoc_insertion_point(field_release:nakama.api.Rpc.http_key)
  return http_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Rpc::set_allocated_http_key(std::string* http_key) {
  if (http_key != nullptr) {
    
  } else {
    
  }
  http_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), http_key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.Rpc.http_key)
}

// -------------------------------------------------------------------

// Session

// bool created = 1;
inline void Session::clear_created() {
  created_ = false;
}
inline bool Session::_internal_created() const {
  return created_;
}
inline bool Session::created() const {
  // @@protoc_insertion_point(field_get:nakama.api.Session.created)
  return _internal_created();
}
inline void Session::_internal_set_created(bool value) {
  
  created_ = value;
}
inline void Session::set_created(bool value) {
  _internal_set_created(value);
  // @@protoc_insertion_point(field_set:nakama.api.Session.created)
}

// string token = 2;
inline void Session::clear_token() {
  token_.ClearToEmpty();
}
inline const std::string& Session::token() const {
  // @@protoc_insertion_point(field_get:nakama.api.Session.token)
  return _internal_token();
}
inline void Session::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:nakama.api.Session.token)
}
inline std::string* Session::mutable_token() {
  // @@protoc_insertion_point(field_mutable:nakama.api.Session.token)
  return _internal_mutable_token();
}
inline const std::string& Session::_internal_token() const {
  return token_.Get();
}
inline void Session::_internal_set_token(const std::string& value) {
  
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Session::set_token(std::string&& value) {
  
  token_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.Session.token)
}
inline void Session::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.Session.token)
}
inline void Session::set_token(const char* value,
    size_t size) {
  
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.Session.token)
}
inline std::string* Session::_internal_mutable_token() {
  
  return token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Session::release_token() {
  // @@protoc_insertion_point(field_release:nakama.api.Session.token)
  return token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Session::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.Session.token)
}

// string refresh_token = 3;
inline void Session::clear_refresh_token() {
  refresh_token_.ClearToEmpty();
}
inline const std::string& Session::refresh_token() const {
  // @@protoc_insertion_point(field_get:nakama.api.Session.refresh_token)
  return _internal_refresh_token();
}
inline void Session::set_refresh_token(const std::string& value) {
  _internal_set_refresh_token(value);
  // @@protoc_insertion_point(field_set:nakama.api.Session.refresh_token)
}
inline std::string* Session::mutable_refresh_token() {
  // @@protoc_insertion_point(field_mutable:nakama.api.Session.refresh_token)
  return _internal_mutable_refresh_token();
}
inline const std::string& Session::_internal_refresh_token() const {
  return refresh_token_.Get();
}
inline void Session::_internal_set_refresh_token(const std::string& value) {
  
  refresh_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Session::set_refresh_token(std::string&& value) {
  
  refresh_token_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.Session.refresh_token)
}
inline void Session::set_refresh_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  refresh_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.Session.refresh_token)
}
inline void Session::set_refresh_token(const char* value,
    size_t size) {
  
  refresh_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.Session.refresh_token)
}
inline std::string* Session::_internal_mutable_refresh_token() {
  
  return refresh_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Session::release_refresh_token() {
  // @@protoc_insertion_point(field_release:nakama.api.Session.refresh_token)
  return refresh_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Session::set_allocated_refresh_token(std::string* refresh_token) {
  if (refresh_token != nullptr) {
    
  } else {
    
  }
  refresh_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), refresh_token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.Session.refresh_token)
}

// -------------------------------------------------------------------

// StorageObject

// string collection = 1;
inline void StorageObject::clear_collection() {
  collection_.ClearToEmpty();
}
inline const std::string& StorageObject::collection() const {
  // @@protoc_insertion_point(field_get:nakama.api.StorageObject.collection)
  return _internal_collection();
}
inline void StorageObject::set_collection(const std::string& value) {
  _internal_set_collection(value);
  // @@protoc_insertion_point(field_set:nakama.api.StorageObject.collection)
}
inline std::string* StorageObject::mutable_collection() {
  // @@protoc_insertion_point(field_mutable:nakama.api.StorageObject.collection)
  return _internal_mutable_collection();
}
inline const std::string& StorageObject::_internal_collection() const {
  return collection_.Get();
}
inline void StorageObject::_internal_set_collection(const std::string& value) {
  
  collection_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StorageObject::set_collection(std::string&& value) {
  
  collection_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.StorageObject.collection)
}
inline void StorageObject::set_collection(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  collection_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.StorageObject.collection)
}
inline void StorageObject::set_collection(const char* value,
    size_t size) {
  
  collection_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.StorageObject.collection)
}
inline std::string* StorageObject::_internal_mutable_collection() {
  
  return collection_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StorageObject::release_collection() {
  // @@protoc_insertion_point(field_release:nakama.api.StorageObject.collection)
  return collection_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StorageObject::set_allocated_collection(std::string* collection) {
  if (collection != nullptr) {
    
  } else {
    
  }
  collection_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), collection,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.StorageObject.collection)
}

// string key = 2;
inline void StorageObject::clear_key() {
  key_.ClearToEmpty();
}
inline const std::string& StorageObject::key() const {
  // @@protoc_insertion_point(field_get:nakama.api.StorageObject.key)
  return _internal_key();
}
inline void StorageObject::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:nakama.api.StorageObject.key)
}
inline std::string* StorageObject::mutable_key() {
  // @@protoc_insertion_point(field_mutable:nakama.api.StorageObject.key)
  return _internal_mutable_key();
}
inline const std::string& StorageObject::_internal_key() const {
  return key_.Get();
}
inline void StorageObject::_internal_set_key(const std::string& value) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StorageObject::set_key(std::string&& value) {
  
  key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.StorageObject.key)
}
inline void StorageObject::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.StorageObject.key)
}
inline void StorageObject::set_key(const char* value,
    size_t size) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.StorageObject.key)
}
inline std::string* StorageObject::_internal_mutable_key() {
  
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StorageObject::release_key() {
  // @@protoc_insertion_point(field_release:nakama.api.StorageObject.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StorageObject::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.StorageObject.key)
}

// string user_id = 3;
inline void StorageObject::clear_user_id() {
  user_id_.ClearToEmpty();
}
inline const std::string& StorageObject::user_id() const {
  // @@protoc_insertion_point(field_get:nakama.api.StorageObject.user_id)
  return _internal_user_id();
}
inline void StorageObject::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:nakama.api.StorageObject.user_id)
}
inline std::string* StorageObject::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:nakama.api.StorageObject.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& StorageObject::_internal_user_id() const {
  return user_id_.Get();
}
inline void StorageObject::_internal_set_user_id(const std::string& value) {
  
  user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StorageObject::set_user_id(std::string&& value) {
  
  user_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.StorageObject.user_id)
}
inline void StorageObject::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.StorageObject.user_id)
}
inline void StorageObject::set_user_id(const char* value,
    size_t size) {
  
  user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.StorageObject.user_id)
}
inline std::string* StorageObject::_internal_mutable_user_id() {
  
  return user_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StorageObject::release_user_id() {
  // @@protoc_insertion_point(field_release:nakama.api.StorageObject.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StorageObject::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.StorageObject.user_id)
}

// string value = 4;
inline void StorageObject::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& StorageObject::value() const {
  // @@protoc_insertion_point(field_get:nakama.api.StorageObject.value)
  return _internal_value();
}
inline void StorageObject::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:nakama.api.StorageObject.value)
}
inline std::string* StorageObject::mutable_value() {
  // @@protoc_insertion_point(field_mutable:nakama.api.StorageObject.value)
  return _internal_mutable_value();
}
inline const std::string& StorageObject::_internal_value() const {
  return value_.Get();
}
inline void StorageObject::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StorageObject::set_value(std::string&& value) {
  
  value_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.StorageObject.value)
}
inline void StorageObject::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.StorageObject.value)
}
inline void StorageObject::set_value(const char* value,
    size_t size) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.StorageObject.value)
}
inline std::string* StorageObject::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StorageObject::release_value() {
  // @@protoc_insertion_point(field_release:nakama.api.StorageObject.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StorageObject::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.StorageObject.value)
}

// string version = 5;
inline void StorageObject::clear_version() {
  version_.ClearToEmpty();
}
inline const std::string& StorageObject::version() const {
  // @@protoc_insertion_point(field_get:nakama.api.StorageObject.version)
  return _internal_version();
}
inline void StorageObject::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:nakama.api.StorageObject.version)
}
inline std::string* StorageObject::mutable_version() {
  // @@protoc_insertion_point(field_mutable:nakama.api.StorageObject.version)
  return _internal_mutable_version();
}
inline const std::string& StorageObject::_internal_version() const {
  return version_.Get();
}
inline void StorageObject::_internal_set_version(const std::string& value) {
  
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StorageObject::set_version(std::string&& value) {
  
  version_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.StorageObject.version)
}
inline void StorageObject::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.StorageObject.version)
}
inline void StorageObject::set_version(const char* value,
    size_t size) {
  
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.StorageObject.version)
}
inline std::string* StorageObject::_internal_mutable_version() {
  
  return version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StorageObject::release_version() {
  // @@protoc_insertion_point(field_release:nakama.api.StorageObject.version)
  return version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StorageObject::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.StorageObject.version)
}

// int32 permission_read = 6;
inline void StorageObject::clear_permission_read() {
  permission_read_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StorageObject::_internal_permission_read() const {
  return permission_read_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StorageObject::permission_read() const {
  // @@protoc_insertion_point(field_get:nakama.api.StorageObject.permission_read)
  return _internal_permission_read();
}
inline void StorageObject::_internal_set_permission_read(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  permission_read_ = value;
}
inline void StorageObject::set_permission_read(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_permission_read(value);
  // @@protoc_insertion_point(field_set:nakama.api.StorageObject.permission_read)
}

// int32 permission_write = 7;
inline void StorageObject::clear_permission_write() {
  permission_write_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StorageObject::_internal_permission_write() const {
  return permission_write_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StorageObject::permission_write() const {
  // @@protoc_insertion_point(field_get:nakama.api.StorageObject.permission_write)
  return _internal_permission_write();
}
inline void StorageObject::_internal_set_permission_write(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  permission_write_ = value;
}
inline void StorageObject::set_permission_write(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_permission_write(value);
  // @@protoc_insertion_point(field_set:nakama.api.StorageObject.permission_write)
}

// .google.protobuf.Timestamp create_time = 8;
inline bool StorageObject::_internal_has_create_time() const {
  return this != internal_default_instance() && create_time_ != nullptr;
}
inline bool StorageObject::has_create_time() const {
  return _internal_has_create_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& StorageObject::_internal_create_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = create_time_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& StorageObject::create_time() const {
  // @@protoc_insertion_point(field_get:nakama.api.StorageObject.create_time)
  return _internal_create_time();
}
inline void StorageObject::unsafe_arena_set_allocated_create_time(
    PROTOBUF_NAMESPACE_ID::Timestamp* create_time) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(create_time_);
  }
  create_time_ = create_time;
  if (create_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nakama.api.StorageObject.create_time)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* StorageObject::release_create_time() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = create_time_;
  create_time_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* StorageObject::unsafe_arena_release_create_time() {
  // @@protoc_insertion_point(field_release:nakama.api.StorageObject.create_time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = create_time_;
  create_time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* StorageObject::_internal_mutable_create_time() {
  
  if (create_time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    create_time_ = p;
  }
  return create_time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* StorageObject::mutable_create_time() {
  // @@protoc_insertion_point(field_mutable:nakama.api.StorageObject.create_time)
  return _internal_mutable_create_time();
}
inline void StorageObject::set_allocated_create_time(PROTOBUF_NAMESPACE_ID::Timestamp* create_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(create_time_);
  }
  if (create_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(create_time)->GetArena();
    if (message_arena != submessage_arena) {
      create_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, create_time, submessage_arena);
    }
    
  } else {
    
  }
  create_time_ = create_time;
  // @@protoc_insertion_point(field_set_allocated:nakama.api.StorageObject.create_time)
}

// .google.protobuf.Timestamp update_time = 9;
inline bool StorageObject::_internal_has_update_time() const {
  return this != internal_default_instance() && update_time_ != nullptr;
}
inline bool StorageObject::has_update_time() const {
  return _internal_has_update_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& StorageObject::_internal_update_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = update_time_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& StorageObject::update_time() const {
  // @@protoc_insertion_point(field_get:nakama.api.StorageObject.update_time)
  return _internal_update_time();
}
inline void StorageObject::unsafe_arena_set_allocated_update_time(
    PROTOBUF_NAMESPACE_ID::Timestamp* update_time) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_time_);
  }
  update_time_ = update_time;
  if (update_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nakama.api.StorageObject.update_time)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* StorageObject::release_update_time() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = update_time_;
  update_time_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* StorageObject::unsafe_arena_release_update_time() {
  // @@protoc_insertion_point(field_release:nakama.api.StorageObject.update_time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = update_time_;
  update_time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* StorageObject::_internal_mutable_update_time() {
  
  if (update_time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    update_time_ = p;
  }
  return update_time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* StorageObject::mutable_update_time() {
  // @@protoc_insertion_point(field_mutable:nakama.api.StorageObject.update_time)
  return _internal_mutable_update_time();
}
inline void StorageObject::set_allocated_update_time(PROTOBUF_NAMESPACE_ID::Timestamp* update_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_time_);
  }
  if (update_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_time)->GetArena();
    if (message_arena != submessage_arena) {
      update_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_time, submessage_arena);
    }
    
  } else {
    
  }
  update_time_ = update_time;
  // @@protoc_insertion_point(field_set_allocated:nakama.api.StorageObject.update_time)
}

// -------------------------------------------------------------------

// StorageObjectAck

// string collection = 1;
inline void StorageObjectAck::clear_collection() {
  collection_.ClearToEmpty();
}
inline const std::string& StorageObjectAck::collection() const {
  // @@protoc_insertion_point(field_get:nakama.api.StorageObjectAck.collection)
  return _internal_collection();
}
inline void StorageObjectAck::set_collection(const std::string& value) {
  _internal_set_collection(value);
  // @@protoc_insertion_point(field_set:nakama.api.StorageObjectAck.collection)
}
inline std::string* StorageObjectAck::mutable_collection() {
  // @@protoc_insertion_point(field_mutable:nakama.api.StorageObjectAck.collection)
  return _internal_mutable_collection();
}
inline const std::string& StorageObjectAck::_internal_collection() const {
  return collection_.Get();
}
inline void StorageObjectAck::_internal_set_collection(const std::string& value) {
  
  collection_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StorageObjectAck::set_collection(std::string&& value) {
  
  collection_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.StorageObjectAck.collection)
}
inline void StorageObjectAck::set_collection(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  collection_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.StorageObjectAck.collection)
}
inline void StorageObjectAck::set_collection(const char* value,
    size_t size) {
  
  collection_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.StorageObjectAck.collection)
}
inline std::string* StorageObjectAck::_internal_mutable_collection() {
  
  return collection_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StorageObjectAck::release_collection() {
  // @@protoc_insertion_point(field_release:nakama.api.StorageObjectAck.collection)
  return collection_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StorageObjectAck::set_allocated_collection(std::string* collection) {
  if (collection != nullptr) {
    
  } else {
    
  }
  collection_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), collection,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.StorageObjectAck.collection)
}

// string key = 2;
inline void StorageObjectAck::clear_key() {
  key_.ClearToEmpty();
}
inline const std::string& StorageObjectAck::key() const {
  // @@protoc_insertion_point(field_get:nakama.api.StorageObjectAck.key)
  return _internal_key();
}
inline void StorageObjectAck::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:nakama.api.StorageObjectAck.key)
}
inline std::string* StorageObjectAck::mutable_key() {
  // @@protoc_insertion_point(field_mutable:nakama.api.StorageObjectAck.key)
  return _internal_mutable_key();
}
inline const std::string& StorageObjectAck::_internal_key() const {
  return key_.Get();
}
inline void StorageObjectAck::_internal_set_key(const std::string& value) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StorageObjectAck::set_key(std::string&& value) {
  
  key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.StorageObjectAck.key)
}
inline void StorageObjectAck::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.StorageObjectAck.key)
}
inline void StorageObjectAck::set_key(const char* value,
    size_t size) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.StorageObjectAck.key)
}
inline std::string* StorageObjectAck::_internal_mutable_key() {
  
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StorageObjectAck::release_key() {
  // @@protoc_insertion_point(field_release:nakama.api.StorageObjectAck.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StorageObjectAck::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.StorageObjectAck.key)
}

// string version = 3;
inline void StorageObjectAck::clear_version() {
  version_.ClearToEmpty();
}
inline const std::string& StorageObjectAck::version() const {
  // @@protoc_insertion_point(field_get:nakama.api.StorageObjectAck.version)
  return _internal_version();
}
inline void StorageObjectAck::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:nakama.api.StorageObjectAck.version)
}
inline std::string* StorageObjectAck::mutable_version() {
  // @@protoc_insertion_point(field_mutable:nakama.api.StorageObjectAck.version)
  return _internal_mutable_version();
}
inline const std::string& StorageObjectAck::_internal_version() const {
  return version_.Get();
}
inline void StorageObjectAck::_internal_set_version(const std::string& value) {
  
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StorageObjectAck::set_version(std::string&& value) {
  
  version_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.StorageObjectAck.version)
}
inline void StorageObjectAck::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.StorageObjectAck.version)
}
inline void StorageObjectAck::set_version(const char* value,
    size_t size) {
  
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.StorageObjectAck.version)
}
inline std::string* StorageObjectAck::_internal_mutable_version() {
  
  return version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StorageObjectAck::release_version() {
  // @@protoc_insertion_point(field_release:nakama.api.StorageObjectAck.version)
  return version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StorageObjectAck::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.StorageObjectAck.version)
}

// string user_id = 4;
inline void StorageObjectAck::clear_user_id() {
  user_id_.ClearToEmpty();
}
inline const std::string& StorageObjectAck::user_id() const {
  // @@protoc_insertion_point(field_get:nakama.api.StorageObjectAck.user_id)
  return _internal_user_id();
}
inline void StorageObjectAck::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:nakama.api.StorageObjectAck.user_id)
}
inline std::string* StorageObjectAck::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:nakama.api.StorageObjectAck.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& StorageObjectAck::_internal_user_id() const {
  return user_id_.Get();
}
inline void StorageObjectAck::_internal_set_user_id(const std::string& value) {
  
  user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StorageObjectAck::set_user_id(std::string&& value) {
  
  user_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.StorageObjectAck.user_id)
}
inline void StorageObjectAck::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.StorageObjectAck.user_id)
}
inline void StorageObjectAck::set_user_id(const char* value,
    size_t size) {
  
  user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.StorageObjectAck.user_id)
}
inline std::string* StorageObjectAck::_internal_mutable_user_id() {
  
  return user_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StorageObjectAck::release_user_id() {
  // @@protoc_insertion_point(field_release:nakama.api.StorageObjectAck.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StorageObjectAck::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.StorageObjectAck.user_id)
}

// -------------------------------------------------------------------

// StorageObjectAcks

// repeated .nakama.api.StorageObjectAck acks = 1;
inline int StorageObjectAcks::_internal_acks_size() const {
  return acks_.size();
}
inline int StorageObjectAcks::acks_size() const {
  return _internal_acks_size();
}
inline void StorageObjectAcks::clear_acks() {
  acks_.Clear();
}
inline ::nakama::api::StorageObjectAck* StorageObjectAcks::mutable_acks(int index) {
  // @@protoc_insertion_point(field_mutable:nakama.api.StorageObjectAcks.acks)
  return acks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nakama::api::StorageObjectAck >*
StorageObjectAcks::mutable_acks() {
  // @@protoc_insertion_point(field_mutable_list:nakama.api.StorageObjectAcks.acks)
  return &acks_;
}
inline const ::nakama::api::StorageObjectAck& StorageObjectAcks::_internal_acks(int index) const {
  return acks_.Get(index);
}
inline const ::nakama::api::StorageObjectAck& StorageObjectAcks::acks(int index) const {
  // @@protoc_insertion_point(field_get:nakama.api.StorageObjectAcks.acks)
  return _internal_acks(index);
}
inline ::nakama::api::StorageObjectAck* StorageObjectAcks::_internal_add_acks() {
  return acks_.Add();
}
inline ::nakama::api::StorageObjectAck* StorageObjectAcks::add_acks() {
  // @@protoc_insertion_point(field_add:nakama.api.StorageObjectAcks.acks)
  return _internal_add_acks();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nakama::api::StorageObjectAck >&
StorageObjectAcks::acks() const {
  // @@protoc_insertion_point(field_list:nakama.api.StorageObjectAcks.acks)
  return acks_;
}

// -------------------------------------------------------------------

// StorageObjects

// repeated .nakama.api.StorageObject objects = 1;
inline int StorageObjects::_internal_objects_size() const {
  return objects_.size();
}
inline int StorageObjects::objects_size() const {
  return _internal_objects_size();
}
inline void StorageObjects::clear_objects() {
  objects_.Clear();
}
inline ::nakama::api::StorageObject* StorageObjects::mutable_objects(int index) {
  // @@protoc_insertion_point(field_mutable:nakama.api.StorageObjects.objects)
  return objects_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nakama::api::StorageObject >*
StorageObjects::mutable_objects() {
  // @@protoc_insertion_point(field_mutable_list:nakama.api.StorageObjects.objects)
  return &objects_;
}
inline const ::nakama::api::StorageObject& StorageObjects::_internal_objects(int index) const {
  return objects_.Get(index);
}
inline const ::nakama::api::StorageObject& StorageObjects::objects(int index) const {
  // @@protoc_insertion_point(field_get:nakama.api.StorageObjects.objects)
  return _internal_objects(index);
}
inline ::nakama::api::StorageObject* StorageObjects::_internal_add_objects() {
  return objects_.Add();
}
inline ::nakama::api::StorageObject* StorageObjects::add_objects() {
  // @@protoc_insertion_point(field_add:nakama.api.StorageObjects.objects)
  return _internal_add_objects();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nakama::api::StorageObject >&
StorageObjects::objects() const {
  // @@protoc_insertion_point(field_list:nakama.api.StorageObjects.objects)
  return objects_;
}

// -------------------------------------------------------------------

// StorageObjectList

// repeated .nakama.api.StorageObject objects = 1;
inline int StorageObjectList::_internal_objects_size() const {
  return objects_.size();
}
inline int StorageObjectList::objects_size() const {
  return _internal_objects_size();
}
inline void StorageObjectList::clear_objects() {
  objects_.Clear();
}
inline ::nakama::api::StorageObject* StorageObjectList::mutable_objects(int index) {
  // @@protoc_insertion_point(field_mutable:nakama.api.StorageObjectList.objects)
  return objects_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nakama::api::StorageObject >*
StorageObjectList::mutable_objects() {
  // @@protoc_insertion_point(field_mutable_list:nakama.api.StorageObjectList.objects)
  return &objects_;
}
inline const ::nakama::api::StorageObject& StorageObjectList::_internal_objects(int index) const {
  return objects_.Get(index);
}
inline const ::nakama::api::StorageObject& StorageObjectList::objects(int index) const {
  // @@protoc_insertion_point(field_get:nakama.api.StorageObjectList.objects)
  return _internal_objects(index);
}
inline ::nakama::api::StorageObject* StorageObjectList::_internal_add_objects() {
  return objects_.Add();
}
inline ::nakama::api::StorageObject* StorageObjectList::add_objects() {
  // @@protoc_insertion_point(field_add:nakama.api.StorageObjectList.objects)
  return _internal_add_objects();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nakama::api::StorageObject >&
StorageObjectList::objects() const {
  // @@protoc_insertion_point(field_list:nakama.api.StorageObjectList.objects)
  return objects_;
}

// string cursor = 2;
inline void StorageObjectList::clear_cursor() {
  cursor_.ClearToEmpty();
}
inline const std::string& StorageObjectList::cursor() const {
  // @@protoc_insertion_point(field_get:nakama.api.StorageObjectList.cursor)
  return _internal_cursor();
}
inline void StorageObjectList::set_cursor(const std::string& value) {
  _internal_set_cursor(value);
  // @@protoc_insertion_point(field_set:nakama.api.StorageObjectList.cursor)
}
inline std::string* StorageObjectList::mutable_cursor() {
  // @@protoc_insertion_point(field_mutable:nakama.api.StorageObjectList.cursor)
  return _internal_mutable_cursor();
}
inline const std::string& StorageObjectList::_internal_cursor() const {
  return cursor_.Get();
}
inline void StorageObjectList::_internal_set_cursor(const std::string& value) {
  
  cursor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StorageObjectList::set_cursor(std::string&& value) {
  
  cursor_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.StorageObjectList.cursor)
}
inline void StorageObjectList::set_cursor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cursor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.StorageObjectList.cursor)
}
inline void StorageObjectList::set_cursor(const char* value,
    size_t size) {
  
  cursor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.StorageObjectList.cursor)
}
inline std::string* StorageObjectList::_internal_mutable_cursor() {
  
  return cursor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StorageObjectList::release_cursor() {
  // @@protoc_insertion_point(field_release:nakama.api.StorageObjectList.cursor)
  return cursor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StorageObjectList::set_allocated_cursor(std::string* cursor) {
  if (cursor != nullptr) {
    
  } else {
    
  }
  cursor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cursor,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.StorageObjectList.cursor)
}

// -------------------------------------------------------------------

// Tournament

// string id = 1;
inline void Tournament::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& Tournament::id() const {
  // @@protoc_insertion_point(field_get:nakama.api.Tournament.id)
  return _internal_id();
}
inline void Tournament::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:nakama.api.Tournament.id)
}
inline std::string* Tournament::mutable_id() {
  // @@protoc_insertion_point(field_mutable:nakama.api.Tournament.id)
  return _internal_mutable_id();
}
inline const std::string& Tournament::_internal_id() const {
  return id_.Get();
}
inline void Tournament::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Tournament::set_id(std::string&& value) {
  
  id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.Tournament.id)
}
inline void Tournament::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.Tournament.id)
}
inline void Tournament::set_id(const char* value,
    size_t size) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.Tournament.id)
}
inline std::string* Tournament::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Tournament::release_id() {
  // @@protoc_insertion_point(field_release:nakama.api.Tournament.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Tournament::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.Tournament.id)
}

// string title = 2;
inline void Tournament::clear_title() {
  title_.ClearToEmpty();
}
inline const std::string& Tournament::title() const {
  // @@protoc_insertion_point(field_get:nakama.api.Tournament.title)
  return _internal_title();
}
inline void Tournament::set_title(const std::string& value) {
  _internal_set_title(value);
  // @@protoc_insertion_point(field_set:nakama.api.Tournament.title)
}
inline std::string* Tournament::mutable_title() {
  // @@protoc_insertion_point(field_mutable:nakama.api.Tournament.title)
  return _internal_mutable_title();
}
inline const std::string& Tournament::_internal_title() const {
  return title_.Get();
}
inline void Tournament::_internal_set_title(const std::string& value) {
  
  title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Tournament::set_title(std::string&& value) {
  
  title_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.Tournament.title)
}
inline void Tournament::set_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.Tournament.title)
}
inline void Tournament::set_title(const char* value,
    size_t size) {
  
  title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.Tournament.title)
}
inline std::string* Tournament::_internal_mutable_title() {
  
  return title_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Tournament::release_title() {
  // @@protoc_insertion_point(field_release:nakama.api.Tournament.title)
  return title_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Tournament::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  title_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), title,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.Tournament.title)
}

// string description = 3;
inline void Tournament::clear_description() {
  description_.ClearToEmpty();
}
inline const std::string& Tournament::description() const {
  // @@protoc_insertion_point(field_get:nakama.api.Tournament.description)
  return _internal_description();
}
inline void Tournament::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:nakama.api.Tournament.description)
}
inline std::string* Tournament::mutable_description() {
  // @@protoc_insertion_point(field_mutable:nakama.api.Tournament.description)
  return _internal_mutable_description();
}
inline const std::string& Tournament::_internal_description() const {
  return description_.Get();
}
inline void Tournament::_internal_set_description(const std::string& value) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Tournament::set_description(std::string&& value) {
  
  description_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.Tournament.description)
}
inline void Tournament::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.Tournament.description)
}
inline void Tournament::set_description(const char* value,
    size_t size) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.Tournament.description)
}
inline std::string* Tournament::_internal_mutable_description() {
  
  return description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Tournament::release_description() {
  // @@protoc_insertion_point(field_release:nakama.api.Tournament.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Tournament::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.Tournament.description)
}

// uint32 category = 4;
inline void Tournament::clear_category() {
  category_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Tournament::_internal_category() const {
  return category_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Tournament::category() const {
  // @@protoc_insertion_point(field_get:nakama.api.Tournament.category)
  return _internal_category();
}
inline void Tournament::_internal_set_category(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  category_ = value;
}
inline void Tournament::set_category(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_category(value);
  // @@protoc_insertion_point(field_set:nakama.api.Tournament.category)
}

// uint32 sort_order = 5;
inline void Tournament::clear_sort_order() {
  sort_order_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Tournament::_internal_sort_order() const {
  return sort_order_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Tournament::sort_order() const {
  // @@protoc_insertion_point(field_get:nakama.api.Tournament.sort_order)
  return _internal_sort_order();
}
inline void Tournament::_internal_set_sort_order(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  sort_order_ = value;
}
inline void Tournament::set_sort_order(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sort_order(value);
  // @@protoc_insertion_point(field_set:nakama.api.Tournament.sort_order)
}

// uint32 size = 6;
inline void Tournament::clear_size() {
  size_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Tournament::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Tournament::size() const {
  // @@protoc_insertion_point(field_get:nakama.api.Tournament.size)
  return _internal_size();
}
inline void Tournament::_internal_set_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  size_ = value;
}
inline void Tournament::set_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:nakama.api.Tournament.size)
}

// uint32 max_size = 7;
inline void Tournament::clear_max_size() {
  max_size_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Tournament::_internal_max_size() const {
  return max_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Tournament::max_size() const {
  // @@protoc_insertion_point(field_get:nakama.api.Tournament.max_size)
  return _internal_max_size();
}
inline void Tournament::_internal_set_max_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  max_size_ = value;
}
inline void Tournament::set_max_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_size(value);
  // @@protoc_insertion_point(field_set:nakama.api.Tournament.max_size)
}

// uint32 max_num_score = 8;
inline void Tournament::clear_max_num_score() {
  max_num_score_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Tournament::_internal_max_num_score() const {
  return max_num_score_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Tournament::max_num_score() const {
  // @@protoc_insertion_point(field_get:nakama.api.Tournament.max_num_score)
  return _internal_max_num_score();
}
inline void Tournament::_internal_set_max_num_score(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  max_num_score_ = value;
}
inline void Tournament::set_max_num_score(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_num_score(value);
  // @@protoc_insertion_point(field_set:nakama.api.Tournament.max_num_score)
}

// bool can_enter = 9;
inline void Tournament::clear_can_enter() {
  can_enter_ = false;
}
inline bool Tournament::_internal_can_enter() const {
  return can_enter_;
}
inline bool Tournament::can_enter() const {
  // @@protoc_insertion_point(field_get:nakama.api.Tournament.can_enter)
  return _internal_can_enter();
}
inline void Tournament::_internal_set_can_enter(bool value) {
  
  can_enter_ = value;
}
inline void Tournament::set_can_enter(bool value) {
  _internal_set_can_enter(value);
  // @@protoc_insertion_point(field_set:nakama.api.Tournament.can_enter)
}

// uint32 end_active = 10;
inline void Tournament::clear_end_active() {
  end_active_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Tournament::_internal_end_active() const {
  return end_active_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Tournament::end_active() const {
  // @@protoc_insertion_point(field_get:nakama.api.Tournament.end_active)
  return _internal_end_active();
}
inline void Tournament::_internal_set_end_active(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  end_active_ = value;
}
inline void Tournament::set_end_active(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_end_active(value);
  // @@protoc_insertion_point(field_set:nakama.api.Tournament.end_active)
}

// uint32 next_reset = 11;
inline void Tournament::clear_next_reset() {
  next_reset_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Tournament::_internal_next_reset() const {
  return next_reset_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Tournament::next_reset() const {
  // @@protoc_insertion_point(field_get:nakama.api.Tournament.next_reset)
  return _internal_next_reset();
}
inline void Tournament::_internal_set_next_reset(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  next_reset_ = value;
}
inline void Tournament::set_next_reset(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_next_reset(value);
  // @@protoc_insertion_point(field_set:nakama.api.Tournament.next_reset)
}

// string metadata = 12;
inline void Tournament::clear_metadata() {
  metadata_.ClearToEmpty();
}
inline const std::string& Tournament::metadata() const {
  // @@protoc_insertion_point(field_get:nakama.api.Tournament.metadata)
  return _internal_metadata();
}
inline void Tournament::set_metadata(const std::string& value) {
  _internal_set_metadata(value);
  // @@protoc_insertion_point(field_set:nakama.api.Tournament.metadata)
}
inline std::string* Tournament::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable:nakama.api.Tournament.metadata)
  return _internal_mutable_metadata();
}
inline const std::string& Tournament::_internal_metadata() const {
  return metadata_.Get();
}
inline void Tournament::_internal_set_metadata(const std::string& value) {
  
  metadata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Tournament::set_metadata(std::string&& value) {
  
  metadata_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.Tournament.metadata)
}
inline void Tournament::set_metadata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  metadata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.Tournament.metadata)
}
inline void Tournament::set_metadata(const char* value,
    size_t size) {
  
  metadata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.Tournament.metadata)
}
inline std::string* Tournament::_internal_mutable_metadata() {
  
  return metadata_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Tournament::release_metadata() {
  // @@protoc_insertion_point(field_release:nakama.api.Tournament.metadata)
  return metadata_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Tournament::set_allocated_metadata(std::string* metadata) {
  if (metadata != nullptr) {
    
  } else {
    
  }
  metadata_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), metadata,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.Tournament.metadata)
}

// .google.protobuf.Timestamp create_time = 13;
inline bool Tournament::_internal_has_create_time() const {
  return this != internal_default_instance() && create_time_ != nullptr;
}
inline bool Tournament::has_create_time() const {
  return _internal_has_create_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Tournament::_internal_create_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = create_time_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Tournament::create_time() const {
  // @@protoc_insertion_point(field_get:nakama.api.Tournament.create_time)
  return _internal_create_time();
}
inline void Tournament::unsafe_arena_set_allocated_create_time(
    PROTOBUF_NAMESPACE_ID::Timestamp* create_time) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(create_time_);
  }
  create_time_ = create_time;
  if (create_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nakama.api.Tournament.create_time)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Tournament::release_create_time() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = create_time_;
  create_time_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Tournament::unsafe_arena_release_create_time() {
  // @@protoc_insertion_point(field_release:nakama.api.Tournament.create_time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = create_time_;
  create_time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Tournament::_internal_mutable_create_time() {
  
  if (create_time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    create_time_ = p;
  }
  return create_time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Tournament::mutable_create_time() {
  // @@protoc_insertion_point(field_mutable:nakama.api.Tournament.create_time)
  return _internal_mutable_create_time();
}
inline void Tournament::set_allocated_create_time(PROTOBUF_NAMESPACE_ID::Timestamp* create_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(create_time_);
  }
  if (create_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(create_time)->GetArena();
    if (message_arena != submessage_arena) {
      create_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, create_time, submessage_arena);
    }
    
  } else {
    
  }
  create_time_ = create_time;
  // @@protoc_insertion_point(field_set_allocated:nakama.api.Tournament.create_time)
}

// .google.protobuf.Timestamp start_time = 14;
inline bool Tournament::_internal_has_start_time() const {
  return this != internal_default_instance() && start_time_ != nullptr;
}
inline bool Tournament::has_start_time() const {
  return _internal_has_start_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Tournament::_internal_start_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = start_time_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Tournament::start_time() const {
  // @@protoc_insertion_point(field_get:nakama.api.Tournament.start_time)
  return _internal_start_time();
}
inline void Tournament::unsafe_arena_set_allocated_start_time(
    PROTOBUF_NAMESPACE_ID::Timestamp* start_time) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_time_);
  }
  start_time_ = start_time;
  if (start_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nakama.api.Tournament.start_time)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Tournament::release_start_time() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = start_time_;
  start_time_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Tournament::unsafe_arena_release_start_time() {
  // @@protoc_insertion_point(field_release:nakama.api.Tournament.start_time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = start_time_;
  start_time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Tournament::_internal_mutable_start_time() {
  
  if (start_time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    start_time_ = p;
  }
  return start_time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Tournament::mutable_start_time() {
  // @@protoc_insertion_point(field_mutable:nakama.api.Tournament.start_time)
  return _internal_mutable_start_time();
}
inline void Tournament::set_allocated_start_time(PROTOBUF_NAMESPACE_ID::Timestamp* start_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_time_);
  }
  if (start_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_time)->GetArena();
    if (message_arena != submessage_arena) {
      start_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start_time, submessage_arena);
    }
    
  } else {
    
  }
  start_time_ = start_time;
  // @@protoc_insertion_point(field_set_allocated:nakama.api.Tournament.start_time)
}

// .google.protobuf.Timestamp end_time = 15;
inline bool Tournament::_internal_has_end_time() const {
  return this != internal_default_instance() && end_time_ != nullptr;
}
inline bool Tournament::has_end_time() const {
  return _internal_has_end_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Tournament::_internal_end_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = end_time_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Tournament::end_time() const {
  // @@protoc_insertion_point(field_get:nakama.api.Tournament.end_time)
  return _internal_end_time();
}
inline void Tournament::unsafe_arena_set_allocated_end_time(
    PROTOBUF_NAMESPACE_ID::Timestamp* end_time) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_time_);
  }
  end_time_ = end_time;
  if (end_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nakama.api.Tournament.end_time)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Tournament::release_end_time() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = end_time_;
  end_time_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Tournament::unsafe_arena_release_end_time() {
  // @@protoc_insertion_point(field_release:nakama.api.Tournament.end_time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = end_time_;
  end_time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Tournament::_internal_mutable_end_time() {
  
  if (end_time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    end_time_ = p;
  }
  return end_time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Tournament::mutable_end_time() {
  // @@protoc_insertion_point(field_mutable:nakama.api.Tournament.end_time)
  return _internal_mutable_end_time();
}
inline void Tournament::set_allocated_end_time(PROTOBUF_NAMESPACE_ID::Timestamp* end_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_time_);
  }
  if (end_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_time)->GetArena();
    if (message_arena != submessage_arena) {
      end_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end_time, submessage_arena);
    }
    
  } else {
    
  }
  end_time_ = end_time;
  // @@protoc_insertion_point(field_set_allocated:nakama.api.Tournament.end_time)
}

// uint32 duration = 16;
inline void Tournament::clear_duration() {
  duration_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Tournament::_internal_duration() const {
  return duration_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Tournament::duration() const {
  // @@protoc_insertion_point(field_get:nakama.api.Tournament.duration)
  return _internal_duration();
}
inline void Tournament::_internal_set_duration(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  duration_ = value;
}
inline void Tournament::set_duration(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_duration(value);
  // @@protoc_insertion_point(field_set:nakama.api.Tournament.duration)
}

// uint32 start_active = 17;
inline void Tournament::clear_start_active() {
  start_active_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Tournament::_internal_start_active() const {
  return start_active_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Tournament::start_active() const {
  // @@protoc_insertion_point(field_get:nakama.api.Tournament.start_active)
  return _internal_start_active();
}
inline void Tournament::_internal_set_start_active(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  start_active_ = value;
}
inline void Tournament::set_start_active(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_start_active(value);
  // @@protoc_insertion_point(field_set:nakama.api.Tournament.start_active)
}

// uint32 prev_reset = 18;
inline void Tournament::clear_prev_reset() {
  prev_reset_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Tournament::_internal_prev_reset() const {
  return prev_reset_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Tournament::prev_reset() const {
  // @@protoc_insertion_point(field_get:nakama.api.Tournament.prev_reset)
  return _internal_prev_reset();
}
inline void Tournament::_internal_set_prev_reset(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  prev_reset_ = value;
}
inline void Tournament::set_prev_reset(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_prev_reset(value);
  // @@protoc_insertion_point(field_set:nakama.api.Tournament.prev_reset)
}

// .nakama.api.Operator operator = 19;
inline void Tournament::clear_operator_() {
  operator__ = 0;
}
inline ::nakama::api::Operator Tournament::_internal_operator_() const {
  return static_cast< ::nakama::api::Operator >(operator__);
}
inline ::nakama::api::Operator Tournament::operator_() const {
  // @@protoc_insertion_point(field_get:nakama.api.Tournament.operator)
  return _internal_operator_();
}
inline void Tournament::_internal_set_operator_(::nakama::api::Operator value) {
  
  operator__ = value;
}
inline void Tournament::set_operator_(::nakama::api::Operator value) {
  _internal_set_operator_(value);
  // @@protoc_insertion_point(field_set:nakama.api.Tournament.operator)
}

// -------------------------------------------------------------------

// TournamentList

// repeated .nakama.api.Tournament tournaments = 1;
inline int TournamentList::_internal_tournaments_size() const {
  return tournaments_.size();
}
inline int TournamentList::tournaments_size() const {
  return _internal_tournaments_size();
}
inline void TournamentList::clear_tournaments() {
  tournaments_.Clear();
}
inline ::nakama::api::Tournament* TournamentList::mutable_tournaments(int index) {
  // @@protoc_insertion_point(field_mutable:nakama.api.TournamentList.tournaments)
  return tournaments_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nakama::api::Tournament >*
TournamentList::mutable_tournaments() {
  // @@protoc_insertion_point(field_mutable_list:nakama.api.TournamentList.tournaments)
  return &tournaments_;
}
inline const ::nakama::api::Tournament& TournamentList::_internal_tournaments(int index) const {
  return tournaments_.Get(index);
}
inline const ::nakama::api::Tournament& TournamentList::tournaments(int index) const {
  // @@protoc_insertion_point(field_get:nakama.api.TournamentList.tournaments)
  return _internal_tournaments(index);
}
inline ::nakama::api::Tournament* TournamentList::_internal_add_tournaments() {
  return tournaments_.Add();
}
inline ::nakama::api::Tournament* TournamentList::add_tournaments() {
  // @@protoc_insertion_point(field_add:nakama.api.TournamentList.tournaments)
  return _internal_add_tournaments();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nakama::api::Tournament >&
TournamentList::tournaments() const {
  // @@protoc_insertion_point(field_list:nakama.api.TournamentList.tournaments)
  return tournaments_;
}

// string cursor = 2;
inline void TournamentList::clear_cursor() {
  cursor_.ClearToEmpty();
}
inline const std::string& TournamentList::cursor() const {
  // @@protoc_insertion_point(field_get:nakama.api.TournamentList.cursor)
  return _internal_cursor();
}
inline void TournamentList::set_cursor(const std::string& value) {
  _internal_set_cursor(value);
  // @@protoc_insertion_point(field_set:nakama.api.TournamentList.cursor)
}
inline std::string* TournamentList::mutable_cursor() {
  // @@protoc_insertion_point(field_mutable:nakama.api.TournamentList.cursor)
  return _internal_mutable_cursor();
}
inline const std::string& TournamentList::_internal_cursor() const {
  return cursor_.Get();
}
inline void TournamentList::_internal_set_cursor(const std::string& value) {
  
  cursor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TournamentList::set_cursor(std::string&& value) {
  
  cursor_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.TournamentList.cursor)
}
inline void TournamentList::set_cursor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cursor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.TournamentList.cursor)
}
inline void TournamentList::set_cursor(const char* value,
    size_t size) {
  
  cursor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.TournamentList.cursor)
}
inline std::string* TournamentList::_internal_mutable_cursor() {
  
  return cursor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TournamentList::release_cursor() {
  // @@protoc_insertion_point(field_release:nakama.api.TournamentList.cursor)
  return cursor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TournamentList::set_allocated_cursor(std::string* cursor) {
  if (cursor != nullptr) {
    
  } else {
    
  }
  cursor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cursor,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.TournamentList.cursor)
}

// -------------------------------------------------------------------

// TournamentRecordList

// repeated .nakama.api.LeaderboardRecord records = 1;
inline int TournamentRecordList::_internal_records_size() const {
  return records_.size();
}
inline int TournamentRecordList::records_size() const {
  return _internal_records_size();
}
inline void TournamentRecordList::clear_records() {
  records_.Clear();
}
inline ::nakama::api::LeaderboardRecord* TournamentRecordList::mutable_records(int index) {
  // @@protoc_insertion_point(field_mutable:nakama.api.TournamentRecordList.records)
  return records_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nakama::api::LeaderboardRecord >*
TournamentRecordList::mutable_records() {
  // @@protoc_insertion_point(field_mutable_list:nakama.api.TournamentRecordList.records)
  return &records_;
}
inline const ::nakama::api::LeaderboardRecord& TournamentRecordList::_internal_records(int index) const {
  return records_.Get(index);
}
inline const ::nakama::api::LeaderboardRecord& TournamentRecordList::records(int index) const {
  // @@protoc_insertion_point(field_get:nakama.api.TournamentRecordList.records)
  return _internal_records(index);
}
inline ::nakama::api::LeaderboardRecord* TournamentRecordList::_internal_add_records() {
  return records_.Add();
}
inline ::nakama::api::LeaderboardRecord* TournamentRecordList::add_records() {
  // @@protoc_insertion_point(field_add:nakama.api.TournamentRecordList.records)
  return _internal_add_records();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nakama::api::LeaderboardRecord >&
TournamentRecordList::records() const {
  // @@protoc_insertion_point(field_list:nakama.api.TournamentRecordList.records)
  return records_;
}

// repeated .nakama.api.LeaderboardRecord owner_records = 2;
inline int TournamentRecordList::_internal_owner_records_size() const {
  return owner_records_.size();
}
inline int TournamentRecordList::owner_records_size() const {
  return _internal_owner_records_size();
}
inline void TournamentRecordList::clear_owner_records() {
  owner_records_.Clear();
}
inline ::nakama::api::LeaderboardRecord* TournamentRecordList::mutable_owner_records(int index) {
  // @@protoc_insertion_point(field_mutable:nakama.api.TournamentRecordList.owner_records)
  return owner_records_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nakama::api::LeaderboardRecord >*
TournamentRecordList::mutable_owner_records() {
  // @@protoc_insertion_point(field_mutable_list:nakama.api.TournamentRecordList.owner_records)
  return &owner_records_;
}
inline const ::nakama::api::LeaderboardRecord& TournamentRecordList::_internal_owner_records(int index) const {
  return owner_records_.Get(index);
}
inline const ::nakama::api::LeaderboardRecord& TournamentRecordList::owner_records(int index) const {
  // @@protoc_insertion_point(field_get:nakama.api.TournamentRecordList.owner_records)
  return _internal_owner_records(index);
}
inline ::nakama::api::LeaderboardRecord* TournamentRecordList::_internal_add_owner_records() {
  return owner_records_.Add();
}
inline ::nakama::api::LeaderboardRecord* TournamentRecordList::add_owner_records() {
  // @@protoc_insertion_point(field_add:nakama.api.TournamentRecordList.owner_records)
  return _internal_add_owner_records();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nakama::api::LeaderboardRecord >&
TournamentRecordList::owner_records() const {
  // @@protoc_insertion_point(field_list:nakama.api.TournamentRecordList.owner_records)
  return owner_records_;
}

// string next_cursor = 3;
inline void TournamentRecordList::clear_next_cursor() {
  next_cursor_.ClearToEmpty();
}
inline const std::string& TournamentRecordList::next_cursor() const {
  // @@protoc_insertion_point(field_get:nakama.api.TournamentRecordList.next_cursor)
  return _internal_next_cursor();
}
inline void TournamentRecordList::set_next_cursor(const std::string& value) {
  _internal_set_next_cursor(value);
  // @@protoc_insertion_point(field_set:nakama.api.TournamentRecordList.next_cursor)
}
inline std::string* TournamentRecordList::mutable_next_cursor() {
  // @@protoc_insertion_point(field_mutable:nakama.api.TournamentRecordList.next_cursor)
  return _internal_mutable_next_cursor();
}
inline const std::string& TournamentRecordList::_internal_next_cursor() const {
  return next_cursor_.Get();
}
inline void TournamentRecordList::_internal_set_next_cursor(const std::string& value) {
  
  next_cursor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TournamentRecordList::set_next_cursor(std::string&& value) {
  
  next_cursor_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.TournamentRecordList.next_cursor)
}
inline void TournamentRecordList::set_next_cursor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  next_cursor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.TournamentRecordList.next_cursor)
}
inline void TournamentRecordList::set_next_cursor(const char* value,
    size_t size) {
  
  next_cursor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.TournamentRecordList.next_cursor)
}
inline std::string* TournamentRecordList::_internal_mutable_next_cursor() {
  
  return next_cursor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TournamentRecordList::release_next_cursor() {
  // @@protoc_insertion_point(field_release:nakama.api.TournamentRecordList.next_cursor)
  return next_cursor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TournamentRecordList::set_allocated_next_cursor(std::string* next_cursor) {
  if (next_cursor != nullptr) {
    
  } else {
    
  }
  next_cursor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), next_cursor,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.TournamentRecordList.next_cursor)
}

// string prev_cursor = 4;
inline void TournamentRecordList::clear_prev_cursor() {
  prev_cursor_.ClearToEmpty();
}
inline const std::string& TournamentRecordList::prev_cursor() const {
  // @@protoc_insertion_point(field_get:nakama.api.TournamentRecordList.prev_cursor)
  return _internal_prev_cursor();
}
inline void TournamentRecordList::set_prev_cursor(const std::string& value) {
  _internal_set_prev_cursor(value);
  // @@protoc_insertion_point(field_set:nakama.api.TournamentRecordList.prev_cursor)
}
inline std::string* TournamentRecordList::mutable_prev_cursor() {
  // @@protoc_insertion_point(field_mutable:nakama.api.TournamentRecordList.prev_cursor)
  return _internal_mutable_prev_cursor();
}
inline const std::string& TournamentRecordList::_internal_prev_cursor() const {
  return prev_cursor_.Get();
}
inline void TournamentRecordList::_internal_set_prev_cursor(const std::string& value) {
  
  prev_cursor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TournamentRecordList::set_prev_cursor(std::string&& value) {
  
  prev_cursor_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.TournamentRecordList.prev_cursor)
}
inline void TournamentRecordList::set_prev_cursor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  prev_cursor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.TournamentRecordList.prev_cursor)
}
inline void TournamentRecordList::set_prev_cursor(const char* value,
    size_t size) {
  
  prev_cursor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.TournamentRecordList.prev_cursor)
}
inline std::string* TournamentRecordList::_internal_mutable_prev_cursor() {
  
  return prev_cursor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TournamentRecordList::release_prev_cursor() {
  // @@protoc_insertion_point(field_release:nakama.api.TournamentRecordList.prev_cursor)
  return prev_cursor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TournamentRecordList::set_allocated_prev_cursor(std::string* prev_cursor) {
  if (prev_cursor != nullptr) {
    
  } else {
    
  }
  prev_cursor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), prev_cursor,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.TournamentRecordList.prev_cursor)
}

// -------------------------------------------------------------------

// UpdateAccountRequest

// .google.protobuf.StringValue username = 1;
inline bool UpdateAccountRequest::_internal_has_username() const {
  return this != internal_default_instance() && username_ != nullptr;
}
inline bool UpdateAccountRequest::has_username() const {
  return _internal_has_username();
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& UpdateAccountRequest::_internal_username() const {
  const PROTOBUF_NAMESPACE_ID::StringValue* p = username_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::StringValue&>(
      PROTOBUF_NAMESPACE_ID::_StringValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& UpdateAccountRequest::username() const {
  // @@protoc_insertion_point(field_get:nakama.api.UpdateAccountRequest.username)
  return _internal_username();
}
inline void UpdateAccountRequest::unsafe_arena_set_allocated_username(
    PROTOBUF_NAMESPACE_ID::StringValue* username) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(username_);
  }
  username_ = username;
  if (username) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nakama.api.UpdateAccountRequest.username)
}
inline PROTOBUF_NAMESPACE_ID::StringValue* UpdateAccountRequest::release_username() {
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = username_;
  username_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* UpdateAccountRequest::unsafe_arena_release_username() {
  // @@protoc_insertion_point(field_release:nakama.api.UpdateAccountRequest.username)
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = username_;
  username_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* UpdateAccountRequest::_internal_mutable_username() {
  
  if (username_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::StringValue>(GetArena());
    username_ = p;
  }
  return username_;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* UpdateAccountRequest::mutable_username() {
  // @@protoc_insertion_point(field_mutable:nakama.api.UpdateAccountRequest.username)
  return _internal_mutable_username();
}
inline void UpdateAccountRequest::set_allocated_username(PROTOBUF_NAMESPACE_ID::StringValue* username) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(username_);
  }
  if (username) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(username)->GetArena();
    if (message_arena != submessage_arena) {
      username = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, username, submessage_arena);
    }
    
  } else {
    
  }
  username_ = username;
  // @@protoc_insertion_point(field_set_allocated:nakama.api.UpdateAccountRequest.username)
}

// .google.protobuf.StringValue display_name = 2;
inline bool UpdateAccountRequest::_internal_has_display_name() const {
  return this != internal_default_instance() && display_name_ != nullptr;
}
inline bool UpdateAccountRequest::has_display_name() const {
  return _internal_has_display_name();
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& UpdateAccountRequest::_internal_display_name() const {
  const PROTOBUF_NAMESPACE_ID::StringValue* p = display_name_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::StringValue&>(
      PROTOBUF_NAMESPACE_ID::_StringValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& UpdateAccountRequest::display_name() const {
  // @@protoc_insertion_point(field_get:nakama.api.UpdateAccountRequest.display_name)
  return _internal_display_name();
}
inline void UpdateAccountRequest::unsafe_arena_set_allocated_display_name(
    PROTOBUF_NAMESPACE_ID::StringValue* display_name) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(display_name_);
  }
  display_name_ = display_name;
  if (display_name) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nakama.api.UpdateAccountRequest.display_name)
}
inline PROTOBUF_NAMESPACE_ID::StringValue* UpdateAccountRequest::release_display_name() {
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = display_name_;
  display_name_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* UpdateAccountRequest::unsafe_arena_release_display_name() {
  // @@protoc_insertion_point(field_release:nakama.api.UpdateAccountRequest.display_name)
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = display_name_;
  display_name_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* UpdateAccountRequest::_internal_mutable_display_name() {
  
  if (display_name_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::StringValue>(GetArena());
    display_name_ = p;
  }
  return display_name_;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* UpdateAccountRequest::mutable_display_name() {
  // @@protoc_insertion_point(field_mutable:nakama.api.UpdateAccountRequest.display_name)
  return _internal_mutable_display_name();
}
inline void UpdateAccountRequest::set_allocated_display_name(PROTOBUF_NAMESPACE_ID::StringValue* display_name) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(display_name_);
  }
  if (display_name) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(display_name)->GetArena();
    if (message_arena != submessage_arena) {
      display_name = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, display_name, submessage_arena);
    }
    
  } else {
    
  }
  display_name_ = display_name;
  // @@protoc_insertion_point(field_set_allocated:nakama.api.UpdateAccountRequest.display_name)
}

// .google.protobuf.StringValue avatar_url = 3;
inline bool UpdateAccountRequest::_internal_has_avatar_url() const {
  return this != internal_default_instance() && avatar_url_ != nullptr;
}
inline bool UpdateAccountRequest::has_avatar_url() const {
  return _internal_has_avatar_url();
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& UpdateAccountRequest::_internal_avatar_url() const {
  const PROTOBUF_NAMESPACE_ID::StringValue* p = avatar_url_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::StringValue&>(
      PROTOBUF_NAMESPACE_ID::_StringValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& UpdateAccountRequest::avatar_url() const {
  // @@protoc_insertion_point(field_get:nakama.api.UpdateAccountRequest.avatar_url)
  return _internal_avatar_url();
}
inline void UpdateAccountRequest::unsafe_arena_set_allocated_avatar_url(
    PROTOBUF_NAMESPACE_ID::StringValue* avatar_url) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(avatar_url_);
  }
  avatar_url_ = avatar_url;
  if (avatar_url) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nakama.api.UpdateAccountRequest.avatar_url)
}
inline PROTOBUF_NAMESPACE_ID::StringValue* UpdateAccountRequest::release_avatar_url() {
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = avatar_url_;
  avatar_url_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* UpdateAccountRequest::unsafe_arena_release_avatar_url() {
  // @@protoc_insertion_point(field_release:nakama.api.UpdateAccountRequest.avatar_url)
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = avatar_url_;
  avatar_url_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* UpdateAccountRequest::_internal_mutable_avatar_url() {
  
  if (avatar_url_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::StringValue>(GetArena());
    avatar_url_ = p;
  }
  return avatar_url_;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* UpdateAccountRequest::mutable_avatar_url() {
  // @@protoc_insertion_point(field_mutable:nakama.api.UpdateAccountRequest.avatar_url)
  return _internal_mutable_avatar_url();
}
inline void UpdateAccountRequest::set_allocated_avatar_url(PROTOBUF_NAMESPACE_ID::StringValue* avatar_url) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(avatar_url_);
  }
  if (avatar_url) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(avatar_url)->GetArena();
    if (message_arena != submessage_arena) {
      avatar_url = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, avatar_url, submessage_arena);
    }
    
  } else {
    
  }
  avatar_url_ = avatar_url;
  // @@protoc_insertion_point(field_set_allocated:nakama.api.UpdateAccountRequest.avatar_url)
}

// .google.protobuf.StringValue lang_tag = 4;
inline bool UpdateAccountRequest::_internal_has_lang_tag() const {
  return this != internal_default_instance() && lang_tag_ != nullptr;
}
inline bool UpdateAccountRequest::has_lang_tag() const {
  return _internal_has_lang_tag();
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& UpdateAccountRequest::_internal_lang_tag() const {
  const PROTOBUF_NAMESPACE_ID::StringValue* p = lang_tag_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::StringValue&>(
      PROTOBUF_NAMESPACE_ID::_StringValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& UpdateAccountRequest::lang_tag() const {
  // @@protoc_insertion_point(field_get:nakama.api.UpdateAccountRequest.lang_tag)
  return _internal_lang_tag();
}
inline void UpdateAccountRequest::unsafe_arena_set_allocated_lang_tag(
    PROTOBUF_NAMESPACE_ID::StringValue* lang_tag) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lang_tag_);
  }
  lang_tag_ = lang_tag;
  if (lang_tag) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nakama.api.UpdateAccountRequest.lang_tag)
}
inline PROTOBUF_NAMESPACE_ID::StringValue* UpdateAccountRequest::release_lang_tag() {
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = lang_tag_;
  lang_tag_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* UpdateAccountRequest::unsafe_arena_release_lang_tag() {
  // @@protoc_insertion_point(field_release:nakama.api.UpdateAccountRequest.lang_tag)
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = lang_tag_;
  lang_tag_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* UpdateAccountRequest::_internal_mutable_lang_tag() {
  
  if (lang_tag_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::StringValue>(GetArena());
    lang_tag_ = p;
  }
  return lang_tag_;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* UpdateAccountRequest::mutable_lang_tag() {
  // @@protoc_insertion_point(field_mutable:nakama.api.UpdateAccountRequest.lang_tag)
  return _internal_mutable_lang_tag();
}
inline void UpdateAccountRequest::set_allocated_lang_tag(PROTOBUF_NAMESPACE_ID::StringValue* lang_tag) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(lang_tag_);
  }
  if (lang_tag) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lang_tag)->GetArena();
    if (message_arena != submessage_arena) {
      lang_tag = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lang_tag, submessage_arena);
    }
    
  } else {
    
  }
  lang_tag_ = lang_tag;
  // @@protoc_insertion_point(field_set_allocated:nakama.api.UpdateAccountRequest.lang_tag)
}

// .google.protobuf.StringValue location = 5;
inline bool UpdateAccountRequest::_internal_has_location() const {
  return this != internal_default_instance() && location_ != nullptr;
}
inline bool UpdateAccountRequest::has_location() const {
  return _internal_has_location();
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& UpdateAccountRequest::_internal_location() const {
  const PROTOBUF_NAMESPACE_ID::StringValue* p = location_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::StringValue&>(
      PROTOBUF_NAMESPACE_ID::_StringValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& UpdateAccountRequest::location() const {
  // @@protoc_insertion_point(field_get:nakama.api.UpdateAccountRequest.location)
  return _internal_location();
}
inline void UpdateAccountRequest::unsafe_arena_set_allocated_location(
    PROTOBUF_NAMESPACE_ID::StringValue* location) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(location_);
  }
  location_ = location;
  if (location) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nakama.api.UpdateAccountRequest.location)
}
inline PROTOBUF_NAMESPACE_ID::StringValue* UpdateAccountRequest::release_location() {
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = location_;
  location_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* UpdateAccountRequest::unsafe_arena_release_location() {
  // @@protoc_insertion_point(field_release:nakama.api.UpdateAccountRequest.location)
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = location_;
  location_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* UpdateAccountRequest::_internal_mutable_location() {
  
  if (location_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::StringValue>(GetArena());
    location_ = p;
  }
  return location_;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* UpdateAccountRequest::mutable_location() {
  // @@protoc_insertion_point(field_mutable:nakama.api.UpdateAccountRequest.location)
  return _internal_mutable_location();
}
inline void UpdateAccountRequest::set_allocated_location(PROTOBUF_NAMESPACE_ID::StringValue* location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(location_);
  }
  if (location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(location)->GetArena();
    if (message_arena != submessage_arena) {
      location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, location, submessage_arena);
    }
    
  } else {
    
  }
  location_ = location;
  // @@protoc_insertion_point(field_set_allocated:nakama.api.UpdateAccountRequest.location)
}

// .google.protobuf.StringValue timezone = 6;
inline bool UpdateAccountRequest::_internal_has_timezone() const {
  return this != internal_default_instance() && timezone_ != nullptr;
}
inline bool UpdateAccountRequest::has_timezone() const {
  return _internal_has_timezone();
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& UpdateAccountRequest::_internal_timezone() const {
  const PROTOBUF_NAMESPACE_ID::StringValue* p = timezone_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::StringValue&>(
      PROTOBUF_NAMESPACE_ID::_StringValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& UpdateAccountRequest::timezone() const {
  // @@protoc_insertion_point(field_get:nakama.api.UpdateAccountRequest.timezone)
  return _internal_timezone();
}
inline void UpdateAccountRequest::unsafe_arena_set_allocated_timezone(
    PROTOBUF_NAMESPACE_ID::StringValue* timezone) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timezone_);
  }
  timezone_ = timezone;
  if (timezone) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nakama.api.UpdateAccountRequest.timezone)
}
inline PROTOBUF_NAMESPACE_ID::StringValue* UpdateAccountRequest::release_timezone() {
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = timezone_;
  timezone_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* UpdateAccountRequest::unsafe_arena_release_timezone() {
  // @@protoc_insertion_point(field_release:nakama.api.UpdateAccountRequest.timezone)
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = timezone_;
  timezone_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* UpdateAccountRequest::_internal_mutable_timezone() {
  
  if (timezone_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::StringValue>(GetArena());
    timezone_ = p;
  }
  return timezone_;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* UpdateAccountRequest::mutable_timezone() {
  // @@protoc_insertion_point(field_mutable:nakama.api.UpdateAccountRequest.timezone)
  return _internal_mutable_timezone();
}
inline void UpdateAccountRequest::set_allocated_timezone(PROTOBUF_NAMESPACE_ID::StringValue* timezone) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(timezone_);
  }
  if (timezone) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timezone)->GetArena();
    if (message_arena != submessage_arena) {
      timezone = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timezone, submessage_arena);
    }
    
  } else {
    
  }
  timezone_ = timezone;
  // @@protoc_insertion_point(field_set_allocated:nakama.api.UpdateAccountRequest.timezone)
}

// -------------------------------------------------------------------

// UpdateGroupRequest

// string group_id = 1;
inline void UpdateGroupRequest::clear_group_id() {
  group_id_.ClearToEmpty();
}
inline const std::string& UpdateGroupRequest::group_id() const {
  // @@protoc_insertion_point(field_get:nakama.api.UpdateGroupRequest.group_id)
  return _internal_group_id();
}
inline void UpdateGroupRequest::set_group_id(const std::string& value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:nakama.api.UpdateGroupRequest.group_id)
}
inline std::string* UpdateGroupRequest::mutable_group_id() {
  // @@protoc_insertion_point(field_mutable:nakama.api.UpdateGroupRequest.group_id)
  return _internal_mutable_group_id();
}
inline const std::string& UpdateGroupRequest::_internal_group_id() const {
  return group_id_.Get();
}
inline void UpdateGroupRequest::_internal_set_group_id(const std::string& value) {
  
  group_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UpdateGroupRequest::set_group_id(std::string&& value) {
  
  group_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.UpdateGroupRequest.group_id)
}
inline void UpdateGroupRequest::set_group_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  group_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.UpdateGroupRequest.group_id)
}
inline void UpdateGroupRequest::set_group_id(const char* value,
    size_t size) {
  
  group_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.UpdateGroupRequest.group_id)
}
inline std::string* UpdateGroupRequest::_internal_mutable_group_id() {
  
  return group_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UpdateGroupRequest::release_group_id() {
  // @@protoc_insertion_point(field_release:nakama.api.UpdateGroupRequest.group_id)
  return group_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateGroupRequest::set_allocated_group_id(std::string* group_id) {
  if (group_id != nullptr) {
    
  } else {
    
  }
  group_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), group_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.UpdateGroupRequest.group_id)
}

// .google.protobuf.StringValue name = 2;
inline bool UpdateGroupRequest::_internal_has_name() const {
  return this != internal_default_instance() && name_ != nullptr;
}
inline bool UpdateGroupRequest::has_name() const {
  return _internal_has_name();
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& UpdateGroupRequest::_internal_name() const {
  const PROTOBUF_NAMESPACE_ID::StringValue* p = name_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::StringValue&>(
      PROTOBUF_NAMESPACE_ID::_StringValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& UpdateGroupRequest::name() const {
  // @@protoc_insertion_point(field_get:nakama.api.UpdateGroupRequest.name)
  return _internal_name();
}
inline void UpdateGroupRequest::unsafe_arena_set_allocated_name(
    PROTOBUF_NAMESPACE_ID::StringValue* name) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(name_);
  }
  name_ = name;
  if (name) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nakama.api.UpdateGroupRequest.name)
}
inline PROTOBUF_NAMESPACE_ID::StringValue* UpdateGroupRequest::release_name() {
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = name_;
  name_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* UpdateGroupRequest::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_release:nakama.api.UpdateGroupRequest.name)
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = name_;
  name_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* UpdateGroupRequest::_internal_mutable_name() {
  
  if (name_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::StringValue>(GetArena());
    name_ = p;
  }
  return name_;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* UpdateGroupRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:nakama.api.UpdateGroupRequest.name)
  return _internal_mutable_name();
}
inline void UpdateGroupRequest::set_allocated_name(PROTOBUF_NAMESPACE_ID::StringValue* name) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(name_);
  }
  if (name) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(name)->GetArena();
    if (message_arena != submessage_arena) {
      name = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, name, submessage_arena);
    }
    
  } else {
    
  }
  name_ = name;
  // @@protoc_insertion_point(field_set_allocated:nakama.api.UpdateGroupRequest.name)
}

// .google.protobuf.StringValue description = 3;
inline bool UpdateGroupRequest::_internal_has_description() const {
  return this != internal_default_instance() && description_ != nullptr;
}
inline bool UpdateGroupRequest::has_description() const {
  return _internal_has_description();
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& UpdateGroupRequest::_internal_description() const {
  const PROTOBUF_NAMESPACE_ID::StringValue* p = description_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::StringValue&>(
      PROTOBUF_NAMESPACE_ID::_StringValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& UpdateGroupRequest::description() const {
  // @@protoc_insertion_point(field_get:nakama.api.UpdateGroupRequest.description)
  return _internal_description();
}
inline void UpdateGroupRequest::unsafe_arena_set_allocated_description(
    PROTOBUF_NAMESPACE_ID::StringValue* description) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(description_);
  }
  description_ = description;
  if (description) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nakama.api.UpdateGroupRequest.description)
}
inline PROTOBUF_NAMESPACE_ID::StringValue* UpdateGroupRequest::release_description() {
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = description_;
  description_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* UpdateGroupRequest::unsafe_arena_release_description() {
  // @@protoc_insertion_point(field_release:nakama.api.UpdateGroupRequest.description)
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = description_;
  description_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* UpdateGroupRequest::_internal_mutable_description() {
  
  if (description_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::StringValue>(GetArena());
    description_ = p;
  }
  return description_;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* UpdateGroupRequest::mutable_description() {
  // @@protoc_insertion_point(field_mutable:nakama.api.UpdateGroupRequest.description)
  return _internal_mutable_description();
}
inline void UpdateGroupRequest::set_allocated_description(PROTOBUF_NAMESPACE_ID::StringValue* description) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(description_);
  }
  if (description) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(description)->GetArena();
    if (message_arena != submessage_arena) {
      description = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, description, submessage_arena);
    }
    
  } else {
    
  }
  description_ = description;
  // @@protoc_insertion_point(field_set_allocated:nakama.api.UpdateGroupRequest.description)
}

// .google.protobuf.StringValue lang_tag = 4;
inline bool UpdateGroupRequest::_internal_has_lang_tag() const {
  return this != internal_default_instance() && lang_tag_ != nullptr;
}
inline bool UpdateGroupRequest::has_lang_tag() const {
  return _internal_has_lang_tag();
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& UpdateGroupRequest::_internal_lang_tag() const {
  const PROTOBUF_NAMESPACE_ID::StringValue* p = lang_tag_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::StringValue&>(
      PROTOBUF_NAMESPACE_ID::_StringValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& UpdateGroupRequest::lang_tag() const {
  // @@protoc_insertion_point(field_get:nakama.api.UpdateGroupRequest.lang_tag)
  return _internal_lang_tag();
}
inline void UpdateGroupRequest::unsafe_arena_set_allocated_lang_tag(
    PROTOBUF_NAMESPACE_ID::StringValue* lang_tag) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lang_tag_);
  }
  lang_tag_ = lang_tag;
  if (lang_tag) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nakama.api.UpdateGroupRequest.lang_tag)
}
inline PROTOBUF_NAMESPACE_ID::StringValue* UpdateGroupRequest::release_lang_tag() {
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = lang_tag_;
  lang_tag_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* UpdateGroupRequest::unsafe_arena_release_lang_tag() {
  // @@protoc_insertion_point(field_release:nakama.api.UpdateGroupRequest.lang_tag)
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = lang_tag_;
  lang_tag_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* UpdateGroupRequest::_internal_mutable_lang_tag() {
  
  if (lang_tag_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::StringValue>(GetArena());
    lang_tag_ = p;
  }
  return lang_tag_;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* UpdateGroupRequest::mutable_lang_tag() {
  // @@protoc_insertion_point(field_mutable:nakama.api.UpdateGroupRequest.lang_tag)
  return _internal_mutable_lang_tag();
}
inline void UpdateGroupRequest::set_allocated_lang_tag(PROTOBUF_NAMESPACE_ID::StringValue* lang_tag) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(lang_tag_);
  }
  if (lang_tag) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lang_tag)->GetArena();
    if (message_arena != submessage_arena) {
      lang_tag = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lang_tag, submessage_arena);
    }
    
  } else {
    
  }
  lang_tag_ = lang_tag;
  // @@protoc_insertion_point(field_set_allocated:nakama.api.UpdateGroupRequest.lang_tag)
}

// .google.protobuf.StringValue avatar_url = 5;
inline bool UpdateGroupRequest::_internal_has_avatar_url() const {
  return this != internal_default_instance() && avatar_url_ != nullptr;
}
inline bool UpdateGroupRequest::has_avatar_url() const {
  return _internal_has_avatar_url();
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& UpdateGroupRequest::_internal_avatar_url() const {
  const PROTOBUF_NAMESPACE_ID::StringValue* p = avatar_url_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::StringValue&>(
      PROTOBUF_NAMESPACE_ID::_StringValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& UpdateGroupRequest::avatar_url() const {
  // @@protoc_insertion_point(field_get:nakama.api.UpdateGroupRequest.avatar_url)
  return _internal_avatar_url();
}
inline void UpdateGroupRequest::unsafe_arena_set_allocated_avatar_url(
    PROTOBUF_NAMESPACE_ID::StringValue* avatar_url) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(avatar_url_);
  }
  avatar_url_ = avatar_url;
  if (avatar_url) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nakama.api.UpdateGroupRequest.avatar_url)
}
inline PROTOBUF_NAMESPACE_ID::StringValue* UpdateGroupRequest::release_avatar_url() {
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = avatar_url_;
  avatar_url_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* UpdateGroupRequest::unsafe_arena_release_avatar_url() {
  // @@protoc_insertion_point(field_release:nakama.api.UpdateGroupRequest.avatar_url)
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = avatar_url_;
  avatar_url_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* UpdateGroupRequest::_internal_mutable_avatar_url() {
  
  if (avatar_url_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::StringValue>(GetArena());
    avatar_url_ = p;
  }
  return avatar_url_;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* UpdateGroupRequest::mutable_avatar_url() {
  // @@protoc_insertion_point(field_mutable:nakama.api.UpdateGroupRequest.avatar_url)
  return _internal_mutable_avatar_url();
}
inline void UpdateGroupRequest::set_allocated_avatar_url(PROTOBUF_NAMESPACE_ID::StringValue* avatar_url) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(avatar_url_);
  }
  if (avatar_url) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(avatar_url)->GetArena();
    if (message_arena != submessage_arena) {
      avatar_url = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, avatar_url, submessage_arena);
    }
    
  } else {
    
  }
  avatar_url_ = avatar_url;
  // @@protoc_insertion_point(field_set_allocated:nakama.api.UpdateGroupRequest.avatar_url)
}

// .google.protobuf.BoolValue open = 6;
inline bool UpdateGroupRequest::_internal_has_open() const {
  return this != internal_default_instance() && open_ != nullptr;
}
inline bool UpdateGroupRequest::has_open() const {
  return _internal_has_open();
}
inline const PROTOBUF_NAMESPACE_ID::BoolValue& UpdateGroupRequest::_internal_open() const {
  const PROTOBUF_NAMESPACE_ID::BoolValue* p = open_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::BoolValue&>(
      PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::BoolValue& UpdateGroupRequest::open() const {
  // @@protoc_insertion_point(field_get:nakama.api.UpdateGroupRequest.open)
  return _internal_open();
}
inline void UpdateGroupRequest::unsafe_arena_set_allocated_open(
    PROTOBUF_NAMESPACE_ID::BoolValue* open) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(open_);
  }
  open_ = open;
  if (open) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nakama.api.UpdateGroupRequest.open)
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* UpdateGroupRequest::release_open() {
  
  PROTOBUF_NAMESPACE_ID::BoolValue* temp = open_;
  open_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* UpdateGroupRequest::unsafe_arena_release_open() {
  // @@protoc_insertion_point(field_release:nakama.api.UpdateGroupRequest.open)
  
  PROTOBUF_NAMESPACE_ID::BoolValue* temp = open_;
  open_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* UpdateGroupRequest::_internal_mutable_open() {
  
  if (open_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::BoolValue>(GetArena());
    open_ = p;
  }
  return open_;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* UpdateGroupRequest::mutable_open() {
  // @@protoc_insertion_point(field_mutable:nakama.api.UpdateGroupRequest.open)
  return _internal_mutable_open();
}
inline void UpdateGroupRequest::set_allocated_open(PROTOBUF_NAMESPACE_ID::BoolValue* open) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(open_);
  }
  if (open) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(open)->GetArena();
    if (message_arena != submessage_arena) {
      open = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, open, submessage_arena);
    }
    
  } else {
    
  }
  open_ = open;
  // @@protoc_insertion_point(field_set_allocated:nakama.api.UpdateGroupRequest.open)
}

// -------------------------------------------------------------------

// User

// string id = 1;
inline void User::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& User::id() const {
  // @@protoc_insertion_point(field_get:nakama.api.User.id)
  return _internal_id();
}
inline void User::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:nakama.api.User.id)
}
inline std::string* User::mutable_id() {
  // @@protoc_insertion_point(field_mutable:nakama.api.User.id)
  return _internal_mutable_id();
}
inline const std::string& User::_internal_id() const {
  return id_.Get();
}
inline void User::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void User::set_id(std::string&& value) {
  
  id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.User.id)
}
inline void User::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.User.id)
}
inline void User::set_id(const char* value,
    size_t size) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.User.id)
}
inline std::string* User::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* User::release_id() {
  // @@protoc_insertion_point(field_release:nakama.api.User.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void User::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.User.id)
}

// string username = 2;
inline void User::clear_username() {
  username_.ClearToEmpty();
}
inline const std::string& User::username() const {
  // @@protoc_insertion_point(field_get:nakama.api.User.username)
  return _internal_username();
}
inline void User::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:nakama.api.User.username)
}
inline std::string* User::mutable_username() {
  // @@protoc_insertion_point(field_mutable:nakama.api.User.username)
  return _internal_mutable_username();
}
inline const std::string& User::_internal_username() const {
  return username_.Get();
}
inline void User::_internal_set_username(const std::string& value) {
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void User::set_username(std::string&& value) {
  
  username_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.User.username)
}
inline void User::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.User.username)
}
inline void User::set_username(const char* value,
    size_t size) {
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.User.username)
}
inline std::string* User::_internal_mutable_username() {
  
  return username_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* User::release_username() {
  // @@protoc_insertion_point(field_release:nakama.api.User.username)
  return username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void User::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.User.username)
}

// string display_name = 3;
inline void User::clear_display_name() {
  display_name_.ClearToEmpty();
}
inline const std::string& User::display_name() const {
  // @@protoc_insertion_point(field_get:nakama.api.User.display_name)
  return _internal_display_name();
}
inline void User::set_display_name(const std::string& value) {
  _internal_set_display_name(value);
  // @@protoc_insertion_point(field_set:nakama.api.User.display_name)
}
inline std::string* User::mutable_display_name() {
  // @@protoc_insertion_point(field_mutable:nakama.api.User.display_name)
  return _internal_mutable_display_name();
}
inline const std::string& User::_internal_display_name() const {
  return display_name_.Get();
}
inline void User::_internal_set_display_name(const std::string& value) {
  
  display_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void User::set_display_name(std::string&& value) {
  
  display_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.User.display_name)
}
inline void User::set_display_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  display_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.User.display_name)
}
inline void User::set_display_name(const char* value,
    size_t size) {
  
  display_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.User.display_name)
}
inline std::string* User::_internal_mutable_display_name() {
  
  return display_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* User::release_display_name() {
  // @@protoc_insertion_point(field_release:nakama.api.User.display_name)
  return display_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void User::set_allocated_display_name(std::string* display_name) {
  if (display_name != nullptr) {
    
  } else {
    
  }
  display_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), display_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.User.display_name)
}

// string avatar_url = 4;
inline void User::clear_avatar_url() {
  avatar_url_.ClearToEmpty();
}
inline const std::string& User::avatar_url() const {
  // @@protoc_insertion_point(field_get:nakama.api.User.avatar_url)
  return _internal_avatar_url();
}
inline void User::set_avatar_url(const std::string& value) {
  _internal_set_avatar_url(value);
  // @@protoc_insertion_point(field_set:nakama.api.User.avatar_url)
}
inline std::string* User::mutable_avatar_url() {
  // @@protoc_insertion_point(field_mutable:nakama.api.User.avatar_url)
  return _internal_mutable_avatar_url();
}
inline const std::string& User::_internal_avatar_url() const {
  return avatar_url_.Get();
}
inline void User::_internal_set_avatar_url(const std::string& value) {
  
  avatar_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void User::set_avatar_url(std::string&& value) {
  
  avatar_url_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.User.avatar_url)
}
inline void User::set_avatar_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  avatar_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.User.avatar_url)
}
inline void User::set_avatar_url(const char* value,
    size_t size) {
  
  avatar_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.User.avatar_url)
}
inline std::string* User::_internal_mutable_avatar_url() {
  
  return avatar_url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* User::release_avatar_url() {
  // @@protoc_insertion_point(field_release:nakama.api.User.avatar_url)
  return avatar_url_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void User::set_allocated_avatar_url(std::string* avatar_url) {
  if (avatar_url != nullptr) {
    
  } else {
    
  }
  avatar_url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), avatar_url,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.User.avatar_url)
}

// string lang_tag = 5;
inline void User::clear_lang_tag() {
  lang_tag_.ClearToEmpty();
}
inline const std::string& User::lang_tag() const {
  // @@protoc_insertion_point(field_get:nakama.api.User.lang_tag)
  return _internal_lang_tag();
}
inline void User::set_lang_tag(const std::string& value) {
  _internal_set_lang_tag(value);
  // @@protoc_insertion_point(field_set:nakama.api.User.lang_tag)
}
inline std::string* User::mutable_lang_tag() {
  // @@protoc_insertion_point(field_mutable:nakama.api.User.lang_tag)
  return _internal_mutable_lang_tag();
}
inline const std::string& User::_internal_lang_tag() const {
  return lang_tag_.Get();
}
inline void User::_internal_set_lang_tag(const std::string& value) {
  
  lang_tag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void User::set_lang_tag(std::string&& value) {
  
  lang_tag_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.User.lang_tag)
}
inline void User::set_lang_tag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  lang_tag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.User.lang_tag)
}
inline void User::set_lang_tag(const char* value,
    size_t size) {
  
  lang_tag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.User.lang_tag)
}
inline std::string* User::_internal_mutable_lang_tag() {
  
  return lang_tag_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* User::release_lang_tag() {
  // @@protoc_insertion_point(field_release:nakama.api.User.lang_tag)
  return lang_tag_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void User::set_allocated_lang_tag(std::string* lang_tag) {
  if (lang_tag != nullptr) {
    
  } else {
    
  }
  lang_tag_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), lang_tag,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.User.lang_tag)
}

// string location = 6;
inline void User::clear_location() {
  location_.ClearToEmpty();
}
inline const std::string& User::location() const {
  // @@protoc_insertion_point(field_get:nakama.api.User.location)
  return _internal_location();
}
inline void User::set_location(const std::string& value) {
  _internal_set_location(value);
  // @@protoc_insertion_point(field_set:nakama.api.User.location)
}
inline std::string* User::mutable_location() {
  // @@protoc_insertion_point(field_mutable:nakama.api.User.location)
  return _internal_mutable_location();
}
inline const std::string& User::_internal_location() const {
  return location_.Get();
}
inline void User::_internal_set_location(const std::string& value) {
  
  location_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void User::set_location(std::string&& value) {
  
  location_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.User.location)
}
inline void User::set_location(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  location_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.User.location)
}
inline void User::set_location(const char* value,
    size_t size) {
  
  location_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.User.location)
}
inline std::string* User::_internal_mutable_location() {
  
  return location_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* User::release_location() {
  // @@protoc_insertion_point(field_release:nakama.api.User.location)
  return location_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void User::set_allocated_location(std::string* location) {
  if (location != nullptr) {
    
  } else {
    
  }
  location_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), location,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.User.location)
}

// string timezone = 7;
inline void User::clear_timezone() {
  timezone_.ClearToEmpty();
}
inline const std::string& User::timezone() const {
  // @@protoc_insertion_point(field_get:nakama.api.User.timezone)
  return _internal_timezone();
}
inline void User::set_timezone(const std::string& value) {
  _internal_set_timezone(value);
  // @@protoc_insertion_point(field_set:nakama.api.User.timezone)
}
inline std::string* User::mutable_timezone() {
  // @@protoc_insertion_point(field_mutable:nakama.api.User.timezone)
  return _internal_mutable_timezone();
}
inline const std::string& User::_internal_timezone() const {
  return timezone_.Get();
}
inline void User::_internal_set_timezone(const std::string& value) {
  
  timezone_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void User::set_timezone(std::string&& value) {
  
  timezone_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.User.timezone)
}
inline void User::set_timezone(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  timezone_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.User.timezone)
}
inline void User::set_timezone(const char* value,
    size_t size) {
  
  timezone_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.User.timezone)
}
inline std::string* User::_internal_mutable_timezone() {
  
  return timezone_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* User::release_timezone() {
  // @@protoc_insertion_point(field_release:nakama.api.User.timezone)
  return timezone_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void User::set_allocated_timezone(std::string* timezone) {
  if (timezone != nullptr) {
    
  } else {
    
  }
  timezone_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), timezone,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.User.timezone)
}

// string metadata = 8;
inline void User::clear_metadata() {
  metadata_.ClearToEmpty();
}
inline const std::string& User::metadata() const {
  // @@protoc_insertion_point(field_get:nakama.api.User.metadata)
  return _internal_metadata();
}
inline void User::set_metadata(const std::string& value) {
  _internal_set_metadata(value);
  // @@protoc_insertion_point(field_set:nakama.api.User.metadata)
}
inline std::string* User::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable:nakama.api.User.metadata)
  return _internal_mutable_metadata();
}
inline const std::string& User::_internal_metadata() const {
  return metadata_.Get();
}
inline void User::_internal_set_metadata(const std::string& value) {
  
  metadata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void User::set_metadata(std::string&& value) {
  
  metadata_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.User.metadata)
}
inline void User::set_metadata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  metadata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.User.metadata)
}
inline void User::set_metadata(const char* value,
    size_t size) {
  
  metadata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.User.metadata)
}
inline std::string* User::_internal_mutable_metadata() {
  
  return metadata_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* User::release_metadata() {
  // @@protoc_insertion_point(field_release:nakama.api.User.metadata)
  return metadata_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void User::set_allocated_metadata(std::string* metadata) {
  if (metadata != nullptr) {
    
  } else {
    
  }
  metadata_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), metadata,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.User.metadata)
}

// string facebook_id = 9;
inline void User::clear_facebook_id() {
  facebook_id_.ClearToEmpty();
}
inline const std::string& User::facebook_id() const {
  // @@protoc_insertion_point(field_get:nakama.api.User.facebook_id)
  return _internal_facebook_id();
}
inline void User::set_facebook_id(const std::string& value) {
  _internal_set_facebook_id(value);
  // @@protoc_insertion_point(field_set:nakama.api.User.facebook_id)
}
inline std::string* User::mutable_facebook_id() {
  // @@protoc_insertion_point(field_mutable:nakama.api.User.facebook_id)
  return _internal_mutable_facebook_id();
}
inline const std::string& User::_internal_facebook_id() const {
  return facebook_id_.Get();
}
inline void User::_internal_set_facebook_id(const std::string& value) {
  
  facebook_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void User::set_facebook_id(std::string&& value) {
  
  facebook_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.User.facebook_id)
}
inline void User::set_facebook_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  facebook_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.User.facebook_id)
}
inline void User::set_facebook_id(const char* value,
    size_t size) {
  
  facebook_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.User.facebook_id)
}
inline std::string* User::_internal_mutable_facebook_id() {
  
  return facebook_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* User::release_facebook_id() {
  // @@protoc_insertion_point(field_release:nakama.api.User.facebook_id)
  return facebook_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void User::set_allocated_facebook_id(std::string* facebook_id) {
  if (facebook_id != nullptr) {
    
  } else {
    
  }
  facebook_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), facebook_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.User.facebook_id)
}

// string google_id = 10;
inline void User::clear_google_id() {
  google_id_.ClearToEmpty();
}
inline const std::string& User::google_id() const {
  // @@protoc_insertion_point(field_get:nakama.api.User.google_id)
  return _internal_google_id();
}
inline void User::set_google_id(const std::string& value) {
  _internal_set_google_id(value);
  // @@protoc_insertion_point(field_set:nakama.api.User.google_id)
}
inline std::string* User::mutable_google_id() {
  // @@protoc_insertion_point(field_mutable:nakama.api.User.google_id)
  return _internal_mutable_google_id();
}
inline const std::string& User::_internal_google_id() const {
  return google_id_.Get();
}
inline void User::_internal_set_google_id(const std::string& value) {
  
  google_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void User::set_google_id(std::string&& value) {
  
  google_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.User.google_id)
}
inline void User::set_google_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  google_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.User.google_id)
}
inline void User::set_google_id(const char* value,
    size_t size) {
  
  google_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.User.google_id)
}
inline std::string* User::_internal_mutable_google_id() {
  
  return google_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* User::release_google_id() {
  // @@protoc_insertion_point(field_release:nakama.api.User.google_id)
  return google_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void User::set_allocated_google_id(std::string* google_id) {
  if (google_id != nullptr) {
    
  } else {
    
  }
  google_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), google_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.User.google_id)
}

// string gamecenter_id = 11;
inline void User::clear_gamecenter_id() {
  gamecenter_id_.ClearToEmpty();
}
inline const std::string& User::gamecenter_id() const {
  // @@protoc_insertion_point(field_get:nakama.api.User.gamecenter_id)
  return _internal_gamecenter_id();
}
inline void User::set_gamecenter_id(const std::string& value) {
  _internal_set_gamecenter_id(value);
  // @@protoc_insertion_point(field_set:nakama.api.User.gamecenter_id)
}
inline std::string* User::mutable_gamecenter_id() {
  // @@protoc_insertion_point(field_mutable:nakama.api.User.gamecenter_id)
  return _internal_mutable_gamecenter_id();
}
inline const std::string& User::_internal_gamecenter_id() const {
  return gamecenter_id_.Get();
}
inline void User::_internal_set_gamecenter_id(const std::string& value) {
  
  gamecenter_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void User::set_gamecenter_id(std::string&& value) {
  
  gamecenter_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.User.gamecenter_id)
}
inline void User::set_gamecenter_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  gamecenter_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.User.gamecenter_id)
}
inline void User::set_gamecenter_id(const char* value,
    size_t size) {
  
  gamecenter_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.User.gamecenter_id)
}
inline std::string* User::_internal_mutable_gamecenter_id() {
  
  return gamecenter_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* User::release_gamecenter_id() {
  // @@protoc_insertion_point(field_release:nakama.api.User.gamecenter_id)
  return gamecenter_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void User::set_allocated_gamecenter_id(std::string* gamecenter_id) {
  if (gamecenter_id != nullptr) {
    
  } else {
    
  }
  gamecenter_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gamecenter_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.User.gamecenter_id)
}

// string steam_id = 12;
inline void User::clear_steam_id() {
  steam_id_.ClearToEmpty();
}
inline const std::string& User::steam_id() const {
  // @@protoc_insertion_point(field_get:nakama.api.User.steam_id)
  return _internal_steam_id();
}
inline void User::set_steam_id(const std::string& value) {
  _internal_set_steam_id(value);
  // @@protoc_insertion_point(field_set:nakama.api.User.steam_id)
}
inline std::string* User::mutable_steam_id() {
  // @@protoc_insertion_point(field_mutable:nakama.api.User.steam_id)
  return _internal_mutable_steam_id();
}
inline const std::string& User::_internal_steam_id() const {
  return steam_id_.Get();
}
inline void User::_internal_set_steam_id(const std::string& value) {
  
  steam_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void User::set_steam_id(std::string&& value) {
  
  steam_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.User.steam_id)
}
inline void User::set_steam_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  steam_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.User.steam_id)
}
inline void User::set_steam_id(const char* value,
    size_t size) {
  
  steam_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.User.steam_id)
}
inline std::string* User::_internal_mutable_steam_id() {
  
  return steam_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* User::release_steam_id() {
  // @@protoc_insertion_point(field_release:nakama.api.User.steam_id)
  return steam_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void User::set_allocated_steam_id(std::string* steam_id) {
  if (steam_id != nullptr) {
    
  } else {
    
  }
  steam_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), steam_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.User.steam_id)
}

// bool online = 13;
inline void User::clear_online() {
  online_ = false;
}
inline bool User::_internal_online() const {
  return online_;
}
inline bool User::online() const {
  // @@protoc_insertion_point(field_get:nakama.api.User.online)
  return _internal_online();
}
inline void User::_internal_set_online(bool value) {
  
  online_ = value;
}
inline void User::set_online(bool value) {
  _internal_set_online(value);
  // @@protoc_insertion_point(field_set:nakama.api.User.online)
}

// int32 edge_count = 14;
inline void User::clear_edge_count() {
  edge_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 User::_internal_edge_count() const {
  return edge_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 User::edge_count() const {
  // @@protoc_insertion_point(field_get:nakama.api.User.edge_count)
  return _internal_edge_count();
}
inline void User::_internal_set_edge_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  edge_count_ = value;
}
inline void User::set_edge_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_edge_count(value);
  // @@protoc_insertion_point(field_set:nakama.api.User.edge_count)
}

// .google.protobuf.Timestamp create_time = 15;
inline bool User::_internal_has_create_time() const {
  return this != internal_default_instance() && create_time_ != nullptr;
}
inline bool User::has_create_time() const {
  return _internal_has_create_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& User::_internal_create_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = create_time_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& User::create_time() const {
  // @@protoc_insertion_point(field_get:nakama.api.User.create_time)
  return _internal_create_time();
}
inline void User::unsafe_arena_set_allocated_create_time(
    PROTOBUF_NAMESPACE_ID::Timestamp* create_time) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(create_time_);
  }
  create_time_ = create_time;
  if (create_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nakama.api.User.create_time)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* User::release_create_time() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = create_time_;
  create_time_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* User::unsafe_arena_release_create_time() {
  // @@protoc_insertion_point(field_release:nakama.api.User.create_time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = create_time_;
  create_time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* User::_internal_mutable_create_time() {
  
  if (create_time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    create_time_ = p;
  }
  return create_time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* User::mutable_create_time() {
  // @@protoc_insertion_point(field_mutable:nakama.api.User.create_time)
  return _internal_mutable_create_time();
}
inline void User::set_allocated_create_time(PROTOBUF_NAMESPACE_ID::Timestamp* create_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(create_time_);
  }
  if (create_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(create_time)->GetArena();
    if (message_arena != submessage_arena) {
      create_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, create_time, submessage_arena);
    }
    
  } else {
    
  }
  create_time_ = create_time;
  // @@protoc_insertion_point(field_set_allocated:nakama.api.User.create_time)
}

// .google.protobuf.Timestamp update_time = 16;
inline bool User::_internal_has_update_time() const {
  return this != internal_default_instance() && update_time_ != nullptr;
}
inline bool User::has_update_time() const {
  return _internal_has_update_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& User::_internal_update_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = update_time_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& User::update_time() const {
  // @@protoc_insertion_point(field_get:nakama.api.User.update_time)
  return _internal_update_time();
}
inline void User::unsafe_arena_set_allocated_update_time(
    PROTOBUF_NAMESPACE_ID::Timestamp* update_time) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_time_);
  }
  update_time_ = update_time;
  if (update_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nakama.api.User.update_time)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* User::release_update_time() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = update_time_;
  update_time_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* User::unsafe_arena_release_update_time() {
  // @@protoc_insertion_point(field_release:nakama.api.User.update_time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = update_time_;
  update_time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* User::_internal_mutable_update_time() {
  
  if (update_time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    update_time_ = p;
  }
  return update_time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* User::mutable_update_time() {
  // @@protoc_insertion_point(field_mutable:nakama.api.User.update_time)
  return _internal_mutable_update_time();
}
inline void User::set_allocated_update_time(PROTOBUF_NAMESPACE_ID::Timestamp* update_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_time_);
  }
  if (update_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_time)->GetArena();
    if (message_arena != submessage_arena) {
      update_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_time, submessage_arena);
    }
    
  } else {
    
  }
  update_time_ = update_time;
  // @@protoc_insertion_point(field_set_allocated:nakama.api.User.update_time)
}

// string facebook_instant_game_id = 17;
inline void User::clear_facebook_instant_game_id() {
  facebook_instant_game_id_.ClearToEmpty();
}
inline const std::string& User::facebook_instant_game_id() const {
  // @@protoc_insertion_point(field_get:nakama.api.User.facebook_instant_game_id)
  return _internal_facebook_instant_game_id();
}
inline void User::set_facebook_instant_game_id(const std::string& value) {
  _internal_set_facebook_instant_game_id(value);
  // @@protoc_insertion_point(field_set:nakama.api.User.facebook_instant_game_id)
}
inline std::string* User::mutable_facebook_instant_game_id() {
  // @@protoc_insertion_point(field_mutable:nakama.api.User.facebook_instant_game_id)
  return _internal_mutable_facebook_instant_game_id();
}
inline const std::string& User::_internal_facebook_instant_game_id() const {
  return facebook_instant_game_id_.Get();
}
inline void User::_internal_set_facebook_instant_game_id(const std::string& value) {
  
  facebook_instant_game_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void User::set_facebook_instant_game_id(std::string&& value) {
  
  facebook_instant_game_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.User.facebook_instant_game_id)
}
inline void User::set_facebook_instant_game_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  facebook_instant_game_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.User.facebook_instant_game_id)
}
inline void User::set_facebook_instant_game_id(const char* value,
    size_t size) {
  
  facebook_instant_game_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.User.facebook_instant_game_id)
}
inline std::string* User::_internal_mutable_facebook_instant_game_id() {
  
  return facebook_instant_game_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* User::release_facebook_instant_game_id() {
  // @@protoc_insertion_point(field_release:nakama.api.User.facebook_instant_game_id)
  return facebook_instant_game_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void User::set_allocated_facebook_instant_game_id(std::string* facebook_instant_game_id) {
  if (facebook_instant_game_id != nullptr) {
    
  } else {
    
  }
  facebook_instant_game_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), facebook_instant_game_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.User.facebook_instant_game_id)
}

// string apple_id = 18;
inline void User::clear_apple_id() {
  apple_id_.ClearToEmpty();
}
inline const std::string& User::apple_id() const {
  // @@protoc_insertion_point(field_get:nakama.api.User.apple_id)
  return _internal_apple_id();
}
inline void User::set_apple_id(const std::string& value) {
  _internal_set_apple_id(value);
  // @@protoc_insertion_point(field_set:nakama.api.User.apple_id)
}
inline std::string* User::mutable_apple_id() {
  // @@protoc_insertion_point(field_mutable:nakama.api.User.apple_id)
  return _internal_mutable_apple_id();
}
inline const std::string& User::_internal_apple_id() const {
  return apple_id_.Get();
}
inline void User::_internal_set_apple_id(const std::string& value) {
  
  apple_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void User::set_apple_id(std::string&& value) {
  
  apple_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.User.apple_id)
}
inline void User::set_apple_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  apple_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.User.apple_id)
}
inline void User::set_apple_id(const char* value,
    size_t size) {
  
  apple_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.User.apple_id)
}
inline std::string* User::_internal_mutable_apple_id() {
  
  return apple_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* User::release_apple_id() {
  // @@protoc_insertion_point(field_release:nakama.api.User.apple_id)
  return apple_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void User::set_allocated_apple_id(std::string* apple_id) {
  if (apple_id != nullptr) {
    
  } else {
    
  }
  apple_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), apple_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.User.apple_id)
}

// -------------------------------------------------------------------

// UserGroupList_UserGroup

// .nakama.api.Group group = 1;
inline bool UserGroupList_UserGroup::_internal_has_group() const {
  return this != internal_default_instance() && group_ != nullptr;
}
inline bool UserGroupList_UserGroup::has_group() const {
  return _internal_has_group();
}
inline void UserGroupList_UserGroup::clear_group() {
  if (GetArena() == nullptr && group_ != nullptr) {
    delete group_;
  }
  group_ = nullptr;
}
inline const ::nakama::api::Group& UserGroupList_UserGroup::_internal_group() const {
  const ::nakama::api::Group* p = group_;
  return p != nullptr ? *p : reinterpret_cast<const ::nakama::api::Group&>(
      ::nakama::api::_Group_default_instance_);
}
inline const ::nakama::api::Group& UserGroupList_UserGroup::group() const {
  // @@protoc_insertion_point(field_get:nakama.api.UserGroupList.UserGroup.group)
  return _internal_group();
}
inline void UserGroupList_UserGroup::unsafe_arena_set_allocated_group(
    ::nakama::api::Group* group) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(group_);
  }
  group_ = group;
  if (group) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nakama.api.UserGroupList.UserGroup.group)
}
inline ::nakama::api::Group* UserGroupList_UserGroup::release_group() {
  
  ::nakama::api::Group* temp = group_;
  group_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::nakama::api::Group* UserGroupList_UserGroup::unsafe_arena_release_group() {
  // @@protoc_insertion_point(field_release:nakama.api.UserGroupList.UserGroup.group)
  
  ::nakama::api::Group* temp = group_;
  group_ = nullptr;
  return temp;
}
inline ::nakama::api::Group* UserGroupList_UserGroup::_internal_mutable_group() {
  
  if (group_ == nullptr) {
    auto* p = CreateMaybeMessage<::nakama::api::Group>(GetArena());
    group_ = p;
  }
  return group_;
}
inline ::nakama::api::Group* UserGroupList_UserGroup::mutable_group() {
  // @@protoc_insertion_point(field_mutable:nakama.api.UserGroupList.UserGroup.group)
  return _internal_mutable_group();
}
inline void UserGroupList_UserGroup::set_allocated_group(::nakama::api::Group* group) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete group_;
  }
  if (group) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(group);
    if (message_arena != submessage_arena) {
      group = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, group, submessage_arena);
    }
    
  } else {
    
  }
  group_ = group;
  // @@protoc_insertion_point(field_set_allocated:nakama.api.UserGroupList.UserGroup.group)
}

// .google.protobuf.Int32Value state = 2;
inline bool UserGroupList_UserGroup::_internal_has_state() const {
  return this != internal_default_instance() && state_ != nullptr;
}
inline bool UserGroupList_UserGroup::has_state() const {
  return _internal_has_state();
}
inline const PROTOBUF_NAMESPACE_ID::Int32Value& UserGroupList_UserGroup::_internal_state() const {
  const PROTOBUF_NAMESPACE_ID::Int32Value* p = state_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Int32Value&>(
      PROTOBUF_NAMESPACE_ID::_Int32Value_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Int32Value& UserGroupList_UserGroup::state() const {
  // @@protoc_insertion_point(field_get:nakama.api.UserGroupList.UserGroup.state)
  return _internal_state();
}
inline void UserGroupList_UserGroup::unsafe_arena_set_allocated_state(
    PROTOBUF_NAMESPACE_ID::Int32Value* state) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(state_);
  }
  state_ = state;
  if (state) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nakama.api.UserGroupList.UserGroup.state)
}
inline PROTOBUF_NAMESPACE_ID::Int32Value* UserGroupList_UserGroup::release_state() {
  
  PROTOBUF_NAMESPACE_ID::Int32Value* temp = state_;
  state_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Int32Value* UserGroupList_UserGroup::unsafe_arena_release_state() {
  // @@protoc_insertion_point(field_release:nakama.api.UserGroupList.UserGroup.state)
  
  PROTOBUF_NAMESPACE_ID::Int32Value* temp = state_;
  state_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Int32Value* UserGroupList_UserGroup::_internal_mutable_state() {
  
  if (state_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Int32Value>(GetArena());
    state_ = p;
  }
  return state_;
}
inline PROTOBUF_NAMESPACE_ID::Int32Value* UserGroupList_UserGroup::mutable_state() {
  // @@protoc_insertion_point(field_mutable:nakama.api.UserGroupList.UserGroup.state)
  return _internal_mutable_state();
}
inline void UserGroupList_UserGroup::set_allocated_state(PROTOBUF_NAMESPACE_ID::Int32Value* state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(state_);
  }
  if (state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(state)->GetArena();
    if (message_arena != submessage_arena) {
      state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:nakama.api.UserGroupList.UserGroup.state)
}

// -------------------------------------------------------------------

// UserGroupList

// repeated .nakama.api.UserGroupList.UserGroup user_groups = 1;
inline int UserGroupList::_internal_user_groups_size() const {
  return user_groups_.size();
}
inline int UserGroupList::user_groups_size() const {
  return _internal_user_groups_size();
}
inline void UserGroupList::clear_user_groups() {
  user_groups_.Clear();
}
inline ::nakama::api::UserGroupList_UserGroup* UserGroupList::mutable_user_groups(int index) {
  // @@protoc_insertion_point(field_mutable:nakama.api.UserGroupList.user_groups)
  return user_groups_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nakama::api::UserGroupList_UserGroup >*
UserGroupList::mutable_user_groups() {
  // @@protoc_insertion_point(field_mutable_list:nakama.api.UserGroupList.user_groups)
  return &user_groups_;
}
inline const ::nakama::api::UserGroupList_UserGroup& UserGroupList::_internal_user_groups(int index) const {
  return user_groups_.Get(index);
}
inline const ::nakama::api::UserGroupList_UserGroup& UserGroupList::user_groups(int index) const {
  // @@protoc_insertion_point(field_get:nakama.api.UserGroupList.user_groups)
  return _internal_user_groups(index);
}
inline ::nakama::api::UserGroupList_UserGroup* UserGroupList::_internal_add_user_groups() {
  return user_groups_.Add();
}
inline ::nakama::api::UserGroupList_UserGroup* UserGroupList::add_user_groups() {
  // @@protoc_insertion_point(field_add:nakama.api.UserGroupList.user_groups)
  return _internal_add_user_groups();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nakama::api::UserGroupList_UserGroup >&
UserGroupList::user_groups() const {
  // @@protoc_insertion_point(field_list:nakama.api.UserGroupList.user_groups)
  return user_groups_;
}

// string cursor = 2;
inline void UserGroupList::clear_cursor() {
  cursor_.ClearToEmpty();
}
inline const std::string& UserGroupList::cursor() const {
  // @@protoc_insertion_point(field_get:nakama.api.UserGroupList.cursor)
  return _internal_cursor();
}
inline void UserGroupList::set_cursor(const std::string& value) {
  _internal_set_cursor(value);
  // @@protoc_insertion_point(field_set:nakama.api.UserGroupList.cursor)
}
inline std::string* UserGroupList::mutable_cursor() {
  // @@protoc_insertion_point(field_mutable:nakama.api.UserGroupList.cursor)
  return _internal_mutable_cursor();
}
inline const std::string& UserGroupList::_internal_cursor() const {
  return cursor_.Get();
}
inline void UserGroupList::_internal_set_cursor(const std::string& value) {
  
  cursor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UserGroupList::set_cursor(std::string&& value) {
  
  cursor_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.UserGroupList.cursor)
}
inline void UserGroupList::set_cursor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cursor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.UserGroupList.cursor)
}
inline void UserGroupList::set_cursor(const char* value,
    size_t size) {
  
  cursor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.UserGroupList.cursor)
}
inline std::string* UserGroupList::_internal_mutable_cursor() {
  
  return cursor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UserGroupList::release_cursor() {
  // @@protoc_insertion_point(field_release:nakama.api.UserGroupList.cursor)
  return cursor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UserGroupList::set_allocated_cursor(std::string* cursor) {
  if (cursor != nullptr) {
    
  } else {
    
  }
  cursor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cursor,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.UserGroupList.cursor)
}

// -------------------------------------------------------------------

// Users

// repeated .nakama.api.User users = 1;
inline int Users::_internal_users_size() const {
  return users_.size();
}
inline int Users::users_size() const {
  return _internal_users_size();
}
inline void Users::clear_users() {
  users_.Clear();
}
inline ::nakama::api::User* Users::mutable_users(int index) {
  // @@protoc_insertion_point(field_mutable:nakama.api.Users.users)
  return users_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nakama::api::User >*
Users::mutable_users() {
  // @@protoc_insertion_point(field_mutable_list:nakama.api.Users.users)
  return &users_;
}
inline const ::nakama::api::User& Users::_internal_users(int index) const {
  return users_.Get(index);
}
inline const ::nakama::api::User& Users::users(int index) const {
  // @@protoc_insertion_point(field_get:nakama.api.Users.users)
  return _internal_users(index);
}
inline ::nakama::api::User* Users::_internal_add_users() {
  return users_.Add();
}
inline ::nakama::api::User* Users::add_users() {
  // @@protoc_insertion_point(field_add:nakama.api.Users.users)
  return _internal_add_users();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nakama::api::User >&
Users::users() const {
  // @@protoc_insertion_point(field_list:nakama.api.Users.users)
  return users_;
}

// -------------------------------------------------------------------

// ValidatePurchaseAppleRequest

// string receipt = 1;
inline void ValidatePurchaseAppleRequest::clear_receipt() {
  receipt_.ClearToEmpty();
}
inline const std::string& ValidatePurchaseAppleRequest::receipt() const {
  // @@protoc_insertion_point(field_get:nakama.api.ValidatePurchaseAppleRequest.receipt)
  return _internal_receipt();
}
inline void ValidatePurchaseAppleRequest::set_receipt(const std::string& value) {
  _internal_set_receipt(value);
  // @@protoc_insertion_point(field_set:nakama.api.ValidatePurchaseAppleRequest.receipt)
}
inline std::string* ValidatePurchaseAppleRequest::mutable_receipt() {
  // @@protoc_insertion_point(field_mutable:nakama.api.ValidatePurchaseAppleRequest.receipt)
  return _internal_mutable_receipt();
}
inline const std::string& ValidatePurchaseAppleRequest::_internal_receipt() const {
  return receipt_.Get();
}
inline void ValidatePurchaseAppleRequest::_internal_set_receipt(const std::string& value) {
  
  receipt_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ValidatePurchaseAppleRequest::set_receipt(std::string&& value) {
  
  receipt_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.ValidatePurchaseAppleRequest.receipt)
}
inline void ValidatePurchaseAppleRequest::set_receipt(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  receipt_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.ValidatePurchaseAppleRequest.receipt)
}
inline void ValidatePurchaseAppleRequest::set_receipt(const char* value,
    size_t size) {
  
  receipt_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.ValidatePurchaseAppleRequest.receipt)
}
inline std::string* ValidatePurchaseAppleRequest::_internal_mutable_receipt() {
  
  return receipt_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ValidatePurchaseAppleRequest::release_receipt() {
  // @@protoc_insertion_point(field_release:nakama.api.ValidatePurchaseAppleRequest.receipt)
  return receipt_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ValidatePurchaseAppleRequest::set_allocated_receipt(std::string* receipt) {
  if (receipt != nullptr) {
    
  } else {
    
  }
  receipt_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), receipt,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.ValidatePurchaseAppleRequest.receipt)
}

// .google.protobuf.BoolValue persist = 2;
inline bool ValidatePurchaseAppleRequest::_internal_has_persist() const {
  return this != internal_default_instance() && persist_ != nullptr;
}
inline bool ValidatePurchaseAppleRequest::has_persist() const {
  return _internal_has_persist();
}
inline const PROTOBUF_NAMESPACE_ID::BoolValue& ValidatePurchaseAppleRequest::_internal_persist() const {
  const PROTOBUF_NAMESPACE_ID::BoolValue* p = persist_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::BoolValue&>(
      PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::BoolValue& ValidatePurchaseAppleRequest::persist() const {
  // @@protoc_insertion_point(field_get:nakama.api.ValidatePurchaseAppleRequest.persist)
  return _internal_persist();
}
inline void ValidatePurchaseAppleRequest::unsafe_arena_set_allocated_persist(
    PROTOBUF_NAMESPACE_ID::BoolValue* persist) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(persist_);
  }
  persist_ = persist;
  if (persist) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nakama.api.ValidatePurchaseAppleRequest.persist)
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* ValidatePurchaseAppleRequest::release_persist() {
  
  PROTOBUF_NAMESPACE_ID::BoolValue* temp = persist_;
  persist_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* ValidatePurchaseAppleRequest::unsafe_arena_release_persist() {
  // @@protoc_insertion_point(field_release:nakama.api.ValidatePurchaseAppleRequest.persist)
  
  PROTOBUF_NAMESPACE_ID::BoolValue* temp = persist_;
  persist_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* ValidatePurchaseAppleRequest::_internal_mutable_persist() {
  
  if (persist_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::BoolValue>(GetArena());
    persist_ = p;
  }
  return persist_;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* ValidatePurchaseAppleRequest::mutable_persist() {
  // @@protoc_insertion_point(field_mutable:nakama.api.ValidatePurchaseAppleRequest.persist)
  return _internal_mutable_persist();
}
inline void ValidatePurchaseAppleRequest::set_allocated_persist(PROTOBUF_NAMESPACE_ID::BoolValue* persist) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(persist_);
  }
  if (persist) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(persist)->GetArena();
    if (message_arena != submessage_arena) {
      persist = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, persist, submessage_arena);
    }
    
  } else {
    
  }
  persist_ = persist;
  // @@protoc_insertion_point(field_set_allocated:nakama.api.ValidatePurchaseAppleRequest.persist)
}

// -------------------------------------------------------------------

// ValidateSubscriptionAppleRequest

// string receipt = 1;
inline void ValidateSubscriptionAppleRequest::clear_receipt() {
  receipt_.ClearToEmpty();
}
inline const std::string& ValidateSubscriptionAppleRequest::receipt() const {
  // @@protoc_insertion_point(field_get:nakama.api.ValidateSubscriptionAppleRequest.receipt)
  return _internal_receipt();
}
inline void ValidateSubscriptionAppleRequest::set_receipt(const std::string& value) {
  _internal_set_receipt(value);
  // @@protoc_insertion_point(field_set:nakama.api.ValidateSubscriptionAppleRequest.receipt)
}
inline std::string* ValidateSubscriptionAppleRequest::mutable_receipt() {
  // @@protoc_insertion_point(field_mutable:nakama.api.ValidateSubscriptionAppleRequest.receipt)
  return _internal_mutable_receipt();
}
inline const std::string& ValidateSubscriptionAppleRequest::_internal_receipt() const {
  return receipt_.Get();
}
inline void ValidateSubscriptionAppleRequest::_internal_set_receipt(const std::string& value) {
  
  receipt_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ValidateSubscriptionAppleRequest::set_receipt(std::string&& value) {
  
  receipt_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.ValidateSubscriptionAppleRequest.receipt)
}
inline void ValidateSubscriptionAppleRequest::set_receipt(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  receipt_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.ValidateSubscriptionAppleRequest.receipt)
}
inline void ValidateSubscriptionAppleRequest::set_receipt(const char* value,
    size_t size) {
  
  receipt_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.ValidateSubscriptionAppleRequest.receipt)
}
inline std::string* ValidateSubscriptionAppleRequest::_internal_mutable_receipt() {
  
  return receipt_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ValidateSubscriptionAppleRequest::release_receipt() {
  // @@protoc_insertion_point(field_release:nakama.api.ValidateSubscriptionAppleRequest.receipt)
  return receipt_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ValidateSubscriptionAppleRequest::set_allocated_receipt(std::string* receipt) {
  if (receipt != nullptr) {
    
  } else {
    
  }
  receipt_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), receipt,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.ValidateSubscriptionAppleRequest.receipt)
}

// .google.protobuf.BoolValue persist = 2;
inline bool ValidateSubscriptionAppleRequest::_internal_has_persist() const {
  return this != internal_default_instance() && persist_ != nullptr;
}
inline bool ValidateSubscriptionAppleRequest::has_persist() const {
  return _internal_has_persist();
}
inline const PROTOBUF_NAMESPACE_ID::BoolValue& ValidateSubscriptionAppleRequest::_internal_persist() const {
  const PROTOBUF_NAMESPACE_ID::BoolValue* p = persist_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::BoolValue&>(
      PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::BoolValue& ValidateSubscriptionAppleRequest::persist() const {
  // @@protoc_insertion_point(field_get:nakama.api.ValidateSubscriptionAppleRequest.persist)
  return _internal_persist();
}
inline void ValidateSubscriptionAppleRequest::unsafe_arena_set_allocated_persist(
    PROTOBUF_NAMESPACE_ID::BoolValue* persist) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(persist_);
  }
  persist_ = persist;
  if (persist) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nakama.api.ValidateSubscriptionAppleRequest.persist)
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* ValidateSubscriptionAppleRequest::release_persist() {
  
  PROTOBUF_NAMESPACE_ID::BoolValue* temp = persist_;
  persist_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* ValidateSubscriptionAppleRequest::unsafe_arena_release_persist() {
  // @@protoc_insertion_point(field_release:nakama.api.ValidateSubscriptionAppleRequest.persist)
  
  PROTOBUF_NAMESPACE_ID::BoolValue* temp = persist_;
  persist_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* ValidateSubscriptionAppleRequest::_internal_mutable_persist() {
  
  if (persist_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::BoolValue>(GetArena());
    persist_ = p;
  }
  return persist_;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* ValidateSubscriptionAppleRequest::mutable_persist() {
  // @@protoc_insertion_point(field_mutable:nakama.api.ValidateSubscriptionAppleRequest.persist)
  return _internal_mutable_persist();
}
inline void ValidateSubscriptionAppleRequest::set_allocated_persist(PROTOBUF_NAMESPACE_ID::BoolValue* persist) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(persist_);
  }
  if (persist) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(persist)->GetArena();
    if (message_arena != submessage_arena) {
      persist = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, persist, submessage_arena);
    }
    
  } else {
    
  }
  persist_ = persist;
  // @@protoc_insertion_point(field_set_allocated:nakama.api.ValidateSubscriptionAppleRequest.persist)
}

// -------------------------------------------------------------------

// ValidatePurchaseGoogleRequest

// string purchase = 1;
inline void ValidatePurchaseGoogleRequest::clear_purchase() {
  purchase_.ClearToEmpty();
}
inline const std::string& ValidatePurchaseGoogleRequest::purchase() const {
  // @@protoc_insertion_point(field_get:nakama.api.ValidatePurchaseGoogleRequest.purchase)
  return _internal_purchase();
}
inline void ValidatePurchaseGoogleRequest::set_purchase(const std::string& value) {
  _internal_set_purchase(value);
  // @@protoc_insertion_point(field_set:nakama.api.ValidatePurchaseGoogleRequest.purchase)
}
inline std::string* ValidatePurchaseGoogleRequest::mutable_purchase() {
  // @@protoc_insertion_point(field_mutable:nakama.api.ValidatePurchaseGoogleRequest.purchase)
  return _internal_mutable_purchase();
}
inline const std::string& ValidatePurchaseGoogleRequest::_internal_purchase() const {
  return purchase_.Get();
}
inline void ValidatePurchaseGoogleRequest::_internal_set_purchase(const std::string& value) {
  
  purchase_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ValidatePurchaseGoogleRequest::set_purchase(std::string&& value) {
  
  purchase_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.ValidatePurchaseGoogleRequest.purchase)
}
inline void ValidatePurchaseGoogleRequest::set_purchase(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  purchase_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.ValidatePurchaseGoogleRequest.purchase)
}
inline void ValidatePurchaseGoogleRequest::set_purchase(const char* value,
    size_t size) {
  
  purchase_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.ValidatePurchaseGoogleRequest.purchase)
}
inline std::string* ValidatePurchaseGoogleRequest::_internal_mutable_purchase() {
  
  return purchase_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ValidatePurchaseGoogleRequest::release_purchase() {
  // @@protoc_insertion_point(field_release:nakama.api.ValidatePurchaseGoogleRequest.purchase)
  return purchase_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ValidatePurchaseGoogleRequest::set_allocated_purchase(std::string* purchase) {
  if (purchase != nullptr) {
    
  } else {
    
  }
  purchase_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), purchase,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.ValidatePurchaseGoogleRequest.purchase)
}

// .google.protobuf.BoolValue persist = 2;
inline bool ValidatePurchaseGoogleRequest::_internal_has_persist() const {
  return this != internal_default_instance() && persist_ != nullptr;
}
inline bool ValidatePurchaseGoogleRequest::has_persist() const {
  return _internal_has_persist();
}
inline const PROTOBUF_NAMESPACE_ID::BoolValue& ValidatePurchaseGoogleRequest::_internal_persist() const {
  const PROTOBUF_NAMESPACE_ID::BoolValue* p = persist_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::BoolValue&>(
      PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::BoolValue& ValidatePurchaseGoogleRequest::persist() const {
  // @@protoc_insertion_point(field_get:nakama.api.ValidatePurchaseGoogleRequest.persist)
  return _internal_persist();
}
inline void ValidatePurchaseGoogleRequest::unsafe_arena_set_allocated_persist(
    PROTOBUF_NAMESPACE_ID::BoolValue* persist) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(persist_);
  }
  persist_ = persist;
  if (persist) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nakama.api.ValidatePurchaseGoogleRequest.persist)
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* ValidatePurchaseGoogleRequest::release_persist() {
  
  PROTOBUF_NAMESPACE_ID::BoolValue* temp = persist_;
  persist_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* ValidatePurchaseGoogleRequest::unsafe_arena_release_persist() {
  // @@protoc_insertion_point(field_release:nakama.api.ValidatePurchaseGoogleRequest.persist)
  
  PROTOBUF_NAMESPACE_ID::BoolValue* temp = persist_;
  persist_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* ValidatePurchaseGoogleRequest::_internal_mutable_persist() {
  
  if (persist_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::BoolValue>(GetArena());
    persist_ = p;
  }
  return persist_;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* ValidatePurchaseGoogleRequest::mutable_persist() {
  // @@protoc_insertion_point(field_mutable:nakama.api.ValidatePurchaseGoogleRequest.persist)
  return _internal_mutable_persist();
}
inline void ValidatePurchaseGoogleRequest::set_allocated_persist(PROTOBUF_NAMESPACE_ID::BoolValue* persist) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(persist_);
  }
  if (persist) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(persist)->GetArena();
    if (message_arena != submessage_arena) {
      persist = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, persist, submessage_arena);
    }
    
  } else {
    
  }
  persist_ = persist;
  // @@protoc_insertion_point(field_set_allocated:nakama.api.ValidatePurchaseGoogleRequest.persist)
}

// -------------------------------------------------------------------

// ValidateSubscriptionGoogleRequest

// string receipt = 1;
inline void ValidateSubscriptionGoogleRequest::clear_receipt() {
  receipt_.ClearToEmpty();
}
inline const std::string& ValidateSubscriptionGoogleRequest::receipt() const {
  // @@protoc_insertion_point(field_get:nakama.api.ValidateSubscriptionGoogleRequest.receipt)
  return _internal_receipt();
}
inline void ValidateSubscriptionGoogleRequest::set_receipt(const std::string& value) {
  _internal_set_receipt(value);
  // @@protoc_insertion_point(field_set:nakama.api.ValidateSubscriptionGoogleRequest.receipt)
}
inline std::string* ValidateSubscriptionGoogleRequest::mutable_receipt() {
  // @@protoc_insertion_point(field_mutable:nakama.api.ValidateSubscriptionGoogleRequest.receipt)
  return _internal_mutable_receipt();
}
inline const std::string& ValidateSubscriptionGoogleRequest::_internal_receipt() const {
  return receipt_.Get();
}
inline void ValidateSubscriptionGoogleRequest::_internal_set_receipt(const std::string& value) {
  
  receipt_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ValidateSubscriptionGoogleRequest::set_receipt(std::string&& value) {
  
  receipt_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.ValidateSubscriptionGoogleRequest.receipt)
}
inline void ValidateSubscriptionGoogleRequest::set_receipt(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  receipt_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.ValidateSubscriptionGoogleRequest.receipt)
}
inline void ValidateSubscriptionGoogleRequest::set_receipt(const char* value,
    size_t size) {
  
  receipt_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.ValidateSubscriptionGoogleRequest.receipt)
}
inline std::string* ValidateSubscriptionGoogleRequest::_internal_mutable_receipt() {
  
  return receipt_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ValidateSubscriptionGoogleRequest::release_receipt() {
  // @@protoc_insertion_point(field_release:nakama.api.ValidateSubscriptionGoogleRequest.receipt)
  return receipt_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ValidateSubscriptionGoogleRequest::set_allocated_receipt(std::string* receipt) {
  if (receipt != nullptr) {
    
  } else {
    
  }
  receipt_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), receipt,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.ValidateSubscriptionGoogleRequest.receipt)
}

// .google.protobuf.BoolValue persist = 2;
inline bool ValidateSubscriptionGoogleRequest::_internal_has_persist() const {
  return this != internal_default_instance() && persist_ != nullptr;
}
inline bool ValidateSubscriptionGoogleRequest::has_persist() const {
  return _internal_has_persist();
}
inline const PROTOBUF_NAMESPACE_ID::BoolValue& ValidateSubscriptionGoogleRequest::_internal_persist() const {
  const PROTOBUF_NAMESPACE_ID::BoolValue* p = persist_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::BoolValue&>(
      PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::BoolValue& ValidateSubscriptionGoogleRequest::persist() const {
  // @@protoc_insertion_point(field_get:nakama.api.ValidateSubscriptionGoogleRequest.persist)
  return _internal_persist();
}
inline void ValidateSubscriptionGoogleRequest::unsafe_arena_set_allocated_persist(
    PROTOBUF_NAMESPACE_ID::BoolValue* persist) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(persist_);
  }
  persist_ = persist;
  if (persist) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nakama.api.ValidateSubscriptionGoogleRequest.persist)
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* ValidateSubscriptionGoogleRequest::release_persist() {
  
  PROTOBUF_NAMESPACE_ID::BoolValue* temp = persist_;
  persist_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* ValidateSubscriptionGoogleRequest::unsafe_arena_release_persist() {
  // @@protoc_insertion_point(field_release:nakama.api.ValidateSubscriptionGoogleRequest.persist)
  
  PROTOBUF_NAMESPACE_ID::BoolValue* temp = persist_;
  persist_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* ValidateSubscriptionGoogleRequest::_internal_mutable_persist() {
  
  if (persist_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::BoolValue>(GetArena());
    persist_ = p;
  }
  return persist_;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* ValidateSubscriptionGoogleRequest::mutable_persist() {
  // @@protoc_insertion_point(field_mutable:nakama.api.ValidateSubscriptionGoogleRequest.persist)
  return _internal_mutable_persist();
}
inline void ValidateSubscriptionGoogleRequest::set_allocated_persist(PROTOBUF_NAMESPACE_ID::BoolValue* persist) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(persist_);
  }
  if (persist) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(persist)->GetArena();
    if (message_arena != submessage_arena) {
      persist = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, persist, submessage_arena);
    }
    
  } else {
    
  }
  persist_ = persist;
  // @@protoc_insertion_point(field_set_allocated:nakama.api.ValidateSubscriptionGoogleRequest.persist)
}

// -------------------------------------------------------------------

// ValidatePurchaseHuaweiRequest

// string purchase = 1;
inline void ValidatePurchaseHuaweiRequest::clear_purchase() {
  purchase_.ClearToEmpty();
}
inline const std::string& ValidatePurchaseHuaweiRequest::purchase() const {
  // @@protoc_insertion_point(field_get:nakama.api.ValidatePurchaseHuaweiRequest.purchase)
  return _internal_purchase();
}
inline void ValidatePurchaseHuaweiRequest::set_purchase(const std::string& value) {
  _internal_set_purchase(value);
  // @@protoc_insertion_point(field_set:nakama.api.ValidatePurchaseHuaweiRequest.purchase)
}
inline std::string* ValidatePurchaseHuaweiRequest::mutable_purchase() {
  // @@protoc_insertion_point(field_mutable:nakama.api.ValidatePurchaseHuaweiRequest.purchase)
  return _internal_mutable_purchase();
}
inline const std::string& ValidatePurchaseHuaweiRequest::_internal_purchase() const {
  return purchase_.Get();
}
inline void ValidatePurchaseHuaweiRequest::_internal_set_purchase(const std::string& value) {
  
  purchase_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ValidatePurchaseHuaweiRequest::set_purchase(std::string&& value) {
  
  purchase_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.ValidatePurchaseHuaweiRequest.purchase)
}
inline void ValidatePurchaseHuaweiRequest::set_purchase(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  purchase_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.ValidatePurchaseHuaweiRequest.purchase)
}
inline void ValidatePurchaseHuaweiRequest::set_purchase(const char* value,
    size_t size) {
  
  purchase_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.ValidatePurchaseHuaweiRequest.purchase)
}
inline std::string* ValidatePurchaseHuaweiRequest::_internal_mutable_purchase() {
  
  return purchase_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ValidatePurchaseHuaweiRequest::release_purchase() {
  // @@protoc_insertion_point(field_release:nakama.api.ValidatePurchaseHuaweiRequest.purchase)
  return purchase_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ValidatePurchaseHuaweiRequest::set_allocated_purchase(std::string* purchase) {
  if (purchase != nullptr) {
    
  } else {
    
  }
  purchase_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), purchase,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.ValidatePurchaseHuaweiRequest.purchase)
}

// string signature = 2;
inline void ValidatePurchaseHuaweiRequest::clear_signature() {
  signature_.ClearToEmpty();
}
inline const std::string& ValidatePurchaseHuaweiRequest::signature() const {
  // @@protoc_insertion_point(field_get:nakama.api.ValidatePurchaseHuaweiRequest.signature)
  return _internal_signature();
}
inline void ValidatePurchaseHuaweiRequest::set_signature(const std::string& value) {
  _internal_set_signature(value);
  // @@protoc_insertion_point(field_set:nakama.api.ValidatePurchaseHuaweiRequest.signature)
}
inline std::string* ValidatePurchaseHuaweiRequest::mutable_signature() {
  // @@protoc_insertion_point(field_mutable:nakama.api.ValidatePurchaseHuaweiRequest.signature)
  return _internal_mutable_signature();
}
inline const std::string& ValidatePurchaseHuaweiRequest::_internal_signature() const {
  return signature_.Get();
}
inline void ValidatePurchaseHuaweiRequest::_internal_set_signature(const std::string& value) {
  
  signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ValidatePurchaseHuaweiRequest::set_signature(std::string&& value) {
  
  signature_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.ValidatePurchaseHuaweiRequest.signature)
}
inline void ValidatePurchaseHuaweiRequest::set_signature(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.ValidatePurchaseHuaweiRequest.signature)
}
inline void ValidatePurchaseHuaweiRequest::set_signature(const char* value,
    size_t size) {
  
  signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.ValidatePurchaseHuaweiRequest.signature)
}
inline std::string* ValidatePurchaseHuaweiRequest::_internal_mutable_signature() {
  
  return signature_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ValidatePurchaseHuaweiRequest::release_signature() {
  // @@protoc_insertion_point(field_release:nakama.api.ValidatePurchaseHuaweiRequest.signature)
  return signature_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ValidatePurchaseHuaweiRequest::set_allocated_signature(std::string* signature) {
  if (signature != nullptr) {
    
  } else {
    
  }
  signature_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signature,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.ValidatePurchaseHuaweiRequest.signature)
}

// .google.protobuf.BoolValue persist = 3;
inline bool ValidatePurchaseHuaweiRequest::_internal_has_persist() const {
  return this != internal_default_instance() && persist_ != nullptr;
}
inline bool ValidatePurchaseHuaweiRequest::has_persist() const {
  return _internal_has_persist();
}
inline const PROTOBUF_NAMESPACE_ID::BoolValue& ValidatePurchaseHuaweiRequest::_internal_persist() const {
  const PROTOBUF_NAMESPACE_ID::BoolValue* p = persist_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::BoolValue&>(
      PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::BoolValue& ValidatePurchaseHuaweiRequest::persist() const {
  // @@protoc_insertion_point(field_get:nakama.api.ValidatePurchaseHuaweiRequest.persist)
  return _internal_persist();
}
inline void ValidatePurchaseHuaweiRequest::unsafe_arena_set_allocated_persist(
    PROTOBUF_NAMESPACE_ID::BoolValue* persist) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(persist_);
  }
  persist_ = persist;
  if (persist) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nakama.api.ValidatePurchaseHuaweiRequest.persist)
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* ValidatePurchaseHuaweiRequest::release_persist() {
  
  PROTOBUF_NAMESPACE_ID::BoolValue* temp = persist_;
  persist_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* ValidatePurchaseHuaweiRequest::unsafe_arena_release_persist() {
  // @@protoc_insertion_point(field_release:nakama.api.ValidatePurchaseHuaweiRequest.persist)
  
  PROTOBUF_NAMESPACE_ID::BoolValue* temp = persist_;
  persist_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* ValidatePurchaseHuaweiRequest::_internal_mutable_persist() {
  
  if (persist_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::BoolValue>(GetArena());
    persist_ = p;
  }
  return persist_;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* ValidatePurchaseHuaweiRequest::mutable_persist() {
  // @@protoc_insertion_point(field_mutable:nakama.api.ValidatePurchaseHuaweiRequest.persist)
  return _internal_mutable_persist();
}
inline void ValidatePurchaseHuaweiRequest::set_allocated_persist(PROTOBUF_NAMESPACE_ID::BoolValue* persist) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(persist_);
  }
  if (persist) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(persist)->GetArena();
    if (message_arena != submessage_arena) {
      persist = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, persist, submessage_arena);
    }
    
  } else {
    
  }
  persist_ = persist;
  // @@protoc_insertion_point(field_set_allocated:nakama.api.ValidatePurchaseHuaweiRequest.persist)
}

// -------------------------------------------------------------------

// ValidatedPurchase

// string product_id = 1;
inline void ValidatedPurchase::clear_product_id() {
  product_id_.ClearToEmpty();
}
inline const std::string& ValidatedPurchase::product_id() const {
  // @@protoc_insertion_point(field_get:nakama.api.ValidatedPurchase.product_id)
  return _internal_product_id();
}
inline void ValidatedPurchase::set_product_id(const std::string& value) {
  _internal_set_product_id(value);
  // @@protoc_insertion_point(field_set:nakama.api.ValidatedPurchase.product_id)
}
inline std::string* ValidatedPurchase::mutable_product_id() {
  // @@protoc_insertion_point(field_mutable:nakama.api.ValidatedPurchase.product_id)
  return _internal_mutable_product_id();
}
inline const std::string& ValidatedPurchase::_internal_product_id() const {
  return product_id_.Get();
}
inline void ValidatedPurchase::_internal_set_product_id(const std::string& value) {
  
  product_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ValidatedPurchase::set_product_id(std::string&& value) {
  
  product_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.ValidatedPurchase.product_id)
}
inline void ValidatedPurchase::set_product_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  product_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.ValidatedPurchase.product_id)
}
inline void ValidatedPurchase::set_product_id(const char* value,
    size_t size) {
  
  product_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.ValidatedPurchase.product_id)
}
inline std::string* ValidatedPurchase::_internal_mutable_product_id() {
  
  return product_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ValidatedPurchase::release_product_id() {
  // @@protoc_insertion_point(field_release:nakama.api.ValidatedPurchase.product_id)
  return product_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ValidatedPurchase::set_allocated_product_id(std::string* product_id) {
  if (product_id != nullptr) {
    
  } else {
    
  }
  product_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), product_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.ValidatedPurchase.product_id)
}

// string transaction_id = 2;
inline void ValidatedPurchase::clear_transaction_id() {
  transaction_id_.ClearToEmpty();
}
inline const std::string& ValidatedPurchase::transaction_id() const {
  // @@protoc_insertion_point(field_get:nakama.api.ValidatedPurchase.transaction_id)
  return _internal_transaction_id();
}
inline void ValidatedPurchase::set_transaction_id(const std::string& value) {
  _internal_set_transaction_id(value);
  // @@protoc_insertion_point(field_set:nakama.api.ValidatedPurchase.transaction_id)
}
inline std::string* ValidatedPurchase::mutable_transaction_id() {
  // @@protoc_insertion_point(field_mutable:nakama.api.ValidatedPurchase.transaction_id)
  return _internal_mutable_transaction_id();
}
inline const std::string& ValidatedPurchase::_internal_transaction_id() const {
  return transaction_id_.Get();
}
inline void ValidatedPurchase::_internal_set_transaction_id(const std::string& value) {
  
  transaction_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ValidatedPurchase::set_transaction_id(std::string&& value) {
  
  transaction_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.ValidatedPurchase.transaction_id)
}
inline void ValidatedPurchase::set_transaction_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  transaction_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.ValidatedPurchase.transaction_id)
}
inline void ValidatedPurchase::set_transaction_id(const char* value,
    size_t size) {
  
  transaction_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.ValidatedPurchase.transaction_id)
}
inline std::string* ValidatedPurchase::_internal_mutable_transaction_id() {
  
  return transaction_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ValidatedPurchase::release_transaction_id() {
  // @@protoc_insertion_point(field_release:nakama.api.ValidatedPurchase.transaction_id)
  return transaction_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ValidatedPurchase::set_allocated_transaction_id(std::string* transaction_id) {
  if (transaction_id != nullptr) {
    
  } else {
    
  }
  transaction_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), transaction_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.ValidatedPurchase.transaction_id)
}

// .nakama.api.StoreProvider store = 3;
inline void ValidatedPurchase::clear_store() {
  store_ = 0;
}
inline ::nakama::api::StoreProvider ValidatedPurchase::_internal_store() const {
  return static_cast< ::nakama::api::StoreProvider >(store_);
}
inline ::nakama::api::StoreProvider ValidatedPurchase::store() const {
  // @@protoc_insertion_point(field_get:nakama.api.ValidatedPurchase.store)
  return _internal_store();
}
inline void ValidatedPurchase::_internal_set_store(::nakama::api::StoreProvider value) {
  
  store_ = value;
}
inline void ValidatedPurchase::set_store(::nakama::api::StoreProvider value) {
  _internal_set_store(value);
  // @@protoc_insertion_point(field_set:nakama.api.ValidatedPurchase.store)
}

// .google.protobuf.Timestamp purchase_time = 4;
inline bool ValidatedPurchase::_internal_has_purchase_time() const {
  return this != internal_default_instance() && purchase_time_ != nullptr;
}
inline bool ValidatedPurchase::has_purchase_time() const {
  return _internal_has_purchase_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& ValidatedPurchase::_internal_purchase_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = purchase_time_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& ValidatedPurchase::purchase_time() const {
  // @@protoc_insertion_point(field_get:nakama.api.ValidatedPurchase.purchase_time)
  return _internal_purchase_time();
}
inline void ValidatedPurchase::unsafe_arena_set_allocated_purchase_time(
    PROTOBUF_NAMESPACE_ID::Timestamp* purchase_time) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(purchase_time_);
  }
  purchase_time_ = purchase_time;
  if (purchase_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nakama.api.ValidatedPurchase.purchase_time)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ValidatedPurchase::release_purchase_time() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = purchase_time_;
  purchase_time_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ValidatedPurchase::unsafe_arena_release_purchase_time() {
  // @@protoc_insertion_point(field_release:nakama.api.ValidatedPurchase.purchase_time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = purchase_time_;
  purchase_time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ValidatedPurchase::_internal_mutable_purchase_time() {
  
  if (purchase_time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    purchase_time_ = p;
  }
  return purchase_time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ValidatedPurchase::mutable_purchase_time() {
  // @@protoc_insertion_point(field_mutable:nakama.api.ValidatedPurchase.purchase_time)
  return _internal_mutable_purchase_time();
}
inline void ValidatedPurchase::set_allocated_purchase_time(PROTOBUF_NAMESPACE_ID::Timestamp* purchase_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(purchase_time_);
  }
  if (purchase_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(purchase_time)->GetArena();
    if (message_arena != submessage_arena) {
      purchase_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, purchase_time, submessage_arena);
    }
    
  } else {
    
  }
  purchase_time_ = purchase_time;
  // @@protoc_insertion_point(field_set_allocated:nakama.api.ValidatedPurchase.purchase_time)
}

// .google.protobuf.Timestamp create_time = 5;
inline bool ValidatedPurchase::_internal_has_create_time() const {
  return this != internal_default_instance() && create_time_ != nullptr;
}
inline bool ValidatedPurchase::has_create_time() const {
  return _internal_has_create_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& ValidatedPurchase::_internal_create_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = create_time_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& ValidatedPurchase::create_time() const {
  // @@protoc_insertion_point(field_get:nakama.api.ValidatedPurchase.create_time)
  return _internal_create_time();
}
inline void ValidatedPurchase::unsafe_arena_set_allocated_create_time(
    PROTOBUF_NAMESPACE_ID::Timestamp* create_time) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(create_time_);
  }
  create_time_ = create_time;
  if (create_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nakama.api.ValidatedPurchase.create_time)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ValidatedPurchase::release_create_time() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = create_time_;
  create_time_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ValidatedPurchase::unsafe_arena_release_create_time() {
  // @@protoc_insertion_point(field_release:nakama.api.ValidatedPurchase.create_time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = create_time_;
  create_time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ValidatedPurchase::_internal_mutable_create_time() {
  
  if (create_time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    create_time_ = p;
  }
  return create_time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ValidatedPurchase::mutable_create_time() {
  // @@protoc_insertion_point(field_mutable:nakama.api.ValidatedPurchase.create_time)
  return _internal_mutable_create_time();
}
inline void ValidatedPurchase::set_allocated_create_time(PROTOBUF_NAMESPACE_ID::Timestamp* create_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(create_time_);
  }
  if (create_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(create_time)->GetArena();
    if (message_arena != submessage_arena) {
      create_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, create_time, submessage_arena);
    }
    
  } else {
    
  }
  create_time_ = create_time;
  // @@protoc_insertion_point(field_set_allocated:nakama.api.ValidatedPurchase.create_time)
}

// .google.protobuf.Timestamp update_time = 6;
inline bool ValidatedPurchase::_internal_has_update_time() const {
  return this != internal_default_instance() && update_time_ != nullptr;
}
inline bool ValidatedPurchase::has_update_time() const {
  return _internal_has_update_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& ValidatedPurchase::_internal_update_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = update_time_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& ValidatedPurchase::update_time() const {
  // @@protoc_insertion_point(field_get:nakama.api.ValidatedPurchase.update_time)
  return _internal_update_time();
}
inline void ValidatedPurchase::unsafe_arena_set_allocated_update_time(
    PROTOBUF_NAMESPACE_ID::Timestamp* update_time) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_time_);
  }
  update_time_ = update_time;
  if (update_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nakama.api.ValidatedPurchase.update_time)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ValidatedPurchase::release_update_time() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = update_time_;
  update_time_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ValidatedPurchase::unsafe_arena_release_update_time() {
  // @@protoc_insertion_point(field_release:nakama.api.ValidatedPurchase.update_time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = update_time_;
  update_time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ValidatedPurchase::_internal_mutable_update_time() {
  
  if (update_time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    update_time_ = p;
  }
  return update_time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ValidatedPurchase::mutable_update_time() {
  // @@protoc_insertion_point(field_mutable:nakama.api.ValidatedPurchase.update_time)
  return _internal_mutable_update_time();
}
inline void ValidatedPurchase::set_allocated_update_time(PROTOBUF_NAMESPACE_ID::Timestamp* update_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_time_);
  }
  if (update_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_time)->GetArena();
    if (message_arena != submessage_arena) {
      update_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_time, submessage_arena);
    }
    
  } else {
    
  }
  update_time_ = update_time;
  // @@protoc_insertion_point(field_set_allocated:nakama.api.ValidatedPurchase.update_time)
}

// string provider_response = 7;
inline void ValidatedPurchase::clear_provider_response() {
  provider_response_.ClearToEmpty();
}
inline const std::string& ValidatedPurchase::provider_response() const {
  // @@protoc_insertion_point(field_get:nakama.api.ValidatedPurchase.provider_response)
  return _internal_provider_response();
}
inline void ValidatedPurchase::set_provider_response(const std::string& value) {
  _internal_set_provider_response(value);
  // @@protoc_insertion_point(field_set:nakama.api.ValidatedPurchase.provider_response)
}
inline std::string* ValidatedPurchase::mutable_provider_response() {
  // @@protoc_insertion_point(field_mutable:nakama.api.ValidatedPurchase.provider_response)
  return _internal_mutable_provider_response();
}
inline const std::string& ValidatedPurchase::_internal_provider_response() const {
  return provider_response_.Get();
}
inline void ValidatedPurchase::_internal_set_provider_response(const std::string& value) {
  
  provider_response_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ValidatedPurchase::set_provider_response(std::string&& value) {
  
  provider_response_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.ValidatedPurchase.provider_response)
}
inline void ValidatedPurchase::set_provider_response(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  provider_response_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.ValidatedPurchase.provider_response)
}
inline void ValidatedPurchase::set_provider_response(const char* value,
    size_t size) {
  
  provider_response_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.ValidatedPurchase.provider_response)
}
inline std::string* ValidatedPurchase::_internal_mutable_provider_response() {
  
  return provider_response_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ValidatedPurchase::release_provider_response() {
  // @@protoc_insertion_point(field_release:nakama.api.ValidatedPurchase.provider_response)
  return provider_response_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ValidatedPurchase::set_allocated_provider_response(std::string* provider_response) {
  if (provider_response != nullptr) {
    
  } else {
    
  }
  provider_response_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), provider_response,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.ValidatedPurchase.provider_response)
}

// .nakama.api.StoreEnvironment environment = 8;
inline void ValidatedPurchase::clear_environment() {
  environment_ = 0;
}
inline ::nakama::api::StoreEnvironment ValidatedPurchase::_internal_environment() const {
  return static_cast< ::nakama::api::StoreEnvironment >(environment_);
}
inline ::nakama::api::StoreEnvironment ValidatedPurchase::environment() const {
  // @@protoc_insertion_point(field_get:nakama.api.ValidatedPurchase.environment)
  return _internal_environment();
}
inline void ValidatedPurchase::_internal_set_environment(::nakama::api::StoreEnvironment value) {
  
  environment_ = value;
}
inline void ValidatedPurchase::set_environment(::nakama::api::StoreEnvironment value) {
  _internal_set_environment(value);
  // @@protoc_insertion_point(field_set:nakama.api.ValidatedPurchase.environment)
}

// bool seen_before = 9;
inline void ValidatedPurchase::clear_seen_before() {
  seen_before_ = false;
}
inline bool ValidatedPurchase::_internal_seen_before() const {
  return seen_before_;
}
inline bool ValidatedPurchase::seen_before() const {
  // @@protoc_insertion_point(field_get:nakama.api.ValidatedPurchase.seen_before)
  return _internal_seen_before();
}
inline void ValidatedPurchase::_internal_set_seen_before(bool value) {
  
  seen_before_ = value;
}
inline void ValidatedPurchase::set_seen_before(bool value) {
  _internal_set_seen_before(value);
  // @@protoc_insertion_point(field_set:nakama.api.ValidatedPurchase.seen_before)
}

// -------------------------------------------------------------------

// ValidatePurchaseResponse

// repeated .nakama.api.ValidatedPurchase validated_purchases = 1;
inline int ValidatePurchaseResponse::_internal_validated_purchases_size() const {
  return validated_purchases_.size();
}
inline int ValidatePurchaseResponse::validated_purchases_size() const {
  return _internal_validated_purchases_size();
}
inline void ValidatePurchaseResponse::clear_validated_purchases() {
  validated_purchases_.Clear();
}
inline ::nakama::api::ValidatedPurchase* ValidatePurchaseResponse::mutable_validated_purchases(int index) {
  // @@protoc_insertion_point(field_mutable:nakama.api.ValidatePurchaseResponse.validated_purchases)
  return validated_purchases_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nakama::api::ValidatedPurchase >*
ValidatePurchaseResponse::mutable_validated_purchases() {
  // @@protoc_insertion_point(field_mutable_list:nakama.api.ValidatePurchaseResponse.validated_purchases)
  return &validated_purchases_;
}
inline const ::nakama::api::ValidatedPurchase& ValidatePurchaseResponse::_internal_validated_purchases(int index) const {
  return validated_purchases_.Get(index);
}
inline const ::nakama::api::ValidatedPurchase& ValidatePurchaseResponse::validated_purchases(int index) const {
  // @@protoc_insertion_point(field_get:nakama.api.ValidatePurchaseResponse.validated_purchases)
  return _internal_validated_purchases(index);
}
inline ::nakama::api::ValidatedPurchase* ValidatePurchaseResponse::_internal_add_validated_purchases() {
  return validated_purchases_.Add();
}
inline ::nakama::api::ValidatedPurchase* ValidatePurchaseResponse::add_validated_purchases() {
  // @@protoc_insertion_point(field_add:nakama.api.ValidatePurchaseResponse.validated_purchases)
  return _internal_add_validated_purchases();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nakama::api::ValidatedPurchase >&
ValidatePurchaseResponse::validated_purchases() const {
  // @@protoc_insertion_point(field_list:nakama.api.ValidatePurchaseResponse.validated_purchases)
  return validated_purchases_;
}

// -------------------------------------------------------------------

// ValidateSubscriptionResponse

// .nakama.api.ValidatedSubscription validated_subscription = 1;
inline bool ValidateSubscriptionResponse::_internal_has_validated_subscription() const {
  return this != internal_default_instance() && validated_subscription_ != nullptr;
}
inline bool ValidateSubscriptionResponse::has_validated_subscription() const {
  return _internal_has_validated_subscription();
}
inline void ValidateSubscriptionResponse::clear_validated_subscription() {
  if (GetArena() == nullptr && validated_subscription_ != nullptr) {
    delete validated_subscription_;
  }
  validated_subscription_ = nullptr;
}
inline const ::nakama::api::ValidatedSubscription& ValidateSubscriptionResponse::_internal_validated_subscription() const {
  const ::nakama::api::ValidatedSubscription* p = validated_subscription_;
  return p != nullptr ? *p : reinterpret_cast<const ::nakama::api::ValidatedSubscription&>(
      ::nakama::api::_ValidatedSubscription_default_instance_);
}
inline const ::nakama::api::ValidatedSubscription& ValidateSubscriptionResponse::validated_subscription() const {
  // @@protoc_insertion_point(field_get:nakama.api.ValidateSubscriptionResponse.validated_subscription)
  return _internal_validated_subscription();
}
inline void ValidateSubscriptionResponse::unsafe_arena_set_allocated_validated_subscription(
    ::nakama::api::ValidatedSubscription* validated_subscription) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(validated_subscription_);
  }
  validated_subscription_ = validated_subscription;
  if (validated_subscription) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nakama.api.ValidateSubscriptionResponse.validated_subscription)
}
inline ::nakama::api::ValidatedSubscription* ValidateSubscriptionResponse::release_validated_subscription() {
  
  ::nakama::api::ValidatedSubscription* temp = validated_subscription_;
  validated_subscription_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::nakama::api::ValidatedSubscription* ValidateSubscriptionResponse::unsafe_arena_release_validated_subscription() {
  // @@protoc_insertion_point(field_release:nakama.api.ValidateSubscriptionResponse.validated_subscription)
  
  ::nakama::api::ValidatedSubscription* temp = validated_subscription_;
  validated_subscription_ = nullptr;
  return temp;
}
inline ::nakama::api::ValidatedSubscription* ValidateSubscriptionResponse::_internal_mutable_validated_subscription() {
  
  if (validated_subscription_ == nullptr) {
    auto* p = CreateMaybeMessage<::nakama::api::ValidatedSubscription>(GetArena());
    validated_subscription_ = p;
  }
  return validated_subscription_;
}
inline ::nakama::api::ValidatedSubscription* ValidateSubscriptionResponse::mutable_validated_subscription() {
  // @@protoc_insertion_point(field_mutable:nakama.api.ValidateSubscriptionResponse.validated_subscription)
  return _internal_mutable_validated_subscription();
}
inline void ValidateSubscriptionResponse::set_allocated_validated_subscription(::nakama::api::ValidatedSubscription* validated_subscription) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete validated_subscription_;
  }
  if (validated_subscription) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(validated_subscription);
    if (message_arena != submessage_arena) {
      validated_subscription = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, validated_subscription, submessage_arena);
    }
    
  } else {
    
  }
  validated_subscription_ = validated_subscription;
  // @@protoc_insertion_point(field_set_allocated:nakama.api.ValidateSubscriptionResponse.validated_subscription)
}

// -------------------------------------------------------------------

// ValidatedSubscription

// string product_id = 1;
inline void ValidatedSubscription::clear_product_id() {
  product_id_.ClearToEmpty();
}
inline const std::string& ValidatedSubscription::product_id() const {
  // @@protoc_insertion_point(field_get:nakama.api.ValidatedSubscription.product_id)
  return _internal_product_id();
}
inline void ValidatedSubscription::set_product_id(const std::string& value) {
  _internal_set_product_id(value);
  // @@protoc_insertion_point(field_set:nakama.api.ValidatedSubscription.product_id)
}
inline std::string* ValidatedSubscription::mutable_product_id() {
  // @@protoc_insertion_point(field_mutable:nakama.api.ValidatedSubscription.product_id)
  return _internal_mutable_product_id();
}
inline const std::string& ValidatedSubscription::_internal_product_id() const {
  return product_id_.Get();
}
inline void ValidatedSubscription::_internal_set_product_id(const std::string& value) {
  
  product_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ValidatedSubscription::set_product_id(std::string&& value) {
  
  product_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.ValidatedSubscription.product_id)
}
inline void ValidatedSubscription::set_product_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  product_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.ValidatedSubscription.product_id)
}
inline void ValidatedSubscription::set_product_id(const char* value,
    size_t size) {
  
  product_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.ValidatedSubscription.product_id)
}
inline std::string* ValidatedSubscription::_internal_mutable_product_id() {
  
  return product_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ValidatedSubscription::release_product_id() {
  // @@protoc_insertion_point(field_release:nakama.api.ValidatedSubscription.product_id)
  return product_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ValidatedSubscription::set_allocated_product_id(std::string* product_id) {
  if (product_id != nullptr) {
    
  } else {
    
  }
  product_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), product_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.ValidatedSubscription.product_id)
}

// string original_transaction_id = 2;
inline void ValidatedSubscription::clear_original_transaction_id() {
  original_transaction_id_.ClearToEmpty();
}
inline const std::string& ValidatedSubscription::original_transaction_id() const {
  // @@protoc_insertion_point(field_get:nakama.api.ValidatedSubscription.original_transaction_id)
  return _internal_original_transaction_id();
}
inline void ValidatedSubscription::set_original_transaction_id(const std::string& value) {
  _internal_set_original_transaction_id(value);
  // @@protoc_insertion_point(field_set:nakama.api.ValidatedSubscription.original_transaction_id)
}
inline std::string* ValidatedSubscription::mutable_original_transaction_id() {
  // @@protoc_insertion_point(field_mutable:nakama.api.ValidatedSubscription.original_transaction_id)
  return _internal_mutable_original_transaction_id();
}
inline const std::string& ValidatedSubscription::_internal_original_transaction_id() const {
  return original_transaction_id_.Get();
}
inline void ValidatedSubscription::_internal_set_original_transaction_id(const std::string& value) {
  
  original_transaction_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ValidatedSubscription::set_original_transaction_id(std::string&& value) {
  
  original_transaction_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.ValidatedSubscription.original_transaction_id)
}
inline void ValidatedSubscription::set_original_transaction_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  original_transaction_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.ValidatedSubscription.original_transaction_id)
}
inline void ValidatedSubscription::set_original_transaction_id(const char* value,
    size_t size) {
  
  original_transaction_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.ValidatedSubscription.original_transaction_id)
}
inline std::string* ValidatedSubscription::_internal_mutable_original_transaction_id() {
  
  return original_transaction_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ValidatedSubscription::release_original_transaction_id() {
  // @@protoc_insertion_point(field_release:nakama.api.ValidatedSubscription.original_transaction_id)
  return original_transaction_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ValidatedSubscription::set_allocated_original_transaction_id(std::string* original_transaction_id) {
  if (original_transaction_id != nullptr) {
    
  } else {
    
  }
  original_transaction_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), original_transaction_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.ValidatedSubscription.original_transaction_id)
}

// .nakama.api.StoreProvider store = 3;
inline void ValidatedSubscription::clear_store() {
  store_ = 0;
}
inline ::nakama::api::StoreProvider ValidatedSubscription::_internal_store() const {
  return static_cast< ::nakama::api::StoreProvider >(store_);
}
inline ::nakama::api::StoreProvider ValidatedSubscription::store() const {
  // @@protoc_insertion_point(field_get:nakama.api.ValidatedSubscription.store)
  return _internal_store();
}
inline void ValidatedSubscription::_internal_set_store(::nakama::api::StoreProvider value) {
  
  store_ = value;
}
inline void ValidatedSubscription::set_store(::nakama::api::StoreProvider value) {
  _internal_set_store(value);
  // @@protoc_insertion_point(field_set:nakama.api.ValidatedSubscription.store)
}

// .google.protobuf.Timestamp purchase_time = 4;
inline bool ValidatedSubscription::_internal_has_purchase_time() const {
  return this != internal_default_instance() && purchase_time_ != nullptr;
}
inline bool ValidatedSubscription::has_purchase_time() const {
  return _internal_has_purchase_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& ValidatedSubscription::_internal_purchase_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = purchase_time_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& ValidatedSubscription::purchase_time() const {
  // @@protoc_insertion_point(field_get:nakama.api.ValidatedSubscription.purchase_time)
  return _internal_purchase_time();
}
inline void ValidatedSubscription::unsafe_arena_set_allocated_purchase_time(
    PROTOBUF_NAMESPACE_ID::Timestamp* purchase_time) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(purchase_time_);
  }
  purchase_time_ = purchase_time;
  if (purchase_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nakama.api.ValidatedSubscription.purchase_time)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ValidatedSubscription::release_purchase_time() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = purchase_time_;
  purchase_time_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ValidatedSubscription::unsafe_arena_release_purchase_time() {
  // @@protoc_insertion_point(field_release:nakama.api.ValidatedSubscription.purchase_time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = purchase_time_;
  purchase_time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ValidatedSubscription::_internal_mutable_purchase_time() {
  
  if (purchase_time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    purchase_time_ = p;
  }
  return purchase_time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ValidatedSubscription::mutable_purchase_time() {
  // @@protoc_insertion_point(field_mutable:nakama.api.ValidatedSubscription.purchase_time)
  return _internal_mutable_purchase_time();
}
inline void ValidatedSubscription::set_allocated_purchase_time(PROTOBUF_NAMESPACE_ID::Timestamp* purchase_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(purchase_time_);
  }
  if (purchase_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(purchase_time)->GetArena();
    if (message_arena != submessage_arena) {
      purchase_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, purchase_time, submessage_arena);
    }
    
  } else {
    
  }
  purchase_time_ = purchase_time;
  // @@protoc_insertion_point(field_set_allocated:nakama.api.ValidatedSubscription.purchase_time)
}

// .google.protobuf.Timestamp create_time = 5;
inline bool ValidatedSubscription::_internal_has_create_time() const {
  return this != internal_default_instance() && create_time_ != nullptr;
}
inline bool ValidatedSubscription::has_create_time() const {
  return _internal_has_create_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& ValidatedSubscription::_internal_create_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = create_time_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& ValidatedSubscription::create_time() const {
  // @@protoc_insertion_point(field_get:nakama.api.ValidatedSubscription.create_time)
  return _internal_create_time();
}
inline void ValidatedSubscription::unsafe_arena_set_allocated_create_time(
    PROTOBUF_NAMESPACE_ID::Timestamp* create_time) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(create_time_);
  }
  create_time_ = create_time;
  if (create_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nakama.api.ValidatedSubscription.create_time)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ValidatedSubscription::release_create_time() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = create_time_;
  create_time_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ValidatedSubscription::unsafe_arena_release_create_time() {
  // @@protoc_insertion_point(field_release:nakama.api.ValidatedSubscription.create_time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = create_time_;
  create_time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ValidatedSubscription::_internal_mutable_create_time() {
  
  if (create_time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    create_time_ = p;
  }
  return create_time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ValidatedSubscription::mutable_create_time() {
  // @@protoc_insertion_point(field_mutable:nakama.api.ValidatedSubscription.create_time)
  return _internal_mutable_create_time();
}
inline void ValidatedSubscription::set_allocated_create_time(PROTOBUF_NAMESPACE_ID::Timestamp* create_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(create_time_);
  }
  if (create_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(create_time)->GetArena();
    if (message_arena != submessage_arena) {
      create_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, create_time, submessage_arena);
    }
    
  } else {
    
  }
  create_time_ = create_time;
  // @@protoc_insertion_point(field_set_allocated:nakama.api.ValidatedSubscription.create_time)
}

// .google.protobuf.Timestamp update_time = 6;
inline bool ValidatedSubscription::_internal_has_update_time() const {
  return this != internal_default_instance() && update_time_ != nullptr;
}
inline bool ValidatedSubscription::has_update_time() const {
  return _internal_has_update_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& ValidatedSubscription::_internal_update_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = update_time_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& ValidatedSubscription::update_time() const {
  // @@protoc_insertion_point(field_get:nakama.api.ValidatedSubscription.update_time)
  return _internal_update_time();
}
inline void ValidatedSubscription::unsafe_arena_set_allocated_update_time(
    PROTOBUF_NAMESPACE_ID::Timestamp* update_time) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_time_);
  }
  update_time_ = update_time;
  if (update_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nakama.api.ValidatedSubscription.update_time)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ValidatedSubscription::release_update_time() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = update_time_;
  update_time_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ValidatedSubscription::unsafe_arena_release_update_time() {
  // @@protoc_insertion_point(field_release:nakama.api.ValidatedSubscription.update_time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = update_time_;
  update_time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ValidatedSubscription::_internal_mutable_update_time() {
  
  if (update_time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    update_time_ = p;
  }
  return update_time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ValidatedSubscription::mutable_update_time() {
  // @@protoc_insertion_point(field_mutable:nakama.api.ValidatedSubscription.update_time)
  return _internal_mutable_update_time();
}
inline void ValidatedSubscription::set_allocated_update_time(PROTOBUF_NAMESPACE_ID::Timestamp* update_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_time_);
  }
  if (update_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_time)->GetArena();
    if (message_arena != submessage_arena) {
      update_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_time, submessage_arena);
    }
    
  } else {
    
  }
  update_time_ = update_time;
  // @@protoc_insertion_point(field_set_allocated:nakama.api.ValidatedSubscription.update_time)
}

// .nakama.api.StoreEnvironment environment = 7;
inline void ValidatedSubscription::clear_environment() {
  environment_ = 0;
}
inline ::nakama::api::StoreEnvironment ValidatedSubscription::_internal_environment() const {
  return static_cast< ::nakama::api::StoreEnvironment >(environment_);
}
inline ::nakama::api::StoreEnvironment ValidatedSubscription::environment() const {
  // @@protoc_insertion_point(field_get:nakama.api.ValidatedSubscription.environment)
  return _internal_environment();
}
inline void ValidatedSubscription::_internal_set_environment(::nakama::api::StoreEnvironment value) {
  
  environment_ = value;
}
inline void ValidatedSubscription::set_environment(::nakama::api::StoreEnvironment value) {
  _internal_set_environment(value);
  // @@protoc_insertion_point(field_set:nakama.api.ValidatedSubscription.environment)
}

// .google.protobuf.Timestamp expiry_time = 8;
inline bool ValidatedSubscription::_internal_has_expiry_time() const {
  return this != internal_default_instance() && expiry_time_ != nullptr;
}
inline bool ValidatedSubscription::has_expiry_time() const {
  return _internal_has_expiry_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& ValidatedSubscription::_internal_expiry_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = expiry_time_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& ValidatedSubscription::expiry_time() const {
  // @@protoc_insertion_point(field_get:nakama.api.ValidatedSubscription.expiry_time)
  return _internal_expiry_time();
}
inline void ValidatedSubscription::unsafe_arena_set_allocated_expiry_time(
    PROTOBUF_NAMESPACE_ID::Timestamp* expiry_time) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expiry_time_);
  }
  expiry_time_ = expiry_time;
  if (expiry_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nakama.api.ValidatedSubscription.expiry_time)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ValidatedSubscription::release_expiry_time() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = expiry_time_;
  expiry_time_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ValidatedSubscription::unsafe_arena_release_expiry_time() {
  // @@protoc_insertion_point(field_release:nakama.api.ValidatedSubscription.expiry_time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = expiry_time_;
  expiry_time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ValidatedSubscription::_internal_mutable_expiry_time() {
  
  if (expiry_time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    expiry_time_ = p;
  }
  return expiry_time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ValidatedSubscription::mutable_expiry_time() {
  // @@protoc_insertion_point(field_mutable:nakama.api.ValidatedSubscription.expiry_time)
  return _internal_mutable_expiry_time();
}
inline void ValidatedSubscription::set_allocated_expiry_time(PROTOBUF_NAMESPACE_ID::Timestamp* expiry_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(expiry_time_);
  }
  if (expiry_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expiry_time)->GetArena();
    if (message_arena != submessage_arena) {
      expiry_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expiry_time, submessage_arena);
    }
    
  } else {
    
  }
  expiry_time_ = expiry_time;
  // @@protoc_insertion_point(field_set_allocated:nakama.api.ValidatedSubscription.expiry_time)
}

// bool active = 9;
inline void ValidatedSubscription::clear_active() {
  active_ = false;
}
inline bool ValidatedSubscription::_internal_active() const {
  return active_;
}
inline bool ValidatedSubscription::active() const {
  // @@protoc_insertion_point(field_get:nakama.api.ValidatedSubscription.active)
  return _internal_active();
}
inline void ValidatedSubscription::_internal_set_active(bool value) {
  
  active_ = value;
}
inline void ValidatedSubscription::set_active(bool value) {
  _internal_set_active(value);
  // @@protoc_insertion_point(field_set:nakama.api.ValidatedSubscription.active)
}

// -------------------------------------------------------------------

// PurchaseList

// repeated .nakama.api.ValidatedPurchase validated_purchases = 1;
inline int PurchaseList::_internal_validated_purchases_size() const {
  return validated_purchases_.size();
}
inline int PurchaseList::validated_purchases_size() const {
  return _internal_validated_purchases_size();
}
inline void PurchaseList::clear_validated_purchases() {
  validated_purchases_.Clear();
}
inline ::nakama::api::ValidatedPurchase* PurchaseList::mutable_validated_purchases(int index) {
  // @@protoc_insertion_point(field_mutable:nakama.api.PurchaseList.validated_purchases)
  return validated_purchases_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nakama::api::ValidatedPurchase >*
PurchaseList::mutable_validated_purchases() {
  // @@protoc_insertion_point(field_mutable_list:nakama.api.PurchaseList.validated_purchases)
  return &validated_purchases_;
}
inline const ::nakama::api::ValidatedPurchase& PurchaseList::_internal_validated_purchases(int index) const {
  return validated_purchases_.Get(index);
}
inline const ::nakama::api::ValidatedPurchase& PurchaseList::validated_purchases(int index) const {
  // @@protoc_insertion_point(field_get:nakama.api.PurchaseList.validated_purchases)
  return _internal_validated_purchases(index);
}
inline ::nakama::api::ValidatedPurchase* PurchaseList::_internal_add_validated_purchases() {
  return validated_purchases_.Add();
}
inline ::nakama::api::ValidatedPurchase* PurchaseList::add_validated_purchases() {
  // @@protoc_insertion_point(field_add:nakama.api.PurchaseList.validated_purchases)
  return _internal_add_validated_purchases();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nakama::api::ValidatedPurchase >&
PurchaseList::validated_purchases() const {
  // @@protoc_insertion_point(field_list:nakama.api.PurchaseList.validated_purchases)
  return validated_purchases_;
}

// string cursor = 2;
inline void PurchaseList::clear_cursor() {
  cursor_.ClearToEmpty();
}
inline const std::string& PurchaseList::cursor() const {
  // @@protoc_insertion_point(field_get:nakama.api.PurchaseList.cursor)
  return _internal_cursor();
}
inline void PurchaseList::set_cursor(const std::string& value) {
  _internal_set_cursor(value);
  // @@protoc_insertion_point(field_set:nakama.api.PurchaseList.cursor)
}
inline std::string* PurchaseList::mutable_cursor() {
  // @@protoc_insertion_point(field_mutable:nakama.api.PurchaseList.cursor)
  return _internal_mutable_cursor();
}
inline const std::string& PurchaseList::_internal_cursor() const {
  return cursor_.Get();
}
inline void PurchaseList::_internal_set_cursor(const std::string& value) {
  
  cursor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PurchaseList::set_cursor(std::string&& value) {
  
  cursor_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.PurchaseList.cursor)
}
inline void PurchaseList::set_cursor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cursor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.PurchaseList.cursor)
}
inline void PurchaseList::set_cursor(const char* value,
    size_t size) {
  
  cursor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.PurchaseList.cursor)
}
inline std::string* PurchaseList::_internal_mutable_cursor() {
  
  return cursor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PurchaseList::release_cursor() {
  // @@protoc_insertion_point(field_release:nakama.api.PurchaseList.cursor)
  return cursor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PurchaseList::set_allocated_cursor(std::string* cursor) {
  if (cursor != nullptr) {
    
  } else {
    
  }
  cursor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cursor,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.PurchaseList.cursor)
}

// string prev_cursor = 3;
inline void PurchaseList::clear_prev_cursor() {
  prev_cursor_.ClearToEmpty();
}
inline const std::string& PurchaseList::prev_cursor() const {
  // @@protoc_insertion_point(field_get:nakama.api.PurchaseList.prev_cursor)
  return _internal_prev_cursor();
}
inline void PurchaseList::set_prev_cursor(const std::string& value) {
  _internal_set_prev_cursor(value);
  // @@protoc_insertion_point(field_set:nakama.api.PurchaseList.prev_cursor)
}
inline std::string* PurchaseList::mutable_prev_cursor() {
  // @@protoc_insertion_point(field_mutable:nakama.api.PurchaseList.prev_cursor)
  return _internal_mutable_prev_cursor();
}
inline const std::string& PurchaseList::_internal_prev_cursor() const {
  return prev_cursor_.Get();
}
inline void PurchaseList::_internal_set_prev_cursor(const std::string& value) {
  
  prev_cursor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PurchaseList::set_prev_cursor(std::string&& value) {
  
  prev_cursor_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.PurchaseList.prev_cursor)
}
inline void PurchaseList::set_prev_cursor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  prev_cursor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.PurchaseList.prev_cursor)
}
inline void PurchaseList::set_prev_cursor(const char* value,
    size_t size) {
  
  prev_cursor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.PurchaseList.prev_cursor)
}
inline std::string* PurchaseList::_internal_mutable_prev_cursor() {
  
  return prev_cursor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PurchaseList::release_prev_cursor() {
  // @@protoc_insertion_point(field_release:nakama.api.PurchaseList.prev_cursor)
  return prev_cursor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PurchaseList::set_allocated_prev_cursor(std::string* prev_cursor) {
  if (prev_cursor != nullptr) {
    
  } else {
    
  }
  prev_cursor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), prev_cursor,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.PurchaseList.prev_cursor)
}

// -------------------------------------------------------------------

// SubscriptionList

// repeated .nakama.api.ValidatedSubscription validated_subscriptions = 1;
inline int SubscriptionList::_internal_validated_subscriptions_size() const {
  return validated_subscriptions_.size();
}
inline int SubscriptionList::validated_subscriptions_size() const {
  return _internal_validated_subscriptions_size();
}
inline void SubscriptionList::clear_validated_subscriptions() {
  validated_subscriptions_.Clear();
}
inline ::nakama::api::ValidatedSubscription* SubscriptionList::mutable_validated_subscriptions(int index) {
  // @@protoc_insertion_point(field_mutable:nakama.api.SubscriptionList.validated_subscriptions)
  return validated_subscriptions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nakama::api::ValidatedSubscription >*
SubscriptionList::mutable_validated_subscriptions() {
  // @@protoc_insertion_point(field_mutable_list:nakama.api.SubscriptionList.validated_subscriptions)
  return &validated_subscriptions_;
}
inline const ::nakama::api::ValidatedSubscription& SubscriptionList::_internal_validated_subscriptions(int index) const {
  return validated_subscriptions_.Get(index);
}
inline const ::nakama::api::ValidatedSubscription& SubscriptionList::validated_subscriptions(int index) const {
  // @@protoc_insertion_point(field_get:nakama.api.SubscriptionList.validated_subscriptions)
  return _internal_validated_subscriptions(index);
}
inline ::nakama::api::ValidatedSubscription* SubscriptionList::_internal_add_validated_subscriptions() {
  return validated_subscriptions_.Add();
}
inline ::nakama::api::ValidatedSubscription* SubscriptionList::add_validated_subscriptions() {
  // @@protoc_insertion_point(field_add:nakama.api.SubscriptionList.validated_subscriptions)
  return _internal_add_validated_subscriptions();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nakama::api::ValidatedSubscription >&
SubscriptionList::validated_subscriptions() const {
  // @@protoc_insertion_point(field_list:nakama.api.SubscriptionList.validated_subscriptions)
  return validated_subscriptions_;
}

// string cursor = 2;
inline void SubscriptionList::clear_cursor() {
  cursor_.ClearToEmpty();
}
inline const std::string& SubscriptionList::cursor() const {
  // @@protoc_insertion_point(field_get:nakama.api.SubscriptionList.cursor)
  return _internal_cursor();
}
inline void SubscriptionList::set_cursor(const std::string& value) {
  _internal_set_cursor(value);
  // @@protoc_insertion_point(field_set:nakama.api.SubscriptionList.cursor)
}
inline std::string* SubscriptionList::mutable_cursor() {
  // @@protoc_insertion_point(field_mutable:nakama.api.SubscriptionList.cursor)
  return _internal_mutable_cursor();
}
inline const std::string& SubscriptionList::_internal_cursor() const {
  return cursor_.Get();
}
inline void SubscriptionList::_internal_set_cursor(const std::string& value) {
  
  cursor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SubscriptionList::set_cursor(std::string&& value) {
  
  cursor_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.SubscriptionList.cursor)
}
inline void SubscriptionList::set_cursor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cursor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.SubscriptionList.cursor)
}
inline void SubscriptionList::set_cursor(const char* value,
    size_t size) {
  
  cursor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.SubscriptionList.cursor)
}
inline std::string* SubscriptionList::_internal_mutable_cursor() {
  
  return cursor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SubscriptionList::release_cursor() {
  // @@protoc_insertion_point(field_release:nakama.api.SubscriptionList.cursor)
  return cursor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SubscriptionList::set_allocated_cursor(std::string* cursor) {
  if (cursor != nullptr) {
    
  } else {
    
  }
  cursor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cursor,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.SubscriptionList.cursor)
}

// string prev_cursor = 3;
inline void SubscriptionList::clear_prev_cursor() {
  prev_cursor_.ClearToEmpty();
}
inline const std::string& SubscriptionList::prev_cursor() const {
  // @@protoc_insertion_point(field_get:nakama.api.SubscriptionList.prev_cursor)
  return _internal_prev_cursor();
}
inline void SubscriptionList::set_prev_cursor(const std::string& value) {
  _internal_set_prev_cursor(value);
  // @@protoc_insertion_point(field_set:nakama.api.SubscriptionList.prev_cursor)
}
inline std::string* SubscriptionList::mutable_prev_cursor() {
  // @@protoc_insertion_point(field_mutable:nakama.api.SubscriptionList.prev_cursor)
  return _internal_mutable_prev_cursor();
}
inline const std::string& SubscriptionList::_internal_prev_cursor() const {
  return prev_cursor_.Get();
}
inline void SubscriptionList::_internal_set_prev_cursor(const std::string& value) {
  
  prev_cursor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SubscriptionList::set_prev_cursor(std::string&& value) {
  
  prev_cursor_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.SubscriptionList.prev_cursor)
}
inline void SubscriptionList::set_prev_cursor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  prev_cursor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.SubscriptionList.prev_cursor)
}
inline void SubscriptionList::set_prev_cursor(const char* value,
    size_t size) {
  
  prev_cursor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.SubscriptionList.prev_cursor)
}
inline std::string* SubscriptionList::_internal_mutable_prev_cursor() {
  
  return prev_cursor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SubscriptionList::release_prev_cursor() {
  // @@protoc_insertion_point(field_release:nakama.api.SubscriptionList.prev_cursor)
  return prev_cursor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SubscriptionList::set_allocated_prev_cursor(std::string* prev_cursor) {
  if (prev_cursor != nullptr) {
    
  } else {
    
  }
  prev_cursor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), prev_cursor,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.SubscriptionList.prev_cursor)
}

// -------------------------------------------------------------------

// WriteLeaderboardRecordRequest_LeaderboardRecordWrite

// int64 score = 1;
inline void WriteLeaderboardRecordRequest_LeaderboardRecordWrite::clear_score() {
  score_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 WriteLeaderboardRecordRequest_LeaderboardRecordWrite::_internal_score() const {
  return score_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 WriteLeaderboardRecordRequest_LeaderboardRecordWrite::score() const {
  // @@protoc_insertion_point(field_get:nakama.api.WriteLeaderboardRecordRequest.LeaderboardRecordWrite.score)
  return _internal_score();
}
inline void WriteLeaderboardRecordRequest_LeaderboardRecordWrite::_internal_set_score(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  score_ = value;
}
inline void WriteLeaderboardRecordRequest_LeaderboardRecordWrite::set_score(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:nakama.api.WriteLeaderboardRecordRequest.LeaderboardRecordWrite.score)
}

// int64 subscore = 2;
inline void WriteLeaderboardRecordRequest_LeaderboardRecordWrite::clear_subscore() {
  subscore_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 WriteLeaderboardRecordRequest_LeaderboardRecordWrite::_internal_subscore() const {
  return subscore_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 WriteLeaderboardRecordRequest_LeaderboardRecordWrite::subscore() const {
  // @@protoc_insertion_point(field_get:nakama.api.WriteLeaderboardRecordRequest.LeaderboardRecordWrite.subscore)
  return _internal_subscore();
}
inline void WriteLeaderboardRecordRequest_LeaderboardRecordWrite::_internal_set_subscore(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  subscore_ = value;
}
inline void WriteLeaderboardRecordRequest_LeaderboardRecordWrite::set_subscore(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_subscore(value);
  // @@protoc_insertion_point(field_set:nakama.api.WriteLeaderboardRecordRequest.LeaderboardRecordWrite.subscore)
}

// string metadata = 3;
inline void WriteLeaderboardRecordRequest_LeaderboardRecordWrite::clear_metadata() {
  metadata_.ClearToEmpty();
}
inline const std::string& WriteLeaderboardRecordRequest_LeaderboardRecordWrite::metadata() const {
  // @@protoc_insertion_point(field_get:nakama.api.WriteLeaderboardRecordRequest.LeaderboardRecordWrite.metadata)
  return _internal_metadata();
}
inline void WriteLeaderboardRecordRequest_LeaderboardRecordWrite::set_metadata(const std::string& value) {
  _internal_set_metadata(value);
  // @@protoc_insertion_point(field_set:nakama.api.WriteLeaderboardRecordRequest.LeaderboardRecordWrite.metadata)
}
inline std::string* WriteLeaderboardRecordRequest_LeaderboardRecordWrite::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable:nakama.api.WriteLeaderboardRecordRequest.LeaderboardRecordWrite.metadata)
  return _internal_mutable_metadata();
}
inline const std::string& WriteLeaderboardRecordRequest_LeaderboardRecordWrite::_internal_metadata() const {
  return metadata_.Get();
}
inline void WriteLeaderboardRecordRequest_LeaderboardRecordWrite::_internal_set_metadata(const std::string& value) {
  
  metadata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void WriteLeaderboardRecordRequest_LeaderboardRecordWrite::set_metadata(std::string&& value) {
  
  metadata_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.WriteLeaderboardRecordRequest.LeaderboardRecordWrite.metadata)
}
inline void WriteLeaderboardRecordRequest_LeaderboardRecordWrite::set_metadata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  metadata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.WriteLeaderboardRecordRequest.LeaderboardRecordWrite.metadata)
}
inline void WriteLeaderboardRecordRequest_LeaderboardRecordWrite::set_metadata(const char* value,
    size_t size) {
  
  metadata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.WriteLeaderboardRecordRequest.LeaderboardRecordWrite.metadata)
}
inline std::string* WriteLeaderboardRecordRequest_LeaderboardRecordWrite::_internal_mutable_metadata() {
  
  return metadata_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* WriteLeaderboardRecordRequest_LeaderboardRecordWrite::release_metadata() {
  // @@protoc_insertion_point(field_release:nakama.api.WriteLeaderboardRecordRequest.LeaderboardRecordWrite.metadata)
  return metadata_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WriteLeaderboardRecordRequest_LeaderboardRecordWrite::set_allocated_metadata(std::string* metadata) {
  if (metadata != nullptr) {
    
  } else {
    
  }
  metadata_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), metadata,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.WriteLeaderboardRecordRequest.LeaderboardRecordWrite.metadata)
}

// .nakama.api.Operator operator = 4;
inline void WriteLeaderboardRecordRequest_LeaderboardRecordWrite::clear_operator_() {
  operator__ = 0;
}
inline ::nakama::api::Operator WriteLeaderboardRecordRequest_LeaderboardRecordWrite::_internal_operator_() const {
  return static_cast< ::nakama::api::Operator >(operator__);
}
inline ::nakama::api::Operator WriteLeaderboardRecordRequest_LeaderboardRecordWrite::operator_() const {
  // @@protoc_insertion_point(field_get:nakama.api.WriteLeaderboardRecordRequest.LeaderboardRecordWrite.operator)
  return _internal_operator_();
}
inline void WriteLeaderboardRecordRequest_LeaderboardRecordWrite::_internal_set_operator_(::nakama::api::Operator value) {
  
  operator__ = value;
}
inline void WriteLeaderboardRecordRequest_LeaderboardRecordWrite::set_operator_(::nakama::api::Operator value) {
  _internal_set_operator_(value);
  // @@protoc_insertion_point(field_set:nakama.api.WriteLeaderboardRecordRequest.LeaderboardRecordWrite.operator)
}

// -------------------------------------------------------------------

// WriteLeaderboardRecordRequest

// string leaderboard_id = 1;
inline void WriteLeaderboardRecordRequest::clear_leaderboard_id() {
  leaderboard_id_.ClearToEmpty();
}
inline const std::string& WriteLeaderboardRecordRequest::leaderboard_id() const {
  // @@protoc_insertion_point(field_get:nakama.api.WriteLeaderboardRecordRequest.leaderboard_id)
  return _internal_leaderboard_id();
}
inline void WriteLeaderboardRecordRequest::set_leaderboard_id(const std::string& value) {
  _internal_set_leaderboard_id(value);
  // @@protoc_insertion_point(field_set:nakama.api.WriteLeaderboardRecordRequest.leaderboard_id)
}
inline std::string* WriteLeaderboardRecordRequest::mutable_leaderboard_id() {
  // @@protoc_insertion_point(field_mutable:nakama.api.WriteLeaderboardRecordRequest.leaderboard_id)
  return _internal_mutable_leaderboard_id();
}
inline const std::string& WriteLeaderboardRecordRequest::_internal_leaderboard_id() const {
  return leaderboard_id_.Get();
}
inline void WriteLeaderboardRecordRequest::_internal_set_leaderboard_id(const std::string& value) {
  
  leaderboard_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void WriteLeaderboardRecordRequest::set_leaderboard_id(std::string&& value) {
  
  leaderboard_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.WriteLeaderboardRecordRequest.leaderboard_id)
}
inline void WriteLeaderboardRecordRequest::set_leaderboard_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  leaderboard_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.WriteLeaderboardRecordRequest.leaderboard_id)
}
inline void WriteLeaderboardRecordRequest::set_leaderboard_id(const char* value,
    size_t size) {
  
  leaderboard_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.WriteLeaderboardRecordRequest.leaderboard_id)
}
inline std::string* WriteLeaderboardRecordRequest::_internal_mutable_leaderboard_id() {
  
  return leaderboard_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* WriteLeaderboardRecordRequest::release_leaderboard_id() {
  // @@protoc_insertion_point(field_release:nakama.api.WriteLeaderboardRecordRequest.leaderboard_id)
  return leaderboard_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WriteLeaderboardRecordRequest::set_allocated_leaderboard_id(std::string* leaderboard_id) {
  if (leaderboard_id != nullptr) {
    
  } else {
    
  }
  leaderboard_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), leaderboard_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.WriteLeaderboardRecordRequest.leaderboard_id)
}

// .nakama.api.WriteLeaderboardRecordRequest.LeaderboardRecordWrite record = 2;
inline bool WriteLeaderboardRecordRequest::_internal_has_record() const {
  return this != internal_default_instance() && record_ != nullptr;
}
inline bool WriteLeaderboardRecordRequest::has_record() const {
  return _internal_has_record();
}
inline void WriteLeaderboardRecordRequest::clear_record() {
  if (GetArena() == nullptr && record_ != nullptr) {
    delete record_;
  }
  record_ = nullptr;
}
inline const ::nakama::api::WriteLeaderboardRecordRequest_LeaderboardRecordWrite& WriteLeaderboardRecordRequest::_internal_record() const {
  const ::nakama::api::WriteLeaderboardRecordRequest_LeaderboardRecordWrite* p = record_;
  return p != nullptr ? *p : reinterpret_cast<const ::nakama::api::WriteLeaderboardRecordRequest_LeaderboardRecordWrite&>(
      ::nakama::api::_WriteLeaderboardRecordRequest_LeaderboardRecordWrite_default_instance_);
}
inline const ::nakama::api::WriteLeaderboardRecordRequest_LeaderboardRecordWrite& WriteLeaderboardRecordRequest::record() const {
  // @@protoc_insertion_point(field_get:nakama.api.WriteLeaderboardRecordRequest.record)
  return _internal_record();
}
inline void WriteLeaderboardRecordRequest::unsafe_arena_set_allocated_record(
    ::nakama::api::WriteLeaderboardRecordRequest_LeaderboardRecordWrite* record) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(record_);
  }
  record_ = record;
  if (record) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nakama.api.WriteLeaderboardRecordRequest.record)
}
inline ::nakama::api::WriteLeaderboardRecordRequest_LeaderboardRecordWrite* WriteLeaderboardRecordRequest::release_record() {
  
  ::nakama::api::WriteLeaderboardRecordRequest_LeaderboardRecordWrite* temp = record_;
  record_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::nakama::api::WriteLeaderboardRecordRequest_LeaderboardRecordWrite* WriteLeaderboardRecordRequest::unsafe_arena_release_record() {
  // @@protoc_insertion_point(field_release:nakama.api.WriteLeaderboardRecordRequest.record)
  
  ::nakama::api::WriteLeaderboardRecordRequest_LeaderboardRecordWrite* temp = record_;
  record_ = nullptr;
  return temp;
}
inline ::nakama::api::WriteLeaderboardRecordRequest_LeaderboardRecordWrite* WriteLeaderboardRecordRequest::_internal_mutable_record() {
  
  if (record_ == nullptr) {
    auto* p = CreateMaybeMessage<::nakama::api::WriteLeaderboardRecordRequest_LeaderboardRecordWrite>(GetArena());
    record_ = p;
  }
  return record_;
}
inline ::nakama::api::WriteLeaderboardRecordRequest_LeaderboardRecordWrite* WriteLeaderboardRecordRequest::mutable_record() {
  // @@protoc_insertion_point(field_mutable:nakama.api.WriteLeaderboardRecordRequest.record)
  return _internal_mutable_record();
}
inline void WriteLeaderboardRecordRequest::set_allocated_record(::nakama::api::WriteLeaderboardRecordRequest_LeaderboardRecordWrite* record) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete record_;
  }
  if (record) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(record);
    if (message_arena != submessage_arena) {
      record = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, record, submessage_arena);
    }
    
  } else {
    
  }
  record_ = record;
  // @@protoc_insertion_point(field_set_allocated:nakama.api.WriteLeaderboardRecordRequest.record)
}

// -------------------------------------------------------------------

// WriteStorageObject

// string collection = 1;
inline void WriteStorageObject::clear_collection() {
  collection_.ClearToEmpty();
}
inline const std::string& WriteStorageObject::collection() const {
  // @@protoc_insertion_point(field_get:nakama.api.WriteStorageObject.collection)
  return _internal_collection();
}
inline void WriteStorageObject::set_collection(const std::string& value) {
  _internal_set_collection(value);
  // @@protoc_insertion_point(field_set:nakama.api.WriteStorageObject.collection)
}
inline std::string* WriteStorageObject::mutable_collection() {
  // @@protoc_insertion_point(field_mutable:nakama.api.WriteStorageObject.collection)
  return _internal_mutable_collection();
}
inline const std::string& WriteStorageObject::_internal_collection() const {
  return collection_.Get();
}
inline void WriteStorageObject::_internal_set_collection(const std::string& value) {
  
  collection_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void WriteStorageObject::set_collection(std::string&& value) {
  
  collection_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.WriteStorageObject.collection)
}
inline void WriteStorageObject::set_collection(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  collection_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.WriteStorageObject.collection)
}
inline void WriteStorageObject::set_collection(const char* value,
    size_t size) {
  
  collection_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.WriteStorageObject.collection)
}
inline std::string* WriteStorageObject::_internal_mutable_collection() {
  
  return collection_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* WriteStorageObject::release_collection() {
  // @@protoc_insertion_point(field_release:nakama.api.WriteStorageObject.collection)
  return collection_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WriteStorageObject::set_allocated_collection(std::string* collection) {
  if (collection != nullptr) {
    
  } else {
    
  }
  collection_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), collection,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.WriteStorageObject.collection)
}

// string key = 2;
inline void WriteStorageObject::clear_key() {
  key_.ClearToEmpty();
}
inline const std::string& WriteStorageObject::key() const {
  // @@protoc_insertion_point(field_get:nakama.api.WriteStorageObject.key)
  return _internal_key();
}
inline void WriteStorageObject::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:nakama.api.WriteStorageObject.key)
}
inline std::string* WriteStorageObject::mutable_key() {
  // @@protoc_insertion_point(field_mutable:nakama.api.WriteStorageObject.key)
  return _internal_mutable_key();
}
inline const std::string& WriteStorageObject::_internal_key() const {
  return key_.Get();
}
inline void WriteStorageObject::_internal_set_key(const std::string& value) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void WriteStorageObject::set_key(std::string&& value) {
  
  key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.WriteStorageObject.key)
}
inline void WriteStorageObject::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.WriteStorageObject.key)
}
inline void WriteStorageObject::set_key(const char* value,
    size_t size) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.WriteStorageObject.key)
}
inline std::string* WriteStorageObject::_internal_mutable_key() {
  
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* WriteStorageObject::release_key() {
  // @@protoc_insertion_point(field_release:nakama.api.WriteStorageObject.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WriteStorageObject::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.WriteStorageObject.key)
}

// string value = 3;
inline void WriteStorageObject::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& WriteStorageObject::value() const {
  // @@protoc_insertion_point(field_get:nakama.api.WriteStorageObject.value)
  return _internal_value();
}
inline void WriteStorageObject::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:nakama.api.WriteStorageObject.value)
}
inline std::string* WriteStorageObject::mutable_value() {
  // @@protoc_insertion_point(field_mutable:nakama.api.WriteStorageObject.value)
  return _internal_mutable_value();
}
inline const std::string& WriteStorageObject::_internal_value() const {
  return value_.Get();
}
inline void WriteStorageObject::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void WriteStorageObject::set_value(std::string&& value) {
  
  value_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.WriteStorageObject.value)
}
inline void WriteStorageObject::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.WriteStorageObject.value)
}
inline void WriteStorageObject::set_value(const char* value,
    size_t size) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.WriteStorageObject.value)
}
inline std::string* WriteStorageObject::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* WriteStorageObject::release_value() {
  // @@protoc_insertion_point(field_release:nakama.api.WriteStorageObject.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WriteStorageObject::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.WriteStorageObject.value)
}

// string version = 4;
inline void WriteStorageObject::clear_version() {
  version_.ClearToEmpty();
}
inline const std::string& WriteStorageObject::version() const {
  // @@protoc_insertion_point(field_get:nakama.api.WriteStorageObject.version)
  return _internal_version();
}
inline void WriteStorageObject::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:nakama.api.WriteStorageObject.version)
}
inline std::string* WriteStorageObject::mutable_version() {
  // @@protoc_insertion_point(field_mutable:nakama.api.WriteStorageObject.version)
  return _internal_mutable_version();
}
inline const std::string& WriteStorageObject::_internal_version() const {
  return version_.Get();
}
inline void WriteStorageObject::_internal_set_version(const std::string& value) {
  
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void WriteStorageObject::set_version(std::string&& value) {
  
  version_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.WriteStorageObject.version)
}
inline void WriteStorageObject::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.WriteStorageObject.version)
}
inline void WriteStorageObject::set_version(const char* value,
    size_t size) {
  
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.WriteStorageObject.version)
}
inline std::string* WriteStorageObject::_internal_mutable_version() {
  
  return version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* WriteStorageObject::release_version() {
  // @@protoc_insertion_point(field_release:nakama.api.WriteStorageObject.version)
  return version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WriteStorageObject::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.WriteStorageObject.version)
}

// .google.protobuf.Int32Value permission_read = 5;
inline bool WriteStorageObject::_internal_has_permission_read() const {
  return this != internal_default_instance() && permission_read_ != nullptr;
}
inline bool WriteStorageObject::has_permission_read() const {
  return _internal_has_permission_read();
}
inline const PROTOBUF_NAMESPACE_ID::Int32Value& WriteStorageObject::_internal_permission_read() const {
  const PROTOBUF_NAMESPACE_ID::Int32Value* p = permission_read_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Int32Value&>(
      PROTOBUF_NAMESPACE_ID::_Int32Value_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Int32Value& WriteStorageObject::permission_read() const {
  // @@protoc_insertion_point(field_get:nakama.api.WriteStorageObject.permission_read)
  return _internal_permission_read();
}
inline void WriteStorageObject::unsafe_arena_set_allocated_permission_read(
    PROTOBUF_NAMESPACE_ID::Int32Value* permission_read) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(permission_read_);
  }
  permission_read_ = permission_read;
  if (permission_read) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nakama.api.WriteStorageObject.permission_read)
}
inline PROTOBUF_NAMESPACE_ID::Int32Value* WriteStorageObject::release_permission_read() {
  
  PROTOBUF_NAMESPACE_ID::Int32Value* temp = permission_read_;
  permission_read_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Int32Value* WriteStorageObject::unsafe_arena_release_permission_read() {
  // @@protoc_insertion_point(field_release:nakama.api.WriteStorageObject.permission_read)
  
  PROTOBUF_NAMESPACE_ID::Int32Value* temp = permission_read_;
  permission_read_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Int32Value* WriteStorageObject::_internal_mutable_permission_read() {
  
  if (permission_read_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Int32Value>(GetArena());
    permission_read_ = p;
  }
  return permission_read_;
}
inline PROTOBUF_NAMESPACE_ID::Int32Value* WriteStorageObject::mutable_permission_read() {
  // @@protoc_insertion_point(field_mutable:nakama.api.WriteStorageObject.permission_read)
  return _internal_mutable_permission_read();
}
inline void WriteStorageObject::set_allocated_permission_read(PROTOBUF_NAMESPACE_ID::Int32Value* permission_read) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(permission_read_);
  }
  if (permission_read) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(permission_read)->GetArena();
    if (message_arena != submessage_arena) {
      permission_read = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, permission_read, submessage_arena);
    }
    
  } else {
    
  }
  permission_read_ = permission_read;
  // @@protoc_insertion_point(field_set_allocated:nakama.api.WriteStorageObject.permission_read)
}

// .google.protobuf.Int32Value permission_write = 6;
inline bool WriteStorageObject::_internal_has_permission_write() const {
  return this != internal_default_instance() && permission_write_ != nullptr;
}
inline bool WriteStorageObject::has_permission_write() const {
  return _internal_has_permission_write();
}
inline const PROTOBUF_NAMESPACE_ID::Int32Value& WriteStorageObject::_internal_permission_write() const {
  const PROTOBUF_NAMESPACE_ID::Int32Value* p = permission_write_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Int32Value&>(
      PROTOBUF_NAMESPACE_ID::_Int32Value_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Int32Value& WriteStorageObject::permission_write() const {
  // @@protoc_insertion_point(field_get:nakama.api.WriteStorageObject.permission_write)
  return _internal_permission_write();
}
inline void WriteStorageObject::unsafe_arena_set_allocated_permission_write(
    PROTOBUF_NAMESPACE_ID::Int32Value* permission_write) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(permission_write_);
  }
  permission_write_ = permission_write;
  if (permission_write) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nakama.api.WriteStorageObject.permission_write)
}
inline PROTOBUF_NAMESPACE_ID::Int32Value* WriteStorageObject::release_permission_write() {
  
  PROTOBUF_NAMESPACE_ID::Int32Value* temp = permission_write_;
  permission_write_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Int32Value* WriteStorageObject::unsafe_arena_release_permission_write() {
  // @@protoc_insertion_point(field_release:nakama.api.WriteStorageObject.permission_write)
  
  PROTOBUF_NAMESPACE_ID::Int32Value* temp = permission_write_;
  permission_write_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Int32Value* WriteStorageObject::_internal_mutable_permission_write() {
  
  if (permission_write_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Int32Value>(GetArena());
    permission_write_ = p;
  }
  return permission_write_;
}
inline PROTOBUF_NAMESPACE_ID::Int32Value* WriteStorageObject::mutable_permission_write() {
  // @@protoc_insertion_point(field_mutable:nakama.api.WriteStorageObject.permission_write)
  return _internal_mutable_permission_write();
}
inline void WriteStorageObject::set_allocated_permission_write(PROTOBUF_NAMESPACE_ID::Int32Value* permission_write) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(permission_write_);
  }
  if (permission_write) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(permission_write)->GetArena();
    if (message_arena != submessage_arena) {
      permission_write = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, permission_write, submessage_arena);
    }
    
  } else {
    
  }
  permission_write_ = permission_write;
  // @@protoc_insertion_point(field_set_allocated:nakama.api.WriteStorageObject.permission_write)
}

// -------------------------------------------------------------------

// WriteStorageObjectsRequest

// repeated .nakama.api.WriteStorageObject objects = 1;
inline int WriteStorageObjectsRequest::_internal_objects_size() const {
  return objects_.size();
}
inline int WriteStorageObjectsRequest::objects_size() const {
  return _internal_objects_size();
}
inline void WriteStorageObjectsRequest::clear_objects() {
  objects_.Clear();
}
inline ::nakama::api::WriteStorageObject* WriteStorageObjectsRequest::mutable_objects(int index) {
  // @@protoc_insertion_point(field_mutable:nakama.api.WriteStorageObjectsRequest.objects)
  return objects_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nakama::api::WriteStorageObject >*
WriteStorageObjectsRequest::mutable_objects() {
  // @@protoc_insertion_point(field_mutable_list:nakama.api.WriteStorageObjectsRequest.objects)
  return &objects_;
}
inline const ::nakama::api::WriteStorageObject& WriteStorageObjectsRequest::_internal_objects(int index) const {
  return objects_.Get(index);
}
inline const ::nakama::api::WriteStorageObject& WriteStorageObjectsRequest::objects(int index) const {
  // @@protoc_insertion_point(field_get:nakama.api.WriteStorageObjectsRequest.objects)
  return _internal_objects(index);
}
inline ::nakama::api::WriteStorageObject* WriteStorageObjectsRequest::_internal_add_objects() {
  return objects_.Add();
}
inline ::nakama::api::WriteStorageObject* WriteStorageObjectsRequest::add_objects() {
  // @@protoc_insertion_point(field_add:nakama.api.WriteStorageObjectsRequest.objects)
  return _internal_add_objects();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nakama::api::WriteStorageObject >&
WriteStorageObjectsRequest::objects() const {
  // @@protoc_insertion_point(field_list:nakama.api.WriteStorageObjectsRequest.objects)
  return objects_;
}

// -------------------------------------------------------------------

// WriteTournamentRecordRequest_TournamentRecordWrite

// int64 score = 1;
inline void WriteTournamentRecordRequest_TournamentRecordWrite::clear_score() {
  score_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 WriteTournamentRecordRequest_TournamentRecordWrite::_internal_score() const {
  return score_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 WriteTournamentRecordRequest_TournamentRecordWrite::score() const {
  // @@protoc_insertion_point(field_get:nakama.api.WriteTournamentRecordRequest.TournamentRecordWrite.score)
  return _internal_score();
}
inline void WriteTournamentRecordRequest_TournamentRecordWrite::_internal_set_score(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  score_ = value;
}
inline void WriteTournamentRecordRequest_TournamentRecordWrite::set_score(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:nakama.api.WriteTournamentRecordRequest.TournamentRecordWrite.score)
}

// int64 subscore = 2;
inline void WriteTournamentRecordRequest_TournamentRecordWrite::clear_subscore() {
  subscore_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 WriteTournamentRecordRequest_TournamentRecordWrite::_internal_subscore() const {
  return subscore_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 WriteTournamentRecordRequest_TournamentRecordWrite::subscore() const {
  // @@protoc_insertion_point(field_get:nakama.api.WriteTournamentRecordRequest.TournamentRecordWrite.subscore)
  return _internal_subscore();
}
inline void WriteTournamentRecordRequest_TournamentRecordWrite::_internal_set_subscore(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  subscore_ = value;
}
inline void WriteTournamentRecordRequest_TournamentRecordWrite::set_subscore(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_subscore(value);
  // @@protoc_insertion_point(field_set:nakama.api.WriteTournamentRecordRequest.TournamentRecordWrite.subscore)
}

// string metadata = 3;
inline void WriteTournamentRecordRequest_TournamentRecordWrite::clear_metadata() {
  metadata_.ClearToEmpty();
}
inline const std::string& WriteTournamentRecordRequest_TournamentRecordWrite::metadata() const {
  // @@protoc_insertion_point(field_get:nakama.api.WriteTournamentRecordRequest.TournamentRecordWrite.metadata)
  return _internal_metadata();
}
inline void WriteTournamentRecordRequest_TournamentRecordWrite::set_metadata(const std::string& value) {
  _internal_set_metadata(value);
  // @@protoc_insertion_point(field_set:nakama.api.WriteTournamentRecordRequest.TournamentRecordWrite.metadata)
}
inline std::string* WriteTournamentRecordRequest_TournamentRecordWrite::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable:nakama.api.WriteTournamentRecordRequest.TournamentRecordWrite.metadata)
  return _internal_mutable_metadata();
}
inline const std::string& WriteTournamentRecordRequest_TournamentRecordWrite::_internal_metadata() const {
  return metadata_.Get();
}
inline void WriteTournamentRecordRequest_TournamentRecordWrite::_internal_set_metadata(const std::string& value) {
  
  metadata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void WriteTournamentRecordRequest_TournamentRecordWrite::set_metadata(std::string&& value) {
  
  metadata_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.WriteTournamentRecordRequest.TournamentRecordWrite.metadata)
}
inline void WriteTournamentRecordRequest_TournamentRecordWrite::set_metadata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  metadata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.WriteTournamentRecordRequest.TournamentRecordWrite.metadata)
}
inline void WriteTournamentRecordRequest_TournamentRecordWrite::set_metadata(const char* value,
    size_t size) {
  
  metadata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.WriteTournamentRecordRequest.TournamentRecordWrite.metadata)
}
inline std::string* WriteTournamentRecordRequest_TournamentRecordWrite::_internal_mutable_metadata() {
  
  return metadata_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* WriteTournamentRecordRequest_TournamentRecordWrite::release_metadata() {
  // @@protoc_insertion_point(field_release:nakama.api.WriteTournamentRecordRequest.TournamentRecordWrite.metadata)
  return metadata_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WriteTournamentRecordRequest_TournamentRecordWrite::set_allocated_metadata(std::string* metadata) {
  if (metadata != nullptr) {
    
  } else {
    
  }
  metadata_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), metadata,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.WriteTournamentRecordRequest.TournamentRecordWrite.metadata)
}

// .nakama.api.Operator operator = 4;
inline void WriteTournamentRecordRequest_TournamentRecordWrite::clear_operator_() {
  operator__ = 0;
}
inline ::nakama::api::Operator WriteTournamentRecordRequest_TournamentRecordWrite::_internal_operator_() const {
  return static_cast< ::nakama::api::Operator >(operator__);
}
inline ::nakama::api::Operator WriteTournamentRecordRequest_TournamentRecordWrite::operator_() const {
  // @@protoc_insertion_point(field_get:nakama.api.WriteTournamentRecordRequest.TournamentRecordWrite.operator)
  return _internal_operator_();
}
inline void WriteTournamentRecordRequest_TournamentRecordWrite::_internal_set_operator_(::nakama::api::Operator value) {
  
  operator__ = value;
}
inline void WriteTournamentRecordRequest_TournamentRecordWrite::set_operator_(::nakama::api::Operator value) {
  _internal_set_operator_(value);
  // @@protoc_insertion_point(field_set:nakama.api.WriteTournamentRecordRequest.TournamentRecordWrite.operator)
}

// -------------------------------------------------------------------

// WriteTournamentRecordRequest

// string tournament_id = 1;
inline void WriteTournamentRecordRequest::clear_tournament_id() {
  tournament_id_.ClearToEmpty();
}
inline const std::string& WriteTournamentRecordRequest::tournament_id() const {
  // @@protoc_insertion_point(field_get:nakama.api.WriteTournamentRecordRequest.tournament_id)
  return _internal_tournament_id();
}
inline void WriteTournamentRecordRequest::set_tournament_id(const std::string& value) {
  _internal_set_tournament_id(value);
  // @@protoc_insertion_point(field_set:nakama.api.WriteTournamentRecordRequest.tournament_id)
}
inline std::string* WriteTournamentRecordRequest::mutable_tournament_id() {
  // @@protoc_insertion_point(field_mutable:nakama.api.WriteTournamentRecordRequest.tournament_id)
  return _internal_mutable_tournament_id();
}
inline const std::string& WriteTournamentRecordRequest::_internal_tournament_id() const {
  return tournament_id_.Get();
}
inline void WriteTournamentRecordRequest::_internal_set_tournament_id(const std::string& value) {
  
  tournament_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void WriteTournamentRecordRequest::set_tournament_id(std::string&& value) {
  
  tournament_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nakama.api.WriteTournamentRecordRequest.tournament_id)
}
inline void WriteTournamentRecordRequest::set_tournament_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tournament_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nakama.api.WriteTournamentRecordRequest.tournament_id)
}
inline void WriteTournamentRecordRequest::set_tournament_id(const char* value,
    size_t size) {
  
  tournament_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nakama.api.WriteTournamentRecordRequest.tournament_id)
}
inline std::string* WriteTournamentRecordRequest::_internal_mutable_tournament_id() {
  
  return tournament_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* WriteTournamentRecordRequest::release_tournament_id() {
  // @@protoc_insertion_point(field_release:nakama.api.WriteTournamentRecordRequest.tournament_id)
  return tournament_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WriteTournamentRecordRequest::set_allocated_tournament_id(std::string* tournament_id) {
  if (tournament_id != nullptr) {
    
  } else {
    
  }
  tournament_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tournament_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nakama.api.WriteTournamentRecordRequest.tournament_id)
}

// .nakama.api.WriteTournamentRecordRequest.TournamentRecordWrite record = 2;
inline bool WriteTournamentRecordRequest::_internal_has_record() const {
  return this != internal_default_instance() && record_ != nullptr;
}
inline bool WriteTournamentRecordRequest::has_record() const {
  return _internal_has_record();
}
inline void WriteTournamentRecordRequest::clear_record() {
  if (GetArena() == nullptr && record_ != nullptr) {
    delete record_;
  }
  record_ = nullptr;
}
inline const ::nakama::api::WriteTournamentRecordRequest_TournamentRecordWrite& WriteTournamentRecordRequest::_internal_record() const {
  const ::nakama::api::WriteTournamentRecordRequest_TournamentRecordWrite* p = record_;
  return p != nullptr ? *p : reinterpret_cast<const ::nakama::api::WriteTournamentRecordRequest_TournamentRecordWrite&>(
      ::nakama::api::_WriteTournamentRecordRequest_TournamentRecordWrite_default_instance_);
}
inline const ::nakama::api::WriteTournamentRecordRequest_TournamentRecordWrite& WriteTournamentRecordRequest::record() const {
  // @@protoc_insertion_point(field_get:nakama.api.WriteTournamentRecordRequest.record)
  return _internal_record();
}
inline void WriteTournamentRecordRequest::unsafe_arena_set_allocated_record(
    ::nakama::api::WriteTournamentRecordRequest_TournamentRecordWrite* record) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(record_);
  }
  record_ = record;
  if (record) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nakama.api.WriteTournamentRecordRequest.record)
}
inline ::nakama::api::WriteTournamentRecordRequest_TournamentRecordWrite* WriteTournamentRecordRequest::release_record() {
  
  ::nakama::api::WriteTournamentRecordRequest_TournamentRecordWrite* temp = record_;
  record_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::nakama::api::WriteTournamentRecordRequest_TournamentRecordWrite* WriteTournamentRecordRequest::unsafe_arena_release_record() {
  // @@protoc_insertion_point(field_release:nakama.api.WriteTournamentRecordRequest.record)
  
  ::nakama::api::WriteTournamentRecordRequest_TournamentRecordWrite* temp = record_;
  record_ = nullptr;
  return temp;
}
inline ::nakama::api::WriteTournamentRecordRequest_TournamentRecordWrite* WriteTournamentRecordRequest::_internal_mutable_record() {
  
  if (record_ == nullptr) {
    auto* p = CreateMaybeMessage<::nakama::api::WriteTournamentRecordRequest_TournamentRecordWrite>(GetArena());
    record_ = p;
  }
  return record_;
}
inline ::nakama::api::WriteTournamentRecordRequest_TournamentRecordWrite* WriteTournamentRecordRequest::mutable_record() {
  // @@protoc_insertion_point(field_mutable:nakama.api.WriteTournamentRecordRequest.record)
  return _internal_mutable_record();
}
inline void WriteTournamentRecordRequest::set_allocated_record(::nakama::api::WriteTournamentRecordRequest_TournamentRecordWrite* record) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete record_;
  }
  if (record) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(record);
    if (message_arena != submessage_arena) {
      record = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, record, submessage_arena);
    }
    
  } else {
    
  }
  record_ = record;
  // @@protoc_insertion_point(field_set_allocated:nakama.api.WriteTournamentRecordRequest.record)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace api
}  // namespace nakama

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::nakama::api::Friend_State> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::nakama::api::Friend_State>() {
  return ::nakama::api::Friend_State_descriptor();
}
template <> struct is_proto_enum< ::nakama::api::GroupUserList_GroupUser_State> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::nakama::api::GroupUserList_GroupUser_State>() {
  return ::nakama::api::GroupUserList_GroupUser_State_descriptor();
}
template <> struct is_proto_enum< ::nakama::api::UserGroupList_UserGroup_State> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::nakama::api::UserGroupList_UserGroup_State>() {
  return ::nakama::api::UserGroupList_UserGroup_State_descriptor();
}
template <> struct is_proto_enum< ::nakama::api::StoreProvider> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::nakama::api::StoreProvider>() {
  return ::nakama::api::StoreProvider_descriptor();
}
template <> struct is_proto_enum< ::nakama::api::StoreEnvironment> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::nakama::api::StoreEnvironment>() {
  return ::nakama::api::StoreEnvironment_descriptor();
}
template <> struct is_proto_enum< ::nakama::api::Operator> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::nakama::api::Operator>() {
  return ::nakama::api::Operator_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto
