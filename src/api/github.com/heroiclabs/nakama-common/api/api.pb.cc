// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: github.com/heroiclabs/nakama-common/api/api.proto

#include "github.com/heroiclabs/nakama-common/api/api.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fwrappers_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BoolValue_google_2fprotobuf_2fwrappers_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fwrappers_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Int32Value_google_2fprotobuf_2fwrappers_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fwrappers_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Int64Value_google_2fprotobuf_2fwrappers_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fwrappers_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StringValue_google_2fprotobuf_2fwrappers_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftimestamp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fwrappers_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UInt32Value_google_2fprotobuf_2fwrappers_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AccountApple_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AccountApple_VarsEntry_DoNotUse_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AccountCustom_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AccountCustom_VarsEntry_DoNotUse_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AccountDevice_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AccountDevice_VarsEntry_DoNotUse_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AccountEmail_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AccountEmail_VarsEntry_DoNotUse_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AccountFacebook_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AccountFacebook_VarsEntry_DoNotUse_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AccountFacebookInstantGame_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AccountFacebookInstantGame_VarsEntry_DoNotUse_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AccountGameCenter_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AccountGameCenter_VarsEntry_DoNotUse_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AccountGoogle_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AccountGoogle_VarsEntry_DoNotUse_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AccountRefresh_VarsEntry_DoNotUse_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AccountSteam_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AccountSteam_VarsEntry_DoNotUse_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ChannelMessage_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeleteStorageObjectId_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Event_PropertiesEntry_DoNotUse_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Friend_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Group_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GroupUserList_GroupUser_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Leaderboard_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_LeaderboardRecord_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Match_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Notification_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReadStorageObjectId_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SessionRefreshRequest_VarsEntry_DoNotUse_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StorageObject_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StorageObjectAck_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Tournament_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_User_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_UserGroupList_UserGroup_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ValidatedPurchase_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WriteLeaderboardRecordRequest_LeaderboardRecordWrite_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_WriteStorageObject_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WriteTournamentRecordRequest_TournamentRecordWrite_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto;
namespace nakama {
namespace api {
class AccountDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Account> _instance;
} _Account_default_instance_;
class AccountRefresh_VarsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AccountRefresh_VarsEntry_DoNotUse> _instance;
} _AccountRefresh_VarsEntry_DoNotUse_default_instance_;
class AccountRefreshDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AccountRefresh> _instance;
} _AccountRefresh_default_instance_;
class AccountApple_VarsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AccountApple_VarsEntry_DoNotUse> _instance;
} _AccountApple_VarsEntry_DoNotUse_default_instance_;
class AccountAppleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AccountApple> _instance;
} _AccountApple_default_instance_;
class AccountCustom_VarsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AccountCustom_VarsEntry_DoNotUse> _instance;
} _AccountCustom_VarsEntry_DoNotUse_default_instance_;
class AccountCustomDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AccountCustom> _instance;
} _AccountCustom_default_instance_;
class AccountDevice_VarsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AccountDevice_VarsEntry_DoNotUse> _instance;
} _AccountDevice_VarsEntry_DoNotUse_default_instance_;
class AccountDeviceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AccountDevice> _instance;
} _AccountDevice_default_instance_;
class AccountEmail_VarsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AccountEmail_VarsEntry_DoNotUse> _instance;
} _AccountEmail_VarsEntry_DoNotUse_default_instance_;
class AccountEmailDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AccountEmail> _instance;
} _AccountEmail_default_instance_;
class AccountFacebook_VarsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AccountFacebook_VarsEntry_DoNotUse> _instance;
} _AccountFacebook_VarsEntry_DoNotUse_default_instance_;
class AccountFacebookDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AccountFacebook> _instance;
} _AccountFacebook_default_instance_;
class AccountFacebookInstantGame_VarsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AccountFacebookInstantGame_VarsEntry_DoNotUse> _instance;
} _AccountFacebookInstantGame_VarsEntry_DoNotUse_default_instance_;
class AccountFacebookInstantGameDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AccountFacebookInstantGame> _instance;
} _AccountFacebookInstantGame_default_instance_;
class AccountGameCenter_VarsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AccountGameCenter_VarsEntry_DoNotUse> _instance;
} _AccountGameCenter_VarsEntry_DoNotUse_default_instance_;
class AccountGameCenterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AccountGameCenter> _instance;
} _AccountGameCenter_default_instance_;
class AccountGoogle_VarsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AccountGoogle_VarsEntry_DoNotUse> _instance;
} _AccountGoogle_VarsEntry_DoNotUse_default_instance_;
class AccountGoogleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AccountGoogle> _instance;
} _AccountGoogle_default_instance_;
class AccountSteam_VarsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AccountSteam_VarsEntry_DoNotUse> _instance;
} _AccountSteam_VarsEntry_DoNotUse_default_instance_;
class AccountSteamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AccountSteam> _instance;
} _AccountSteam_default_instance_;
class AddFriendsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddFriendsRequest> _instance;
} _AddFriendsRequest_default_instance_;
class AddGroupUsersRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddGroupUsersRequest> _instance;
} _AddGroupUsersRequest_default_instance_;
class SessionRefreshRequest_VarsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SessionRefreshRequest_VarsEntry_DoNotUse> _instance;
} _SessionRefreshRequest_VarsEntry_DoNotUse_default_instance_;
class SessionRefreshRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SessionRefreshRequest> _instance;
} _SessionRefreshRequest_default_instance_;
class SessionLogoutRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SessionLogoutRequest> _instance;
} _SessionLogoutRequest_default_instance_;
class AuthenticateAppleRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AuthenticateAppleRequest> _instance;
} _AuthenticateAppleRequest_default_instance_;
class AuthenticateCustomRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AuthenticateCustomRequest> _instance;
} _AuthenticateCustomRequest_default_instance_;
class AuthenticateDeviceRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AuthenticateDeviceRequest> _instance;
} _AuthenticateDeviceRequest_default_instance_;
class AuthenticateEmailRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AuthenticateEmailRequest> _instance;
} _AuthenticateEmailRequest_default_instance_;
class AuthenticateFacebookRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AuthenticateFacebookRequest> _instance;
} _AuthenticateFacebookRequest_default_instance_;
class AuthenticateFacebookInstantGameRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AuthenticateFacebookInstantGameRequest> _instance;
} _AuthenticateFacebookInstantGameRequest_default_instance_;
class AuthenticateGameCenterRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AuthenticateGameCenterRequest> _instance;
} _AuthenticateGameCenterRequest_default_instance_;
class AuthenticateGoogleRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AuthenticateGoogleRequest> _instance;
} _AuthenticateGoogleRequest_default_instance_;
class AuthenticateSteamRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AuthenticateSteamRequest> _instance;
} _AuthenticateSteamRequest_default_instance_;
class BanGroupUsersRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BanGroupUsersRequest> _instance;
} _BanGroupUsersRequest_default_instance_;
class BlockFriendsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BlockFriendsRequest> _instance;
} _BlockFriendsRequest_default_instance_;
class ChannelMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChannelMessage> _instance;
} _ChannelMessage_default_instance_;
class ChannelMessageListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChannelMessageList> _instance;
} _ChannelMessageList_default_instance_;
class CreateGroupRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateGroupRequest> _instance;
} _CreateGroupRequest_default_instance_;
class DeleteFriendsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteFriendsRequest> _instance;
} _DeleteFriendsRequest_default_instance_;
class DeleteGroupRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteGroupRequest> _instance;
} _DeleteGroupRequest_default_instance_;
class DeleteLeaderboardRecordRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteLeaderboardRecordRequest> _instance;
} _DeleteLeaderboardRecordRequest_default_instance_;
class DeleteNotificationsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteNotificationsRequest> _instance;
} _DeleteNotificationsRequest_default_instance_;
class DeleteStorageObjectIdDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteStorageObjectId> _instance;
} _DeleteStorageObjectId_default_instance_;
class DeleteStorageObjectsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteStorageObjectsRequest> _instance;
} _DeleteStorageObjectsRequest_default_instance_;
class Event_PropertiesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Event_PropertiesEntry_DoNotUse> _instance;
} _Event_PropertiesEntry_DoNotUse_default_instance_;
class EventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Event> _instance;
} _Event_default_instance_;
class FriendDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Friend> _instance;
} _Friend_default_instance_;
class FriendListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FriendList> _instance;
} _FriendList_default_instance_;
class GetUsersRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetUsersRequest> _instance;
} _GetUsersRequest_default_instance_;
class GroupDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Group> _instance;
} _Group_default_instance_;
class GroupListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GroupList> _instance;
} _GroupList_default_instance_;
class GroupUserList_GroupUserDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GroupUserList_GroupUser> _instance;
} _GroupUserList_GroupUser_default_instance_;
class GroupUserListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GroupUserList> _instance;
} _GroupUserList_default_instance_;
class ImportFacebookFriendsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ImportFacebookFriendsRequest> _instance;
} _ImportFacebookFriendsRequest_default_instance_;
class ImportSteamFriendsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ImportSteamFriendsRequest> _instance;
} _ImportSteamFriendsRequest_default_instance_;
class JoinGroupRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<JoinGroupRequest> _instance;
} _JoinGroupRequest_default_instance_;
class JoinTournamentRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<JoinTournamentRequest> _instance;
} _JoinTournamentRequest_default_instance_;
class KickGroupUsersRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<KickGroupUsersRequest> _instance;
} _KickGroupUsersRequest_default_instance_;
class LeaderboardDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Leaderboard> _instance;
} _Leaderboard_default_instance_;
class LeaderboardListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LeaderboardList> _instance;
} _LeaderboardList_default_instance_;
class LeaderboardRecordDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LeaderboardRecord> _instance;
} _LeaderboardRecord_default_instance_;
class LeaderboardRecordListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LeaderboardRecordList> _instance;
} _LeaderboardRecordList_default_instance_;
class LeaveGroupRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LeaveGroupRequest> _instance;
} _LeaveGroupRequest_default_instance_;
class LinkFacebookRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LinkFacebookRequest> _instance;
} _LinkFacebookRequest_default_instance_;
class LinkSteamRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LinkSteamRequest> _instance;
} _LinkSteamRequest_default_instance_;
class ListChannelMessagesRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListChannelMessagesRequest> _instance;
} _ListChannelMessagesRequest_default_instance_;
class ListFriendsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListFriendsRequest> _instance;
} _ListFriendsRequest_default_instance_;
class ListGroupsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListGroupsRequest> _instance;
} _ListGroupsRequest_default_instance_;
class ListGroupUsersRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListGroupUsersRequest> _instance;
} _ListGroupUsersRequest_default_instance_;
class ListLeaderboardRecordsAroundOwnerRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListLeaderboardRecordsAroundOwnerRequest> _instance;
} _ListLeaderboardRecordsAroundOwnerRequest_default_instance_;
class ListLeaderboardRecordsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListLeaderboardRecordsRequest> _instance;
} _ListLeaderboardRecordsRequest_default_instance_;
class ListMatchesRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListMatchesRequest> _instance;
} _ListMatchesRequest_default_instance_;
class ListNotificationsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListNotificationsRequest> _instance;
} _ListNotificationsRequest_default_instance_;
class ListStorageObjectsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListStorageObjectsRequest> _instance;
} _ListStorageObjectsRequest_default_instance_;
class ListTournamentRecordsAroundOwnerRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListTournamentRecordsAroundOwnerRequest> _instance;
} _ListTournamentRecordsAroundOwnerRequest_default_instance_;
class ListTournamentRecordsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListTournamentRecordsRequest> _instance;
} _ListTournamentRecordsRequest_default_instance_;
class ListTournamentsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListTournamentsRequest> _instance;
} _ListTournamentsRequest_default_instance_;
class ListUserGroupsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListUserGroupsRequest> _instance;
} _ListUserGroupsRequest_default_instance_;
class MatchDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Match> _instance;
} _Match_default_instance_;
class MatchListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MatchList> _instance;
} _MatchList_default_instance_;
class NotificationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Notification> _instance;
} _Notification_default_instance_;
class NotificationListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NotificationList> _instance;
} _NotificationList_default_instance_;
class PromoteGroupUsersRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PromoteGroupUsersRequest> _instance;
} _PromoteGroupUsersRequest_default_instance_;
class DemoteGroupUsersRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DemoteGroupUsersRequest> _instance;
} _DemoteGroupUsersRequest_default_instance_;
class ReadStorageObjectIdDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReadStorageObjectId> _instance;
} _ReadStorageObjectId_default_instance_;
class ReadStorageObjectsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReadStorageObjectsRequest> _instance;
} _ReadStorageObjectsRequest_default_instance_;
class RpcDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Rpc> _instance;
} _Rpc_default_instance_;
class SessionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Session> _instance;
} _Session_default_instance_;
class StorageObjectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StorageObject> _instance;
} _StorageObject_default_instance_;
class StorageObjectAckDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StorageObjectAck> _instance;
} _StorageObjectAck_default_instance_;
class StorageObjectAcksDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StorageObjectAcks> _instance;
} _StorageObjectAcks_default_instance_;
class StorageObjectsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StorageObjects> _instance;
} _StorageObjects_default_instance_;
class StorageObjectListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StorageObjectList> _instance;
} _StorageObjectList_default_instance_;
class TournamentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Tournament> _instance;
} _Tournament_default_instance_;
class TournamentListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TournamentList> _instance;
} _TournamentList_default_instance_;
class TournamentRecordListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TournamentRecordList> _instance;
} _TournamentRecordList_default_instance_;
class UpdateAccountRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateAccountRequest> _instance;
} _UpdateAccountRequest_default_instance_;
class UpdateGroupRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateGroupRequest> _instance;
} _UpdateGroupRequest_default_instance_;
class UserDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<User> _instance;
} _User_default_instance_;
class UserGroupList_UserGroupDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserGroupList_UserGroup> _instance;
} _UserGroupList_UserGroup_default_instance_;
class UserGroupListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserGroupList> _instance;
} _UserGroupList_default_instance_;
class UsersDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Users> _instance;
} _Users_default_instance_;
class ValidatePurchaseAppleRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ValidatePurchaseAppleRequest> _instance;
} _ValidatePurchaseAppleRequest_default_instance_;
class ValidatePurchaseGoogleRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ValidatePurchaseGoogleRequest> _instance;
} _ValidatePurchaseGoogleRequest_default_instance_;
class ValidatePurchaseHuaweiRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ValidatePurchaseHuaweiRequest> _instance;
} _ValidatePurchaseHuaweiRequest_default_instance_;
class ValidatedPurchaseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ValidatedPurchase> _instance;
} _ValidatedPurchase_default_instance_;
class ValidatePurchaseResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ValidatePurchaseResponse> _instance;
} _ValidatePurchaseResponse_default_instance_;
class PurchaseListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PurchaseList> _instance;
} _PurchaseList_default_instance_;
class WriteLeaderboardRecordRequest_LeaderboardRecordWriteDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WriteLeaderboardRecordRequest_LeaderboardRecordWrite> _instance;
} _WriteLeaderboardRecordRequest_LeaderboardRecordWrite_default_instance_;
class WriteLeaderboardRecordRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WriteLeaderboardRecordRequest> _instance;
} _WriteLeaderboardRecordRequest_default_instance_;
class WriteStorageObjectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WriteStorageObject> _instance;
} _WriteStorageObject_default_instance_;
class WriteStorageObjectsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WriteStorageObjectsRequest> _instance;
} _WriteStorageObjectsRequest_default_instance_;
class WriteTournamentRecordRequest_TournamentRecordWriteDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WriteTournamentRecordRequest_TournamentRecordWrite> _instance;
} _WriteTournamentRecordRequest_TournamentRecordWrite_default_instance_;
class WriteTournamentRecordRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WriteTournamentRecordRequest> _instance;
} _WriteTournamentRecordRequest_default_instance_;
}  // namespace api
}  // namespace nakama
static void InitDefaultsscc_info_Account_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_Account_default_instance_;
    new (ptr) ::nakama::api::Account();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Account_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_Account_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto}, {
      &scc_info_User_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,
      &scc_info_AccountDevice_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_AccountApple_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_AccountApple_default_instance_;
    new (ptr) ::nakama::api::AccountApple();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AccountApple_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AccountApple_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto}, {
      &scc_info_AccountApple_VarsEntry_DoNotUse_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,}};

static void InitDefaultsscc_info_AccountApple_VarsEntry_DoNotUse_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_AccountApple_VarsEntry_DoNotUse_default_instance_;
    new (ptr) ::nakama::api::AccountApple_VarsEntry_DoNotUse();
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AccountApple_VarsEntry_DoNotUse_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AccountApple_VarsEntry_DoNotUse_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto}, {}};

static void InitDefaultsscc_info_AccountCustom_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_AccountCustom_default_instance_;
    new (ptr) ::nakama::api::AccountCustom();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AccountCustom_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AccountCustom_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto}, {
      &scc_info_AccountCustom_VarsEntry_DoNotUse_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,}};

static void InitDefaultsscc_info_AccountCustom_VarsEntry_DoNotUse_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_AccountCustom_VarsEntry_DoNotUse_default_instance_;
    new (ptr) ::nakama::api::AccountCustom_VarsEntry_DoNotUse();
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AccountCustom_VarsEntry_DoNotUse_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AccountCustom_VarsEntry_DoNotUse_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto}, {}};

static void InitDefaultsscc_info_AccountDevice_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_AccountDevice_default_instance_;
    new (ptr) ::nakama::api::AccountDevice();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AccountDevice_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AccountDevice_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto}, {
      &scc_info_AccountDevice_VarsEntry_DoNotUse_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,}};

static void InitDefaultsscc_info_AccountDevice_VarsEntry_DoNotUse_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_AccountDevice_VarsEntry_DoNotUse_default_instance_;
    new (ptr) ::nakama::api::AccountDevice_VarsEntry_DoNotUse();
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AccountDevice_VarsEntry_DoNotUse_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AccountDevice_VarsEntry_DoNotUse_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto}, {}};

static void InitDefaultsscc_info_AccountEmail_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_AccountEmail_default_instance_;
    new (ptr) ::nakama::api::AccountEmail();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AccountEmail_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AccountEmail_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto}, {
      &scc_info_AccountEmail_VarsEntry_DoNotUse_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,}};

static void InitDefaultsscc_info_AccountEmail_VarsEntry_DoNotUse_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_AccountEmail_VarsEntry_DoNotUse_default_instance_;
    new (ptr) ::nakama::api::AccountEmail_VarsEntry_DoNotUse();
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AccountEmail_VarsEntry_DoNotUse_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AccountEmail_VarsEntry_DoNotUse_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto}, {}};

static void InitDefaultsscc_info_AccountFacebook_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_AccountFacebook_default_instance_;
    new (ptr) ::nakama::api::AccountFacebook();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AccountFacebook_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AccountFacebook_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto}, {
      &scc_info_AccountFacebook_VarsEntry_DoNotUse_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,}};

static void InitDefaultsscc_info_AccountFacebook_VarsEntry_DoNotUse_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_AccountFacebook_VarsEntry_DoNotUse_default_instance_;
    new (ptr) ::nakama::api::AccountFacebook_VarsEntry_DoNotUse();
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AccountFacebook_VarsEntry_DoNotUse_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AccountFacebook_VarsEntry_DoNotUse_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto}, {}};

static void InitDefaultsscc_info_AccountFacebookInstantGame_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_AccountFacebookInstantGame_default_instance_;
    new (ptr) ::nakama::api::AccountFacebookInstantGame();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AccountFacebookInstantGame_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AccountFacebookInstantGame_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto}, {
      &scc_info_AccountFacebookInstantGame_VarsEntry_DoNotUse_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,}};

static void InitDefaultsscc_info_AccountFacebookInstantGame_VarsEntry_DoNotUse_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_AccountFacebookInstantGame_VarsEntry_DoNotUse_default_instance_;
    new (ptr) ::nakama::api::AccountFacebookInstantGame_VarsEntry_DoNotUse();
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AccountFacebookInstantGame_VarsEntry_DoNotUse_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AccountFacebookInstantGame_VarsEntry_DoNotUse_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto}, {}};

static void InitDefaultsscc_info_AccountGameCenter_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_AccountGameCenter_default_instance_;
    new (ptr) ::nakama::api::AccountGameCenter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AccountGameCenter_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AccountGameCenter_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto}, {
      &scc_info_AccountGameCenter_VarsEntry_DoNotUse_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,}};

static void InitDefaultsscc_info_AccountGameCenter_VarsEntry_DoNotUse_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_AccountGameCenter_VarsEntry_DoNotUse_default_instance_;
    new (ptr) ::nakama::api::AccountGameCenter_VarsEntry_DoNotUse();
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AccountGameCenter_VarsEntry_DoNotUse_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AccountGameCenter_VarsEntry_DoNotUse_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto}, {}};

static void InitDefaultsscc_info_AccountGoogle_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_AccountGoogle_default_instance_;
    new (ptr) ::nakama::api::AccountGoogle();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AccountGoogle_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AccountGoogle_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto}, {
      &scc_info_AccountGoogle_VarsEntry_DoNotUse_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,}};

static void InitDefaultsscc_info_AccountGoogle_VarsEntry_DoNotUse_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_AccountGoogle_VarsEntry_DoNotUse_default_instance_;
    new (ptr) ::nakama::api::AccountGoogle_VarsEntry_DoNotUse();
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AccountGoogle_VarsEntry_DoNotUse_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AccountGoogle_VarsEntry_DoNotUse_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto}, {}};

static void InitDefaultsscc_info_AccountRefresh_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_AccountRefresh_default_instance_;
    new (ptr) ::nakama::api::AccountRefresh();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AccountRefresh_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AccountRefresh_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto}, {
      &scc_info_AccountRefresh_VarsEntry_DoNotUse_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,}};

static void InitDefaultsscc_info_AccountRefresh_VarsEntry_DoNotUse_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_AccountRefresh_VarsEntry_DoNotUse_default_instance_;
    new (ptr) ::nakama::api::AccountRefresh_VarsEntry_DoNotUse();
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AccountRefresh_VarsEntry_DoNotUse_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AccountRefresh_VarsEntry_DoNotUse_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto}, {}};

static void InitDefaultsscc_info_AccountSteam_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_AccountSteam_default_instance_;
    new (ptr) ::nakama::api::AccountSteam();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AccountSteam_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AccountSteam_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto}, {
      &scc_info_AccountSteam_VarsEntry_DoNotUse_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,}};

static void InitDefaultsscc_info_AccountSteam_VarsEntry_DoNotUse_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_AccountSteam_VarsEntry_DoNotUse_default_instance_;
    new (ptr) ::nakama::api::AccountSteam_VarsEntry_DoNotUse();
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AccountSteam_VarsEntry_DoNotUse_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AccountSteam_VarsEntry_DoNotUse_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto}, {}};

static void InitDefaultsscc_info_AddFriendsRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_AddFriendsRequest_default_instance_;
    new (ptr) ::nakama::api::AddFriendsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AddFriendsRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AddFriendsRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto}, {}};

static void InitDefaultsscc_info_AddGroupUsersRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_AddGroupUsersRequest_default_instance_;
    new (ptr) ::nakama::api::AddGroupUsersRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AddGroupUsersRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AddGroupUsersRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto}, {}};

static void InitDefaultsscc_info_AuthenticateAppleRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_AuthenticateAppleRequest_default_instance_;
    new (ptr) ::nakama::api::AuthenticateAppleRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AuthenticateAppleRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_AuthenticateAppleRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto}, {
      &scc_info_AccountApple_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,
      &scc_info_BoolValue_google_2fprotobuf_2fwrappers_2eproto.base,}};

static void InitDefaultsscc_info_AuthenticateCustomRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_AuthenticateCustomRequest_default_instance_;
    new (ptr) ::nakama::api::AuthenticateCustomRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AuthenticateCustomRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_AuthenticateCustomRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto}, {
      &scc_info_AccountCustom_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,
      &scc_info_BoolValue_google_2fprotobuf_2fwrappers_2eproto.base,}};

static void InitDefaultsscc_info_AuthenticateDeviceRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_AuthenticateDeviceRequest_default_instance_;
    new (ptr) ::nakama::api::AuthenticateDeviceRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AuthenticateDeviceRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_AuthenticateDeviceRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto}, {
      &scc_info_AccountDevice_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,
      &scc_info_BoolValue_google_2fprotobuf_2fwrappers_2eproto.base,}};

static void InitDefaultsscc_info_AuthenticateEmailRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_AuthenticateEmailRequest_default_instance_;
    new (ptr) ::nakama::api::AuthenticateEmailRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AuthenticateEmailRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_AuthenticateEmailRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto}, {
      &scc_info_AccountEmail_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,
      &scc_info_BoolValue_google_2fprotobuf_2fwrappers_2eproto.base,}};

static void InitDefaultsscc_info_AuthenticateFacebookInstantGameRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_AuthenticateFacebookInstantGameRequest_default_instance_;
    new (ptr) ::nakama::api::AuthenticateFacebookInstantGameRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AuthenticateFacebookInstantGameRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_AuthenticateFacebookInstantGameRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto}, {
      &scc_info_AccountFacebookInstantGame_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,
      &scc_info_BoolValue_google_2fprotobuf_2fwrappers_2eproto.base,}};

static void InitDefaultsscc_info_AuthenticateFacebookRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_AuthenticateFacebookRequest_default_instance_;
    new (ptr) ::nakama::api::AuthenticateFacebookRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AuthenticateFacebookRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_AuthenticateFacebookRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto}, {
      &scc_info_AccountFacebook_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,
      &scc_info_BoolValue_google_2fprotobuf_2fwrappers_2eproto.base,}};

static void InitDefaultsscc_info_AuthenticateGameCenterRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_AuthenticateGameCenterRequest_default_instance_;
    new (ptr) ::nakama::api::AuthenticateGameCenterRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AuthenticateGameCenterRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_AuthenticateGameCenterRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto}, {
      &scc_info_AccountGameCenter_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,
      &scc_info_BoolValue_google_2fprotobuf_2fwrappers_2eproto.base,}};

static void InitDefaultsscc_info_AuthenticateGoogleRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_AuthenticateGoogleRequest_default_instance_;
    new (ptr) ::nakama::api::AuthenticateGoogleRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AuthenticateGoogleRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_AuthenticateGoogleRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto}, {
      &scc_info_AccountGoogle_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,
      &scc_info_BoolValue_google_2fprotobuf_2fwrappers_2eproto.base,}};

static void InitDefaultsscc_info_AuthenticateSteamRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_AuthenticateSteamRequest_default_instance_;
    new (ptr) ::nakama::api::AuthenticateSteamRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AuthenticateSteamRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_AuthenticateSteamRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto}, {
      &scc_info_AccountSteam_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,
      &scc_info_BoolValue_google_2fprotobuf_2fwrappers_2eproto.base,}};

static void InitDefaultsscc_info_BanGroupUsersRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_BanGroupUsersRequest_default_instance_;
    new (ptr) ::nakama::api::BanGroupUsersRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BanGroupUsersRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BanGroupUsersRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto}, {}};

static void InitDefaultsscc_info_BlockFriendsRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_BlockFriendsRequest_default_instance_;
    new (ptr) ::nakama::api::BlockFriendsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BlockFriendsRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BlockFriendsRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto}, {}};

static void InitDefaultsscc_info_ChannelMessage_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_ChannelMessage_default_instance_;
    new (ptr) ::nakama::api::ChannelMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ChannelMessage_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_ChannelMessage_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto}, {
      &scc_info_Int32Value_google_2fprotobuf_2fwrappers_2eproto.base,
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,
      &scc_info_BoolValue_google_2fprotobuf_2fwrappers_2eproto.base,}};

static void InitDefaultsscc_info_ChannelMessageList_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_ChannelMessageList_default_instance_;
    new (ptr) ::nakama::api::ChannelMessageList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ChannelMessageList_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ChannelMessageList_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto}, {
      &scc_info_ChannelMessage_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,}};

static void InitDefaultsscc_info_CreateGroupRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_CreateGroupRequest_default_instance_;
    new (ptr) ::nakama::api::CreateGroupRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CreateGroupRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CreateGroupRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto}, {}};

static void InitDefaultsscc_info_DeleteFriendsRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_DeleteFriendsRequest_default_instance_;
    new (ptr) ::nakama::api::DeleteFriendsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeleteFriendsRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeleteFriendsRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto}, {}};

static void InitDefaultsscc_info_DeleteGroupRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_DeleteGroupRequest_default_instance_;
    new (ptr) ::nakama::api::DeleteGroupRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeleteGroupRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeleteGroupRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto}, {}};

static void InitDefaultsscc_info_DeleteLeaderboardRecordRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_DeleteLeaderboardRecordRequest_default_instance_;
    new (ptr) ::nakama::api::DeleteLeaderboardRecordRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeleteLeaderboardRecordRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeleteLeaderboardRecordRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto}, {}};

static void InitDefaultsscc_info_DeleteNotificationsRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_DeleteNotificationsRequest_default_instance_;
    new (ptr) ::nakama::api::DeleteNotificationsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeleteNotificationsRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeleteNotificationsRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto}, {}};

static void InitDefaultsscc_info_DeleteStorageObjectId_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_DeleteStorageObjectId_default_instance_;
    new (ptr) ::nakama::api::DeleteStorageObjectId();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeleteStorageObjectId_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeleteStorageObjectId_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto}, {}};

static void InitDefaultsscc_info_DeleteStorageObjectsRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_DeleteStorageObjectsRequest_default_instance_;
    new (ptr) ::nakama::api::DeleteStorageObjectsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DeleteStorageObjectsRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DeleteStorageObjectsRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto}, {
      &scc_info_DeleteStorageObjectId_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,}};

static void InitDefaultsscc_info_DemoteGroupUsersRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_DemoteGroupUsersRequest_default_instance_;
    new (ptr) ::nakama::api::DemoteGroupUsersRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DemoteGroupUsersRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DemoteGroupUsersRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto}, {}};

static void InitDefaultsscc_info_Event_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_Event_default_instance_;
    new (ptr) ::nakama::api::Event();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Event_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Event_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto}, {
      &scc_info_Event_PropertiesEntry_DoNotUse_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_Event_PropertiesEntry_DoNotUse_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_Event_PropertiesEntry_DoNotUse_default_instance_;
    new (ptr) ::nakama::api::Event_PropertiesEntry_DoNotUse();
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Event_PropertiesEntry_DoNotUse_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Event_PropertiesEntry_DoNotUse_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto}, {}};

static void InitDefaultsscc_info_Friend_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_Friend_default_instance_;
    new (ptr) ::nakama::api::Friend();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Friend_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_Friend_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto}, {
      &scc_info_User_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,
      &scc_info_Int32Value_google_2fprotobuf_2fwrappers_2eproto.base,
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_FriendList_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_FriendList_default_instance_;
    new (ptr) ::nakama::api::FriendList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FriendList_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FriendList_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto}, {
      &scc_info_Friend_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,}};

static void InitDefaultsscc_info_GetUsersRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_GetUsersRequest_default_instance_;
    new (ptr) ::nakama::api::GetUsersRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetUsersRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetUsersRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto}, {}};

static void InitDefaultsscc_info_Group_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_Group_default_instance_;
    new (ptr) ::nakama::api::Group();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Group_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Group_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto}, {
      &scc_info_BoolValue_google_2fprotobuf_2fwrappers_2eproto.base,
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_GroupList_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_GroupList_default_instance_;
    new (ptr) ::nakama::api::GroupList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GroupList_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GroupList_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto}, {
      &scc_info_Group_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,}};

static void InitDefaultsscc_info_GroupUserList_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_GroupUserList_default_instance_;
    new (ptr) ::nakama::api::GroupUserList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GroupUserList_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GroupUserList_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto}, {
      &scc_info_GroupUserList_GroupUser_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,}};

static void InitDefaultsscc_info_GroupUserList_GroupUser_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_GroupUserList_GroupUser_default_instance_;
    new (ptr) ::nakama::api::GroupUserList_GroupUser();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GroupUserList_GroupUser_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_GroupUserList_GroupUser_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto}, {
      &scc_info_User_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,
      &scc_info_Int32Value_google_2fprotobuf_2fwrappers_2eproto.base,}};

static void InitDefaultsscc_info_ImportFacebookFriendsRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_ImportFacebookFriendsRequest_default_instance_;
    new (ptr) ::nakama::api::ImportFacebookFriendsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ImportFacebookFriendsRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ImportFacebookFriendsRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto}, {
      &scc_info_AccountFacebook_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,
      &scc_info_BoolValue_google_2fprotobuf_2fwrappers_2eproto.base,}};

static void InitDefaultsscc_info_ImportSteamFriendsRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_ImportSteamFriendsRequest_default_instance_;
    new (ptr) ::nakama::api::ImportSteamFriendsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ImportSteamFriendsRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ImportSteamFriendsRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto}, {
      &scc_info_AccountSteam_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,
      &scc_info_BoolValue_google_2fprotobuf_2fwrappers_2eproto.base,}};

static void InitDefaultsscc_info_JoinGroupRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_JoinGroupRequest_default_instance_;
    new (ptr) ::nakama::api::JoinGroupRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_JoinGroupRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_JoinGroupRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto}, {}};

static void InitDefaultsscc_info_JoinTournamentRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_JoinTournamentRequest_default_instance_;
    new (ptr) ::nakama::api::JoinTournamentRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_JoinTournamentRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_JoinTournamentRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto}, {}};

static void InitDefaultsscc_info_KickGroupUsersRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_KickGroupUsersRequest_default_instance_;
    new (ptr) ::nakama::api::KickGroupUsersRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KickGroupUsersRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_KickGroupUsersRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto}, {}};

static void InitDefaultsscc_info_Leaderboard_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_Leaderboard_default_instance_;
    new (ptr) ::nakama::api::Leaderboard();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Leaderboard_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Leaderboard_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_LeaderboardList_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_LeaderboardList_default_instance_;
    new (ptr) ::nakama::api::LeaderboardList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LeaderboardList_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LeaderboardList_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto}, {
      &scc_info_Leaderboard_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,}};

static void InitDefaultsscc_info_LeaderboardRecord_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_LeaderboardRecord_default_instance_;
    new (ptr) ::nakama::api::LeaderboardRecord();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_LeaderboardRecord_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_LeaderboardRecord_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto}, {
      &scc_info_StringValue_google_2fprotobuf_2fwrappers_2eproto.base,
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_LeaderboardRecordList_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_LeaderboardRecordList_default_instance_;
    new (ptr) ::nakama::api::LeaderboardRecordList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LeaderboardRecordList_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LeaderboardRecordList_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto}, {
      &scc_info_LeaderboardRecord_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,}};

static void InitDefaultsscc_info_LeaveGroupRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_LeaveGroupRequest_default_instance_;
    new (ptr) ::nakama::api::LeaveGroupRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LeaveGroupRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LeaveGroupRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto}, {}};

static void InitDefaultsscc_info_LinkFacebookRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_LinkFacebookRequest_default_instance_;
    new (ptr) ::nakama::api::LinkFacebookRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_LinkFacebookRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_LinkFacebookRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto}, {
      &scc_info_AccountFacebook_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,
      &scc_info_BoolValue_google_2fprotobuf_2fwrappers_2eproto.base,}};

static void InitDefaultsscc_info_LinkSteamRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_LinkSteamRequest_default_instance_;
    new (ptr) ::nakama::api::LinkSteamRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_LinkSteamRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_LinkSteamRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto}, {
      &scc_info_AccountSteam_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,
      &scc_info_BoolValue_google_2fprotobuf_2fwrappers_2eproto.base,}};

static void InitDefaultsscc_info_ListChannelMessagesRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_ListChannelMessagesRequest_default_instance_;
    new (ptr) ::nakama::api::ListChannelMessagesRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ListChannelMessagesRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ListChannelMessagesRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto}, {
      &scc_info_Int32Value_google_2fprotobuf_2fwrappers_2eproto.base,
      &scc_info_BoolValue_google_2fprotobuf_2fwrappers_2eproto.base,}};

static void InitDefaultsscc_info_ListFriendsRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_ListFriendsRequest_default_instance_;
    new (ptr) ::nakama::api::ListFriendsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListFriendsRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListFriendsRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto}, {
      &scc_info_Int32Value_google_2fprotobuf_2fwrappers_2eproto.base,}};

static void InitDefaultsscc_info_ListGroupUsersRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_ListGroupUsersRequest_default_instance_;
    new (ptr) ::nakama::api::ListGroupUsersRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListGroupUsersRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListGroupUsersRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto}, {
      &scc_info_Int32Value_google_2fprotobuf_2fwrappers_2eproto.base,}};

static void InitDefaultsscc_info_ListGroupsRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_ListGroupsRequest_default_instance_;
    new (ptr) ::nakama::api::ListGroupsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ListGroupsRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ListGroupsRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto}, {
      &scc_info_Int32Value_google_2fprotobuf_2fwrappers_2eproto.base,
      &scc_info_BoolValue_google_2fprotobuf_2fwrappers_2eproto.base,}};

static void InitDefaultsscc_info_ListLeaderboardRecordsAroundOwnerRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_ListLeaderboardRecordsAroundOwnerRequest_default_instance_;
    new (ptr) ::nakama::api::ListLeaderboardRecordsAroundOwnerRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ListLeaderboardRecordsAroundOwnerRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ListLeaderboardRecordsAroundOwnerRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto}, {
      &scc_info_UInt32Value_google_2fprotobuf_2fwrappers_2eproto.base,
      &scc_info_Int64Value_google_2fprotobuf_2fwrappers_2eproto.base,}};

static void InitDefaultsscc_info_ListLeaderboardRecordsRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_ListLeaderboardRecordsRequest_default_instance_;
    new (ptr) ::nakama::api::ListLeaderboardRecordsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ListLeaderboardRecordsRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ListLeaderboardRecordsRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto}, {
      &scc_info_Int32Value_google_2fprotobuf_2fwrappers_2eproto.base,
      &scc_info_Int64Value_google_2fprotobuf_2fwrappers_2eproto.base,}};

static void InitDefaultsscc_info_ListMatchesRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_ListMatchesRequest_default_instance_;
    new (ptr) ::nakama::api::ListMatchesRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ListMatchesRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_ListMatchesRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto}, {
      &scc_info_Int32Value_google_2fprotobuf_2fwrappers_2eproto.base,
      &scc_info_BoolValue_google_2fprotobuf_2fwrappers_2eproto.base,
      &scc_info_StringValue_google_2fprotobuf_2fwrappers_2eproto.base,}};

static void InitDefaultsscc_info_ListNotificationsRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_ListNotificationsRequest_default_instance_;
    new (ptr) ::nakama::api::ListNotificationsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListNotificationsRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListNotificationsRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto}, {
      &scc_info_Int32Value_google_2fprotobuf_2fwrappers_2eproto.base,}};

static void InitDefaultsscc_info_ListStorageObjectsRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_ListStorageObjectsRequest_default_instance_;
    new (ptr) ::nakama::api::ListStorageObjectsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListStorageObjectsRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListStorageObjectsRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto}, {
      &scc_info_Int32Value_google_2fprotobuf_2fwrappers_2eproto.base,}};

static void InitDefaultsscc_info_ListTournamentRecordsAroundOwnerRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_ListTournamentRecordsAroundOwnerRequest_default_instance_;
    new (ptr) ::nakama::api::ListTournamentRecordsAroundOwnerRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ListTournamentRecordsAroundOwnerRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ListTournamentRecordsAroundOwnerRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto}, {
      &scc_info_UInt32Value_google_2fprotobuf_2fwrappers_2eproto.base,
      &scc_info_Int64Value_google_2fprotobuf_2fwrappers_2eproto.base,}};

static void InitDefaultsscc_info_ListTournamentRecordsRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_ListTournamentRecordsRequest_default_instance_;
    new (ptr) ::nakama::api::ListTournamentRecordsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ListTournamentRecordsRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ListTournamentRecordsRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto}, {
      &scc_info_Int32Value_google_2fprotobuf_2fwrappers_2eproto.base,
      &scc_info_Int64Value_google_2fprotobuf_2fwrappers_2eproto.base,}};

static void InitDefaultsscc_info_ListTournamentsRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_ListTournamentsRequest_default_instance_;
    new (ptr) ::nakama::api::ListTournamentsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ListTournamentsRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ListTournamentsRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto}, {
      &scc_info_UInt32Value_google_2fprotobuf_2fwrappers_2eproto.base,
      &scc_info_Int32Value_google_2fprotobuf_2fwrappers_2eproto.base,}};

static void InitDefaultsscc_info_ListUserGroupsRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_ListUserGroupsRequest_default_instance_;
    new (ptr) ::nakama::api::ListUserGroupsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListUserGroupsRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListUserGroupsRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto}, {
      &scc_info_Int32Value_google_2fprotobuf_2fwrappers_2eproto.base,}};

static void InitDefaultsscc_info_Match_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_Match_default_instance_;
    new (ptr) ::nakama::api::Match();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Match_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Match_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto}, {
      &scc_info_StringValue_google_2fprotobuf_2fwrappers_2eproto.base,}};

static void InitDefaultsscc_info_MatchList_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_MatchList_default_instance_;
    new (ptr) ::nakama::api::MatchList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MatchList_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MatchList_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto}, {
      &scc_info_Match_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,}};

static void InitDefaultsscc_info_Notification_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_Notification_default_instance_;
    new (ptr) ::nakama::api::Notification();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Notification_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Notification_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_NotificationList_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_NotificationList_default_instance_;
    new (ptr) ::nakama::api::NotificationList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NotificationList_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_NotificationList_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto}, {
      &scc_info_Notification_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,}};

static void InitDefaultsscc_info_PromoteGroupUsersRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_PromoteGroupUsersRequest_default_instance_;
    new (ptr) ::nakama::api::PromoteGroupUsersRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PromoteGroupUsersRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PromoteGroupUsersRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto}, {}};

static void InitDefaultsscc_info_PurchaseList_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_PurchaseList_default_instance_;
    new (ptr) ::nakama::api::PurchaseList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PurchaseList_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PurchaseList_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto}, {
      &scc_info_ValidatedPurchase_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,}};

static void InitDefaultsscc_info_ReadStorageObjectId_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_ReadStorageObjectId_default_instance_;
    new (ptr) ::nakama::api::ReadStorageObjectId();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReadStorageObjectId_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ReadStorageObjectId_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto}, {}};

static void InitDefaultsscc_info_ReadStorageObjectsRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_ReadStorageObjectsRequest_default_instance_;
    new (ptr) ::nakama::api::ReadStorageObjectsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReadStorageObjectsRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ReadStorageObjectsRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto}, {
      &scc_info_ReadStorageObjectId_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,}};

static void InitDefaultsscc_info_Rpc_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_Rpc_default_instance_;
    new (ptr) ::nakama::api::Rpc();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Rpc_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Rpc_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto}, {}};

static void InitDefaultsscc_info_Session_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_Session_default_instance_;
    new (ptr) ::nakama::api::Session();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Session_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Session_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto}, {}};

static void InitDefaultsscc_info_SessionLogoutRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_SessionLogoutRequest_default_instance_;
    new (ptr) ::nakama::api::SessionLogoutRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SessionLogoutRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SessionLogoutRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto}, {}};

static void InitDefaultsscc_info_SessionRefreshRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_SessionRefreshRequest_default_instance_;
    new (ptr) ::nakama::api::SessionRefreshRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SessionRefreshRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SessionRefreshRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto}, {
      &scc_info_SessionRefreshRequest_VarsEntry_DoNotUse_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,}};

static void InitDefaultsscc_info_SessionRefreshRequest_VarsEntry_DoNotUse_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_SessionRefreshRequest_VarsEntry_DoNotUse_default_instance_;
    new (ptr) ::nakama::api::SessionRefreshRequest_VarsEntry_DoNotUse();
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SessionRefreshRequest_VarsEntry_DoNotUse_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SessionRefreshRequest_VarsEntry_DoNotUse_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto}, {}};

static void InitDefaultsscc_info_StorageObject_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_StorageObject_default_instance_;
    new (ptr) ::nakama::api::StorageObject();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StorageObject_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_StorageObject_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_StorageObjectAck_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_StorageObjectAck_default_instance_;
    new (ptr) ::nakama::api::StorageObjectAck();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StorageObjectAck_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StorageObjectAck_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto}, {}};

static void InitDefaultsscc_info_StorageObjectAcks_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_StorageObjectAcks_default_instance_;
    new (ptr) ::nakama::api::StorageObjectAcks();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StorageObjectAcks_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_StorageObjectAcks_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto}, {
      &scc_info_StorageObjectAck_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,}};

static void InitDefaultsscc_info_StorageObjectList_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_StorageObjectList_default_instance_;
    new (ptr) ::nakama::api::StorageObjectList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StorageObjectList_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_StorageObjectList_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto}, {
      &scc_info_StorageObject_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,}};

static void InitDefaultsscc_info_StorageObjects_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_StorageObjects_default_instance_;
    new (ptr) ::nakama::api::StorageObjects();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StorageObjects_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_StorageObjects_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto}, {
      &scc_info_StorageObject_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,}};

static void InitDefaultsscc_info_Tournament_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_Tournament_default_instance_;
    new (ptr) ::nakama::api::Tournament();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Tournament_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Tournament_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_TournamentList_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_TournamentList_default_instance_;
    new (ptr) ::nakama::api::TournamentList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TournamentList_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TournamentList_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto}, {
      &scc_info_Tournament_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,}};

static void InitDefaultsscc_info_TournamentRecordList_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_TournamentRecordList_default_instance_;
    new (ptr) ::nakama::api::TournamentRecordList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TournamentRecordList_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TournamentRecordList_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto}, {
      &scc_info_LeaderboardRecord_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,}};

static void InitDefaultsscc_info_UpdateAccountRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_UpdateAccountRequest_default_instance_;
    new (ptr) ::nakama::api::UpdateAccountRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UpdateAccountRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UpdateAccountRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto}, {
      &scc_info_StringValue_google_2fprotobuf_2fwrappers_2eproto.base,}};

static void InitDefaultsscc_info_UpdateGroupRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_UpdateGroupRequest_default_instance_;
    new (ptr) ::nakama::api::UpdateGroupRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_UpdateGroupRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_UpdateGroupRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto}, {
      &scc_info_StringValue_google_2fprotobuf_2fwrappers_2eproto.base,
      &scc_info_BoolValue_google_2fprotobuf_2fwrappers_2eproto.base,}};

static void InitDefaultsscc_info_User_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_User_default_instance_;
    new (ptr) ::nakama::api::User();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_User_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_User_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_UserGroupList_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_UserGroupList_default_instance_;
    new (ptr) ::nakama::api::UserGroupList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UserGroupList_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UserGroupList_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto}, {
      &scc_info_UserGroupList_UserGroup_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,}};

static void InitDefaultsscc_info_UserGroupList_UserGroup_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_UserGroupList_UserGroup_default_instance_;
    new (ptr) ::nakama::api::UserGroupList_UserGroup();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_UserGroupList_UserGroup_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_UserGroupList_UserGroup_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto}, {
      &scc_info_Group_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,
      &scc_info_Int32Value_google_2fprotobuf_2fwrappers_2eproto.base,}};

static void InitDefaultsscc_info_Users_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_Users_default_instance_;
    new (ptr) ::nakama::api::Users();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Users_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Users_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto}, {
      &scc_info_User_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,}};

static void InitDefaultsscc_info_ValidatePurchaseAppleRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_ValidatePurchaseAppleRequest_default_instance_;
    new (ptr) ::nakama::api::ValidatePurchaseAppleRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ValidatePurchaseAppleRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ValidatePurchaseAppleRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto}, {
      &scc_info_BoolValue_google_2fprotobuf_2fwrappers_2eproto.base,}};

static void InitDefaultsscc_info_ValidatePurchaseGoogleRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_ValidatePurchaseGoogleRequest_default_instance_;
    new (ptr) ::nakama::api::ValidatePurchaseGoogleRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ValidatePurchaseGoogleRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ValidatePurchaseGoogleRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto}, {
      &scc_info_BoolValue_google_2fprotobuf_2fwrappers_2eproto.base,}};

static void InitDefaultsscc_info_ValidatePurchaseHuaweiRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_ValidatePurchaseHuaweiRequest_default_instance_;
    new (ptr) ::nakama::api::ValidatePurchaseHuaweiRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ValidatePurchaseHuaweiRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ValidatePurchaseHuaweiRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto}, {
      &scc_info_BoolValue_google_2fprotobuf_2fwrappers_2eproto.base,}};

static void InitDefaultsscc_info_ValidatePurchaseResponse_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_ValidatePurchaseResponse_default_instance_;
    new (ptr) ::nakama::api::ValidatePurchaseResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ValidatePurchaseResponse_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ValidatePurchaseResponse_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto}, {
      &scc_info_ValidatedPurchase_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,}};

static void InitDefaultsscc_info_ValidatedPurchase_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_ValidatedPurchase_default_instance_;
    new (ptr) ::nakama::api::ValidatedPurchase();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ValidatedPurchase_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ValidatedPurchase_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_WriteLeaderboardRecordRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_WriteLeaderboardRecordRequest_default_instance_;
    new (ptr) ::nakama::api::WriteLeaderboardRecordRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_WriteLeaderboardRecordRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_WriteLeaderboardRecordRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto}, {
      &scc_info_WriteLeaderboardRecordRequest_LeaderboardRecordWrite_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,}};

static void InitDefaultsscc_info_WriteLeaderboardRecordRequest_LeaderboardRecordWrite_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_WriteLeaderboardRecordRequest_LeaderboardRecordWrite_default_instance_;
    new (ptr) ::nakama::api::WriteLeaderboardRecordRequest_LeaderboardRecordWrite();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WriteLeaderboardRecordRequest_LeaderboardRecordWrite_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_WriteLeaderboardRecordRequest_LeaderboardRecordWrite_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto}, {}};

static void InitDefaultsscc_info_WriteStorageObject_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_WriteStorageObject_default_instance_;
    new (ptr) ::nakama::api::WriteStorageObject();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_WriteStorageObject_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_WriteStorageObject_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto}, {
      &scc_info_Int32Value_google_2fprotobuf_2fwrappers_2eproto.base,}};

static void InitDefaultsscc_info_WriteStorageObjectsRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_WriteStorageObjectsRequest_default_instance_;
    new (ptr) ::nakama::api::WriteStorageObjectsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_WriteStorageObjectsRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_WriteStorageObjectsRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto}, {
      &scc_info_WriteStorageObject_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,}};

static void InitDefaultsscc_info_WriteTournamentRecordRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_WriteTournamentRecordRequest_default_instance_;
    new (ptr) ::nakama::api::WriteTournamentRecordRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_WriteTournamentRecordRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_WriteTournamentRecordRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto}, {
      &scc_info_WriteTournamentRecordRequest_TournamentRecordWrite_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,}};

static void InitDefaultsscc_info_WriteTournamentRecordRequest_TournamentRecordWrite_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::api::_WriteTournamentRecordRequest_TournamentRecordWrite_default_instance_;
    new (ptr) ::nakama::api::WriteTournamentRecordRequest_TournamentRecordWrite();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WriteTournamentRecordRequest_TournamentRecordWrite_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_WriteTournamentRecordRequest_TournamentRecordWrite_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto[116];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nakama::api::Account, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::api::Account, user_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::Account, wallet_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::Account, email_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::Account, devices_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::Account, custom_id_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::Account, verify_time_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::Account, disable_time_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::AccountRefresh_VarsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::AccountRefresh_VarsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::api::AccountRefresh_VarsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::AccountRefresh_VarsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nakama::api::AccountRefresh, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::api::AccountRefresh, token_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::AccountRefresh, vars_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::AccountApple_VarsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::AccountApple_VarsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::api::AccountApple_VarsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::AccountApple_VarsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nakama::api::AccountApple, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::api::AccountApple, token_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::AccountApple, vars_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::AccountCustom_VarsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::AccountCustom_VarsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::api::AccountCustom_VarsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::AccountCustom_VarsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nakama::api::AccountCustom, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::api::AccountCustom, id_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::AccountCustom, vars_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::AccountDevice_VarsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::AccountDevice_VarsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::api::AccountDevice_VarsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::AccountDevice_VarsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nakama::api::AccountDevice, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::api::AccountDevice, id_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::AccountDevice, vars_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::AccountEmail_VarsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::AccountEmail_VarsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::api::AccountEmail_VarsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::AccountEmail_VarsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nakama::api::AccountEmail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::api::AccountEmail, email_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::AccountEmail, password_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::AccountEmail, vars_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::AccountFacebook_VarsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::AccountFacebook_VarsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::api::AccountFacebook_VarsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::AccountFacebook_VarsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nakama::api::AccountFacebook, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::api::AccountFacebook, token_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::AccountFacebook, vars_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::AccountFacebookInstantGame_VarsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::AccountFacebookInstantGame_VarsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::api::AccountFacebookInstantGame_VarsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::AccountFacebookInstantGame_VarsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nakama::api::AccountFacebookInstantGame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::api::AccountFacebookInstantGame, signed_player_info_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::AccountFacebookInstantGame, vars_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::AccountGameCenter_VarsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::AccountGameCenter_VarsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::api::AccountGameCenter_VarsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::AccountGameCenter_VarsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nakama::api::AccountGameCenter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::api::AccountGameCenter, player_id_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::AccountGameCenter, bundle_id_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::AccountGameCenter, timestamp_seconds_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::AccountGameCenter, salt_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::AccountGameCenter, signature_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::AccountGameCenter, public_key_url_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::AccountGameCenter, vars_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::AccountGoogle_VarsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::AccountGoogle_VarsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::api::AccountGoogle_VarsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::AccountGoogle_VarsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nakama::api::AccountGoogle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::api::AccountGoogle, token_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::AccountGoogle, vars_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::AccountSteam_VarsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::AccountSteam_VarsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::api::AccountSteam_VarsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::AccountSteam_VarsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nakama::api::AccountSteam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::api::AccountSteam, token_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::AccountSteam, vars_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nakama::api::AddFriendsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::api::AddFriendsRequest, ids_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::AddFriendsRequest, usernames_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nakama::api::AddGroupUsersRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::api::AddGroupUsersRequest, group_id_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::AddGroupUsersRequest, user_ids_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::SessionRefreshRequest_VarsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::SessionRefreshRequest_VarsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::api::SessionRefreshRequest_VarsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::SessionRefreshRequest_VarsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nakama::api::SessionRefreshRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::api::SessionRefreshRequest, token_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::SessionRefreshRequest, vars_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nakama::api::SessionLogoutRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::api::SessionLogoutRequest, token_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::SessionLogoutRequest, refresh_token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nakama::api::AuthenticateAppleRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::api::AuthenticateAppleRequest, account_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::AuthenticateAppleRequest, create_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::AuthenticateAppleRequest, username_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nakama::api::AuthenticateCustomRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::api::AuthenticateCustomRequest, account_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::AuthenticateCustomRequest, create_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::AuthenticateCustomRequest, username_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nakama::api::AuthenticateDeviceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::api::AuthenticateDeviceRequest, account_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::AuthenticateDeviceRequest, create_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::AuthenticateDeviceRequest, username_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nakama::api::AuthenticateEmailRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::api::AuthenticateEmailRequest, account_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::AuthenticateEmailRequest, create_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::AuthenticateEmailRequest, username_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nakama::api::AuthenticateFacebookRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::api::AuthenticateFacebookRequest, account_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::AuthenticateFacebookRequest, create_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::AuthenticateFacebookRequest, username_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::AuthenticateFacebookRequest, sync_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nakama::api::AuthenticateFacebookInstantGameRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::api::AuthenticateFacebookInstantGameRequest, account_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::AuthenticateFacebookInstantGameRequest, create_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::AuthenticateFacebookInstantGameRequest, username_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nakama::api::AuthenticateGameCenterRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::api::AuthenticateGameCenterRequest, account_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::AuthenticateGameCenterRequest, create_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::AuthenticateGameCenterRequest, username_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nakama::api::AuthenticateGoogleRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::api::AuthenticateGoogleRequest, account_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::AuthenticateGoogleRequest, create_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::AuthenticateGoogleRequest, username_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nakama::api::AuthenticateSteamRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::api::AuthenticateSteamRequest, account_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::AuthenticateSteamRequest, create_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::AuthenticateSteamRequest, username_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::AuthenticateSteamRequest, sync_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nakama::api::BanGroupUsersRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::api::BanGroupUsersRequest, group_id_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::BanGroupUsersRequest, user_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nakama::api::BlockFriendsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::api::BlockFriendsRequest, ids_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::BlockFriendsRequest, usernames_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nakama::api::ChannelMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::api::ChannelMessage, channel_id_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::ChannelMessage, message_id_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::ChannelMessage, code_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::ChannelMessage, sender_id_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::ChannelMessage, username_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::ChannelMessage, content_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::ChannelMessage, create_time_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::ChannelMessage, update_time_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::ChannelMessage, persistent_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::ChannelMessage, room_name_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::ChannelMessage, group_id_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::ChannelMessage, user_id_one_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::ChannelMessage, user_id_two_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nakama::api::ChannelMessageList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::api::ChannelMessageList, messages_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::ChannelMessageList, next_cursor_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::ChannelMessageList, prev_cursor_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::ChannelMessageList, cacheable_cursor_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nakama::api::CreateGroupRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::api::CreateGroupRequest, name_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::CreateGroupRequest, description_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::CreateGroupRequest, lang_tag_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::CreateGroupRequest, avatar_url_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::CreateGroupRequest, open_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::CreateGroupRequest, max_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nakama::api::DeleteFriendsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::api::DeleteFriendsRequest, ids_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::DeleteFriendsRequest, usernames_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nakama::api::DeleteGroupRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::api::DeleteGroupRequest, group_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nakama::api::DeleteLeaderboardRecordRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::api::DeleteLeaderboardRecordRequest, leaderboard_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nakama::api::DeleteNotificationsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::api::DeleteNotificationsRequest, ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nakama::api::DeleteStorageObjectId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::api::DeleteStorageObjectId, collection_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::DeleteStorageObjectId, key_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::DeleteStorageObjectId, version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nakama::api::DeleteStorageObjectsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::api::DeleteStorageObjectsRequest, object_ids_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::Event_PropertiesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::Event_PropertiesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::api::Event_PropertiesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::Event_PropertiesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nakama::api::Event, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::api::Event, name_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::Event, properties_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::Event, timestamp_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::Event, external_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nakama::api::Friend, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::api::Friend, user_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::Friend, state_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::Friend, update_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nakama::api::FriendList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::api::FriendList, friends_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::FriendList, cursor_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nakama::api::GetUsersRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::api::GetUsersRequest, ids_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::GetUsersRequest, usernames_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::GetUsersRequest, facebook_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nakama::api::Group, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::api::Group, id_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::Group, creator_id_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::Group, name_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::Group, description_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::Group, lang_tag_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::Group, metadata_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::Group, avatar_url_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::Group, open_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::Group, edge_count_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::Group, max_count_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::Group, create_time_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::Group, update_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nakama::api::GroupList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::api::GroupList, groups_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::GroupList, cursor_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nakama::api::GroupUserList_GroupUser, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::api::GroupUserList_GroupUser, user_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::GroupUserList_GroupUser, state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nakama::api::GroupUserList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::api::GroupUserList, group_users_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::GroupUserList, cursor_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nakama::api::ImportFacebookFriendsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::api::ImportFacebookFriendsRequest, account_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::ImportFacebookFriendsRequest, reset_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nakama::api::ImportSteamFriendsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::api::ImportSteamFriendsRequest, account_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::ImportSteamFriendsRequest, reset_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nakama::api::JoinGroupRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::api::JoinGroupRequest, group_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nakama::api::JoinTournamentRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::api::JoinTournamentRequest, tournament_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nakama::api::KickGroupUsersRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::api::KickGroupUsersRequest, group_id_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::KickGroupUsersRequest, user_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nakama::api::Leaderboard, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::api::Leaderboard, id_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::Leaderboard, sort_order_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::Leaderboard, operator__),
  PROTOBUF_FIELD_OFFSET(::nakama::api::Leaderboard, prev_reset_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::Leaderboard, next_reset_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::Leaderboard, metadata_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::Leaderboard, create_time_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::Leaderboard, authoritative_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nakama::api::LeaderboardList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::api::LeaderboardList, leaderboards_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::LeaderboardList, cursor_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nakama::api::LeaderboardRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::api::LeaderboardRecord, leaderboard_id_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::LeaderboardRecord, owner_id_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::LeaderboardRecord, username_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::LeaderboardRecord, score_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::LeaderboardRecord, subscore_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::LeaderboardRecord, num_score_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::LeaderboardRecord, metadata_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::LeaderboardRecord, create_time_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::LeaderboardRecord, update_time_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::LeaderboardRecord, expiry_time_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::LeaderboardRecord, rank_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::LeaderboardRecord, max_num_score_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nakama::api::LeaderboardRecordList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::api::LeaderboardRecordList, records_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::LeaderboardRecordList, owner_records_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::LeaderboardRecordList, next_cursor_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::LeaderboardRecordList, prev_cursor_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nakama::api::LeaveGroupRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::api::LeaveGroupRequest, group_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nakama::api::LinkFacebookRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::api::LinkFacebookRequest, account_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::LinkFacebookRequest, sync_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nakama::api::LinkSteamRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::api::LinkSteamRequest, account_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::LinkSteamRequest, sync_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nakama::api::ListChannelMessagesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::api::ListChannelMessagesRequest, channel_id_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::ListChannelMessagesRequest, limit_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::ListChannelMessagesRequest, forward_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::ListChannelMessagesRequest, cursor_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nakama::api::ListFriendsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::api::ListFriendsRequest, limit_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::ListFriendsRequest, state_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::ListFriendsRequest, cursor_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nakama::api::ListGroupsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::api::ListGroupsRequest, name_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::ListGroupsRequest, cursor_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::ListGroupsRequest, limit_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::ListGroupsRequest, lang_tag_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::ListGroupsRequest, members_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::ListGroupsRequest, open_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nakama::api::ListGroupUsersRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::api::ListGroupUsersRequest, group_id_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::ListGroupUsersRequest, limit_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::ListGroupUsersRequest, state_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::ListGroupUsersRequest, cursor_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nakama::api::ListLeaderboardRecordsAroundOwnerRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::api::ListLeaderboardRecordsAroundOwnerRequest, leaderboard_id_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::ListLeaderboardRecordsAroundOwnerRequest, limit_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::ListLeaderboardRecordsAroundOwnerRequest, owner_id_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::ListLeaderboardRecordsAroundOwnerRequest, expiry_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nakama::api::ListLeaderboardRecordsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::api::ListLeaderboardRecordsRequest, leaderboard_id_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::ListLeaderboardRecordsRequest, owner_ids_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::ListLeaderboardRecordsRequest, limit_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::ListLeaderboardRecordsRequest, cursor_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::ListLeaderboardRecordsRequest, expiry_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nakama::api::ListMatchesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::api::ListMatchesRequest, limit_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::ListMatchesRequest, authoritative_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::ListMatchesRequest, label_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::ListMatchesRequest, min_size_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::ListMatchesRequest, max_size_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::ListMatchesRequest, query_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nakama::api::ListNotificationsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::api::ListNotificationsRequest, limit_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::ListNotificationsRequest, cacheable_cursor_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nakama::api::ListStorageObjectsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::api::ListStorageObjectsRequest, user_id_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::ListStorageObjectsRequest, collection_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::ListStorageObjectsRequest, limit_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::ListStorageObjectsRequest, cursor_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nakama::api::ListTournamentRecordsAroundOwnerRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::api::ListTournamentRecordsAroundOwnerRequest, tournament_id_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::ListTournamentRecordsAroundOwnerRequest, limit_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::ListTournamentRecordsAroundOwnerRequest, owner_id_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::ListTournamentRecordsAroundOwnerRequest, expiry_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nakama::api::ListTournamentRecordsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::api::ListTournamentRecordsRequest, tournament_id_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::ListTournamentRecordsRequest, owner_ids_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::ListTournamentRecordsRequest, limit_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::ListTournamentRecordsRequest, cursor_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::ListTournamentRecordsRequest, expiry_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nakama::api::ListTournamentsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::api::ListTournamentsRequest, category_start_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::ListTournamentsRequest, category_end_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::ListTournamentsRequest, start_time_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::ListTournamentsRequest, end_time_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::ListTournamentsRequest, limit_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::ListTournamentsRequest, cursor_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nakama::api::ListUserGroupsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::api::ListUserGroupsRequest, user_id_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::ListUserGroupsRequest, limit_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::ListUserGroupsRequest, state_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::ListUserGroupsRequest, cursor_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nakama::api::Match, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::api::Match, match_id_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::Match, authoritative_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::Match, label_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::Match, size_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::Match, tick_rate_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::Match, handler_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nakama::api::MatchList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::api::MatchList, matches_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nakama::api::Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::api::Notification, id_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::Notification, subject_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::Notification, content_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::Notification, code_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::Notification, sender_id_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::Notification, create_time_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::Notification, persistent_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nakama::api::NotificationList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::api::NotificationList, notifications_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::NotificationList, cacheable_cursor_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nakama::api::PromoteGroupUsersRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::api::PromoteGroupUsersRequest, group_id_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::PromoteGroupUsersRequest, user_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nakama::api::DemoteGroupUsersRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::api::DemoteGroupUsersRequest, group_id_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::DemoteGroupUsersRequest, user_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nakama::api::ReadStorageObjectId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::api::ReadStorageObjectId, collection_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::ReadStorageObjectId, key_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::ReadStorageObjectId, user_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nakama::api::ReadStorageObjectsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::api::ReadStorageObjectsRequest, object_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nakama::api::Rpc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::api::Rpc, id_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::Rpc, payload_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::Rpc, http_key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nakama::api::Session, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::api::Session, created_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::Session, token_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::Session, refresh_token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nakama::api::StorageObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::api::StorageObject, collection_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::StorageObject, key_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::StorageObject, user_id_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::StorageObject, value_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::StorageObject, version_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::StorageObject, permission_read_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::StorageObject, permission_write_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::StorageObject, create_time_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::StorageObject, update_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nakama::api::StorageObjectAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::api::StorageObjectAck, collection_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::StorageObjectAck, key_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::StorageObjectAck, version_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::StorageObjectAck, user_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nakama::api::StorageObjectAcks, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::api::StorageObjectAcks, acks_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nakama::api::StorageObjects, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::api::StorageObjects, objects_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nakama::api::StorageObjectList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::api::StorageObjectList, objects_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::StorageObjectList, cursor_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nakama::api::Tournament, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::api::Tournament, id_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::Tournament, title_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::Tournament, description_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::Tournament, category_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::Tournament, sort_order_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::Tournament, size_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::Tournament, max_size_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::Tournament, max_num_score_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::Tournament, can_enter_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::Tournament, end_active_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::Tournament, next_reset_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::Tournament, metadata_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::Tournament, create_time_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::Tournament, start_time_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::Tournament, end_time_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::Tournament, duration_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::Tournament, start_active_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::Tournament, prev_reset_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::Tournament, operator__),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nakama::api::TournamentList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::api::TournamentList, tournaments_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::TournamentList, cursor_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nakama::api::TournamentRecordList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::api::TournamentRecordList, records_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::TournamentRecordList, owner_records_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::TournamentRecordList, next_cursor_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::TournamentRecordList, prev_cursor_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nakama::api::UpdateAccountRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::api::UpdateAccountRequest, username_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::UpdateAccountRequest, display_name_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::UpdateAccountRequest, avatar_url_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::UpdateAccountRequest, lang_tag_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::UpdateAccountRequest, location_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::UpdateAccountRequest, timezone_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nakama::api::UpdateGroupRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::api::UpdateGroupRequest, group_id_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::UpdateGroupRequest, name_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::UpdateGroupRequest, description_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::UpdateGroupRequest, lang_tag_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::UpdateGroupRequest, avatar_url_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::UpdateGroupRequest, open_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nakama::api::User, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::api::User, id_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::User, username_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::User, display_name_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::User, avatar_url_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::User, lang_tag_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::User, location_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::User, timezone_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::User, metadata_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::User, facebook_id_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::User, google_id_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::User, gamecenter_id_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::User, steam_id_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::User, online_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::User, edge_count_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::User, create_time_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::User, update_time_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::User, facebook_instant_game_id_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::User, apple_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nakama::api::UserGroupList_UserGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::api::UserGroupList_UserGroup, group_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::UserGroupList_UserGroup, state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nakama::api::UserGroupList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::api::UserGroupList, user_groups_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::UserGroupList, cursor_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nakama::api::Users, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::api::Users, users_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nakama::api::ValidatePurchaseAppleRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::api::ValidatePurchaseAppleRequest, receipt_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::ValidatePurchaseAppleRequest, persist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nakama::api::ValidatePurchaseGoogleRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::api::ValidatePurchaseGoogleRequest, purchase_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::ValidatePurchaseGoogleRequest, persist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nakama::api::ValidatePurchaseHuaweiRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::api::ValidatePurchaseHuaweiRequest, purchase_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::ValidatePurchaseHuaweiRequest, signature_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::ValidatePurchaseHuaweiRequest, persist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nakama::api::ValidatedPurchase, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::api::ValidatedPurchase, product_id_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::ValidatedPurchase, transaction_id_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::ValidatedPurchase, store_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::ValidatedPurchase, purchase_time_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::ValidatedPurchase, create_time_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::ValidatedPurchase, update_time_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::ValidatedPurchase, provider_response_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::ValidatedPurchase, environment_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::ValidatedPurchase, seen_before_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nakama::api::ValidatePurchaseResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::api::ValidatePurchaseResponse, validated_purchases_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nakama::api::PurchaseList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::api::PurchaseList, validated_purchases_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::PurchaseList, cursor_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::PurchaseList, prev_cursor_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nakama::api::WriteLeaderboardRecordRequest_LeaderboardRecordWrite, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::api::WriteLeaderboardRecordRequest_LeaderboardRecordWrite, score_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::WriteLeaderboardRecordRequest_LeaderboardRecordWrite, subscore_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::WriteLeaderboardRecordRequest_LeaderboardRecordWrite, metadata_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::WriteLeaderboardRecordRequest_LeaderboardRecordWrite, operator__),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nakama::api::WriteLeaderboardRecordRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::api::WriteLeaderboardRecordRequest, leaderboard_id_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::WriteLeaderboardRecordRequest, record_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nakama::api::WriteStorageObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::api::WriteStorageObject, collection_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::WriteStorageObject, key_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::WriteStorageObject, value_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::WriteStorageObject, version_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::WriteStorageObject, permission_read_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::WriteStorageObject, permission_write_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nakama::api::WriteStorageObjectsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::api::WriteStorageObjectsRequest, objects_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nakama::api::WriteTournamentRecordRequest_TournamentRecordWrite, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::api::WriteTournamentRecordRequest_TournamentRecordWrite, score_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::WriteTournamentRecordRequest_TournamentRecordWrite, subscore_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::WriteTournamentRecordRequest_TournamentRecordWrite, metadata_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::WriteTournamentRecordRequest_TournamentRecordWrite, operator__),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nakama::api::WriteTournamentRecordRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::api::WriteTournamentRecordRequest, tournament_id_),
  PROTOBUF_FIELD_OFFSET(::nakama::api::WriteTournamentRecordRequest, record_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::nakama::api::Account)},
  { 12, 19, sizeof(::nakama::api::AccountRefresh_VarsEntry_DoNotUse)},
  { 21, -1, sizeof(::nakama::api::AccountRefresh)},
  { 28, 35, sizeof(::nakama::api::AccountApple_VarsEntry_DoNotUse)},
  { 37, -1, sizeof(::nakama::api::AccountApple)},
  { 44, 51, sizeof(::nakama::api::AccountCustom_VarsEntry_DoNotUse)},
  { 53, -1, sizeof(::nakama::api::AccountCustom)},
  { 60, 67, sizeof(::nakama::api::AccountDevice_VarsEntry_DoNotUse)},
  { 69, -1, sizeof(::nakama::api::AccountDevice)},
  { 76, 83, sizeof(::nakama::api::AccountEmail_VarsEntry_DoNotUse)},
  { 85, -1, sizeof(::nakama::api::AccountEmail)},
  { 93, 100, sizeof(::nakama::api::AccountFacebook_VarsEntry_DoNotUse)},
  { 102, -1, sizeof(::nakama::api::AccountFacebook)},
  { 109, 116, sizeof(::nakama::api::AccountFacebookInstantGame_VarsEntry_DoNotUse)},
  { 118, -1, sizeof(::nakama::api::AccountFacebookInstantGame)},
  { 125, 132, sizeof(::nakama::api::AccountGameCenter_VarsEntry_DoNotUse)},
  { 134, -1, sizeof(::nakama::api::AccountGameCenter)},
  { 146, 153, sizeof(::nakama::api::AccountGoogle_VarsEntry_DoNotUse)},
  { 155, -1, sizeof(::nakama::api::AccountGoogle)},
  { 162, 169, sizeof(::nakama::api::AccountSteam_VarsEntry_DoNotUse)},
  { 171, -1, sizeof(::nakama::api::AccountSteam)},
  { 178, -1, sizeof(::nakama::api::AddFriendsRequest)},
  { 185, -1, sizeof(::nakama::api::AddGroupUsersRequest)},
  { 192, 199, sizeof(::nakama::api::SessionRefreshRequest_VarsEntry_DoNotUse)},
  { 201, -1, sizeof(::nakama::api::SessionRefreshRequest)},
  { 208, -1, sizeof(::nakama::api::SessionLogoutRequest)},
  { 215, -1, sizeof(::nakama::api::AuthenticateAppleRequest)},
  { 223, -1, sizeof(::nakama::api::AuthenticateCustomRequest)},
  { 231, -1, sizeof(::nakama::api::AuthenticateDeviceRequest)},
  { 239, -1, sizeof(::nakama::api::AuthenticateEmailRequest)},
  { 247, -1, sizeof(::nakama::api::AuthenticateFacebookRequest)},
  { 256, -1, sizeof(::nakama::api::AuthenticateFacebookInstantGameRequest)},
  { 264, -1, sizeof(::nakama::api::AuthenticateGameCenterRequest)},
  { 272, -1, sizeof(::nakama::api::AuthenticateGoogleRequest)},
  { 280, -1, sizeof(::nakama::api::AuthenticateSteamRequest)},
  { 289, -1, sizeof(::nakama::api::BanGroupUsersRequest)},
  { 296, -1, sizeof(::nakama::api::BlockFriendsRequest)},
  { 303, -1, sizeof(::nakama::api::ChannelMessage)},
  { 321, -1, sizeof(::nakama::api::ChannelMessageList)},
  { 330, -1, sizeof(::nakama::api::CreateGroupRequest)},
  { 341, -1, sizeof(::nakama::api::DeleteFriendsRequest)},
  { 348, -1, sizeof(::nakama::api::DeleteGroupRequest)},
  { 354, -1, sizeof(::nakama::api::DeleteLeaderboardRecordRequest)},
  { 360, -1, sizeof(::nakama::api::DeleteNotificationsRequest)},
  { 366, -1, sizeof(::nakama::api::DeleteStorageObjectId)},
  { 374, -1, sizeof(::nakama::api::DeleteStorageObjectsRequest)},
  { 380, 387, sizeof(::nakama::api::Event_PropertiesEntry_DoNotUse)},
  { 389, -1, sizeof(::nakama::api::Event)},
  { 398, -1, sizeof(::nakama::api::Friend)},
  { 406, -1, sizeof(::nakama::api::FriendList)},
  { 413, -1, sizeof(::nakama::api::GetUsersRequest)},
  { 421, -1, sizeof(::nakama::api::Group)},
  { 438, -1, sizeof(::nakama::api::GroupList)},
  { 445, -1, sizeof(::nakama::api::GroupUserList_GroupUser)},
  { 452, -1, sizeof(::nakama::api::GroupUserList)},
  { 459, -1, sizeof(::nakama::api::ImportFacebookFriendsRequest)},
  { 466, -1, sizeof(::nakama::api::ImportSteamFriendsRequest)},
  { 473, -1, sizeof(::nakama::api::JoinGroupRequest)},
  { 479, -1, sizeof(::nakama::api::JoinTournamentRequest)},
  { 485, -1, sizeof(::nakama::api::KickGroupUsersRequest)},
  { 492, -1, sizeof(::nakama::api::Leaderboard)},
  { 505, -1, sizeof(::nakama::api::LeaderboardList)},
  { 512, -1, sizeof(::nakama::api::LeaderboardRecord)},
  { 529, -1, sizeof(::nakama::api::LeaderboardRecordList)},
  { 538, -1, sizeof(::nakama::api::LeaveGroupRequest)},
  { 544, -1, sizeof(::nakama::api::LinkFacebookRequest)},
  { 551, -1, sizeof(::nakama::api::LinkSteamRequest)},
  { 558, -1, sizeof(::nakama::api::ListChannelMessagesRequest)},
  { 567, -1, sizeof(::nakama::api::ListFriendsRequest)},
  { 575, -1, sizeof(::nakama::api::ListGroupsRequest)},
  { 586, -1, sizeof(::nakama::api::ListGroupUsersRequest)},
  { 595, -1, sizeof(::nakama::api::ListLeaderboardRecordsAroundOwnerRequest)},
  { 604, -1, sizeof(::nakama::api::ListLeaderboardRecordsRequest)},
  { 614, -1, sizeof(::nakama::api::ListMatchesRequest)},
  { 625, -1, sizeof(::nakama::api::ListNotificationsRequest)},
  { 632, -1, sizeof(::nakama::api::ListStorageObjectsRequest)},
  { 641, -1, sizeof(::nakama::api::ListTournamentRecordsAroundOwnerRequest)},
  { 650, -1, sizeof(::nakama::api::ListTournamentRecordsRequest)},
  { 660, -1, sizeof(::nakama::api::ListTournamentsRequest)},
  { 671, -1, sizeof(::nakama::api::ListUserGroupsRequest)},
  { 680, -1, sizeof(::nakama::api::Match)},
  { 691, -1, sizeof(::nakama::api::MatchList)},
  { 697, -1, sizeof(::nakama::api::Notification)},
  { 709, -1, sizeof(::nakama::api::NotificationList)},
  { 716, -1, sizeof(::nakama::api::PromoteGroupUsersRequest)},
  { 723, -1, sizeof(::nakama::api::DemoteGroupUsersRequest)},
  { 730, -1, sizeof(::nakama::api::ReadStorageObjectId)},
  { 738, -1, sizeof(::nakama::api::ReadStorageObjectsRequest)},
  { 744, -1, sizeof(::nakama::api::Rpc)},
  { 752, -1, sizeof(::nakama::api::Session)},
  { 760, -1, sizeof(::nakama::api::StorageObject)},
  { 774, -1, sizeof(::nakama::api::StorageObjectAck)},
  { 783, -1, sizeof(::nakama::api::StorageObjectAcks)},
  { 789, -1, sizeof(::nakama::api::StorageObjects)},
  { 795, -1, sizeof(::nakama::api::StorageObjectList)},
  { 802, -1, sizeof(::nakama::api::Tournament)},
  { 826, -1, sizeof(::nakama::api::TournamentList)},
  { 833, -1, sizeof(::nakama::api::TournamentRecordList)},
  { 842, -1, sizeof(::nakama::api::UpdateAccountRequest)},
  { 853, -1, sizeof(::nakama::api::UpdateGroupRequest)},
  { 864, -1, sizeof(::nakama::api::User)},
  { 887, -1, sizeof(::nakama::api::UserGroupList_UserGroup)},
  { 894, -1, sizeof(::nakama::api::UserGroupList)},
  { 901, -1, sizeof(::nakama::api::Users)},
  { 907, -1, sizeof(::nakama::api::ValidatePurchaseAppleRequest)},
  { 914, -1, sizeof(::nakama::api::ValidatePurchaseGoogleRequest)},
  { 921, -1, sizeof(::nakama::api::ValidatePurchaseHuaweiRequest)},
  { 929, -1, sizeof(::nakama::api::ValidatedPurchase)},
  { 943, -1, sizeof(::nakama::api::ValidatePurchaseResponse)},
  { 949, -1, sizeof(::nakama::api::PurchaseList)},
  { 957, -1, sizeof(::nakama::api::WriteLeaderboardRecordRequest_LeaderboardRecordWrite)},
  { 966, -1, sizeof(::nakama::api::WriteLeaderboardRecordRequest)},
  { 973, -1, sizeof(::nakama::api::WriteStorageObject)},
  { 984, -1, sizeof(::nakama::api::WriteStorageObjectsRequest)},
  { 990, -1, sizeof(::nakama::api::WriteTournamentRecordRequest_TournamentRecordWrite)},
  { 999, -1, sizeof(::nakama::api::WriteTournamentRecordRequest)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::api::_Account_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::api::_AccountRefresh_VarsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::api::_AccountRefresh_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::api::_AccountApple_VarsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::api::_AccountApple_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::api::_AccountCustom_VarsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::api::_AccountCustom_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::api::_AccountDevice_VarsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::api::_AccountDevice_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::api::_AccountEmail_VarsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::api::_AccountEmail_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::api::_AccountFacebook_VarsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::api::_AccountFacebook_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::api::_AccountFacebookInstantGame_VarsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::api::_AccountFacebookInstantGame_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::api::_AccountGameCenter_VarsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::api::_AccountGameCenter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::api::_AccountGoogle_VarsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::api::_AccountGoogle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::api::_AccountSteam_VarsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::api::_AccountSteam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::api::_AddFriendsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::api::_AddGroupUsersRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::api::_SessionRefreshRequest_VarsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::api::_SessionRefreshRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::api::_SessionLogoutRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::api::_AuthenticateAppleRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::api::_AuthenticateCustomRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::api::_AuthenticateDeviceRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::api::_AuthenticateEmailRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::api::_AuthenticateFacebookRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::api::_AuthenticateFacebookInstantGameRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::api::_AuthenticateGameCenterRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::api::_AuthenticateGoogleRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::api::_AuthenticateSteamRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::api::_BanGroupUsersRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::api::_BlockFriendsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::api::_ChannelMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::api::_ChannelMessageList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::api::_CreateGroupRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::api::_DeleteFriendsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::api::_DeleteGroupRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::api::_DeleteLeaderboardRecordRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::api::_DeleteNotificationsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::api::_DeleteStorageObjectId_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::api::_DeleteStorageObjectsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::api::_Event_PropertiesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::api::_Event_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::api::_Friend_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::api::_FriendList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::api::_GetUsersRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::api::_Group_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::api::_GroupList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::api::_GroupUserList_GroupUser_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::api::_GroupUserList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::api::_ImportFacebookFriendsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::api::_ImportSteamFriendsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::api::_JoinGroupRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::api::_JoinTournamentRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::api::_KickGroupUsersRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::api::_Leaderboard_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::api::_LeaderboardList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::api::_LeaderboardRecord_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::api::_LeaderboardRecordList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::api::_LeaveGroupRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::api::_LinkFacebookRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::api::_LinkSteamRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::api::_ListChannelMessagesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::api::_ListFriendsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::api::_ListGroupsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::api::_ListGroupUsersRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::api::_ListLeaderboardRecordsAroundOwnerRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::api::_ListLeaderboardRecordsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::api::_ListMatchesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::api::_ListNotificationsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::api::_ListStorageObjectsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::api::_ListTournamentRecordsAroundOwnerRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::api::_ListTournamentRecordsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::api::_ListTournamentsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::api::_ListUserGroupsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::api::_Match_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::api::_MatchList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::api::_Notification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::api::_NotificationList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::api::_PromoteGroupUsersRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::api::_DemoteGroupUsersRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::api::_ReadStorageObjectId_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::api::_ReadStorageObjectsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::api::_Rpc_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::api::_Session_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::api::_StorageObject_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::api::_StorageObjectAck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::api::_StorageObjectAcks_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::api::_StorageObjects_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::api::_StorageObjectList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::api::_Tournament_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::api::_TournamentList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::api::_TournamentRecordList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::api::_UpdateAccountRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::api::_UpdateGroupRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::api::_User_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::api::_UserGroupList_UserGroup_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::api::_UserGroupList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::api::_Users_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::api::_ValidatePurchaseAppleRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::api::_ValidatePurchaseGoogleRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::api::_ValidatePurchaseHuaweiRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::api::_ValidatedPurchase_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::api::_ValidatePurchaseResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::api::_PurchaseList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::api::_WriteLeaderboardRecordRequest_LeaderboardRecordWrite_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::api::_WriteLeaderboardRecordRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::api::_WriteStorageObject_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::api::_WriteStorageObjectsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::api::_WriteTournamentRecordRequest_TournamentRecordWrite_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::api::_WriteTournamentRecordRequest_default_instance_),
};

const char descriptor_table_protodef_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n1github.com/heroiclabs/nakama-common/ap"
  "i/api.proto\022\nnakama.api\032\037google/protobuf"
  "/timestamp.proto\032\036google/protobuf/wrappe"
  "rs.proto\"\352\001\n\007Account\022\036\n\004user\030\001 \001(\0132\020.nak"
  "ama.api.User\022\016\n\006wallet\030\002 \001(\t\022\r\n\005email\030\003 "
  "\001(\t\022*\n\007devices\030\004 \003(\0132\031.nakama.api.Accoun"
  "tDevice\022\021\n\tcustom_id\030\005 \001(\t\022/\n\013verify_tim"
  "e\030\006 \001(\0132\032.google.protobuf.Timestamp\0220\n\014d"
  "isable_time\030\007 \001(\0132\032.google.protobuf.Time"
  "stamp\"\200\001\n\016AccountRefresh\022\r\n\005token\030\001 \001(\t\022"
  "2\n\004vars\030\002 \003(\0132$.nakama.api.AccountRefres"
  "h.VarsEntry\032+\n\tVarsEntry\022\013\n\003key\030\001 \001(\t\022\r\n"
  "\005value\030\002 \001(\t:\0028\001\"|\n\014AccountApple\022\r\n\005toke"
  "n\030\001 \001(\t\0220\n\004vars\030\002 \003(\0132\".nakama.api.Accou"
  "ntApple.VarsEntry\032+\n\tVarsEntry\022\013\n\003key\030\001 "
  "\001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"{\n\rAccountCustom\022"
  "\n\n\002id\030\001 \001(\t\0221\n\004vars\030\002 \003(\0132#.nakama.api.A"
  "ccountCustom.VarsEntry\032+\n\tVarsEntry\022\013\n\003k"
  "ey\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"{\n\rAccountDe"
  "vice\022\n\n\002id\030\001 \001(\t\0221\n\004vars\030\002 \003(\0132#.nakama."
  "api.AccountDevice.VarsEntry\032+\n\tVarsEntry"
  "\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"\216\001\n\014Acc"
  "ountEmail\022\r\n\005email\030\001 \001(\t\022\020\n\010password\030\002 \001"
  "(\t\0220\n\004vars\030\003 \003(\0132\".nakama.api.AccountEma"
  "il.VarsEntry\032+\n\tVarsEntry\022\013\n\003key\030\001 \001(\t\022\r"
  "\n\005value\030\002 \001(\t:\0028\001\"\202\001\n\017AccountFacebook\022\r\n"
  "\005token\030\001 \001(\t\0223\n\004vars\030\002 \003(\0132%.nakama.api."
  "AccountFacebook.VarsEntry\032+\n\tVarsEntry\022\013"
  "\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"\245\001\n\032Accou"
  "ntFacebookInstantGame\022\032\n\022signed_player_i"
  "nfo\030\001 \001(\t\022>\n\004vars\030\002 \003(\01320.nakama.api.Acc"
  "ountFacebookInstantGame.VarsEntry\032+\n\tVar"
  "sEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"\361"
  "\001\n\021AccountGameCenter\022\021\n\tplayer_id\030\001 \001(\t\022"
  "\021\n\tbundle_id\030\002 \001(\t\022\031\n\021timestamp_seconds\030"
  "\003 \001(\003\022\014\n\004salt\030\004 \001(\t\022\021\n\tsignature\030\005 \001(\t\022\026"
  "\n\016public_key_url\030\006 \001(\t\0225\n\004vars\030\007 \003(\0132\'.n"
  "akama.api.AccountGameCenter.VarsEntry\032+\n"
  "\tVarsEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\002"
  "8\001\"~\n\rAccountGoogle\022\r\n\005token\030\001 \001(\t\0221\n\004va"
  "rs\030\002 \003(\0132#.nakama.api.AccountGoogle.Vars"
  "Entry\032+\n\tVarsEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value"
  "\030\002 \001(\t:\0028\001\"|\n\014AccountSteam\022\r\n\005token\030\001 \001("
  "\t\0220\n\004vars\030\002 \003(\0132\".nakama.api.AccountStea"
  "m.VarsEntry\032+\n\tVarsEntry\022\013\n\003key\030\001 \001(\t\022\r\n"
  "\005value\030\002 \001(\t:\0028\001\"3\n\021AddFriendsRequest\022\013\n"
  "\003ids\030\001 \003(\t\022\021\n\tusernames\030\002 \003(\t\":\n\024AddGrou"
  "pUsersRequest\022\020\n\010group_id\030\001 \001(\t\022\020\n\010user_"
  "ids\030\002 \003(\t\"\216\001\n\025SessionRefreshRequest\022\r\n\005t"
  "oken\030\001 \001(\t\0229\n\004vars\030\002 \003(\0132+.nakama.api.Se"
  "ssionRefreshRequest.VarsEntry\032+\n\tVarsEnt"
  "ry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"<\n\024Se"
  "ssionLogoutRequest\022\r\n\005token\030\001 \001(\t\022\025\n\rref"
  "resh_token\030\002 \001(\t\"\203\001\n\030AuthenticateAppleRe"
  "quest\022)\n\007account\030\001 \001(\0132\030.nakama.api.Acco"
  "untApple\022*\n\006create\030\002 \001(\0132\032.google.protob"
  "uf.BoolValue\022\020\n\010username\030\003 \001(\t\"\205\001\n\031Authe"
  "nticateCustomRequest\022*\n\007account\030\001 \001(\0132\031."
  "nakama.api.AccountCustom\022*\n\006create\030\002 \001(\013"
  "2\032.google.protobuf.BoolValue\022\020\n\010username"
  "\030\003 \001(\t\"\205\001\n\031AuthenticateDeviceRequest\022*\n\007"
  "account\030\001 \001(\0132\031.nakama.api.AccountDevice"
  "\022*\n\006create\030\002 \001(\0132\032.google.protobuf.BoolV"
  "alue\022\020\n\010username\030\003 \001(\t\"\203\001\n\030AuthenticateE"
  "mailRequest\022)\n\007account\030\001 \001(\0132\030.nakama.ap"
  "i.AccountEmail\022*\n\006create\030\002 \001(\0132\032.google."
  "protobuf.BoolValue\022\020\n\010username\030\003 \001(\t\"\263\001\n"
  "\033AuthenticateFacebookRequest\022,\n\007account\030"
  "\001 \001(\0132\033.nakama.api.AccountFacebook\022*\n\006cr"
  "eate\030\002 \001(\0132\032.google.protobuf.BoolValue\022\020"
  "\n\010username\030\003 \001(\t\022(\n\004sync\030\004 \001(\0132\032.google."
  "protobuf.BoolValue\"\237\001\n&AuthenticateFaceb"
  "ookInstantGameRequest\0227\n\007account\030\001 \001(\0132&"
  ".nakama.api.AccountFacebookInstantGame\022*"
  "\n\006create\030\002 \001(\0132\032.google.protobuf.BoolVal"
  "ue\022\020\n\010username\030\003 \001(\t\"\215\001\n\035AuthenticateGam"
  "eCenterRequest\022.\n\007account\030\001 \001(\0132\035.nakama"
  ".api.AccountGameCenter\022*\n\006create\030\002 \001(\0132\032"
  ".google.protobuf.BoolValue\022\020\n\010username\030\003"
  " \001(\t\"\205\001\n\031AuthenticateGoogleRequest\022*\n\007ac"
  "count\030\001 \001(\0132\031.nakama.api.AccountGoogle\022*"
  "\n\006create\030\002 \001(\0132\032.google.protobuf.BoolVal"
  "ue\022\020\n\010username\030\003 \001(\t\"\255\001\n\030AuthenticateSte"
  "amRequest\022)\n\007account\030\001 \001(\0132\030.nakama.api."
  "AccountSteam\022*\n\006create\030\002 \001(\0132\032.google.pr"
  "otobuf.BoolValue\022\020\n\010username\030\003 \001(\t\022(\n\004sy"
  "nc\030\004 \001(\0132\032.google.protobuf.BoolValue\":\n\024"
  "BanGroupUsersRequest\022\020\n\010group_id\030\001 \001(\t\022\020"
  "\n\010user_ids\030\002 \003(\t\"5\n\023BlockFriendsRequest\022"
  "\013\n\003ids\030\001 \003(\t\022\021\n\tusernames\030\002 \003(\t\"\372\002\n\016Chan"
  "nelMessage\022\022\n\nchannel_id\030\001 \001(\t\022\022\n\nmessag"
  "e_id\030\002 \001(\t\022)\n\004code\030\003 \001(\0132\033.google.protob"
  "uf.Int32Value\022\021\n\tsender_id\030\004 \001(\t\022\020\n\010user"
  "name\030\005 \001(\t\022\017\n\007content\030\006 \001(\t\022/\n\013create_ti"
  "me\030\007 \001(\0132\032.google.protobuf.Timestamp\022/\n\013"
  "update_time\030\010 \001(\0132\032.google.protobuf.Time"
  "stamp\022.\n\npersistent\030\t \001(\0132\032.google.proto"
  "buf.BoolValue\022\021\n\troom_name\030\n \001(\t\022\020\n\010grou"
  "p_id\030\013 \001(\t\022\023\n\013user_id_one\030\014 \001(\t\022\023\n\013user_"
  "id_two\030\r \001(\t\"\206\001\n\022ChannelMessageList\022,\n\010m"
  "essages\030\001 \003(\0132\032.nakama.api.ChannelMessag"
  "e\022\023\n\013next_cursor\030\002 \001(\t\022\023\n\013prev_cursor\030\003 "
  "\001(\t\022\030\n\020cacheable_cursor\030\004 \001(\t\"~\n\022CreateG"
  "roupRequest\022\014\n\004name\030\001 \001(\t\022\023\n\013description"
  "\030\002 \001(\t\022\020\n\010lang_tag\030\003 \001(\t\022\022\n\navatar_url\030\004"
  " \001(\t\022\014\n\004open\030\005 \001(\010\022\021\n\tmax_count\030\006 \001(\005\"6\n"
  "\024DeleteFriendsRequest\022\013\n\003ids\030\001 \003(\t\022\021\n\tus"
  "ernames\030\002 \003(\t\"&\n\022DeleteGroupRequest\022\020\n\010g"
  "roup_id\030\001 \001(\t\"8\n\036DeleteLeaderboardRecord"
  "Request\022\026\n\016leaderboard_id\030\001 \001(\t\")\n\032Delet"
  "eNotificationsRequest\022\013\n\003ids\030\001 \003(\t\"I\n\025De"
  "leteStorageObjectId\022\022\n\ncollection\030\001 \001(\t\022"
  "\013\n\003key\030\002 \001(\t\022\017\n\007version\030\003 \001(\t\"T\n\033DeleteS"
  "torageObjectsRequest\0225\n\nobject_ids\030\001 \003(\013"
  "2!.nakama.api.DeleteStorageObjectId\"\300\001\n\005"
  "Event\022\014\n\004name\030\001 \001(\t\0225\n\nproperties\030\002 \003(\0132"
  "!.nakama.api.Event.PropertiesEntry\022-\n\tti"
  "mestamp\030\003 \001(\0132\032.google.protobuf.Timestam"
  "p\022\020\n\010external\030\004 \001(\010\0321\n\017PropertiesEntry\022\013"
  "\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"\315\001\n\006Frien"
  "d\022\036\n\004user\030\001 \001(\0132\020.nakama.api.User\022*\n\005sta"
  "te\030\002 \001(\0132\033.google.protobuf.Int32Value\022/\n"
  "\013update_time\030\003 \001(\0132\032.google.protobuf.Tim"
  "estamp\"F\n\005State\022\n\n\006FRIEND\020\000\022\017\n\013INVITE_SE"
  "NT\020\001\022\023\n\017INVITE_RECEIVED\020\002\022\013\n\007BLOCKED\020\003\"A"
  "\n\nFriendList\022#\n\007friends\030\001 \003(\0132\022.nakama.a"
  "pi.Friend\022\016\n\006cursor\030\002 \001(\t\"G\n\017GetUsersReq"
  "uest\022\013\n\003ids\030\001 \003(\t\022\021\n\tusernames\030\002 \003(\t\022\024\n\014"
  "facebook_ids\030\003 \003(\t\"\265\002\n\005Group\022\n\n\002id\030\001 \001(\t"
  "\022\022\n\ncreator_id\030\002 \001(\t\022\014\n\004name\030\003 \001(\t\022\023\n\013de"
  "scription\030\004 \001(\t\022\020\n\010lang_tag\030\005 \001(\t\022\020\n\010met"
  "adata\030\006 \001(\t\022\022\n\navatar_url\030\007 \001(\t\022(\n\004open\030"
  "\010 \001(\0132\032.google.protobuf.BoolValue\022\022\n\nedg"
  "e_count\030\t \001(\005\022\021\n\tmax_count\030\n \001(\005\022/\n\013crea"
  "te_time\030\013 \001(\0132\032.google.protobuf.Timestam"
  "p\022/\n\013update_time\030\014 \001(\0132\032.google.protobuf"
  ".Timestamp\">\n\tGroupList\022!\n\006groups\030\001 \003(\0132"
  "\021.nakama.api.Group\022\016\n\006cursor\030\002 \001(\t\"\365\001\n\rG"
  "roupUserList\0228\n\013group_users\030\001 \003(\0132#.naka"
  "ma.api.GroupUserList.GroupUser\022\016\n\006cursor"
  "\030\002 \001(\t\032\231\001\n\tGroupUser\022\036\n\004user\030\001 \001(\0132\020.nak"
  "ama.api.User\022*\n\005state\030\002 \001(\0132\033.google.pro"
  "tobuf.Int32Value\"@\n\005State\022\016\n\nSUPERADMIN\020"
  "\000\022\t\n\005ADMIN\020\001\022\n\n\006MEMBER\020\002\022\020\n\014JOIN_REQUEST"
  "\020\003\"w\n\034ImportFacebookFriendsRequest\022,\n\007ac"
  "count\030\001 \001(\0132\033.nakama.api.AccountFacebook"
  "\022)\n\005reset\030\002 \001(\0132\032.google.protobuf.BoolVa"
  "lue\"q\n\031ImportSteamFriendsRequest\022)\n\007acco"
  "unt\030\001 \001(\0132\030.nakama.api.AccountSteam\022)\n\005r"
  "eset\030\002 \001(\0132\032.google.protobuf.BoolValue\"$"
  "\n\020JoinGroupRequest\022\020\n\010group_id\030\001 \001(\t\".\n\025"
  "JoinTournamentRequest\022\025\n\rtournament_id\030\001"
  " \001(\t\";\n\025KickGroupUsersRequest\022\020\n\010group_i"
  "d\030\001 \001(\t\022\020\n\010user_ids\030\002 \003(\t\"\327\001\n\013Leaderboar"
  "d\022\n\n\002id\030\001 \001(\t\022\022\n\nsort_order\030\002 \001(\r\022&\n\010ope"
  "rator\030\003 \001(\0162\024.nakama.api.Operator\022\022\n\npre"
  "v_reset\030\004 \001(\r\022\022\n\nnext_reset\030\005 \001(\r\022\020\n\010met"
  "adata\030\006 \001(\t\022/\n\013create_time\030\007 \001(\0132\032.googl"
  "e.protobuf.Timestamp\022\025\n\rauthoritative\030\010 "
  "\001(\010\"P\n\017LeaderboardList\022-\n\014leaderboards\030\001"
  " \003(\0132\027.nakama.api.Leaderboard\022\016\n\006cursor\030"
  "\002 \001(\t\"\353\002\n\021LeaderboardRecord\022\026\n\016leaderboa"
  "rd_id\030\001 \001(\t\022\020\n\010owner_id\030\002 \001(\t\022.\n\010usernam"
  "e\030\003 \001(\0132\034.google.protobuf.StringValue\022\r\n"
  "\005score\030\004 \001(\003\022\020\n\010subscore\030\005 \001(\003\022\021\n\tnum_sc"
  "ore\030\006 \001(\005\022\020\n\010metadata\030\007 \001(\t\022/\n\013create_ti"
  "me\030\010 \001(\0132\032.google.protobuf.Timestamp\022/\n\013"
  "update_time\030\t \001(\0132\032.google.protobuf.Time"
  "stamp\022/\n\013expiry_time\030\n \001(\0132\032.google.prot"
  "obuf.Timestamp\022\014\n\004rank\030\013 \001(\003\022\025\n\rmax_num_"
  "score\030\014 \001(\r\"\247\001\n\025LeaderboardRecordList\022.\n"
  "\007records\030\001 \003(\0132\035.nakama.api.LeaderboardR"
  "ecord\0224\n\rowner_records\030\002 \003(\0132\035.nakama.ap"
  "i.LeaderboardRecord\022\023\n\013next_cursor\030\003 \001(\t"
  "\022\023\n\013prev_cursor\030\004 \001(\t\"%\n\021LeaveGroupReque"
  "st\022\020\n\010group_id\030\001 \001(\t\"m\n\023LinkFacebookRequ"
  "est\022,\n\007account\030\001 \001(\0132\033.nakama.api.Accoun"
  "tFacebook\022(\n\004sync\030\002 \001(\0132\032.google.protobu"
  "f.BoolValue\"g\n\020LinkSteamRequest\022)\n\007accou"
  "nt\030\001 \001(\0132\030.nakama.api.AccountSteam\022(\n\004sy"
  "nc\030\002 \001(\0132\032.google.protobuf.BoolValue\"\231\001\n"
  "\032ListChannelMessagesRequest\022\022\n\nchannel_i"
  "d\030\001 \001(\t\022*\n\005limit\030\002 \001(\0132\033.google.protobuf"
  ".Int32Value\022+\n\007forward\030\003 \001(\0132\032.google.pr"
  "otobuf.BoolValue\022\016\n\006cursor\030\004 \001(\t\"|\n\022List"
  "FriendsRequest\022*\n\005limit\030\001 \001(\0132\033.google.p"
  "rotobuf.Int32Value\022*\n\005state\030\002 \001(\0132\033.goog"
  "le.protobuf.Int32Value\022\016\n\006cursor\030\003 \001(\t\"\307"
  "\001\n\021ListGroupsRequest\022\014\n\004name\030\001 \001(\t\022\016\n\006cu"
  "rsor\030\002 \001(\t\022*\n\005limit\030\003 \001(\0132\033.google.proto"
  "buf.Int32Value\022\020\n\010lang_tag\030\004 \001(\t\022,\n\007memb"
  "ers\030\005 \001(\0132\033.google.protobuf.Int32Value\022("
  "\n\004open\030\006 \001(\0132\032.google.protobuf.BoolValue"
  "\"\221\001\n\025ListGroupUsersRequest\022\020\n\010group_id\030\001"
  " \001(\t\022*\n\005limit\030\002 \001(\0132\033.google.protobuf.In"
  "t32Value\022*\n\005state\030\003 \001(\0132\033.google.protobu"
  "f.Int32Value\022\016\n\006cursor\030\004 \001(\t\"\256\001\n(ListLea"
  "derboardRecordsAroundOwnerRequest\022\026\n\016lea"
  "derboard_id\030\001 \001(\t\022+\n\005limit\030\002 \001(\0132\034.googl"
  "e.protobuf.UInt32Value\022\020\n\010owner_id\030\003 \001(\t"
  "\022+\n\006expiry\030\004 \001(\0132\033.google.protobuf.Int64"
  "Value\"\263\001\n\035ListLeaderboardRecordsRequest\022"
  "\026\n\016leaderboard_id\030\001 \001(\t\022\021\n\towner_ids\030\002 \003"
  "(\t\022*\n\005limit\030\003 \001(\0132\033.google.protobuf.Int3"
  "2Value\022\016\n\006cursor\030\004 \001(\t\022+\n\006expiry\030\005 \001(\0132\033"
  ".google.protobuf.Int64Value\"\253\002\n\022ListMatc"
  "hesRequest\022*\n\005limit\030\001 \001(\0132\033.google.proto"
  "buf.Int32Value\0221\n\rauthoritative\030\002 \001(\0132\032."
  "google.protobuf.BoolValue\022+\n\005label\030\003 \001(\013"
  "2\034.google.protobuf.StringValue\022-\n\010min_si"
  "ze\030\004 \001(\0132\033.google.protobuf.Int32Value\022-\n"
  "\010max_size\030\005 \001(\0132\033.google.protobuf.Int32V"
  "alue\022+\n\005query\030\006 \001(\0132\034.google.protobuf.St"
  "ringValue\"`\n\030ListNotificationsRequest\022*\n"
  "\005limit\030\001 \001(\0132\033.google.protobuf.Int32Valu"
  "e\022\030\n\020cacheable_cursor\030\002 \001(\t\"|\n\031ListStora"
  "geObjectsRequest\022\017\n\007user_id\030\001 \001(\t\022\022\n\ncol"
  "lection\030\002 \001(\t\022*\n\005limit\030\003 \001(\0132\033.google.pr"
  "otobuf.Int32Value\022\016\n\006cursor\030\004 \001(\t\"\254\001\n\'Li"
  "stTournamentRecordsAroundOwnerRequest\022\025\n"
  "\rtournament_id\030\001 \001(\t\022+\n\005limit\030\002 \001(\0132\034.go"
  "ogle.protobuf.UInt32Value\022\020\n\010owner_id\030\003 "
  "\001(\t\022+\n\006expiry\030\004 \001(\0132\033.google.protobuf.In"
  "t64Value\"\261\001\n\034ListTournamentRecordsReques"
  "t\022\025\n\rtournament_id\030\001 \001(\t\022\021\n\towner_ids\030\002 "
  "\003(\t\022*\n\005limit\030\003 \001(\0132\033.google.protobuf.Int"
  "32Value\022\016\n\006cursor\030\004 \001(\t\022+\n\006expiry\030\005 \001(\0132"
  "\033.google.protobuf.Int64Value\"\240\002\n\026ListTou"
  "rnamentsRequest\0224\n\016category_start\030\001 \001(\0132"
  "\034.google.protobuf.UInt32Value\0222\n\014categor"
  "y_end\030\002 \001(\0132\034.google.protobuf.UInt32Valu"
  "e\0220\n\nstart_time\030\003 \001(\0132\034.google.protobuf."
  "UInt32Value\022.\n\010end_time\030\004 \001(\0132\034.google.p"
  "rotobuf.UInt32Value\022*\n\005limit\030\006 \001(\0132\033.goo"
  "gle.protobuf.Int32Value\022\016\n\006cursor\030\010 \001(\t\""
  "\220\001\n\025ListUserGroupsRequest\022\017\n\007user_id\030\001 \001"
  "(\t\022*\n\005limit\030\002 \001(\0132\033.google.protobuf.Int3"
  "2Value\022*\n\005state\030\003 \001(\0132\033.google.protobuf."
  "Int32Value\022\016\n\006cursor\030\004 \001(\t\"\224\001\n\005Match\022\020\n\010"
  "match_id\030\001 \001(\t\022\025\n\rauthoritative\030\002 \001(\010\022+\n"
  "\005label\030\003 \001(\0132\034.google.protobuf.StringVal"
  "ue\022\014\n\004size\030\004 \001(\005\022\021\n\ttick_rate\030\005 \001(\005\022\024\n\014h"
  "andler_name\030\006 \001(\t\"/\n\tMatchList\022\"\n\007matche"
  "s\030\001 \003(\0132\021.nakama.api.Match\"\242\001\n\014Notificat"
  "ion\022\n\n\002id\030\001 \001(\t\022\017\n\007subject\030\002 \001(\t\022\017\n\007cont"
  "ent\030\003 \001(\t\022\014\n\004code\030\004 \001(\005\022\021\n\tsender_id\030\005 \001"
  "(\t\022/\n\013create_time\030\006 \001(\0132\032.google.protobu"
  "f.Timestamp\022\022\n\npersistent\030\007 \001(\010\"]\n\020Notif"
  "icationList\022/\n\rnotifications\030\001 \003(\0132\030.nak"
  "ama.api.Notification\022\030\n\020cacheable_cursor"
  "\030\002 \001(\t\">\n\030PromoteGroupUsersRequest\022\020\n\010gr"
  "oup_id\030\001 \001(\t\022\020\n\010user_ids\030\002 \003(\t\"=\n\027Demote"
  "GroupUsersRequest\022\020\n\010group_id\030\001 \001(\t\022\020\n\010u"
  "ser_ids\030\002 \003(\t\"G\n\023ReadStorageObjectId\022\022\n\n"
  "collection\030\001 \001(\t\022\013\n\003key\030\002 \001(\t\022\017\n\007user_id"
  "\030\003 \001(\t\"P\n\031ReadStorageObjectsRequest\0223\n\no"
  "bject_ids\030\001 \003(\0132\037.nakama.api.ReadStorage"
  "ObjectId\"4\n\003Rpc\022\n\n\002id\030\001 \001(\t\022\017\n\007payload\030\002"
  " \001(\t\022\020\n\010http_key\030\003 \001(\t\"@\n\007Session\022\017\n\007cre"
  "ated\030\001 \001(\010\022\r\n\005token\030\002 \001(\t\022\025\n\rrefresh_tok"
  "en\030\003 \001(\t\"\366\001\n\rStorageObject\022\022\n\ncollection"
  "\030\001 \001(\t\022\013\n\003key\030\002 \001(\t\022\017\n\007user_id\030\003 \001(\t\022\r\n\005"
  "value\030\004 \001(\t\022\017\n\007version\030\005 \001(\t\022\027\n\017permissi"
  "on_read\030\006 \001(\005\022\030\n\020permission_write\030\007 \001(\005\022"
  "/\n\013create_time\030\010 \001(\0132\032.google.protobuf.T"
  "imestamp\022/\n\013update_time\030\t \001(\0132\032.google.p"
  "rotobuf.Timestamp\"U\n\020StorageObjectAck\022\022\n"
  "\ncollection\030\001 \001(\t\022\013\n\003key\030\002 \001(\t\022\017\n\007versio"
  "n\030\003 \001(\t\022\017\n\007user_id\030\004 \001(\t\"\?\n\021StorageObjec"
  "tAcks\022*\n\004acks\030\001 \003(\0132\034.nakama.api.Storage"
  "ObjectAck\"<\n\016StorageObjects\022*\n\007objects\030\001"
  " \003(\0132\031.nakama.api.StorageObject\"O\n\021Stora"
  "geObjectList\022*\n\007objects\030\001 \003(\0132\031.nakama.a"
  "pi.StorageObject\022\016\n\006cursor\030\002 \001(\t\"\331\003\n\nTou"
  "rnament\022\n\n\002id\030\001 \001(\t\022\r\n\005title\030\002 \001(\t\022\023\n\013de"
  "scription\030\003 \001(\t\022\020\n\010category\030\004 \001(\r\022\022\n\nsor"
  "t_order\030\005 \001(\r\022\014\n\004size\030\006 \001(\r\022\020\n\010max_size\030"
  "\007 \001(\r\022\025\n\rmax_num_score\030\010 \001(\r\022\021\n\tcan_ente"
  "r\030\t \001(\010\022\022\n\nend_active\030\n \001(\r\022\022\n\nnext_rese"
  "t\030\013 \001(\r\022\020\n\010metadata\030\014 \001(\t\022/\n\013create_time"
  "\030\r \001(\0132\032.google.protobuf.Timestamp\022.\n\nst"
  "art_time\030\016 \001(\0132\032.google.protobuf.Timesta"
  "mp\022,\n\010end_time\030\017 \001(\0132\032.google.protobuf.T"
  "imestamp\022\020\n\010duration\030\020 \001(\r\022\024\n\014start_acti"
  "ve\030\021 \001(\r\022\022\n\nprev_reset\030\022 \001(\r\022&\n\010operator"
  "\030\023 \001(\0162\024.nakama.api.Operator\"M\n\016Tourname"
  "ntList\022+\n\013tournaments\030\001 \003(\0132\026.nakama.api"
  ".Tournament\022\016\n\006cursor\030\002 \001(\t\"\246\001\n\024Tourname"
  "ntRecordList\022.\n\007records\030\001 \003(\0132\035.nakama.a"
  "pi.LeaderboardRecord\0224\n\rowner_records\030\002 "
  "\003(\0132\035.nakama.api.LeaderboardRecord\022\023\n\013ne"
  "xt_cursor\030\003 \001(\t\022\023\n\013prev_cursor\030\004 \001(\t\"\274\002\n"
  "\024UpdateAccountRequest\022.\n\010username\030\001 \001(\0132"
  "\034.google.protobuf.StringValue\0222\n\014display"
  "_name\030\002 \001(\0132\034.google.protobuf.StringValu"
  "e\0220\n\navatar_url\030\003 \001(\0132\034.google.protobuf."
  "StringValue\022.\n\010lang_tag\030\004 \001(\0132\034.google.p"
  "rotobuf.StringValue\022.\n\010location\030\005 \001(\0132\034."
  "google.protobuf.StringValue\022.\n\010timezone\030"
  "\006 \001(\0132\034.google.protobuf.StringValue\"\221\002\n\022"
  "UpdateGroupRequest\022\020\n\010group_id\030\001 \001(\t\022*\n\004"
  "name\030\002 \001(\0132\034.google.protobuf.StringValue"
  "\0221\n\013description\030\003 \001(\0132\034.google.protobuf."
  "StringValue\022.\n\010lang_tag\030\004 \001(\0132\034.google.p"
  "rotobuf.StringValue\0220\n\navatar_url\030\005 \001(\0132"
  "\034.google.protobuf.StringValue\022(\n\004open\030\006 "
  "\001(\0132\032.google.protobuf.BoolValue\"\241\003\n\004User"
  "\022\n\n\002id\030\001 \001(\t\022\020\n\010username\030\002 \001(\t\022\024\n\014displa"
  "y_name\030\003 \001(\t\022\022\n\navatar_url\030\004 \001(\t\022\020\n\010lang"
  "_tag\030\005 \001(\t\022\020\n\010location\030\006 \001(\t\022\020\n\010timezone"
  "\030\007 \001(\t\022\020\n\010metadata\030\010 \001(\t\022\023\n\013facebook_id\030"
  "\t \001(\t\022\021\n\tgoogle_id\030\n \001(\t\022\025\n\rgamecenter_i"
  "d\030\013 \001(\t\022\020\n\010steam_id\030\014 \001(\t\022\016\n\006online\030\r \001("
  "\010\022\022\n\nedge_count\030\016 \001(\005\022/\n\013create_time\030\017 \001"
  "(\0132\032.google.protobuf.Timestamp\022/\n\013update"
  "_time\030\020 \001(\0132\032.google.protobuf.Timestamp\022"
  " \n\030facebook_instant_game_id\030\021 \001(\t\022\020\n\010app"
  "le_id\030\022 \001(\t\"\367\001\n\rUserGroupList\0228\n\013user_gr"
  "oups\030\001 \003(\0132#.nakama.api.UserGroupList.Us"
  "erGroup\022\016\n\006cursor\030\002 \001(\t\032\233\001\n\tUserGroup\022 \n"
  "\005group\030\001 \001(\0132\021.nakama.api.Group\022*\n\005state"
  "\030\002 \001(\0132\033.google.protobuf.Int32Value\"@\n\005S"
  "tate\022\016\n\nSUPERADMIN\020\000\022\t\n\005ADMIN\020\001\022\n\n\006MEMBE"
  "R\020\002\022\020\n\014JOIN_REQUEST\020\003\"(\n\005Users\022\037\n\005users\030"
  "\001 \003(\0132\020.nakama.api.User\"\\\n\034ValidatePurch"
  "aseAppleRequest\022\017\n\007receipt\030\001 \001(\t\022+\n\007pers"
  "ist\030\002 \001(\0132\032.google.protobuf.BoolValue\"^\n"
  "\035ValidatePurchaseGoogleRequest\022\020\n\010purcha"
  "se\030\001 \001(\t\022+\n\007persist\030\002 \001(\0132\032.google.proto"
  "buf.BoolValue\"q\n\035ValidatePurchaseHuaweiR"
  "equest\022\020\n\010purchase\030\001 \001(\t\022\021\n\tsignature\030\002 "
  "\001(\t\022+\n\007persist\030\003 \001(\0132\032.google.protobuf.B"
  "oolValue\"\376\003\n\021ValidatedPurchase\022\022\n\nproduc"
  "t_id\030\001 \001(\t\022\026\n\016transaction_id\030\002 \001(\t\0222\n\005st"
  "ore\030\003 \001(\0162#.nakama.api.ValidatedPurchase"
  ".Store\0221\n\rpurchase_time\030\004 \001(\0132\032.google.p"
  "rotobuf.Timestamp\022/\n\013create_time\030\005 \001(\0132\032"
  ".google.protobuf.Timestamp\022/\n\013update_tim"
  "e\030\006 \001(\0132\032.google.protobuf.Timestamp\022\031\n\021p"
  "rovider_response\030\007 \001(\t\022>\n\013environment\030\010 "
  "\001(\0162).nakama.api.ValidatedPurchase.Envir"
  "onment\022\023\n\013seen_before\030\t \001(\010\"K\n\005Store\022\023\n\017"
  "APPLE_APP_STORE\020\000\022\025\n\021GOOGLE_PLAY_STORE\020\001"
  "\022\026\n\022HUAWEI_APP_GALLERY\020\002\"7\n\013Environment\022"
  "\013\n\007UNKNOWN\020\000\022\013\n\007SANDBOX\020\001\022\016\n\nPRODUCTION\020"
  "\002\"V\n\030ValidatePurchaseResponse\022:\n\023validat"
  "ed_purchases\030\001 \003(\0132\035.nakama.api.Validate"
  "dPurchase\"o\n\014PurchaseList\022:\n\023validated_p"
  "urchases\030\001 \003(\0132\035.nakama.api.ValidatedPur"
  "chase\022\016\n\006cursor\030\002 \001(\t\022\023\n\013prev_cursor\030\003 \001"
  "(\t\"\376\001\n\035WriteLeaderboardRecordRequest\022\026\n\016"
  "leaderboard_id\030\001 \001(\t\022P\n\006record\030\002 \001(\0132@.n"
  "akama.api.WriteLeaderboardRecordRequest."
  "LeaderboardRecordWrite\032s\n\026LeaderboardRec"
  "ordWrite\022\r\n\005score\030\001 \001(\003\022\020\n\010subscore\030\002 \001("
  "\003\022\020\n\010metadata\030\003 \001(\t\022&\n\010operator\030\004 \001(\0162\024."
  "nakama.api.Operator\"\302\001\n\022WriteStorageObje"
  "ct\022\022\n\ncollection\030\001 \001(\t\022\013\n\003key\030\002 \001(\t\022\r\n\005v"
  "alue\030\003 \001(\t\022\017\n\007version\030\004 \001(\t\0224\n\017permissio"
  "n_read\030\005 \001(\0132\033.google.protobuf.Int32Valu"
  "e\0225\n\020permission_write\030\006 \001(\0132\033.google.pro"
  "tobuf.Int32Value\"M\n\032WriteStorageObjectsR"
  "equest\022/\n\007objects\030\001 \003(\0132\036.nakama.api.Wri"
  "teStorageObject\"\371\001\n\034WriteTournamentRecor"
  "dRequest\022\025\n\rtournament_id\030\001 \001(\t\022N\n\006recor"
  "d\030\002 \001(\0132>.nakama.api.WriteTournamentReco"
  "rdRequest.TournamentRecordWrite\032r\n\025Tourn"
  "amentRecordWrite\022\r\n\005score\030\001 \001(\003\022\020\n\010subsc"
  "ore\030\002 \001(\003\022\020\n\010metadata\030\003 \001(\t\022&\n\010operator\030"
  "\004 \001(\0162\024.nakama.api.Operator*L\n\010Operator\022"
  "\017\n\013NO_OVERRIDE\020\000\022\010\n\004BEST\020\001\022\007\n\003SET\020\002\022\r\n\tI"
  "NCREMENT\020\003\022\r\n\tDECREMENT\020\004Bc\n\031com.heroicl"
  "abs.nakama.apiB\tNakamaApiP\001Z\'github.com/"
  "heroiclabs/nakama-common/api\252\002\017Nakama.Pr"
  "otobufb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto_deps[2] = {
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
  &::descriptor_table_google_2fprotobuf_2fwrappers_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto_sccs[116] = {
  &scc_info_Account_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,
  &scc_info_AccountApple_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,
  &scc_info_AccountApple_VarsEntry_DoNotUse_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,
  &scc_info_AccountCustom_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,
  &scc_info_AccountCustom_VarsEntry_DoNotUse_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,
  &scc_info_AccountDevice_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,
  &scc_info_AccountDevice_VarsEntry_DoNotUse_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,
  &scc_info_AccountEmail_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,
  &scc_info_AccountEmail_VarsEntry_DoNotUse_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,
  &scc_info_AccountFacebook_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,
  &scc_info_AccountFacebook_VarsEntry_DoNotUse_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,
  &scc_info_AccountFacebookInstantGame_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,
  &scc_info_AccountFacebookInstantGame_VarsEntry_DoNotUse_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,
  &scc_info_AccountGameCenter_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,
  &scc_info_AccountGameCenter_VarsEntry_DoNotUse_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,
  &scc_info_AccountGoogle_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,
  &scc_info_AccountGoogle_VarsEntry_DoNotUse_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,
  &scc_info_AccountRefresh_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,
  &scc_info_AccountRefresh_VarsEntry_DoNotUse_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,
  &scc_info_AccountSteam_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,
  &scc_info_AccountSteam_VarsEntry_DoNotUse_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,
  &scc_info_AddFriendsRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,
  &scc_info_AddGroupUsersRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,
  &scc_info_AuthenticateAppleRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,
  &scc_info_AuthenticateCustomRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,
  &scc_info_AuthenticateDeviceRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,
  &scc_info_AuthenticateEmailRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,
  &scc_info_AuthenticateFacebookInstantGameRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,
  &scc_info_AuthenticateFacebookRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,
  &scc_info_AuthenticateGameCenterRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,
  &scc_info_AuthenticateGoogleRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,
  &scc_info_AuthenticateSteamRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,
  &scc_info_BanGroupUsersRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,
  &scc_info_BlockFriendsRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,
  &scc_info_ChannelMessage_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,
  &scc_info_ChannelMessageList_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,
  &scc_info_CreateGroupRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,
  &scc_info_DeleteFriendsRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,
  &scc_info_DeleteGroupRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,
  &scc_info_DeleteLeaderboardRecordRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,
  &scc_info_DeleteNotificationsRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,
  &scc_info_DeleteStorageObjectId_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,
  &scc_info_DeleteStorageObjectsRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,
  &scc_info_DemoteGroupUsersRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,
  &scc_info_Event_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,
  &scc_info_Event_PropertiesEntry_DoNotUse_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,
  &scc_info_Friend_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,
  &scc_info_FriendList_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,
  &scc_info_GetUsersRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,
  &scc_info_Group_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,
  &scc_info_GroupList_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,
  &scc_info_GroupUserList_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,
  &scc_info_GroupUserList_GroupUser_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,
  &scc_info_ImportFacebookFriendsRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,
  &scc_info_ImportSteamFriendsRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,
  &scc_info_JoinGroupRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,
  &scc_info_JoinTournamentRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,
  &scc_info_KickGroupUsersRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,
  &scc_info_Leaderboard_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,
  &scc_info_LeaderboardList_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,
  &scc_info_LeaderboardRecord_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,
  &scc_info_LeaderboardRecordList_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,
  &scc_info_LeaveGroupRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,
  &scc_info_LinkFacebookRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,
  &scc_info_LinkSteamRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,
  &scc_info_ListChannelMessagesRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,
  &scc_info_ListFriendsRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,
  &scc_info_ListGroupUsersRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,
  &scc_info_ListGroupsRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,
  &scc_info_ListLeaderboardRecordsAroundOwnerRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,
  &scc_info_ListLeaderboardRecordsRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,
  &scc_info_ListMatchesRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,
  &scc_info_ListNotificationsRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,
  &scc_info_ListStorageObjectsRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,
  &scc_info_ListTournamentRecordsAroundOwnerRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,
  &scc_info_ListTournamentRecordsRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,
  &scc_info_ListTournamentsRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,
  &scc_info_ListUserGroupsRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,
  &scc_info_Match_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,
  &scc_info_MatchList_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,
  &scc_info_Notification_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,
  &scc_info_NotificationList_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,
  &scc_info_PromoteGroupUsersRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,
  &scc_info_PurchaseList_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,
  &scc_info_ReadStorageObjectId_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,
  &scc_info_ReadStorageObjectsRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,
  &scc_info_Rpc_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,
  &scc_info_Session_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,
  &scc_info_SessionLogoutRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,
  &scc_info_SessionRefreshRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,
  &scc_info_SessionRefreshRequest_VarsEntry_DoNotUse_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,
  &scc_info_StorageObject_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,
  &scc_info_StorageObjectAck_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,
  &scc_info_StorageObjectAcks_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,
  &scc_info_StorageObjectList_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,
  &scc_info_StorageObjects_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,
  &scc_info_Tournament_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,
  &scc_info_TournamentList_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,
  &scc_info_TournamentRecordList_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,
  &scc_info_UpdateAccountRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,
  &scc_info_UpdateGroupRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,
  &scc_info_User_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,
  &scc_info_UserGroupList_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,
  &scc_info_UserGroupList_UserGroup_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,
  &scc_info_Users_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,
  &scc_info_ValidatePurchaseAppleRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,
  &scc_info_ValidatePurchaseGoogleRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,
  &scc_info_ValidatePurchaseHuaweiRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,
  &scc_info_ValidatePurchaseResponse_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,
  &scc_info_ValidatedPurchase_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,
  &scc_info_WriteLeaderboardRecordRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,
  &scc_info_WriteLeaderboardRecordRequest_LeaderboardRecordWrite_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,
  &scc_info_WriteStorageObject_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,
  &scc_info_WriteStorageObjectsRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,
  &scc_info_WriteTournamentRecordRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,
  &scc_info_WriteTournamentRecordRequest_TournamentRecordWrite_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto = {
  false, false, descriptor_table_protodef_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto, "github.com/heroiclabs/nakama-common/api/api.proto", 14974,
  &descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto_once, descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto_sccs, descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto_deps, 116, 2,
  schemas, file_default_instances, TableStruct_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto::offsets,
  file_level_metadata_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto, 116, file_level_enum_descriptors_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto, file_level_service_descriptors_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto)), true);
namespace nakama {
namespace api {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Friend_State_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto);
  return file_level_enum_descriptors_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto[0];
}
bool Friend_State_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Friend_State Friend::FRIEND;
constexpr Friend_State Friend::INVITE_SENT;
constexpr Friend_State Friend::INVITE_RECEIVED;
constexpr Friend_State Friend::BLOCKED;
constexpr Friend_State Friend::State_MIN;
constexpr Friend_State Friend::State_MAX;
constexpr int Friend::State_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GroupUserList_GroupUser_State_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto);
  return file_level_enum_descriptors_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto[1];
}
bool GroupUserList_GroupUser_State_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr GroupUserList_GroupUser_State GroupUserList_GroupUser::SUPERADMIN;
constexpr GroupUserList_GroupUser_State GroupUserList_GroupUser::ADMIN;
constexpr GroupUserList_GroupUser_State GroupUserList_GroupUser::MEMBER;
constexpr GroupUserList_GroupUser_State GroupUserList_GroupUser::JOIN_REQUEST;
constexpr GroupUserList_GroupUser_State GroupUserList_GroupUser::State_MIN;
constexpr GroupUserList_GroupUser_State GroupUserList_GroupUser::State_MAX;
constexpr int GroupUserList_GroupUser::State_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UserGroupList_UserGroup_State_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto);
  return file_level_enum_descriptors_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto[2];
}
bool UserGroupList_UserGroup_State_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr UserGroupList_UserGroup_State UserGroupList_UserGroup::SUPERADMIN;
constexpr UserGroupList_UserGroup_State UserGroupList_UserGroup::ADMIN;
constexpr UserGroupList_UserGroup_State UserGroupList_UserGroup::MEMBER;
constexpr UserGroupList_UserGroup_State UserGroupList_UserGroup::JOIN_REQUEST;
constexpr UserGroupList_UserGroup_State UserGroupList_UserGroup::State_MIN;
constexpr UserGroupList_UserGroup_State UserGroupList_UserGroup::State_MAX;
constexpr int UserGroupList_UserGroup::State_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ValidatedPurchase_Store_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto);
  return file_level_enum_descriptors_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto[3];
}
bool ValidatedPurchase_Store_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ValidatedPurchase_Store ValidatedPurchase::APPLE_APP_STORE;
constexpr ValidatedPurchase_Store ValidatedPurchase::GOOGLE_PLAY_STORE;
constexpr ValidatedPurchase_Store ValidatedPurchase::HUAWEI_APP_GALLERY;
constexpr ValidatedPurchase_Store ValidatedPurchase::Store_MIN;
constexpr ValidatedPurchase_Store ValidatedPurchase::Store_MAX;
constexpr int ValidatedPurchase::Store_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ValidatedPurchase_Environment_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto);
  return file_level_enum_descriptors_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto[4];
}
bool ValidatedPurchase_Environment_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ValidatedPurchase_Environment ValidatedPurchase::UNKNOWN;
constexpr ValidatedPurchase_Environment ValidatedPurchase::SANDBOX;
constexpr ValidatedPurchase_Environment ValidatedPurchase::PRODUCTION;
constexpr ValidatedPurchase_Environment ValidatedPurchase::Environment_MIN;
constexpr ValidatedPurchase_Environment ValidatedPurchase::Environment_MAX;
constexpr int ValidatedPurchase::Environment_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Operator_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto);
  return file_level_enum_descriptors_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto[5];
}
bool Operator_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Account::_Internal {
 public:
  static const ::nakama::api::User& user(const Account* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& verify_time(const Account* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& disable_time(const Account* msg);
};

const ::nakama::api::User&
Account::_Internal::user(const Account* msg) {
  return *msg->user_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
Account::_Internal::verify_time(const Account* msg) {
  return *msg->verify_time_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
Account::_Internal::disable_time(const Account* msg) {
  return *msg->disable_time_;
}
void Account::clear_verify_time() {
  if (GetArena() == nullptr && verify_time_ != nullptr) {
    delete verify_time_;
  }
  verify_time_ = nullptr;
}
void Account::clear_disable_time() {
  if (GetArena() == nullptr && disable_time_ != nullptr) {
    delete disable_time_;
  }
  disable_time_ = nullptr;
}
Account::Account(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  devices_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nakama.api.Account)
}
Account::Account(const Account& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      devices_(from.devices_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  wallet_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_wallet().empty()) {
    wallet_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_wallet(), 
      GetArena());
  }
  email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_email().empty()) {
    email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_email(), 
      GetArena());
  }
  custom_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_custom_id().empty()) {
    custom_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_custom_id(), 
      GetArena());
  }
  if (from._internal_has_user()) {
    user_ = new ::nakama::api::User(*from.user_);
  } else {
    user_ = nullptr;
  }
  if (from._internal_has_verify_time()) {
    verify_time_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.verify_time_);
  } else {
    verify_time_ = nullptr;
  }
  if (from._internal_has_disable_time()) {
    disable_time_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.disable_time_);
  } else {
    disable_time_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:nakama.api.Account)
}

void Account::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Account_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  wallet_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  custom_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&user_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&disable_time_) -
      reinterpret_cast<char*>(&user_)) + sizeof(disable_time_));
}

Account::~Account() {
  // @@protoc_insertion_point(destructor:nakama.api.Account)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Account::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  wallet_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  email_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  custom_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_;
  if (this != internal_default_instance()) delete verify_time_;
  if (this != internal_default_instance()) delete disable_time_;
}

void Account::ArenaDtor(void* object) {
  Account* _this = reinterpret_cast< Account* >(object);
  (void)_this;
}
void Account::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Account::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Account& Account::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Account_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  return *internal_default_instance();
}


void Account::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.Account)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  devices_.Clear();
  wallet_.ClearToEmpty();
  email_.ClearToEmpty();
  custom_id_.ClearToEmpty();
  if (GetArena() == nullptr && user_ != nullptr) {
    delete user_;
  }
  user_ = nullptr;
  if (GetArena() == nullptr && verify_time_ != nullptr) {
    delete verify_time_;
  }
  verify_time_ = nullptr;
  if (GetArena() == nullptr && disable_time_ != nullptr) {
    delete disable_time_;
  }
  disable_time_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Account::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .nakama.api.User user = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string wallet = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_wallet();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.Account.wallet"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string email = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_email();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.Account.email"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .nakama.api.AccountDevice devices = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_devices(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // string custom_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_custom_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.Account.custom_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp verify_time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_verify_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp disable_time = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_disable_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Account::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.Account)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .nakama.api.User user = 1;
  if (this->has_user()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user(this), target, stream);
  }

  // string wallet = 2;
  if (this->wallet().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_wallet().data(), static_cast<int>(this->_internal_wallet().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.Account.wallet");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_wallet(), target);
  }

  // string email = 3;
  if (this->email().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_email().data(), static_cast<int>(this->_internal_email().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.Account.email");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_email(), target);
  }

  // repeated .nakama.api.AccountDevice devices = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_devices_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_devices(i), target, stream);
  }

  // string custom_id = 5;
  if (this->custom_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_custom_id().data(), static_cast<int>(this->_internal_custom_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.Account.custom_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_custom_id(), target);
  }

  // .google.protobuf.Timestamp verify_time = 6;
  if (this->has_verify_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::verify_time(this), target, stream);
  }

  // .google.protobuf.Timestamp disable_time = 7;
  if (this->has_disable_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::disable_time(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.Account)
  return target;
}

size_t Account::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.Account)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .nakama.api.AccountDevice devices = 4;
  total_size += 1UL * this->_internal_devices_size();
  for (const auto& msg : this->devices_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string wallet = 2;
  if (this->wallet().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_wallet());
  }

  // string email = 3;
  if (this->email().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_email());
  }

  // string custom_id = 5;
  if (this->custom_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_custom_id());
  }

  // .nakama.api.User user = 1;
  if (this->has_user()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_);
  }

  // .google.protobuf.Timestamp verify_time = 6;
  if (this->has_verify_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *verify_time_);
  }

  // .google.protobuf.Timestamp disable_time = 7;
  if (this->has_disable_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *disable_time_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Account::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.Account)
  GOOGLE_DCHECK_NE(&from, this);
  const Account* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Account>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.Account)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.Account)
    MergeFrom(*source);
  }
}

void Account::MergeFrom(const Account& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.Account)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  devices_.MergeFrom(from.devices_);
  if (from.wallet().size() > 0) {
    _internal_set_wallet(from._internal_wallet());
  }
  if (from.email().size() > 0) {
    _internal_set_email(from._internal_email());
  }
  if (from.custom_id().size() > 0) {
    _internal_set_custom_id(from._internal_custom_id());
  }
  if (from.has_user()) {
    _internal_mutable_user()->::nakama::api::User::MergeFrom(from._internal_user());
  }
  if (from.has_verify_time()) {
    _internal_mutable_verify_time()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_verify_time());
  }
  if (from.has_disable_time()) {
    _internal_mutable_disable_time()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_disable_time());
  }
}

void Account::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.Account)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Account::CopyFrom(const Account& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.Account)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Account::IsInitialized() const {
  return true;
}

void Account::InternalSwap(Account* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  devices_.InternalSwap(&other->devices_);
  wallet_.Swap(&other->wallet_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  email_.Swap(&other->email_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  custom_id_.Swap(&other->custom_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Account, disable_time_)
      + sizeof(Account::disable_time_)
      - PROTOBUF_FIELD_OFFSET(Account, user_)>(
          reinterpret_cast<char*>(&user_),
          reinterpret_cast<char*>(&other->user_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Account::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

AccountRefresh_VarsEntry_DoNotUse::AccountRefresh_VarsEntry_DoNotUse() {}
AccountRefresh_VarsEntry_DoNotUse::AccountRefresh_VarsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void AccountRefresh_VarsEntry_DoNotUse::MergeFrom(const AccountRefresh_VarsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata AccountRefresh_VarsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void AccountRefresh_VarsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

class AccountRefresh::_Internal {
 public:
};

AccountRefresh::AccountRefresh(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  vars_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nakama.api.AccountRefresh)
}
AccountRefresh::AccountRefresh(const AccountRefresh& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  vars_.MergeFrom(from.vars_);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_token().empty()) {
    token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_token(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:nakama.api.AccountRefresh)
}

void AccountRefresh::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AccountRefresh_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AccountRefresh::~AccountRefresh() {
  // @@protoc_insertion_point(destructor:nakama.api.AccountRefresh)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AccountRefresh::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AccountRefresh::ArenaDtor(void* object) {
  AccountRefresh* _this = reinterpret_cast< AccountRefresh* >(object);
  (void)_this;
}
void AccountRefresh::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AccountRefresh::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AccountRefresh& AccountRefresh::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AccountRefresh_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  return *internal_default_instance();
}


void AccountRefresh::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.AccountRefresh)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vars_.Clear();
  token_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AccountRefresh::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.AccountRefresh.token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> vars = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&vars_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AccountRefresh::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.AccountRefresh)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string token = 1;
  if (this->token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.AccountRefresh.token");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_token(), target);
  }

  // map<string, string> vars = 2;
  if (!this->_internal_vars().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "nakama.api.AccountRefresh.VarsEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "nakama.api.AccountRefresh.VarsEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_vars().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_vars().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_vars().begin();
          it != this->_internal_vars().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = AccountRefresh_VarsEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_vars().begin();
          it != this->_internal_vars().end(); ++it) {
        target = AccountRefresh_VarsEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.AccountRefresh)
  return target;
}

size_t AccountRefresh::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.AccountRefresh)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> vars = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_vars_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_vars().begin();
      it != this->_internal_vars().end(); ++it) {
    total_size += AccountRefresh_VarsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string token = 1;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AccountRefresh::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.AccountRefresh)
  GOOGLE_DCHECK_NE(&from, this);
  const AccountRefresh* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AccountRefresh>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.AccountRefresh)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.AccountRefresh)
    MergeFrom(*source);
  }
}

void AccountRefresh::MergeFrom(const AccountRefresh& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.AccountRefresh)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vars_.MergeFrom(from.vars_);
  if (from.token().size() > 0) {
    _internal_set_token(from._internal_token());
  }
}

void AccountRefresh::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.AccountRefresh)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountRefresh::CopyFrom(const AccountRefresh& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.AccountRefresh)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountRefresh::IsInitialized() const {
  return true;
}

void AccountRefresh::InternalSwap(AccountRefresh* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  vars_.Swap(&other->vars_);
  token_.Swap(&other->token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata AccountRefresh::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

AccountApple_VarsEntry_DoNotUse::AccountApple_VarsEntry_DoNotUse() {}
AccountApple_VarsEntry_DoNotUse::AccountApple_VarsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void AccountApple_VarsEntry_DoNotUse::MergeFrom(const AccountApple_VarsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata AccountApple_VarsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void AccountApple_VarsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

class AccountApple::_Internal {
 public:
};

AccountApple::AccountApple(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  vars_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nakama.api.AccountApple)
}
AccountApple::AccountApple(const AccountApple& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  vars_.MergeFrom(from.vars_);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_token().empty()) {
    token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_token(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:nakama.api.AccountApple)
}

void AccountApple::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AccountApple_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AccountApple::~AccountApple() {
  // @@protoc_insertion_point(destructor:nakama.api.AccountApple)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AccountApple::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AccountApple::ArenaDtor(void* object) {
  AccountApple* _this = reinterpret_cast< AccountApple* >(object);
  (void)_this;
}
void AccountApple::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AccountApple::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AccountApple& AccountApple::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AccountApple_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  return *internal_default_instance();
}


void AccountApple::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.AccountApple)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vars_.Clear();
  token_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AccountApple::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.AccountApple.token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> vars = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&vars_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AccountApple::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.AccountApple)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string token = 1;
  if (this->token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.AccountApple.token");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_token(), target);
  }

  // map<string, string> vars = 2;
  if (!this->_internal_vars().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "nakama.api.AccountApple.VarsEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "nakama.api.AccountApple.VarsEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_vars().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_vars().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_vars().begin();
          it != this->_internal_vars().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = AccountApple_VarsEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_vars().begin();
          it != this->_internal_vars().end(); ++it) {
        target = AccountApple_VarsEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.AccountApple)
  return target;
}

size_t AccountApple::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.AccountApple)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> vars = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_vars_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_vars().begin();
      it != this->_internal_vars().end(); ++it) {
    total_size += AccountApple_VarsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string token = 1;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AccountApple::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.AccountApple)
  GOOGLE_DCHECK_NE(&from, this);
  const AccountApple* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AccountApple>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.AccountApple)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.AccountApple)
    MergeFrom(*source);
  }
}

void AccountApple::MergeFrom(const AccountApple& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.AccountApple)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vars_.MergeFrom(from.vars_);
  if (from.token().size() > 0) {
    _internal_set_token(from._internal_token());
  }
}

void AccountApple::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.AccountApple)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountApple::CopyFrom(const AccountApple& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.AccountApple)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountApple::IsInitialized() const {
  return true;
}

void AccountApple::InternalSwap(AccountApple* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  vars_.Swap(&other->vars_);
  token_.Swap(&other->token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata AccountApple::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

AccountCustom_VarsEntry_DoNotUse::AccountCustom_VarsEntry_DoNotUse() {}
AccountCustom_VarsEntry_DoNotUse::AccountCustom_VarsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void AccountCustom_VarsEntry_DoNotUse::MergeFrom(const AccountCustom_VarsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata AccountCustom_VarsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void AccountCustom_VarsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

class AccountCustom::_Internal {
 public:
};

AccountCustom::AccountCustom(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  vars_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nakama.api.AccountCustom)
}
AccountCustom::AccountCustom(const AccountCustom& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  vars_.MergeFrom(from.vars_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:nakama.api.AccountCustom)
}

void AccountCustom::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AccountCustom_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AccountCustom::~AccountCustom() {
  // @@protoc_insertion_point(destructor:nakama.api.AccountCustom)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AccountCustom::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AccountCustom::ArenaDtor(void* object) {
  AccountCustom* _this = reinterpret_cast< AccountCustom* >(object);
  (void)_this;
}
void AccountCustom::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AccountCustom::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AccountCustom& AccountCustom::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AccountCustom_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  return *internal_default_instance();
}


void AccountCustom::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.AccountCustom)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vars_.Clear();
  id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AccountCustom::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.AccountCustom.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> vars = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&vars_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AccountCustom::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.AccountCustom)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.AccountCustom.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // map<string, string> vars = 2;
  if (!this->_internal_vars().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "nakama.api.AccountCustom.VarsEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "nakama.api.AccountCustom.VarsEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_vars().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_vars().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_vars().begin();
          it != this->_internal_vars().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = AccountCustom_VarsEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_vars().begin();
          it != this->_internal_vars().end(); ++it) {
        target = AccountCustom_VarsEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.AccountCustom)
  return target;
}

size_t AccountCustom::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.AccountCustom)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> vars = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_vars_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_vars().begin();
      it != this->_internal_vars().end(); ++it) {
    total_size += AccountCustom_VarsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AccountCustom::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.AccountCustom)
  GOOGLE_DCHECK_NE(&from, this);
  const AccountCustom* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AccountCustom>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.AccountCustom)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.AccountCustom)
    MergeFrom(*source);
  }
}

void AccountCustom::MergeFrom(const AccountCustom& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.AccountCustom)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vars_.MergeFrom(from.vars_);
  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
}

void AccountCustom::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.AccountCustom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountCustom::CopyFrom(const AccountCustom& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.AccountCustom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountCustom::IsInitialized() const {
  return true;
}

void AccountCustom::InternalSwap(AccountCustom* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  vars_.Swap(&other->vars_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata AccountCustom::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

AccountDevice_VarsEntry_DoNotUse::AccountDevice_VarsEntry_DoNotUse() {}
AccountDevice_VarsEntry_DoNotUse::AccountDevice_VarsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void AccountDevice_VarsEntry_DoNotUse::MergeFrom(const AccountDevice_VarsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata AccountDevice_VarsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void AccountDevice_VarsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

class AccountDevice::_Internal {
 public:
};

AccountDevice::AccountDevice(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  vars_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nakama.api.AccountDevice)
}
AccountDevice::AccountDevice(const AccountDevice& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  vars_.MergeFrom(from.vars_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:nakama.api.AccountDevice)
}

void AccountDevice::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AccountDevice_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AccountDevice::~AccountDevice() {
  // @@protoc_insertion_point(destructor:nakama.api.AccountDevice)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AccountDevice::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AccountDevice::ArenaDtor(void* object) {
  AccountDevice* _this = reinterpret_cast< AccountDevice* >(object);
  (void)_this;
}
void AccountDevice::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AccountDevice::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AccountDevice& AccountDevice::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AccountDevice_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  return *internal_default_instance();
}


void AccountDevice::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.AccountDevice)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vars_.Clear();
  id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AccountDevice::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.AccountDevice.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> vars = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&vars_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AccountDevice::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.AccountDevice)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.AccountDevice.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // map<string, string> vars = 2;
  if (!this->_internal_vars().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "nakama.api.AccountDevice.VarsEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "nakama.api.AccountDevice.VarsEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_vars().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_vars().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_vars().begin();
          it != this->_internal_vars().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = AccountDevice_VarsEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_vars().begin();
          it != this->_internal_vars().end(); ++it) {
        target = AccountDevice_VarsEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.AccountDevice)
  return target;
}

size_t AccountDevice::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.AccountDevice)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> vars = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_vars_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_vars().begin();
      it != this->_internal_vars().end(); ++it) {
    total_size += AccountDevice_VarsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AccountDevice::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.AccountDevice)
  GOOGLE_DCHECK_NE(&from, this);
  const AccountDevice* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AccountDevice>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.AccountDevice)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.AccountDevice)
    MergeFrom(*source);
  }
}

void AccountDevice::MergeFrom(const AccountDevice& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.AccountDevice)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vars_.MergeFrom(from.vars_);
  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
}

void AccountDevice::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.AccountDevice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountDevice::CopyFrom(const AccountDevice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.AccountDevice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountDevice::IsInitialized() const {
  return true;
}

void AccountDevice::InternalSwap(AccountDevice* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  vars_.Swap(&other->vars_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata AccountDevice::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

AccountEmail_VarsEntry_DoNotUse::AccountEmail_VarsEntry_DoNotUse() {}
AccountEmail_VarsEntry_DoNotUse::AccountEmail_VarsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void AccountEmail_VarsEntry_DoNotUse::MergeFrom(const AccountEmail_VarsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata AccountEmail_VarsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void AccountEmail_VarsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

class AccountEmail::_Internal {
 public:
};

AccountEmail::AccountEmail(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  vars_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nakama.api.AccountEmail)
}
AccountEmail::AccountEmail(const AccountEmail& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  vars_.MergeFrom(from.vars_);
  email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_email().empty()) {
    email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_email(), 
      GetArena());
  }
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_password().empty()) {
    password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_password(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:nakama.api.AccountEmail)
}

void AccountEmail::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AccountEmail_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AccountEmail::~AccountEmail() {
  // @@protoc_insertion_point(destructor:nakama.api.AccountEmail)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AccountEmail::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  email_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AccountEmail::ArenaDtor(void* object) {
  AccountEmail* _this = reinterpret_cast< AccountEmail* >(object);
  (void)_this;
}
void AccountEmail::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AccountEmail::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AccountEmail& AccountEmail::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AccountEmail_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  return *internal_default_instance();
}


void AccountEmail::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.AccountEmail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vars_.Clear();
  email_.ClearToEmpty();
  password_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AccountEmail::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string email = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_email();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.AccountEmail.email"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string password = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_password();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.AccountEmail.password"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> vars = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&vars_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AccountEmail::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.AccountEmail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string email = 1;
  if (this->email().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_email().data(), static_cast<int>(this->_internal_email().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.AccountEmail.email");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_email(), target);
  }

  // string password = 2;
  if (this->password().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.AccountEmail.password");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_password(), target);
  }

  // map<string, string> vars = 3;
  if (!this->_internal_vars().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "nakama.api.AccountEmail.VarsEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "nakama.api.AccountEmail.VarsEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_vars().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_vars().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_vars().begin();
          it != this->_internal_vars().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = AccountEmail_VarsEntry_DoNotUse::Funcs::InternalSerialize(3, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_vars().begin();
          it != this->_internal_vars().end(); ++it) {
        target = AccountEmail_VarsEntry_DoNotUse::Funcs::InternalSerialize(3, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.AccountEmail)
  return target;
}

size_t AccountEmail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.AccountEmail)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> vars = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_vars_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_vars().begin();
      it != this->_internal_vars().end(); ++it) {
    total_size += AccountEmail_VarsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string email = 1;
  if (this->email().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_email());
  }

  // string password = 2;
  if (this->password().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_password());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AccountEmail::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.AccountEmail)
  GOOGLE_DCHECK_NE(&from, this);
  const AccountEmail* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AccountEmail>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.AccountEmail)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.AccountEmail)
    MergeFrom(*source);
  }
}

void AccountEmail::MergeFrom(const AccountEmail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.AccountEmail)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vars_.MergeFrom(from.vars_);
  if (from.email().size() > 0) {
    _internal_set_email(from._internal_email());
  }
  if (from.password().size() > 0) {
    _internal_set_password(from._internal_password());
  }
}

void AccountEmail::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.AccountEmail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountEmail::CopyFrom(const AccountEmail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.AccountEmail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountEmail::IsInitialized() const {
  return true;
}

void AccountEmail::InternalSwap(AccountEmail* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  vars_.Swap(&other->vars_);
  email_.Swap(&other->email_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  password_.Swap(&other->password_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata AccountEmail::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

AccountFacebook_VarsEntry_DoNotUse::AccountFacebook_VarsEntry_DoNotUse() {}
AccountFacebook_VarsEntry_DoNotUse::AccountFacebook_VarsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void AccountFacebook_VarsEntry_DoNotUse::MergeFrom(const AccountFacebook_VarsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata AccountFacebook_VarsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void AccountFacebook_VarsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

class AccountFacebook::_Internal {
 public:
};

AccountFacebook::AccountFacebook(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  vars_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nakama.api.AccountFacebook)
}
AccountFacebook::AccountFacebook(const AccountFacebook& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  vars_.MergeFrom(from.vars_);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_token().empty()) {
    token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_token(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:nakama.api.AccountFacebook)
}

void AccountFacebook::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AccountFacebook_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AccountFacebook::~AccountFacebook() {
  // @@protoc_insertion_point(destructor:nakama.api.AccountFacebook)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AccountFacebook::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AccountFacebook::ArenaDtor(void* object) {
  AccountFacebook* _this = reinterpret_cast< AccountFacebook* >(object);
  (void)_this;
}
void AccountFacebook::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AccountFacebook::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AccountFacebook& AccountFacebook::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AccountFacebook_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  return *internal_default_instance();
}


void AccountFacebook::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.AccountFacebook)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vars_.Clear();
  token_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AccountFacebook::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.AccountFacebook.token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> vars = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&vars_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AccountFacebook::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.AccountFacebook)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string token = 1;
  if (this->token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.AccountFacebook.token");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_token(), target);
  }

  // map<string, string> vars = 2;
  if (!this->_internal_vars().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "nakama.api.AccountFacebook.VarsEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "nakama.api.AccountFacebook.VarsEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_vars().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_vars().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_vars().begin();
          it != this->_internal_vars().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = AccountFacebook_VarsEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_vars().begin();
          it != this->_internal_vars().end(); ++it) {
        target = AccountFacebook_VarsEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.AccountFacebook)
  return target;
}

size_t AccountFacebook::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.AccountFacebook)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> vars = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_vars_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_vars().begin();
      it != this->_internal_vars().end(); ++it) {
    total_size += AccountFacebook_VarsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string token = 1;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AccountFacebook::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.AccountFacebook)
  GOOGLE_DCHECK_NE(&from, this);
  const AccountFacebook* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AccountFacebook>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.AccountFacebook)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.AccountFacebook)
    MergeFrom(*source);
  }
}

void AccountFacebook::MergeFrom(const AccountFacebook& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.AccountFacebook)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vars_.MergeFrom(from.vars_);
  if (from.token().size() > 0) {
    _internal_set_token(from._internal_token());
  }
}

void AccountFacebook::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.AccountFacebook)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountFacebook::CopyFrom(const AccountFacebook& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.AccountFacebook)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountFacebook::IsInitialized() const {
  return true;
}

void AccountFacebook::InternalSwap(AccountFacebook* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  vars_.Swap(&other->vars_);
  token_.Swap(&other->token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata AccountFacebook::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

AccountFacebookInstantGame_VarsEntry_DoNotUse::AccountFacebookInstantGame_VarsEntry_DoNotUse() {}
AccountFacebookInstantGame_VarsEntry_DoNotUse::AccountFacebookInstantGame_VarsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void AccountFacebookInstantGame_VarsEntry_DoNotUse::MergeFrom(const AccountFacebookInstantGame_VarsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata AccountFacebookInstantGame_VarsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void AccountFacebookInstantGame_VarsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

class AccountFacebookInstantGame::_Internal {
 public:
};

AccountFacebookInstantGame::AccountFacebookInstantGame(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  vars_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nakama.api.AccountFacebookInstantGame)
}
AccountFacebookInstantGame::AccountFacebookInstantGame(const AccountFacebookInstantGame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  vars_.MergeFrom(from.vars_);
  signed_player_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_signed_player_info().empty()) {
    signed_player_info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_signed_player_info(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:nakama.api.AccountFacebookInstantGame)
}

void AccountFacebookInstantGame::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AccountFacebookInstantGame_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  signed_player_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AccountFacebookInstantGame::~AccountFacebookInstantGame() {
  // @@protoc_insertion_point(destructor:nakama.api.AccountFacebookInstantGame)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AccountFacebookInstantGame::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  signed_player_info_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AccountFacebookInstantGame::ArenaDtor(void* object) {
  AccountFacebookInstantGame* _this = reinterpret_cast< AccountFacebookInstantGame* >(object);
  (void)_this;
}
void AccountFacebookInstantGame::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AccountFacebookInstantGame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AccountFacebookInstantGame& AccountFacebookInstantGame::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AccountFacebookInstantGame_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  return *internal_default_instance();
}


void AccountFacebookInstantGame::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.AccountFacebookInstantGame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vars_.Clear();
  signed_player_info_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AccountFacebookInstantGame::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string signed_player_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_signed_player_info();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.AccountFacebookInstantGame.signed_player_info"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> vars = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&vars_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AccountFacebookInstantGame::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.AccountFacebookInstantGame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string signed_player_info = 1;
  if (this->signed_player_info().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_signed_player_info().data(), static_cast<int>(this->_internal_signed_player_info().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.AccountFacebookInstantGame.signed_player_info");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_signed_player_info(), target);
  }

  // map<string, string> vars = 2;
  if (!this->_internal_vars().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "nakama.api.AccountFacebookInstantGame.VarsEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "nakama.api.AccountFacebookInstantGame.VarsEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_vars().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_vars().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_vars().begin();
          it != this->_internal_vars().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = AccountFacebookInstantGame_VarsEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_vars().begin();
          it != this->_internal_vars().end(); ++it) {
        target = AccountFacebookInstantGame_VarsEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.AccountFacebookInstantGame)
  return target;
}

size_t AccountFacebookInstantGame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.AccountFacebookInstantGame)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> vars = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_vars_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_vars().begin();
      it != this->_internal_vars().end(); ++it) {
    total_size += AccountFacebookInstantGame_VarsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string signed_player_info = 1;
  if (this->signed_player_info().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_signed_player_info());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AccountFacebookInstantGame::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.AccountFacebookInstantGame)
  GOOGLE_DCHECK_NE(&from, this);
  const AccountFacebookInstantGame* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AccountFacebookInstantGame>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.AccountFacebookInstantGame)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.AccountFacebookInstantGame)
    MergeFrom(*source);
  }
}

void AccountFacebookInstantGame::MergeFrom(const AccountFacebookInstantGame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.AccountFacebookInstantGame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vars_.MergeFrom(from.vars_);
  if (from.signed_player_info().size() > 0) {
    _internal_set_signed_player_info(from._internal_signed_player_info());
  }
}

void AccountFacebookInstantGame::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.AccountFacebookInstantGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountFacebookInstantGame::CopyFrom(const AccountFacebookInstantGame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.AccountFacebookInstantGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountFacebookInstantGame::IsInitialized() const {
  return true;
}

void AccountFacebookInstantGame::InternalSwap(AccountFacebookInstantGame* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  vars_.Swap(&other->vars_);
  signed_player_info_.Swap(&other->signed_player_info_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata AccountFacebookInstantGame::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

AccountGameCenter_VarsEntry_DoNotUse::AccountGameCenter_VarsEntry_DoNotUse() {}
AccountGameCenter_VarsEntry_DoNotUse::AccountGameCenter_VarsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void AccountGameCenter_VarsEntry_DoNotUse::MergeFrom(const AccountGameCenter_VarsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata AccountGameCenter_VarsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void AccountGameCenter_VarsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

class AccountGameCenter::_Internal {
 public:
};

AccountGameCenter::AccountGameCenter(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  vars_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nakama.api.AccountGameCenter)
}
AccountGameCenter::AccountGameCenter(const AccountGameCenter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  vars_.MergeFrom(from.vars_);
  player_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_player_id().empty()) {
    player_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_player_id(), 
      GetArena());
  }
  bundle_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_bundle_id().empty()) {
    bundle_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_bundle_id(), 
      GetArena());
  }
  salt_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_salt().empty()) {
    salt_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_salt(), 
      GetArena());
  }
  signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_signature().empty()) {
    signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_signature(), 
      GetArena());
  }
  public_key_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_public_key_url().empty()) {
    public_key_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_public_key_url(), 
      GetArena());
  }
  timestamp_seconds_ = from.timestamp_seconds_;
  // @@protoc_insertion_point(copy_constructor:nakama.api.AccountGameCenter)
}

void AccountGameCenter::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AccountGameCenter_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  player_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bundle_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  salt_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  public_key_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  timestamp_seconds_ = PROTOBUF_LONGLONG(0);
}

AccountGameCenter::~AccountGameCenter() {
  // @@protoc_insertion_point(destructor:nakama.api.AccountGameCenter)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AccountGameCenter::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  player_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bundle_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  salt_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signature_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  public_key_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AccountGameCenter::ArenaDtor(void* object) {
  AccountGameCenter* _this = reinterpret_cast< AccountGameCenter* >(object);
  (void)_this;
}
void AccountGameCenter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AccountGameCenter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AccountGameCenter& AccountGameCenter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AccountGameCenter_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  return *internal_default_instance();
}


void AccountGameCenter::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.AccountGameCenter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vars_.Clear();
  player_id_.ClearToEmpty();
  bundle_id_.ClearToEmpty();
  salt_.ClearToEmpty();
  signature_.ClearToEmpty();
  public_key_url_.ClearToEmpty();
  timestamp_seconds_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AccountGameCenter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_player_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.AccountGameCenter.player_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string bundle_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_bundle_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.AccountGameCenter.bundle_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 timestamp_seconds = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          timestamp_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string salt = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_salt();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.AccountGameCenter.salt"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string signature = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_signature();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.AccountGameCenter.signature"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string public_key_url = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_public_key_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.AccountGameCenter.public_key_url"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> vars = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&vars_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AccountGameCenter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.AccountGameCenter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string player_id = 1;
  if (this->player_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_player_id().data(), static_cast<int>(this->_internal_player_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.AccountGameCenter.player_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_player_id(), target);
  }

  // string bundle_id = 2;
  if (this->bundle_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bundle_id().data(), static_cast<int>(this->_internal_bundle_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.AccountGameCenter.bundle_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_bundle_id(), target);
  }

  // int64 timestamp_seconds = 3;
  if (this->timestamp_seconds() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_timestamp_seconds(), target);
  }

  // string salt = 4;
  if (this->salt().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_salt().data(), static_cast<int>(this->_internal_salt().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.AccountGameCenter.salt");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_salt(), target);
  }

  // string signature = 5;
  if (this->signature().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_signature().data(), static_cast<int>(this->_internal_signature().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.AccountGameCenter.signature");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_signature(), target);
  }

  // string public_key_url = 6;
  if (this->public_key_url().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_public_key_url().data(), static_cast<int>(this->_internal_public_key_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.AccountGameCenter.public_key_url");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_public_key_url(), target);
  }

  // map<string, string> vars = 7;
  if (!this->_internal_vars().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "nakama.api.AccountGameCenter.VarsEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "nakama.api.AccountGameCenter.VarsEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_vars().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_vars().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_vars().begin();
          it != this->_internal_vars().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = AccountGameCenter_VarsEntry_DoNotUse::Funcs::InternalSerialize(7, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_vars().begin();
          it != this->_internal_vars().end(); ++it) {
        target = AccountGameCenter_VarsEntry_DoNotUse::Funcs::InternalSerialize(7, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.AccountGameCenter)
  return target;
}

size_t AccountGameCenter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.AccountGameCenter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> vars = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_vars_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_vars().begin();
      it != this->_internal_vars().end(); ++it) {
    total_size += AccountGameCenter_VarsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string player_id = 1;
  if (this->player_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_player_id());
  }

  // string bundle_id = 2;
  if (this->bundle_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bundle_id());
  }

  // string salt = 4;
  if (this->salt().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_salt());
  }

  // string signature = 5;
  if (this->signature().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_signature());
  }

  // string public_key_url = 6;
  if (this->public_key_url().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_public_key_url());
  }

  // int64 timestamp_seconds = 3;
  if (this->timestamp_seconds() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_timestamp_seconds());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AccountGameCenter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.AccountGameCenter)
  GOOGLE_DCHECK_NE(&from, this);
  const AccountGameCenter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AccountGameCenter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.AccountGameCenter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.AccountGameCenter)
    MergeFrom(*source);
  }
}

void AccountGameCenter::MergeFrom(const AccountGameCenter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.AccountGameCenter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vars_.MergeFrom(from.vars_);
  if (from.player_id().size() > 0) {
    _internal_set_player_id(from._internal_player_id());
  }
  if (from.bundle_id().size() > 0) {
    _internal_set_bundle_id(from._internal_bundle_id());
  }
  if (from.salt().size() > 0) {
    _internal_set_salt(from._internal_salt());
  }
  if (from.signature().size() > 0) {
    _internal_set_signature(from._internal_signature());
  }
  if (from.public_key_url().size() > 0) {
    _internal_set_public_key_url(from._internal_public_key_url());
  }
  if (from.timestamp_seconds() != 0) {
    _internal_set_timestamp_seconds(from._internal_timestamp_seconds());
  }
}

void AccountGameCenter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.AccountGameCenter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountGameCenter::CopyFrom(const AccountGameCenter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.AccountGameCenter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountGameCenter::IsInitialized() const {
  return true;
}

void AccountGameCenter::InternalSwap(AccountGameCenter* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  vars_.Swap(&other->vars_);
  player_id_.Swap(&other->player_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  bundle_id_.Swap(&other->bundle_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  salt_.Swap(&other->salt_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  signature_.Swap(&other->signature_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  public_key_url_.Swap(&other->public_key_url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(timestamp_seconds_, other->timestamp_seconds_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AccountGameCenter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

AccountGoogle_VarsEntry_DoNotUse::AccountGoogle_VarsEntry_DoNotUse() {}
AccountGoogle_VarsEntry_DoNotUse::AccountGoogle_VarsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void AccountGoogle_VarsEntry_DoNotUse::MergeFrom(const AccountGoogle_VarsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata AccountGoogle_VarsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void AccountGoogle_VarsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

class AccountGoogle::_Internal {
 public:
};

AccountGoogle::AccountGoogle(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  vars_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nakama.api.AccountGoogle)
}
AccountGoogle::AccountGoogle(const AccountGoogle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  vars_.MergeFrom(from.vars_);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_token().empty()) {
    token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_token(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:nakama.api.AccountGoogle)
}

void AccountGoogle::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AccountGoogle_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AccountGoogle::~AccountGoogle() {
  // @@protoc_insertion_point(destructor:nakama.api.AccountGoogle)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AccountGoogle::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AccountGoogle::ArenaDtor(void* object) {
  AccountGoogle* _this = reinterpret_cast< AccountGoogle* >(object);
  (void)_this;
}
void AccountGoogle::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AccountGoogle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AccountGoogle& AccountGoogle::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AccountGoogle_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  return *internal_default_instance();
}


void AccountGoogle::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.AccountGoogle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vars_.Clear();
  token_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AccountGoogle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.AccountGoogle.token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> vars = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&vars_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AccountGoogle::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.AccountGoogle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string token = 1;
  if (this->token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.AccountGoogle.token");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_token(), target);
  }

  // map<string, string> vars = 2;
  if (!this->_internal_vars().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "nakama.api.AccountGoogle.VarsEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "nakama.api.AccountGoogle.VarsEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_vars().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_vars().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_vars().begin();
          it != this->_internal_vars().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = AccountGoogle_VarsEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_vars().begin();
          it != this->_internal_vars().end(); ++it) {
        target = AccountGoogle_VarsEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.AccountGoogle)
  return target;
}

size_t AccountGoogle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.AccountGoogle)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> vars = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_vars_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_vars().begin();
      it != this->_internal_vars().end(); ++it) {
    total_size += AccountGoogle_VarsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string token = 1;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AccountGoogle::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.AccountGoogle)
  GOOGLE_DCHECK_NE(&from, this);
  const AccountGoogle* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AccountGoogle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.AccountGoogle)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.AccountGoogle)
    MergeFrom(*source);
  }
}

void AccountGoogle::MergeFrom(const AccountGoogle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.AccountGoogle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vars_.MergeFrom(from.vars_);
  if (from.token().size() > 0) {
    _internal_set_token(from._internal_token());
  }
}

void AccountGoogle::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.AccountGoogle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountGoogle::CopyFrom(const AccountGoogle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.AccountGoogle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountGoogle::IsInitialized() const {
  return true;
}

void AccountGoogle::InternalSwap(AccountGoogle* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  vars_.Swap(&other->vars_);
  token_.Swap(&other->token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata AccountGoogle::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

AccountSteam_VarsEntry_DoNotUse::AccountSteam_VarsEntry_DoNotUse() {}
AccountSteam_VarsEntry_DoNotUse::AccountSteam_VarsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void AccountSteam_VarsEntry_DoNotUse::MergeFrom(const AccountSteam_VarsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata AccountSteam_VarsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void AccountSteam_VarsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

class AccountSteam::_Internal {
 public:
};

AccountSteam::AccountSteam(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  vars_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nakama.api.AccountSteam)
}
AccountSteam::AccountSteam(const AccountSteam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  vars_.MergeFrom(from.vars_);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_token().empty()) {
    token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_token(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:nakama.api.AccountSteam)
}

void AccountSteam::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AccountSteam_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AccountSteam::~AccountSteam() {
  // @@protoc_insertion_point(destructor:nakama.api.AccountSteam)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AccountSteam::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AccountSteam::ArenaDtor(void* object) {
  AccountSteam* _this = reinterpret_cast< AccountSteam* >(object);
  (void)_this;
}
void AccountSteam::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AccountSteam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AccountSteam& AccountSteam::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AccountSteam_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  return *internal_default_instance();
}


void AccountSteam::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.AccountSteam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vars_.Clear();
  token_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AccountSteam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.AccountSteam.token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> vars = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&vars_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AccountSteam::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.AccountSteam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string token = 1;
  if (this->token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.AccountSteam.token");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_token(), target);
  }

  // map<string, string> vars = 2;
  if (!this->_internal_vars().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "nakama.api.AccountSteam.VarsEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "nakama.api.AccountSteam.VarsEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_vars().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_vars().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_vars().begin();
          it != this->_internal_vars().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = AccountSteam_VarsEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_vars().begin();
          it != this->_internal_vars().end(); ++it) {
        target = AccountSteam_VarsEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.AccountSteam)
  return target;
}

size_t AccountSteam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.AccountSteam)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> vars = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_vars_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_vars().begin();
      it != this->_internal_vars().end(); ++it) {
    total_size += AccountSteam_VarsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string token = 1;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AccountSteam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.AccountSteam)
  GOOGLE_DCHECK_NE(&from, this);
  const AccountSteam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AccountSteam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.AccountSteam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.AccountSteam)
    MergeFrom(*source);
  }
}

void AccountSteam::MergeFrom(const AccountSteam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.AccountSteam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vars_.MergeFrom(from.vars_);
  if (from.token().size() > 0) {
    _internal_set_token(from._internal_token());
  }
}

void AccountSteam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.AccountSteam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountSteam::CopyFrom(const AccountSteam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.AccountSteam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountSteam::IsInitialized() const {
  return true;
}

void AccountSteam::InternalSwap(AccountSteam* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  vars_.Swap(&other->vars_);
  token_.Swap(&other->token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata AccountSteam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AddFriendsRequest::_Internal {
 public:
};

AddFriendsRequest::AddFriendsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  ids_(arena),
  usernames_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nakama.api.AddFriendsRequest)
}
AddFriendsRequest::AddFriendsRequest(const AddFriendsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      ids_(from.ids_),
      usernames_(from.usernames_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:nakama.api.AddFriendsRequest)
}

void AddFriendsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AddFriendsRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
}

AddFriendsRequest::~AddFriendsRequest() {
  // @@protoc_insertion_point(destructor:nakama.api.AddFriendsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AddFriendsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AddFriendsRequest::ArenaDtor(void* object) {
  AddFriendsRequest* _this = reinterpret_cast< AddFriendsRequest* >(object);
  (void)_this;
}
void AddFriendsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AddFriendsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddFriendsRequest& AddFriendsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddFriendsRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  return *internal_default_instance();
}


void AddFriendsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.AddFriendsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ids_.Clear();
  usernames_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddFriendsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.AddFriendsRequest.ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string usernames = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_usernames();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.AddFriendsRequest.usernames"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddFriendsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.AddFriendsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string ids = 1;
  for (int i = 0, n = this->_internal_ids_size(); i < n; i++) {
    const auto& s = this->_internal_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.AddFriendsRequest.ids");
    target = stream->WriteString(1, s, target);
  }

  // repeated string usernames = 2;
  for (int i = 0, n = this->_internal_usernames_size(); i < n; i++) {
    const auto& s = this->_internal_usernames(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.AddFriendsRequest.usernames");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.AddFriendsRequest)
  return target;
}

size_t AddFriendsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.AddFriendsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string ids = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(ids_.size());
  for (int i = 0, n = ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      ids_.Get(i));
  }

  // repeated string usernames = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(usernames_.size());
  for (int i = 0, n = usernames_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      usernames_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddFriendsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.AddFriendsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AddFriendsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddFriendsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.AddFriendsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.AddFriendsRequest)
    MergeFrom(*source);
  }
}

void AddFriendsRequest::MergeFrom(const AddFriendsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.AddFriendsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ids_.MergeFrom(from.ids_);
  usernames_.MergeFrom(from.usernames_);
}

void AddFriendsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.AddFriendsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddFriendsRequest::CopyFrom(const AddFriendsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.AddFriendsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddFriendsRequest::IsInitialized() const {
  return true;
}

void AddFriendsRequest::InternalSwap(AddFriendsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ids_.InternalSwap(&other->ids_);
  usernames_.InternalSwap(&other->usernames_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AddFriendsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AddGroupUsersRequest::_Internal {
 public:
};

AddGroupUsersRequest::AddGroupUsersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  user_ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nakama.api.AddGroupUsersRequest)
}
AddGroupUsersRequest::AddGroupUsersRequest(const AddGroupUsersRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      user_ids_(from.user_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  group_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_group_id().empty()) {
    group_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_group_id(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:nakama.api.AddGroupUsersRequest)
}

void AddGroupUsersRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AddGroupUsersRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  group_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AddGroupUsersRequest::~AddGroupUsersRequest() {
  // @@protoc_insertion_point(destructor:nakama.api.AddGroupUsersRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AddGroupUsersRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  group_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AddGroupUsersRequest::ArenaDtor(void* object) {
  AddGroupUsersRequest* _this = reinterpret_cast< AddGroupUsersRequest* >(object);
  (void)_this;
}
void AddGroupUsersRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AddGroupUsersRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddGroupUsersRequest& AddGroupUsersRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddGroupUsersRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  return *internal_default_instance();
}


void AddGroupUsersRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.AddGroupUsersRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_ids_.Clear();
  group_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddGroupUsersRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string group_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_group_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.AddGroupUsersRequest.group_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string user_ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_user_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.AddGroupUsersRequest.user_ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddGroupUsersRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.AddGroupUsersRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string group_id = 1;
  if (this->group_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_group_id().data(), static_cast<int>(this->_internal_group_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.AddGroupUsersRequest.group_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_group_id(), target);
  }

  // repeated string user_ids = 2;
  for (int i = 0, n = this->_internal_user_ids_size(); i < n; i++) {
    const auto& s = this->_internal_user_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.AddGroupUsersRequest.user_ids");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.AddGroupUsersRequest)
  return target;
}

size_t AddGroupUsersRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.AddGroupUsersRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string user_ids = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(user_ids_.size());
  for (int i = 0, n = user_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      user_ids_.Get(i));
  }

  // string group_id = 1;
  if (this->group_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_group_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddGroupUsersRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.AddGroupUsersRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AddGroupUsersRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddGroupUsersRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.AddGroupUsersRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.AddGroupUsersRequest)
    MergeFrom(*source);
  }
}

void AddGroupUsersRequest::MergeFrom(const AddGroupUsersRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.AddGroupUsersRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  user_ids_.MergeFrom(from.user_ids_);
  if (from.group_id().size() > 0) {
    _internal_set_group_id(from._internal_group_id());
  }
}

void AddGroupUsersRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.AddGroupUsersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddGroupUsersRequest::CopyFrom(const AddGroupUsersRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.AddGroupUsersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddGroupUsersRequest::IsInitialized() const {
  return true;
}

void AddGroupUsersRequest::InternalSwap(AddGroupUsersRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  user_ids_.InternalSwap(&other->user_ids_);
  group_id_.Swap(&other->group_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata AddGroupUsersRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

SessionRefreshRequest_VarsEntry_DoNotUse::SessionRefreshRequest_VarsEntry_DoNotUse() {}
SessionRefreshRequest_VarsEntry_DoNotUse::SessionRefreshRequest_VarsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void SessionRefreshRequest_VarsEntry_DoNotUse::MergeFrom(const SessionRefreshRequest_VarsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata SessionRefreshRequest_VarsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void SessionRefreshRequest_VarsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

class SessionRefreshRequest::_Internal {
 public:
};

SessionRefreshRequest::SessionRefreshRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  vars_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nakama.api.SessionRefreshRequest)
}
SessionRefreshRequest::SessionRefreshRequest(const SessionRefreshRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  vars_.MergeFrom(from.vars_);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_token().empty()) {
    token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_token(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:nakama.api.SessionRefreshRequest)
}

void SessionRefreshRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SessionRefreshRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SessionRefreshRequest::~SessionRefreshRequest() {
  // @@protoc_insertion_point(destructor:nakama.api.SessionRefreshRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SessionRefreshRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SessionRefreshRequest::ArenaDtor(void* object) {
  SessionRefreshRequest* _this = reinterpret_cast< SessionRefreshRequest* >(object);
  (void)_this;
}
void SessionRefreshRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SessionRefreshRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SessionRefreshRequest& SessionRefreshRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SessionRefreshRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  return *internal_default_instance();
}


void SessionRefreshRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.SessionRefreshRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vars_.Clear();
  token_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SessionRefreshRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.SessionRefreshRequest.token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> vars = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&vars_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SessionRefreshRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.SessionRefreshRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string token = 1;
  if (this->token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.SessionRefreshRequest.token");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_token(), target);
  }

  // map<string, string> vars = 2;
  if (!this->_internal_vars().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "nakama.api.SessionRefreshRequest.VarsEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "nakama.api.SessionRefreshRequest.VarsEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_vars().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_vars().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_vars().begin();
          it != this->_internal_vars().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = SessionRefreshRequest_VarsEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_vars().begin();
          it != this->_internal_vars().end(); ++it) {
        target = SessionRefreshRequest_VarsEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.SessionRefreshRequest)
  return target;
}

size_t SessionRefreshRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.SessionRefreshRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> vars = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_vars_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_vars().begin();
      it != this->_internal_vars().end(); ++it) {
    total_size += SessionRefreshRequest_VarsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string token = 1;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SessionRefreshRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.SessionRefreshRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SessionRefreshRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SessionRefreshRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.SessionRefreshRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.SessionRefreshRequest)
    MergeFrom(*source);
  }
}

void SessionRefreshRequest::MergeFrom(const SessionRefreshRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.SessionRefreshRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vars_.MergeFrom(from.vars_);
  if (from.token().size() > 0) {
    _internal_set_token(from._internal_token());
  }
}

void SessionRefreshRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.SessionRefreshRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SessionRefreshRequest::CopyFrom(const SessionRefreshRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.SessionRefreshRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionRefreshRequest::IsInitialized() const {
  return true;
}

void SessionRefreshRequest::InternalSwap(SessionRefreshRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  vars_.Swap(&other->vars_);
  token_.Swap(&other->token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata SessionRefreshRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SessionLogoutRequest::_Internal {
 public:
};

SessionLogoutRequest::SessionLogoutRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nakama.api.SessionLogoutRequest)
}
SessionLogoutRequest::SessionLogoutRequest(const SessionLogoutRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_token().empty()) {
    token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_token(), 
      GetArena());
  }
  refresh_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_refresh_token().empty()) {
    refresh_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_refresh_token(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:nakama.api.SessionLogoutRequest)
}

void SessionLogoutRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SessionLogoutRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  refresh_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SessionLogoutRequest::~SessionLogoutRequest() {
  // @@protoc_insertion_point(destructor:nakama.api.SessionLogoutRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SessionLogoutRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  refresh_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SessionLogoutRequest::ArenaDtor(void* object) {
  SessionLogoutRequest* _this = reinterpret_cast< SessionLogoutRequest* >(object);
  (void)_this;
}
void SessionLogoutRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SessionLogoutRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SessionLogoutRequest& SessionLogoutRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SessionLogoutRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  return *internal_default_instance();
}


void SessionLogoutRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.SessionLogoutRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  token_.ClearToEmpty();
  refresh_token_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SessionLogoutRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.SessionLogoutRequest.token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string refresh_token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_refresh_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.SessionLogoutRequest.refresh_token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SessionLogoutRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.SessionLogoutRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string token = 1;
  if (this->token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.SessionLogoutRequest.token");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_token(), target);
  }

  // string refresh_token = 2;
  if (this->refresh_token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_refresh_token().data(), static_cast<int>(this->_internal_refresh_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.SessionLogoutRequest.refresh_token");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_refresh_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.SessionLogoutRequest)
  return target;
}

size_t SessionLogoutRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.SessionLogoutRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string token = 1;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  // string refresh_token = 2;
  if (this->refresh_token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_refresh_token());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SessionLogoutRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.SessionLogoutRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SessionLogoutRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SessionLogoutRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.SessionLogoutRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.SessionLogoutRequest)
    MergeFrom(*source);
  }
}

void SessionLogoutRequest::MergeFrom(const SessionLogoutRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.SessionLogoutRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.token().size() > 0) {
    _internal_set_token(from._internal_token());
  }
  if (from.refresh_token().size() > 0) {
    _internal_set_refresh_token(from._internal_refresh_token());
  }
}

void SessionLogoutRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.SessionLogoutRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SessionLogoutRequest::CopyFrom(const SessionLogoutRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.SessionLogoutRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionLogoutRequest::IsInitialized() const {
  return true;
}

void SessionLogoutRequest::InternalSwap(SessionLogoutRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  token_.Swap(&other->token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  refresh_token_.Swap(&other->refresh_token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata SessionLogoutRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AuthenticateAppleRequest::_Internal {
 public:
  static const ::nakama::api::AccountApple& account(const AuthenticateAppleRequest* msg);
  static const PROTOBUF_NAMESPACE_ID::BoolValue& create(const AuthenticateAppleRequest* msg);
};

const ::nakama::api::AccountApple&
AuthenticateAppleRequest::_Internal::account(const AuthenticateAppleRequest* msg) {
  return *msg->account_;
}
const PROTOBUF_NAMESPACE_ID::BoolValue&
AuthenticateAppleRequest::_Internal::create(const AuthenticateAppleRequest* msg) {
  return *msg->create_;
}
void AuthenticateAppleRequest::clear_create() {
  if (GetArena() == nullptr && create_ != nullptr) {
    delete create_;
  }
  create_ = nullptr;
}
AuthenticateAppleRequest::AuthenticateAppleRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nakama.api.AuthenticateAppleRequest)
}
AuthenticateAppleRequest::AuthenticateAppleRequest(const AuthenticateAppleRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_username().empty()) {
    username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_username(), 
      GetArena());
  }
  if (from._internal_has_account()) {
    account_ = new ::nakama::api::AccountApple(*from.account_);
  } else {
    account_ = nullptr;
  }
  if (from._internal_has_create()) {
    create_ = new PROTOBUF_NAMESPACE_ID::BoolValue(*from.create_);
  } else {
    create_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:nakama.api.AuthenticateAppleRequest)
}

void AuthenticateAppleRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AuthenticateAppleRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&account_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&create_) -
      reinterpret_cast<char*>(&account_)) + sizeof(create_));
}

AuthenticateAppleRequest::~AuthenticateAppleRequest() {
  // @@protoc_insertion_point(destructor:nakama.api.AuthenticateAppleRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AuthenticateAppleRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete account_;
  if (this != internal_default_instance()) delete create_;
}

void AuthenticateAppleRequest::ArenaDtor(void* object) {
  AuthenticateAppleRequest* _this = reinterpret_cast< AuthenticateAppleRequest* >(object);
  (void)_this;
}
void AuthenticateAppleRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AuthenticateAppleRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AuthenticateAppleRequest& AuthenticateAppleRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AuthenticateAppleRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  return *internal_default_instance();
}


void AuthenticateAppleRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.AuthenticateAppleRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  username_.ClearToEmpty();
  if (GetArena() == nullptr && account_ != nullptr) {
    delete account_;
  }
  account_ = nullptr;
  if (GetArena() == nullptr && create_ != nullptr) {
    delete create_;
  }
  create_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AuthenticateAppleRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .nakama.api.AccountApple account = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_account(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.BoolValue create = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_create(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string username = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.AuthenticateAppleRequest.username"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AuthenticateAppleRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.AuthenticateAppleRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .nakama.api.AccountApple account = 1;
  if (this->has_account()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::account(this), target, stream);
  }

  // .google.protobuf.BoolValue create = 2;
  if (this->has_create()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::create(this), target, stream);
  }

  // string username = 3;
  if (this->username().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.AuthenticateAppleRequest.username");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_username(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.AuthenticateAppleRequest)
  return target;
}

size_t AuthenticateAppleRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.AuthenticateAppleRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string username = 3;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  // .nakama.api.AccountApple account = 1;
  if (this->has_account()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *account_);
  }

  // .google.protobuf.BoolValue create = 2;
  if (this->has_create()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *create_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AuthenticateAppleRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.AuthenticateAppleRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AuthenticateAppleRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AuthenticateAppleRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.AuthenticateAppleRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.AuthenticateAppleRequest)
    MergeFrom(*source);
  }
}

void AuthenticateAppleRequest::MergeFrom(const AuthenticateAppleRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.AuthenticateAppleRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.username().size() > 0) {
    _internal_set_username(from._internal_username());
  }
  if (from.has_account()) {
    _internal_mutable_account()->::nakama::api::AccountApple::MergeFrom(from._internal_account());
  }
  if (from.has_create()) {
    _internal_mutable_create()->PROTOBUF_NAMESPACE_ID::BoolValue::MergeFrom(from._internal_create());
  }
}

void AuthenticateAppleRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.AuthenticateAppleRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthenticateAppleRequest::CopyFrom(const AuthenticateAppleRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.AuthenticateAppleRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthenticateAppleRequest::IsInitialized() const {
  return true;
}

void AuthenticateAppleRequest::InternalSwap(AuthenticateAppleRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  username_.Swap(&other->username_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AuthenticateAppleRequest, create_)
      + sizeof(AuthenticateAppleRequest::create_)
      - PROTOBUF_FIELD_OFFSET(AuthenticateAppleRequest, account_)>(
          reinterpret_cast<char*>(&account_),
          reinterpret_cast<char*>(&other->account_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AuthenticateAppleRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AuthenticateCustomRequest::_Internal {
 public:
  static const ::nakama::api::AccountCustom& account(const AuthenticateCustomRequest* msg);
  static const PROTOBUF_NAMESPACE_ID::BoolValue& create(const AuthenticateCustomRequest* msg);
};

const ::nakama::api::AccountCustom&
AuthenticateCustomRequest::_Internal::account(const AuthenticateCustomRequest* msg) {
  return *msg->account_;
}
const PROTOBUF_NAMESPACE_ID::BoolValue&
AuthenticateCustomRequest::_Internal::create(const AuthenticateCustomRequest* msg) {
  return *msg->create_;
}
void AuthenticateCustomRequest::clear_create() {
  if (GetArena() == nullptr && create_ != nullptr) {
    delete create_;
  }
  create_ = nullptr;
}
AuthenticateCustomRequest::AuthenticateCustomRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nakama.api.AuthenticateCustomRequest)
}
AuthenticateCustomRequest::AuthenticateCustomRequest(const AuthenticateCustomRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_username().empty()) {
    username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_username(), 
      GetArena());
  }
  if (from._internal_has_account()) {
    account_ = new ::nakama::api::AccountCustom(*from.account_);
  } else {
    account_ = nullptr;
  }
  if (from._internal_has_create()) {
    create_ = new PROTOBUF_NAMESPACE_ID::BoolValue(*from.create_);
  } else {
    create_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:nakama.api.AuthenticateCustomRequest)
}

void AuthenticateCustomRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AuthenticateCustomRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&account_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&create_) -
      reinterpret_cast<char*>(&account_)) + sizeof(create_));
}

AuthenticateCustomRequest::~AuthenticateCustomRequest() {
  // @@protoc_insertion_point(destructor:nakama.api.AuthenticateCustomRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AuthenticateCustomRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete account_;
  if (this != internal_default_instance()) delete create_;
}

void AuthenticateCustomRequest::ArenaDtor(void* object) {
  AuthenticateCustomRequest* _this = reinterpret_cast< AuthenticateCustomRequest* >(object);
  (void)_this;
}
void AuthenticateCustomRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AuthenticateCustomRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AuthenticateCustomRequest& AuthenticateCustomRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AuthenticateCustomRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  return *internal_default_instance();
}


void AuthenticateCustomRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.AuthenticateCustomRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  username_.ClearToEmpty();
  if (GetArena() == nullptr && account_ != nullptr) {
    delete account_;
  }
  account_ = nullptr;
  if (GetArena() == nullptr && create_ != nullptr) {
    delete create_;
  }
  create_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AuthenticateCustomRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .nakama.api.AccountCustom account = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_account(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.BoolValue create = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_create(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string username = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.AuthenticateCustomRequest.username"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AuthenticateCustomRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.AuthenticateCustomRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .nakama.api.AccountCustom account = 1;
  if (this->has_account()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::account(this), target, stream);
  }

  // .google.protobuf.BoolValue create = 2;
  if (this->has_create()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::create(this), target, stream);
  }

  // string username = 3;
  if (this->username().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.AuthenticateCustomRequest.username");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_username(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.AuthenticateCustomRequest)
  return target;
}

size_t AuthenticateCustomRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.AuthenticateCustomRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string username = 3;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  // .nakama.api.AccountCustom account = 1;
  if (this->has_account()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *account_);
  }

  // .google.protobuf.BoolValue create = 2;
  if (this->has_create()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *create_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AuthenticateCustomRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.AuthenticateCustomRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AuthenticateCustomRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AuthenticateCustomRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.AuthenticateCustomRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.AuthenticateCustomRequest)
    MergeFrom(*source);
  }
}

void AuthenticateCustomRequest::MergeFrom(const AuthenticateCustomRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.AuthenticateCustomRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.username().size() > 0) {
    _internal_set_username(from._internal_username());
  }
  if (from.has_account()) {
    _internal_mutable_account()->::nakama::api::AccountCustom::MergeFrom(from._internal_account());
  }
  if (from.has_create()) {
    _internal_mutable_create()->PROTOBUF_NAMESPACE_ID::BoolValue::MergeFrom(from._internal_create());
  }
}

void AuthenticateCustomRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.AuthenticateCustomRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthenticateCustomRequest::CopyFrom(const AuthenticateCustomRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.AuthenticateCustomRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthenticateCustomRequest::IsInitialized() const {
  return true;
}

void AuthenticateCustomRequest::InternalSwap(AuthenticateCustomRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  username_.Swap(&other->username_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AuthenticateCustomRequest, create_)
      + sizeof(AuthenticateCustomRequest::create_)
      - PROTOBUF_FIELD_OFFSET(AuthenticateCustomRequest, account_)>(
          reinterpret_cast<char*>(&account_),
          reinterpret_cast<char*>(&other->account_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AuthenticateCustomRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AuthenticateDeviceRequest::_Internal {
 public:
  static const ::nakama::api::AccountDevice& account(const AuthenticateDeviceRequest* msg);
  static const PROTOBUF_NAMESPACE_ID::BoolValue& create(const AuthenticateDeviceRequest* msg);
};

const ::nakama::api::AccountDevice&
AuthenticateDeviceRequest::_Internal::account(const AuthenticateDeviceRequest* msg) {
  return *msg->account_;
}
const PROTOBUF_NAMESPACE_ID::BoolValue&
AuthenticateDeviceRequest::_Internal::create(const AuthenticateDeviceRequest* msg) {
  return *msg->create_;
}
void AuthenticateDeviceRequest::clear_create() {
  if (GetArena() == nullptr && create_ != nullptr) {
    delete create_;
  }
  create_ = nullptr;
}
AuthenticateDeviceRequest::AuthenticateDeviceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nakama.api.AuthenticateDeviceRequest)
}
AuthenticateDeviceRequest::AuthenticateDeviceRequest(const AuthenticateDeviceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_username().empty()) {
    username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_username(), 
      GetArena());
  }
  if (from._internal_has_account()) {
    account_ = new ::nakama::api::AccountDevice(*from.account_);
  } else {
    account_ = nullptr;
  }
  if (from._internal_has_create()) {
    create_ = new PROTOBUF_NAMESPACE_ID::BoolValue(*from.create_);
  } else {
    create_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:nakama.api.AuthenticateDeviceRequest)
}

void AuthenticateDeviceRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AuthenticateDeviceRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&account_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&create_) -
      reinterpret_cast<char*>(&account_)) + sizeof(create_));
}

AuthenticateDeviceRequest::~AuthenticateDeviceRequest() {
  // @@protoc_insertion_point(destructor:nakama.api.AuthenticateDeviceRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AuthenticateDeviceRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete account_;
  if (this != internal_default_instance()) delete create_;
}

void AuthenticateDeviceRequest::ArenaDtor(void* object) {
  AuthenticateDeviceRequest* _this = reinterpret_cast< AuthenticateDeviceRequest* >(object);
  (void)_this;
}
void AuthenticateDeviceRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AuthenticateDeviceRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AuthenticateDeviceRequest& AuthenticateDeviceRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AuthenticateDeviceRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  return *internal_default_instance();
}


void AuthenticateDeviceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.AuthenticateDeviceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  username_.ClearToEmpty();
  if (GetArena() == nullptr && account_ != nullptr) {
    delete account_;
  }
  account_ = nullptr;
  if (GetArena() == nullptr && create_ != nullptr) {
    delete create_;
  }
  create_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AuthenticateDeviceRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .nakama.api.AccountDevice account = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_account(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.BoolValue create = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_create(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string username = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.AuthenticateDeviceRequest.username"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AuthenticateDeviceRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.AuthenticateDeviceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .nakama.api.AccountDevice account = 1;
  if (this->has_account()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::account(this), target, stream);
  }

  // .google.protobuf.BoolValue create = 2;
  if (this->has_create()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::create(this), target, stream);
  }

  // string username = 3;
  if (this->username().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.AuthenticateDeviceRequest.username");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_username(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.AuthenticateDeviceRequest)
  return target;
}

size_t AuthenticateDeviceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.AuthenticateDeviceRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string username = 3;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  // .nakama.api.AccountDevice account = 1;
  if (this->has_account()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *account_);
  }

  // .google.protobuf.BoolValue create = 2;
  if (this->has_create()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *create_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AuthenticateDeviceRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.AuthenticateDeviceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AuthenticateDeviceRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AuthenticateDeviceRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.AuthenticateDeviceRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.AuthenticateDeviceRequest)
    MergeFrom(*source);
  }
}

void AuthenticateDeviceRequest::MergeFrom(const AuthenticateDeviceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.AuthenticateDeviceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.username().size() > 0) {
    _internal_set_username(from._internal_username());
  }
  if (from.has_account()) {
    _internal_mutable_account()->::nakama::api::AccountDevice::MergeFrom(from._internal_account());
  }
  if (from.has_create()) {
    _internal_mutable_create()->PROTOBUF_NAMESPACE_ID::BoolValue::MergeFrom(from._internal_create());
  }
}

void AuthenticateDeviceRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.AuthenticateDeviceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthenticateDeviceRequest::CopyFrom(const AuthenticateDeviceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.AuthenticateDeviceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthenticateDeviceRequest::IsInitialized() const {
  return true;
}

void AuthenticateDeviceRequest::InternalSwap(AuthenticateDeviceRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  username_.Swap(&other->username_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AuthenticateDeviceRequest, create_)
      + sizeof(AuthenticateDeviceRequest::create_)
      - PROTOBUF_FIELD_OFFSET(AuthenticateDeviceRequest, account_)>(
          reinterpret_cast<char*>(&account_),
          reinterpret_cast<char*>(&other->account_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AuthenticateDeviceRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AuthenticateEmailRequest::_Internal {
 public:
  static const ::nakama::api::AccountEmail& account(const AuthenticateEmailRequest* msg);
  static const PROTOBUF_NAMESPACE_ID::BoolValue& create(const AuthenticateEmailRequest* msg);
};

const ::nakama::api::AccountEmail&
AuthenticateEmailRequest::_Internal::account(const AuthenticateEmailRequest* msg) {
  return *msg->account_;
}
const PROTOBUF_NAMESPACE_ID::BoolValue&
AuthenticateEmailRequest::_Internal::create(const AuthenticateEmailRequest* msg) {
  return *msg->create_;
}
void AuthenticateEmailRequest::clear_create() {
  if (GetArena() == nullptr && create_ != nullptr) {
    delete create_;
  }
  create_ = nullptr;
}
AuthenticateEmailRequest::AuthenticateEmailRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nakama.api.AuthenticateEmailRequest)
}
AuthenticateEmailRequest::AuthenticateEmailRequest(const AuthenticateEmailRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_username().empty()) {
    username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_username(), 
      GetArena());
  }
  if (from._internal_has_account()) {
    account_ = new ::nakama::api::AccountEmail(*from.account_);
  } else {
    account_ = nullptr;
  }
  if (from._internal_has_create()) {
    create_ = new PROTOBUF_NAMESPACE_ID::BoolValue(*from.create_);
  } else {
    create_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:nakama.api.AuthenticateEmailRequest)
}

void AuthenticateEmailRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AuthenticateEmailRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&account_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&create_) -
      reinterpret_cast<char*>(&account_)) + sizeof(create_));
}

AuthenticateEmailRequest::~AuthenticateEmailRequest() {
  // @@protoc_insertion_point(destructor:nakama.api.AuthenticateEmailRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AuthenticateEmailRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete account_;
  if (this != internal_default_instance()) delete create_;
}

void AuthenticateEmailRequest::ArenaDtor(void* object) {
  AuthenticateEmailRequest* _this = reinterpret_cast< AuthenticateEmailRequest* >(object);
  (void)_this;
}
void AuthenticateEmailRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AuthenticateEmailRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AuthenticateEmailRequest& AuthenticateEmailRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AuthenticateEmailRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  return *internal_default_instance();
}


void AuthenticateEmailRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.AuthenticateEmailRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  username_.ClearToEmpty();
  if (GetArena() == nullptr && account_ != nullptr) {
    delete account_;
  }
  account_ = nullptr;
  if (GetArena() == nullptr && create_ != nullptr) {
    delete create_;
  }
  create_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AuthenticateEmailRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .nakama.api.AccountEmail account = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_account(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.BoolValue create = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_create(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string username = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.AuthenticateEmailRequest.username"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AuthenticateEmailRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.AuthenticateEmailRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .nakama.api.AccountEmail account = 1;
  if (this->has_account()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::account(this), target, stream);
  }

  // .google.protobuf.BoolValue create = 2;
  if (this->has_create()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::create(this), target, stream);
  }

  // string username = 3;
  if (this->username().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.AuthenticateEmailRequest.username");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_username(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.AuthenticateEmailRequest)
  return target;
}

size_t AuthenticateEmailRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.AuthenticateEmailRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string username = 3;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  // .nakama.api.AccountEmail account = 1;
  if (this->has_account()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *account_);
  }

  // .google.protobuf.BoolValue create = 2;
  if (this->has_create()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *create_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AuthenticateEmailRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.AuthenticateEmailRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AuthenticateEmailRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AuthenticateEmailRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.AuthenticateEmailRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.AuthenticateEmailRequest)
    MergeFrom(*source);
  }
}

void AuthenticateEmailRequest::MergeFrom(const AuthenticateEmailRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.AuthenticateEmailRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.username().size() > 0) {
    _internal_set_username(from._internal_username());
  }
  if (from.has_account()) {
    _internal_mutable_account()->::nakama::api::AccountEmail::MergeFrom(from._internal_account());
  }
  if (from.has_create()) {
    _internal_mutable_create()->PROTOBUF_NAMESPACE_ID::BoolValue::MergeFrom(from._internal_create());
  }
}

void AuthenticateEmailRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.AuthenticateEmailRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthenticateEmailRequest::CopyFrom(const AuthenticateEmailRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.AuthenticateEmailRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthenticateEmailRequest::IsInitialized() const {
  return true;
}

void AuthenticateEmailRequest::InternalSwap(AuthenticateEmailRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  username_.Swap(&other->username_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AuthenticateEmailRequest, create_)
      + sizeof(AuthenticateEmailRequest::create_)
      - PROTOBUF_FIELD_OFFSET(AuthenticateEmailRequest, account_)>(
          reinterpret_cast<char*>(&account_),
          reinterpret_cast<char*>(&other->account_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AuthenticateEmailRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AuthenticateFacebookRequest::_Internal {
 public:
  static const ::nakama::api::AccountFacebook& account(const AuthenticateFacebookRequest* msg);
  static const PROTOBUF_NAMESPACE_ID::BoolValue& create(const AuthenticateFacebookRequest* msg);
  static const PROTOBUF_NAMESPACE_ID::BoolValue& sync(const AuthenticateFacebookRequest* msg);
};

const ::nakama::api::AccountFacebook&
AuthenticateFacebookRequest::_Internal::account(const AuthenticateFacebookRequest* msg) {
  return *msg->account_;
}
const PROTOBUF_NAMESPACE_ID::BoolValue&
AuthenticateFacebookRequest::_Internal::create(const AuthenticateFacebookRequest* msg) {
  return *msg->create_;
}
const PROTOBUF_NAMESPACE_ID::BoolValue&
AuthenticateFacebookRequest::_Internal::sync(const AuthenticateFacebookRequest* msg) {
  return *msg->sync_;
}
void AuthenticateFacebookRequest::clear_create() {
  if (GetArena() == nullptr && create_ != nullptr) {
    delete create_;
  }
  create_ = nullptr;
}
void AuthenticateFacebookRequest::clear_sync() {
  if (GetArena() == nullptr && sync_ != nullptr) {
    delete sync_;
  }
  sync_ = nullptr;
}
AuthenticateFacebookRequest::AuthenticateFacebookRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nakama.api.AuthenticateFacebookRequest)
}
AuthenticateFacebookRequest::AuthenticateFacebookRequest(const AuthenticateFacebookRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_username().empty()) {
    username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_username(), 
      GetArena());
  }
  if (from._internal_has_account()) {
    account_ = new ::nakama::api::AccountFacebook(*from.account_);
  } else {
    account_ = nullptr;
  }
  if (from._internal_has_create()) {
    create_ = new PROTOBUF_NAMESPACE_ID::BoolValue(*from.create_);
  } else {
    create_ = nullptr;
  }
  if (from._internal_has_sync()) {
    sync_ = new PROTOBUF_NAMESPACE_ID::BoolValue(*from.sync_);
  } else {
    sync_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:nakama.api.AuthenticateFacebookRequest)
}

void AuthenticateFacebookRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AuthenticateFacebookRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&account_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&sync_) -
      reinterpret_cast<char*>(&account_)) + sizeof(sync_));
}

AuthenticateFacebookRequest::~AuthenticateFacebookRequest() {
  // @@protoc_insertion_point(destructor:nakama.api.AuthenticateFacebookRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AuthenticateFacebookRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete account_;
  if (this != internal_default_instance()) delete create_;
  if (this != internal_default_instance()) delete sync_;
}

void AuthenticateFacebookRequest::ArenaDtor(void* object) {
  AuthenticateFacebookRequest* _this = reinterpret_cast< AuthenticateFacebookRequest* >(object);
  (void)_this;
}
void AuthenticateFacebookRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AuthenticateFacebookRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AuthenticateFacebookRequest& AuthenticateFacebookRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AuthenticateFacebookRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  return *internal_default_instance();
}


void AuthenticateFacebookRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.AuthenticateFacebookRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  username_.ClearToEmpty();
  if (GetArena() == nullptr && account_ != nullptr) {
    delete account_;
  }
  account_ = nullptr;
  if (GetArena() == nullptr && create_ != nullptr) {
    delete create_;
  }
  create_ = nullptr;
  if (GetArena() == nullptr && sync_ != nullptr) {
    delete sync_;
  }
  sync_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AuthenticateFacebookRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .nakama.api.AccountFacebook account = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_account(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.BoolValue create = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_create(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string username = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.AuthenticateFacebookRequest.username"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.BoolValue sync = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_sync(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AuthenticateFacebookRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.AuthenticateFacebookRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .nakama.api.AccountFacebook account = 1;
  if (this->has_account()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::account(this), target, stream);
  }

  // .google.protobuf.BoolValue create = 2;
  if (this->has_create()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::create(this), target, stream);
  }

  // string username = 3;
  if (this->username().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.AuthenticateFacebookRequest.username");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_username(), target);
  }

  // .google.protobuf.BoolValue sync = 4;
  if (this->has_sync()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::sync(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.AuthenticateFacebookRequest)
  return target;
}

size_t AuthenticateFacebookRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.AuthenticateFacebookRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string username = 3;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  // .nakama.api.AccountFacebook account = 1;
  if (this->has_account()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *account_);
  }

  // .google.protobuf.BoolValue create = 2;
  if (this->has_create()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *create_);
  }

  // .google.protobuf.BoolValue sync = 4;
  if (this->has_sync()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sync_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AuthenticateFacebookRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.AuthenticateFacebookRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AuthenticateFacebookRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AuthenticateFacebookRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.AuthenticateFacebookRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.AuthenticateFacebookRequest)
    MergeFrom(*source);
  }
}

void AuthenticateFacebookRequest::MergeFrom(const AuthenticateFacebookRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.AuthenticateFacebookRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.username().size() > 0) {
    _internal_set_username(from._internal_username());
  }
  if (from.has_account()) {
    _internal_mutable_account()->::nakama::api::AccountFacebook::MergeFrom(from._internal_account());
  }
  if (from.has_create()) {
    _internal_mutable_create()->PROTOBUF_NAMESPACE_ID::BoolValue::MergeFrom(from._internal_create());
  }
  if (from.has_sync()) {
    _internal_mutable_sync()->PROTOBUF_NAMESPACE_ID::BoolValue::MergeFrom(from._internal_sync());
  }
}

void AuthenticateFacebookRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.AuthenticateFacebookRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthenticateFacebookRequest::CopyFrom(const AuthenticateFacebookRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.AuthenticateFacebookRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthenticateFacebookRequest::IsInitialized() const {
  return true;
}

void AuthenticateFacebookRequest::InternalSwap(AuthenticateFacebookRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  username_.Swap(&other->username_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AuthenticateFacebookRequest, sync_)
      + sizeof(AuthenticateFacebookRequest::sync_)
      - PROTOBUF_FIELD_OFFSET(AuthenticateFacebookRequest, account_)>(
          reinterpret_cast<char*>(&account_),
          reinterpret_cast<char*>(&other->account_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AuthenticateFacebookRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AuthenticateFacebookInstantGameRequest::_Internal {
 public:
  static const ::nakama::api::AccountFacebookInstantGame& account(const AuthenticateFacebookInstantGameRequest* msg);
  static const PROTOBUF_NAMESPACE_ID::BoolValue& create(const AuthenticateFacebookInstantGameRequest* msg);
};

const ::nakama::api::AccountFacebookInstantGame&
AuthenticateFacebookInstantGameRequest::_Internal::account(const AuthenticateFacebookInstantGameRequest* msg) {
  return *msg->account_;
}
const PROTOBUF_NAMESPACE_ID::BoolValue&
AuthenticateFacebookInstantGameRequest::_Internal::create(const AuthenticateFacebookInstantGameRequest* msg) {
  return *msg->create_;
}
void AuthenticateFacebookInstantGameRequest::clear_create() {
  if (GetArena() == nullptr && create_ != nullptr) {
    delete create_;
  }
  create_ = nullptr;
}
AuthenticateFacebookInstantGameRequest::AuthenticateFacebookInstantGameRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nakama.api.AuthenticateFacebookInstantGameRequest)
}
AuthenticateFacebookInstantGameRequest::AuthenticateFacebookInstantGameRequest(const AuthenticateFacebookInstantGameRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_username().empty()) {
    username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_username(), 
      GetArena());
  }
  if (from._internal_has_account()) {
    account_ = new ::nakama::api::AccountFacebookInstantGame(*from.account_);
  } else {
    account_ = nullptr;
  }
  if (from._internal_has_create()) {
    create_ = new PROTOBUF_NAMESPACE_ID::BoolValue(*from.create_);
  } else {
    create_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:nakama.api.AuthenticateFacebookInstantGameRequest)
}

void AuthenticateFacebookInstantGameRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AuthenticateFacebookInstantGameRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&account_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&create_) -
      reinterpret_cast<char*>(&account_)) + sizeof(create_));
}

AuthenticateFacebookInstantGameRequest::~AuthenticateFacebookInstantGameRequest() {
  // @@protoc_insertion_point(destructor:nakama.api.AuthenticateFacebookInstantGameRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AuthenticateFacebookInstantGameRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete account_;
  if (this != internal_default_instance()) delete create_;
}

void AuthenticateFacebookInstantGameRequest::ArenaDtor(void* object) {
  AuthenticateFacebookInstantGameRequest* _this = reinterpret_cast< AuthenticateFacebookInstantGameRequest* >(object);
  (void)_this;
}
void AuthenticateFacebookInstantGameRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AuthenticateFacebookInstantGameRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AuthenticateFacebookInstantGameRequest& AuthenticateFacebookInstantGameRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AuthenticateFacebookInstantGameRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  return *internal_default_instance();
}


void AuthenticateFacebookInstantGameRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.AuthenticateFacebookInstantGameRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  username_.ClearToEmpty();
  if (GetArena() == nullptr && account_ != nullptr) {
    delete account_;
  }
  account_ = nullptr;
  if (GetArena() == nullptr && create_ != nullptr) {
    delete create_;
  }
  create_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AuthenticateFacebookInstantGameRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .nakama.api.AccountFacebookInstantGame account = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_account(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.BoolValue create = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_create(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string username = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.AuthenticateFacebookInstantGameRequest.username"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AuthenticateFacebookInstantGameRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.AuthenticateFacebookInstantGameRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .nakama.api.AccountFacebookInstantGame account = 1;
  if (this->has_account()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::account(this), target, stream);
  }

  // .google.protobuf.BoolValue create = 2;
  if (this->has_create()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::create(this), target, stream);
  }

  // string username = 3;
  if (this->username().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.AuthenticateFacebookInstantGameRequest.username");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_username(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.AuthenticateFacebookInstantGameRequest)
  return target;
}

size_t AuthenticateFacebookInstantGameRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.AuthenticateFacebookInstantGameRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string username = 3;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  // .nakama.api.AccountFacebookInstantGame account = 1;
  if (this->has_account()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *account_);
  }

  // .google.protobuf.BoolValue create = 2;
  if (this->has_create()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *create_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AuthenticateFacebookInstantGameRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.AuthenticateFacebookInstantGameRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AuthenticateFacebookInstantGameRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AuthenticateFacebookInstantGameRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.AuthenticateFacebookInstantGameRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.AuthenticateFacebookInstantGameRequest)
    MergeFrom(*source);
  }
}

void AuthenticateFacebookInstantGameRequest::MergeFrom(const AuthenticateFacebookInstantGameRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.AuthenticateFacebookInstantGameRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.username().size() > 0) {
    _internal_set_username(from._internal_username());
  }
  if (from.has_account()) {
    _internal_mutable_account()->::nakama::api::AccountFacebookInstantGame::MergeFrom(from._internal_account());
  }
  if (from.has_create()) {
    _internal_mutable_create()->PROTOBUF_NAMESPACE_ID::BoolValue::MergeFrom(from._internal_create());
  }
}

void AuthenticateFacebookInstantGameRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.AuthenticateFacebookInstantGameRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthenticateFacebookInstantGameRequest::CopyFrom(const AuthenticateFacebookInstantGameRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.AuthenticateFacebookInstantGameRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthenticateFacebookInstantGameRequest::IsInitialized() const {
  return true;
}

void AuthenticateFacebookInstantGameRequest::InternalSwap(AuthenticateFacebookInstantGameRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  username_.Swap(&other->username_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AuthenticateFacebookInstantGameRequest, create_)
      + sizeof(AuthenticateFacebookInstantGameRequest::create_)
      - PROTOBUF_FIELD_OFFSET(AuthenticateFacebookInstantGameRequest, account_)>(
          reinterpret_cast<char*>(&account_),
          reinterpret_cast<char*>(&other->account_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AuthenticateFacebookInstantGameRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AuthenticateGameCenterRequest::_Internal {
 public:
  static const ::nakama::api::AccountGameCenter& account(const AuthenticateGameCenterRequest* msg);
  static const PROTOBUF_NAMESPACE_ID::BoolValue& create(const AuthenticateGameCenterRequest* msg);
};

const ::nakama::api::AccountGameCenter&
AuthenticateGameCenterRequest::_Internal::account(const AuthenticateGameCenterRequest* msg) {
  return *msg->account_;
}
const PROTOBUF_NAMESPACE_ID::BoolValue&
AuthenticateGameCenterRequest::_Internal::create(const AuthenticateGameCenterRequest* msg) {
  return *msg->create_;
}
void AuthenticateGameCenterRequest::clear_create() {
  if (GetArena() == nullptr && create_ != nullptr) {
    delete create_;
  }
  create_ = nullptr;
}
AuthenticateGameCenterRequest::AuthenticateGameCenterRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nakama.api.AuthenticateGameCenterRequest)
}
AuthenticateGameCenterRequest::AuthenticateGameCenterRequest(const AuthenticateGameCenterRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_username().empty()) {
    username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_username(), 
      GetArena());
  }
  if (from._internal_has_account()) {
    account_ = new ::nakama::api::AccountGameCenter(*from.account_);
  } else {
    account_ = nullptr;
  }
  if (from._internal_has_create()) {
    create_ = new PROTOBUF_NAMESPACE_ID::BoolValue(*from.create_);
  } else {
    create_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:nakama.api.AuthenticateGameCenterRequest)
}

void AuthenticateGameCenterRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AuthenticateGameCenterRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&account_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&create_) -
      reinterpret_cast<char*>(&account_)) + sizeof(create_));
}

AuthenticateGameCenterRequest::~AuthenticateGameCenterRequest() {
  // @@protoc_insertion_point(destructor:nakama.api.AuthenticateGameCenterRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AuthenticateGameCenterRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete account_;
  if (this != internal_default_instance()) delete create_;
}

void AuthenticateGameCenterRequest::ArenaDtor(void* object) {
  AuthenticateGameCenterRequest* _this = reinterpret_cast< AuthenticateGameCenterRequest* >(object);
  (void)_this;
}
void AuthenticateGameCenterRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AuthenticateGameCenterRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AuthenticateGameCenterRequest& AuthenticateGameCenterRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AuthenticateGameCenterRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  return *internal_default_instance();
}


void AuthenticateGameCenterRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.AuthenticateGameCenterRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  username_.ClearToEmpty();
  if (GetArena() == nullptr && account_ != nullptr) {
    delete account_;
  }
  account_ = nullptr;
  if (GetArena() == nullptr && create_ != nullptr) {
    delete create_;
  }
  create_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AuthenticateGameCenterRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .nakama.api.AccountGameCenter account = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_account(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.BoolValue create = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_create(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string username = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.AuthenticateGameCenterRequest.username"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AuthenticateGameCenterRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.AuthenticateGameCenterRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .nakama.api.AccountGameCenter account = 1;
  if (this->has_account()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::account(this), target, stream);
  }

  // .google.protobuf.BoolValue create = 2;
  if (this->has_create()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::create(this), target, stream);
  }

  // string username = 3;
  if (this->username().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.AuthenticateGameCenterRequest.username");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_username(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.AuthenticateGameCenterRequest)
  return target;
}

size_t AuthenticateGameCenterRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.AuthenticateGameCenterRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string username = 3;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  // .nakama.api.AccountGameCenter account = 1;
  if (this->has_account()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *account_);
  }

  // .google.protobuf.BoolValue create = 2;
  if (this->has_create()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *create_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AuthenticateGameCenterRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.AuthenticateGameCenterRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AuthenticateGameCenterRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AuthenticateGameCenterRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.AuthenticateGameCenterRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.AuthenticateGameCenterRequest)
    MergeFrom(*source);
  }
}

void AuthenticateGameCenterRequest::MergeFrom(const AuthenticateGameCenterRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.AuthenticateGameCenterRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.username().size() > 0) {
    _internal_set_username(from._internal_username());
  }
  if (from.has_account()) {
    _internal_mutable_account()->::nakama::api::AccountGameCenter::MergeFrom(from._internal_account());
  }
  if (from.has_create()) {
    _internal_mutable_create()->PROTOBUF_NAMESPACE_ID::BoolValue::MergeFrom(from._internal_create());
  }
}

void AuthenticateGameCenterRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.AuthenticateGameCenterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthenticateGameCenterRequest::CopyFrom(const AuthenticateGameCenterRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.AuthenticateGameCenterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthenticateGameCenterRequest::IsInitialized() const {
  return true;
}

void AuthenticateGameCenterRequest::InternalSwap(AuthenticateGameCenterRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  username_.Swap(&other->username_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AuthenticateGameCenterRequest, create_)
      + sizeof(AuthenticateGameCenterRequest::create_)
      - PROTOBUF_FIELD_OFFSET(AuthenticateGameCenterRequest, account_)>(
          reinterpret_cast<char*>(&account_),
          reinterpret_cast<char*>(&other->account_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AuthenticateGameCenterRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AuthenticateGoogleRequest::_Internal {
 public:
  static const ::nakama::api::AccountGoogle& account(const AuthenticateGoogleRequest* msg);
  static const PROTOBUF_NAMESPACE_ID::BoolValue& create(const AuthenticateGoogleRequest* msg);
};

const ::nakama::api::AccountGoogle&
AuthenticateGoogleRequest::_Internal::account(const AuthenticateGoogleRequest* msg) {
  return *msg->account_;
}
const PROTOBUF_NAMESPACE_ID::BoolValue&
AuthenticateGoogleRequest::_Internal::create(const AuthenticateGoogleRequest* msg) {
  return *msg->create_;
}
void AuthenticateGoogleRequest::clear_create() {
  if (GetArena() == nullptr && create_ != nullptr) {
    delete create_;
  }
  create_ = nullptr;
}
AuthenticateGoogleRequest::AuthenticateGoogleRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nakama.api.AuthenticateGoogleRequest)
}
AuthenticateGoogleRequest::AuthenticateGoogleRequest(const AuthenticateGoogleRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_username().empty()) {
    username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_username(), 
      GetArena());
  }
  if (from._internal_has_account()) {
    account_ = new ::nakama::api::AccountGoogle(*from.account_);
  } else {
    account_ = nullptr;
  }
  if (from._internal_has_create()) {
    create_ = new PROTOBUF_NAMESPACE_ID::BoolValue(*from.create_);
  } else {
    create_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:nakama.api.AuthenticateGoogleRequest)
}

void AuthenticateGoogleRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AuthenticateGoogleRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&account_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&create_) -
      reinterpret_cast<char*>(&account_)) + sizeof(create_));
}

AuthenticateGoogleRequest::~AuthenticateGoogleRequest() {
  // @@protoc_insertion_point(destructor:nakama.api.AuthenticateGoogleRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AuthenticateGoogleRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete account_;
  if (this != internal_default_instance()) delete create_;
}

void AuthenticateGoogleRequest::ArenaDtor(void* object) {
  AuthenticateGoogleRequest* _this = reinterpret_cast< AuthenticateGoogleRequest* >(object);
  (void)_this;
}
void AuthenticateGoogleRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AuthenticateGoogleRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AuthenticateGoogleRequest& AuthenticateGoogleRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AuthenticateGoogleRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  return *internal_default_instance();
}


void AuthenticateGoogleRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.AuthenticateGoogleRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  username_.ClearToEmpty();
  if (GetArena() == nullptr && account_ != nullptr) {
    delete account_;
  }
  account_ = nullptr;
  if (GetArena() == nullptr && create_ != nullptr) {
    delete create_;
  }
  create_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AuthenticateGoogleRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .nakama.api.AccountGoogle account = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_account(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.BoolValue create = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_create(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string username = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.AuthenticateGoogleRequest.username"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AuthenticateGoogleRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.AuthenticateGoogleRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .nakama.api.AccountGoogle account = 1;
  if (this->has_account()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::account(this), target, stream);
  }

  // .google.protobuf.BoolValue create = 2;
  if (this->has_create()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::create(this), target, stream);
  }

  // string username = 3;
  if (this->username().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.AuthenticateGoogleRequest.username");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_username(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.AuthenticateGoogleRequest)
  return target;
}

size_t AuthenticateGoogleRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.AuthenticateGoogleRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string username = 3;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  // .nakama.api.AccountGoogle account = 1;
  if (this->has_account()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *account_);
  }

  // .google.protobuf.BoolValue create = 2;
  if (this->has_create()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *create_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AuthenticateGoogleRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.AuthenticateGoogleRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AuthenticateGoogleRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AuthenticateGoogleRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.AuthenticateGoogleRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.AuthenticateGoogleRequest)
    MergeFrom(*source);
  }
}

void AuthenticateGoogleRequest::MergeFrom(const AuthenticateGoogleRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.AuthenticateGoogleRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.username().size() > 0) {
    _internal_set_username(from._internal_username());
  }
  if (from.has_account()) {
    _internal_mutable_account()->::nakama::api::AccountGoogle::MergeFrom(from._internal_account());
  }
  if (from.has_create()) {
    _internal_mutable_create()->PROTOBUF_NAMESPACE_ID::BoolValue::MergeFrom(from._internal_create());
  }
}

void AuthenticateGoogleRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.AuthenticateGoogleRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthenticateGoogleRequest::CopyFrom(const AuthenticateGoogleRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.AuthenticateGoogleRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthenticateGoogleRequest::IsInitialized() const {
  return true;
}

void AuthenticateGoogleRequest::InternalSwap(AuthenticateGoogleRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  username_.Swap(&other->username_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AuthenticateGoogleRequest, create_)
      + sizeof(AuthenticateGoogleRequest::create_)
      - PROTOBUF_FIELD_OFFSET(AuthenticateGoogleRequest, account_)>(
          reinterpret_cast<char*>(&account_),
          reinterpret_cast<char*>(&other->account_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AuthenticateGoogleRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AuthenticateSteamRequest::_Internal {
 public:
  static const ::nakama::api::AccountSteam& account(const AuthenticateSteamRequest* msg);
  static const PROTOBUF_NAMESPACE_ID::BoolValue& create(const AuthenticateSteamRequest* msg);
  static const PROTOBUF_NAMESPACE_ID::BoolValue& sync(const AuthenticateSteamRequest* msg);
};

const ::nakama::api::AccountSteam&
AuthenticateSteamRequest::_Internal::account(const AuthenticateSteamRequest* msg) {
  return *msg->account_;
}
const PROTOBUF_NAMESPACE_ID::BoolValue&
AuthenticateSteamRequest::_Internal::create(const AuthenticateSteamRequest* msg) {
  return *msg->create_;
}
const PROTOBUF_NAMESPACE_ID::BoolValue&
AuthenticateSteamRequest::_Internal::sync(const AuthenticateSteamRequest* msg) {
  return *msg->sync_;
}
void AuthenticateSteamRequest::clear_create() {
  if (GetArena() == nullptr && create_ != nullptr) {
    delete create_;
  }
  create_ = nullptr;
}
void AuthenticateSteamRequest::clear_sync() {
  if (GetArena() == nullptr && sync_ != nullptr) {
    delete sync_;
  }
  sync_ = nullptr;
}
AuthenticateSteamRequest::AuthenticateSteamRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nakama.api.AuthenticateSteamRequest)
}
AuthenticateSteamRequest::AuthenticateSteamRequest(const AuthenticateSteamRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_username().empty()) {
    username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_username(), 
      GetArena());
  }
  if (from._internal_has_account()) {
    account_ = new ::nakama::api::AccountSteam(*from.account_);
  } else {
    account_ = nullptr;
  }
  if (from._internal_has_create()) {
    create_ = new PROTOBUF_NAMESPACE_ID::BoolValue(*from.create_);
  } else {
    create_ = nullptr;
  }
  if (from._internal_has_sync()) {
    sync_ = new PROTOBUF_NAMESPACE_ID::BoolValue(*from.sync_);
  } else {
    sync_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:nakama.api.AuthenticateSteamRequest)
}

void AuthenticateSteamRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AuthenticateSteamRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&account_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&sync_) -
      reinterpret_cast<char*>(&account_)) + sizeof(sync_));
}

AuthenticateSteamRequest::~AuthenticateSteamRequest() {
  // @@protoc_insertion_point(destructor:nakama.api.AuthenticateSteamRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AuthenticateSteamRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete account_;
  if (this != internal_default_instance()) delete create_;
  if (this != internal_default_instance()) delete sync_;
}

void AuthenticateSteamRequest::ArenaDtor(void* object) {
  AuthenticateSteamRequest* _this = reinterpret_cast< AuthenticateSteamRequest* >(object);
  (void)_this;
}
void AuthenticateSteamRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AuthenticateSteamRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AuthenticateSteamRequest& AuthenticateSteamRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AuthenticateSteamRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  return *internal_default_instance();
}


void AuthenticateSteamRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.AuthenticateSteamRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  username_.ClearToEmpty();
  if (GetArena() == nullptr && account_ != nullptr) {
    delete account_;
  }
  account_ = nullptr;
  if (GetArena() == nullptr && create_ != nullptr) {
    delete create_;
  }
  create_ = nullptr;
  if (GetArena() == nullptr && sync_ != nullptr) {
    delete sync_;
  }
  sync_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AuthenticateSteamRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .nakama.api.AccountSteam account = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_account(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.BoolValue create = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_create(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string username = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.AuthenticateSteamRequest.username"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.BoolValue sync = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_sync(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AuthenticateSteamRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.AuthenticateSteamRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .nakama.api.AccountSteam account = 1;
  if (this->has_account()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::account(this), target, stream);
  }

  // .google.protobuf.BoolValue create = 2;
  if (this->has_create()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::create(this), target, stream);
  }

  // string username = 3;
  if (this->username().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.AuthenticateSteamRequest.username");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_username(), target);
  }

  // .google.protobuf.BoolValue sync = 4;
  if (this->has_sync()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::sync(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.AuthenticateSteamRequest)
  return target;
}

size_t AuthenticateSteamRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.AuthenticateSteamRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string username = 3;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  // .nakama.api.AccountSteam account = 1;
  if (this->has_account()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *account_);
  }

  // .google.protobuf.BoolValue create = 2;
  if (this->has_create()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *create_);
  }

  // .google.protobuf.BoolValue sync = 4;
  if (this->has_sync()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sync_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AuthenticateSteamRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.AuthenticateSteamRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AuthenticateSteamRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AuthenticateSteamRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.AuthenticateSteamRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.AuthenticateSteamRequest)
    MergeFrom(*source);
  }
}

void AuthenticateSteamRequest::MergeFrom(const AuthenticateSteamRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.AuthenticateSteamRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.username().size() > 0) {
    _internal_set_username(from._internal_username());
  }
  if (from.has_account()) {
    _internal_mutable_account()->::nakama::api::AccountSteam::MergeFrom(from._internal_account());
  }
  if (from.has_create()) {
    _internal_mutable_create()->PROTOBUF_NAMESPACE_ID::BoolValue::MergeFrom(from._internal_create());
  }
  if (from.has_sync()) {
    _internal_mutable_sync()->PROTOBUF_NAMESPACE_ID::BoolValue::MergeFrom(from._internal_sync());
  }
}

void AuthenticateSteamRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.AuthenticateSteamRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthenticateSteamRequest::CopyFrom(const AuthenticateSteamRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.AuthenticateSteamRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthenticateSteamRequest::IsInitialized() const {
  return true;
}

void AuthenticateSteamRequest::InternalSwap(AuthenticateSteamRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  username_.Swap(&other->username_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AuthenticateSteamRequest, sync_)
      + sizeof(AuthenticateSteamRequest::sync_)
      - PROTOBUF_FIELD_OFFSET(AuthenticateSteamRequest, account_)>(
          reinterpret_cast<char*>(&account_),
          reinterpret_cast<char*>(&other->account_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AuthenticateSteamRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BanGroupUsersRequest::_Internal {
 public:
};

BanGroupUsersRequest::BanGroupUsersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  user_ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nakama.api.BanGroupUsersRequest)
}
BanGroupUsersRequest::BanGroupUsersRequest(const BanGroupUsersRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      user_ids_(from.user_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  group_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_group_id().empty()) {
    group_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_group_id(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:nakama.api.BanGroupUsersRequest)
}

void BanGroupUsersRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BanGroupUsersRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  group_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

BanGroupUsersRequest::~BanGroupUsersRequest() {
  // @@protoc_insertion_point(destructor:nakama.api.BanGroupUsersRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BanGroupUsersRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  group_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BanGroupUsersRequest::ArenaDtor(void* object) {
  BanGroupUsersRequest* _this = reinterpret_cast< BanGroupUsersRequest* >(object);
  (void)_this;
}
void BanGroupUsersRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BanGroupUsersRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BanGroupUsersRequest& BanGroupUsersRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BanGroupUsersRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  return *internal_default_instance();
}


void BanGroupUsersRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.BanGroupUsersRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_ids_.Clear();
  group_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BanGroupUsersRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string group_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_group_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.BanGroupUsersRequest.group_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string user_ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_user_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.BanGroupUsersRequest.user_ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BanGroupUsersRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.BanGroupUsersRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string group_id = 1;
  if (this->group_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_group_id().data(), static_cast<int>(this->_internal_group_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.BanGroupUsersRequest.group_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_group_id(), target);
  }

  // repeated string user_ids = 2;
  for (int i = 0, n = this->_internal_user_ids_size(); i < n; i++) {
    const auto& s = this->_internal_user_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.BanGroupUsersRequest.user_ids");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.BanGroupUsersRequest)
  return target;
}

size_t BanGroupUsersRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.BanGroupUsersRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string user_ids = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(user_ids_.size());
  for (int i = 0, n = user_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      user_ids_.Get(i));
  }

  // string group_id = 1;
  if (this->group_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_group_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BanGroupUsersRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.BanGroupUsersRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BanGroupUsersRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BanGroupUsersRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.BanGroupUsersRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.BanGroupUsersRequest)
    MergeFrom(*source);
  }
}

void BanGroupUsersRequest::MergeFrom(const BanGroupUsersRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.BanGroupUsersRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  user_ids_.MergeFrom(from.user_ids_);
  if (from.group_id().size() > 0) {
    _internal_set_group_id(from._internal_group_id());
  }
}

void BanGroupUsersRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.BanGroupUsersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BanGroupUsersRequest::CopyFrom(const BanGroupUsersRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.BanGroupUsersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BanGroupUsersRequest::IsInitialized() const {
  return true;
}

void BanGroupUsersRequest::InternalSwap(BanGroupUsersRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  user_ids_.InternalSwap(&other->user_ids_);
  group_id_.Swap(&other->group_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata BanGroupUsersRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BlockFriendsRequest::_Internal {
 public:
};

BlockFriendsRequest::BlockFriendsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  ids_(arena),
  usernames_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nakama.api.BlockFriendsRequest)
}
BlockFriendsRequest::BlockFriendsRequest(const BlockFriendsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      ids_(from.ids_),
      usernames_(from.usernames_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:nakama.api.BlockFriendsRequest)
}

void BlockFriendsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BlockFriendsRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
}

BlockFriendsRequest::~BlockFriendsRequest() {
  // @@protoc_insertion_point(destructor:nakama.api.BlockFriendsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BlockFriendsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void BlockFriendsRequest::ArenaDtor(void* object) {
  BlockFriendsRequest* _this = reinterpret_cast< BlockFriendsRequest* >(object);
  (void)_this;
}
void BlockFriendsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BlockFriendsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BlockFriendsRequest& BlockFriendsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BlockFriendsRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  return *internal_default_instance();
}


void BlockFriendsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.BlockFriendsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ids_.Clear();
  usernames_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlockFriendsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.BlockFriendsRequest.ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string usernames = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_usernames();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.BlockFriendsRequest.usernames"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BlockFriendsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.BlockFriendsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string ids = 1;
  for (int i = 0, n = this->_internal_ids_size(); i < n; i++) {
    const auto& s = this->_internal_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.BlockFriendsRequest.ids");
    target = stream->WriteString(1, s, target);
  }

  // repeated string usernames = 2;
  for (int i = 0, n = this->_internal_usernames_size(); i < n; i++) {
    const auto& s = this->_internal_usernames(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.BlockFriendsRequest.usernames");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.BlockFriendsRequest)
  return target;
}

size_t BlockFriendsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.BlockFriendsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string ids = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(ids_.size());
  for (int i = 0, n = ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      ids_.Get(i));
  }

  // repeated string usernames = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(usernames_.size());
  for (int i = 0, n = usernames_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      usernames_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BlockFriendsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.BlockFriendsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BlockFriendsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BlockFriendsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.BlockFriendsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.BlockFriendsRequest)
    MergeFrom(*source);
  }
}

void BlockFriendsRequest::MergeFrom(const BlockFriendsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.BlockFriendsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ids_.MergeFrom(from.ids_);
  usernames_.MergeFrom(from.usernames_);
}

void BlockFriendsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.BlockFriendsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlockFriendsRequest::CopyFrom(const BlockFriendsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.BlockFriendsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockFriendsRequest::IsInitialized() const {
  return true;
}

void BlockFriendsRequest::InternalSwap(BlockFriendsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ids_.InternalSwap(&other->ids_);
  usernames_.InternalSwap(&other->usernames_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BlockFriendsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ChannelMessage::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Int32Value& code(const ChannelMessage* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& create_time(const ChannelMessage* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& update_time(const ChannelMessage* msg);
  static const PROTOBUF_NAMESPACE_ID::BoolValue& persistent(const ChannelMessage* msg);
};

const PROTOBUF_NAMESPACE_ID::Int32Value&
ChannelMessage::_Internal::code(const ChannelMessage* msg) {
  return *msg->code_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
ChannelMessage::_Internal::create_time(const ChannelMessage* msg) {
  return *msg->create_time_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
ChannelMessage::_Internal::update_time(const ChannelMessage* msg) {
  return *msg->update_time_;
}
const PROTOBUF_NAMESPACE_ID::BoolValue&
ChannelMessage::_Internal::persistent(const ChannelMessage* msg) {
  return *msg->persistent_;
}
void ChannelMessage::clear_code() {
  if (GetArena() == nullptr && code_ != nullptr) {
    delete code_;
  }
  code_ = nullptr;
}
void ChannelMessage::clear_create_time() {
  if (GetArena() == nullptr && create_time_ != nullptr) {
    delete create_time_;
  }
  create_time_ = nullptr;
}
void ChannelMessage::clear_update_time() {
  if (GetArena() == nullptr && update_time_ != nullptr) {
    delete update_time_;
  }
  update_time_ = nullptr;
}
void ChannelMessage::clear_persistent() {
  if (GetArena() == nullptr && persistent_ != nullptr) {
    delete persistent_;
  }
  persistent_ = nullptr;
}
ChannelMessage::ChannelMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nakama.api.ChannelMessage)
}
ChannelMessage::ChannelMessage(const ChannelMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  channel_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_channel_id().empty()) {
    channel_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_channel_id(), 
      GetArena());
  }
  message_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message_id().empty()) {
    message_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message_id(), 
      GetArena());
  }
  sender_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sender_id().empty()) {
    sender_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sender_id(), 
      GetArena());
  }
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_username().empty()) {
    username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_username(), 
      GetArena());
  }
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_content().empty()) {
    content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_content(), 
      GetArena());
  }
  room_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_room_name().empty()) {
    room_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_room_name(), 
      GetArena());
  }
  group_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_group_id().empty()) {
    group_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_group_id(), 
      GetArena());
  }
  user_id_one_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_id_one().empty()) {
    user_id_one_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_user_id_one(), 
      GetArena());
  }
  user_id_two_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_id_two().empty()) {
    user_id_two_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_user_id_two(), 
      GetArena());
  }
  if (from._internal_has_code()) {
    code_ = new PROTOBUF_NAMESPACE_ID::Int32Value(*from.code_);
  } else {
    code_ = nullptr;
  }
  if (from._internal_has_create_time()) {
    create_time_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.create_time_);
  } else {
    create_time_ = nullptr;
  }
  if (from._internal_has_update_time()) {
    update_time_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.update_time_);
  } else {
    update_time_ = nullptr;
  }
  if (from._internal_has_persistent()) {
    persistent_ = new PROTOBUF_NAMESPACE_ID::BoolValue(*from.persistent_);
  } else {
    persistent_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:nakama.api.ChannelMessage)
}

void ChannelMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChannelMessage_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  channel_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sender_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  room_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  group_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_id_one_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_id_two_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&code_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&persistent_) -
      reinterpret_cast<char*>(&code_)) + sizeof(persistent_));
}

ChannelMessage::~ChannelMessage() {
  // @@protoc_insertion_point(destructor:nakama.api.ChannelMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChannelMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  channel_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sender_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  content_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  room_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  group_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_id_one_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_id_two_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete code_;
  if (this != internal_default_instance()) delete create_time_;
  if (this != internal_default_instance()) delete update_time_;
  if (this != internal_default_instance()) delete persistent_;
}

void ChannelMessage::ArenaDtor(void* object) {
  ChannelMessage* _this = reinterpret_cast< ChannelMessage* >(object);
  (void)_this;
}
void ChannelMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChannelMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChannelMessage& ChannelMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChannelMessage_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  return *internal_default_instance();
}


void ChannelMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.ChannelMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channel_id_.ClearToEmpty();
  message_id_.ClearToEmpty();
  sender_id_.ClearToEmpty();
  username_.ClearToEmpty();
  content_.ClearToEmpty();
  room_name_.ClearToEmpty();
  group_id_.ClearToEmpty();
  user_id_one_.ClearToEmpty();
  user_id_two_.ClearToEmpty();
  if (GetArena() == nullptr && code_ != nullptr) {
    delete code_;
  }
  code_ = nullptr;
  if (GetArena() == nullptr && create_time_ != nullptr) {
    delete create_time_;
  }
  create_time_ = nullptr;
  if (GetArena() == nullptr && update_time_ != nullptr) {
    delete update_time_;
  }
  update_time_ = nullptr;
  if (GetArena() == nullptr && persistent_ != nullptr) {
    delete persistent_;
  }
  persistent_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChannelMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string channel_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_channel_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.ChannelMessage.channel_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string message_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_message_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.ChannelMessage.message_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Int32Value code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_code(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sender_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_sender_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.ChannelMessage.sender_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string username = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.ChannelMessage.username"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string content = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_content();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.ChannelMessage.content"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp create_time = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_create_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp update_time = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_update_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.BoolValue persistent = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_persistent(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string room_name = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_room_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.ChannelMessage.room_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string group_id = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_group_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.ChannelMessage.group_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string user_id_one = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_user_id_one();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.ChannelMessage.user_id_one"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string user_id_two = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_user_id_two();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.ChannelMessage.user_id_two"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChannelMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.ChannelMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string channel_id = 1;
  if (this->channel_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_channel_id().data(), static_cast<int>(this->_internal_channel_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.ChannelMessage.channel_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_channel_id(), target);
  }

  // string message_id = 2;
  if (this->message_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message_id().data(), static_cast<int>(this->_internal_message_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.ChannelMessage.message_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message_id(), target);
  }

  // .google.protobuf.Int32Value code = 3;
  if (this->has_code()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::code(this), target, stream);
  }

  // string sender_id = 4;
  if (this->sender_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sender_id().data(), static_cast<int>(this->_internal_sender_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.ChannelMessage.sender_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_sender_id(), target);
  }

  // string username = 5;
  if (this->username().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.ChannelMessage.username");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_username(), target);
  }

  // string content = 6;
  if (this->content().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content().data(), static_cast<int>(this->_internal_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.ChannelMessage.content");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_content(), target);
  }

  // .google.protobuf.Timestamp create_time = 7;
  if (this->has_create_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::create_time(this), target, stream);
  }

  // .google.protobuf.Timestamp update_time = 8;
  if (this->has_update_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::update_time(this), target, stream);
  }

  // .google.protobuf.BoolValue persistent = 9;
  if (this->has_persistent()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::persistent(this), target, stream);
  }

  // string room_name = 10;
  if (this->room_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_room_name().data(), static_cast<int>(this->_internal_room_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.ChannelMessage.room_name");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_room_name(), target);
  }

  // string group_id = 11;
  if (this->group_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_group_id().data(), static_cast<int>(this->_internal_group_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.ChannelMessage.group_id");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_group_id(), target);
  }

  // string user_id_one = 12;
  if (this->user_id_one().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id_one().data(), static_cast<int>(this->_internal_user_id_one().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.ChannelMessage.user_id_one");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_user_id_one(), target);
  }

  // string user_id_two = 13;
  if (this->user_id_two().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id_two().data(), static_cast<int>(this->_internal_user_id_two().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.ChannelMessage.user_id_two");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_user_id_two(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.ChannelMessage)
  return target;
}

size_t ChannelMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.ChannelMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string channel_id = 1;
  if (this->channel_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_channel_id());
  }

  // string message_id = 2;
  if (this->message_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message_id());
  }

  // string sender_id = 4;
  if (this->sender_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sender_id());
  }

  // string username = 5;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  // string content = 6;
  if (this->content().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content());
  }

  // string room_name = 10;
  if (this->room_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_room_name());
  }

  // string group_id = 11;
  if (this->group_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_group_id());
  }

  // string user_id_one = 12;
  if (this->user_id_one().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id_one());
  }

  // string user_id_two = 13;
  if (this->user_id_two().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id_two());
  }

  // .google.protobuf.Int32Value code = 3;
  if (this->has_code()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *code_);
  }

  // .google.protobuf.Timestamp create_time = 7;
  if (this->has_create_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *create_time_);
  }

  // .google.protobuf.Timestamp update_time = 8;
  if (this->has_update_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *update_time_);
  }

  // .google.protobuf.BoolValue persistent = 9;
  if (this->has_persistent()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *persistent_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChannelMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.ChannelMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const ChannelMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChannelMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.ChannelMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.ChannelMessage)
    MergeFrom(*source);
  }
}

void ChannelMessage::MergeFrom(const ChannelMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.ChannelMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.channel_id().size() > 0) {
    _internal_set_channel_id(from._internal_channel_id());
  }
  if (from.message_id().size() > 0) {
    _internal_set_message_id(from._internal_message_id());
  }
  if (from.sender_id().size() > 0) {
    _internal_set_sender_id(from._internal_sender_id());
  }
  if (from.username().size() > 0) {
    _internal_set_username(from._internal_username());
  }
  if (from.content().size() > 0) {
    _internal_set_content(from._internal_content());
  }
  if (from.room_name().size() > 0) {
    _internal_set_room_name(from._internal_room_name());
  }
  if (from.group_id().size() > 0) {
    _internal_set_group_id(from._internal_group_id());
  }
  if (from.user_id_one().size() > 0) {
    _internal_set_user_id_one(from._internal_user_id_one());
  }
  if (from.user_id_two().size() > 0) {
    _internal_set_user_id_two(from._internal_user_id_two());
  }
  if (from.has_code()) {
    _internal_mutable_code()->PROTOBUF_NAMESPACE_ID::Int32Value::MergeFrom(from._internal_code());
  }
  if (from.has_create_time()) {
    _internal_mutable_create_time()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_create_time());
  }
  if (from.has_update_time()) {
    _internal_mutable_update_time()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_update_time());
  }
  if (from.has_persistent()) {
    _internal_mutable_persistent()->PROTOBUF_NAMESPACE_ID::BoolValue::MergeFrom(from._internal_persistent());
  }
}

void ChannelMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.ChannelMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChannelMessage::CopyFrom(const ChannelMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.ChannelMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelMessage::IsInitialized() const {
  return true;
}

void ChannelMessage::InternalSwap(ChannelMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  channel_id_.Swap(&other->channel_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  message_id_.Swap(&other->message_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sender_id_.Swap(&other->sender_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  username_.Swap(&other->username_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  content_.Swap(&other->content_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  room_name_.Swap(&other->room_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  group_id_.Swap(&other->group_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_id_one_.Swap(&other->user_id_one_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_id_two_.Swap(&other->user_id_two_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChannelMessage, persistent_)
      + sizeof(ChannelMessage::persistent_)
      - PROTOBUF_FIELD_OFFSET(ChannelMessage, code_)>(
          reinterpret_cast<char*>(&code_),
          reinterpret_cast<char*>(&other->code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChannelMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ChannelMessageList::_Internal {
 public:
};

ChannelMessageList::ChannelMessageList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  messages_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nakama.api.ChannelMessageList)
}
ChannelMessageList::ChannelMessageList(const ChannelMessageList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      messages_(from.messages_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  next_cursor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_next_cursor().empty()) {
    next_cursor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_next_cursor(), 
      GetArena());
  }
  prev_cursor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_prev_cursor().empty()) {
    prev_cursor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_prev_cursor(), 
      GetArena());
  }
  cacheable_cursor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cacheable_cursor().empty()) {
    cacheable_cursor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_cacheable_cursor(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:nakama.api.ChannelMessageList)
}

void ChannelMessageList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChannelMessageList_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  next_cursor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  prev_cursor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cacheable_cursor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ChannelMessageList::~ChannelMessageList() {
  // @@protoc_insertion_point(destructor:nakama.api.ChannelMessageList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChannelMessageList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  next_cursor_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  prev_cursor_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cacheable_cursor_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ChannelMessageList::ArenaDtor(void* object) {
  ChannelMessageList* _this = reinterpret_cast< ChannelMessageList* >(object);
  (void)_this;
}
void ChannelMessageList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChannelMessageList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChannelMessageList& ChannelMessageList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChannelMessageList_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  return *internal_default_instance();
}


void ChannelMessageList::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.ChannelMessageList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  messages_.Clear();
  next_cursor_.ClearToEmpty();
  prev_cursor_.ClearToEmpty();
  cacheable_cursor_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChannelMessageList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .nakama.api.ChannelMessage messages = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_messages(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // string next_cursor = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_next_cursor();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.ChannelMessageList.next_cursor"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string prev_cursor = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_prev_cursor();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.ChannelMessageList.prev_cursor"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string cacheable_cursor = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_cacheable_cursor();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.ChannelMessageList.cacheable_cursor"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChannelMessageList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.ChannelMessageList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .nakama.api.ChannelMessage messages = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_messages_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_messages(i), target, stream);
  }

  // string next_cursor = 2;
  if (this->next_cursor().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_next_cursor().data(), static_cast<int>(this->_internal_next_cursor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.ChannelMessageList.next_cursor");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_next_cursor(), target);
  }

  // string prev_cursor = 3;
  if (this->prev_cursor().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_prev_cursor().data(), static_cast<int>(this->_internal_prev_cursor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.ChannelMessageList.prev_cursor");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_prev_cursor(), target);
  }

  // string cacheable_cursor = 4;
  if (this->cacheable_cursor().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cacheable_cursor().data(), static_cast<int>(this->_internal_cacheable_cursor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.ChannelMessageList.cacheable_cursor");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_cacheable_cursor(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.ChannelMessageList)
  return target;
}

size_t ChannelMessageList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.ChannelMessageList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .nakama.api.ChannelMessage messages = 1;
  total_size += 1UL * this->_internal_messages_size();
  for (const auto& msg : this->messages_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string next_cursor = 2;
  if (this->next_cursor().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_next_cursor());
  }

  // string prev_cursor = 3;
  if (this->prev_cursor().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_prev_cursor());
  }

  // string cacheable_cursor = 4;
  if (this->cacheable_cursor().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cacheable_cursor());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChannelMessageList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.ChannelMessageList)
  GOOGLE_DCHECK_NE(&from, this);
  const ChannelMessageList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChannelMessageList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.ChannelMessageList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.ChannelMessageList)
    MergeFrom(*source);
  }
}

void ChannelMessageList::MergeFrom(const ChannelMessageList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.ChannelMessageList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  messages_.MergeFrom(from.messages_);
  if (from.next_cursor().size() > 0) {
    _internal_set_next_cursor(from._internal_next_cursor());
  }
  if (from.prev_cursor().size() > 0) {
    _internal_set_prev_cursor(from._internal_prev_cursor());
  }
  if (from.cacheable_cursor().size() > 0) {
    _internal_set_cacheable_cursor(from._internal_cacheable_cursor());
  }
}

void ChannelMessageList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.ChannelMessageList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChannelMessageList::CopyFrom(const ChannelMessageList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.ChannelMessageList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelMessageList::IsInitialized() const {
  return true;
}

void ChannelMessageList::InternalSwap(ChannelMessageList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  messages_.InternalSwap(&other->messages_);
  next_cursor_.Swap(&other->next_cursor_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  prev_cursor_.Swap(&other->prev_cursor_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  cacheable_cursor_.Swap(&other->cacheable_cursor_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ChannelMessageList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CreateGroupRequest::_Internal {
 public:
};

CreateGroupRequest::CreateGroupRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nakama.api.CreateGroupRequest)
}
CreateGroupRequest::CreateGroupRequest(const CreateGroupRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_description(), 
      GetArena());
  }
  lang_tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_lang_tag().empty()) {
    lang_tag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_lang_tag(), 
      GetArena());
  }
  avatar_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_avatar_url().empty()) {
    avatar_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_avatar_url(), 
      GetArena());
  }
  ::memcpy(&open_, &from.open_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_count_) -
    reinterpret_cast<char*>(&open_)) + sizeof(max_count_));
  // @@protoc_insertion_point(copy_constructor:nakama.api.CreateGroupRequest)
}

void CreateGroupRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateGroupRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lang_tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  avatar_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&open_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&max_count_) -
      reinterpret_cast<char*>(&open_)) + sizeof(max_count_));
}

CreateGroupRequest::~CreateGroupRequest() {
  // @@protoc_insertion_point(destructor:nakama.api.CreateGroupRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CreateGroupRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lang_tag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  avatar_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CreateGroupRequest::ArenaDtor(void* object) {
  CreateGroupRequest* _this = reinterpret_cast< CreateGroupRequest* >(object);
  (void)_this;
}
void CreateGroupRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateGroupRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateGroupRequest& CreateGroupRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateGroupRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  return *internal_default_instance();
}


void CreateGroupRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.CreateGroupRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  description_.ClearToEmpty();
  lang_tag_.ClearToEmpty();
  avatar_url_.ClearToEmpty();
  ::memset(&open_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_count_) -
      reinterpret_cast<char*>(&open_)) + sizeof(max_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateGroupRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.CreateGroupRequest.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string description = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.CreateGroupRequest.description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string lang_tag = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_lang_tag();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.CreateGroupRequest.lang_tag"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string avatar_url = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_avatar_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.CreateGroupRequest.avatar_url"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool open = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          open_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 max_count = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          max_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateGroupRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.CreateGroupRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.CreateGroupRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string description = 2;
  if (this->description().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.CreateGroupRequest.description");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_description(), target);
  }

  // string lang_tag = 3;
  if (this->lang_tag().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_lang_tag().data(), static_cast<int>(this->_internal_lang_tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.CreateGroupRequest.lang_tag");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_lang_tag(), target);
  }

  // string avatar_url = 4;
  if (this->avatar_url().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_avatar_url().data(), static_cast<int>(this->_internal_avatar_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.CreateGroupRequest.avatar_url");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_avatar_url(), target);
  }

  // bool open = 5;
  if (this->open() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_open(), target);
  }

  // int32 max_count = 6;
  if (this->max_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_max_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.CreateGroupRequest)
  return target;
}

size_t CreateGroupRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.CreateGroupRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string description = 2;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // string lang_tag = 3;
  if (this->lang_tag().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_lang_tag());
  }

  // string avatar_url = 4;
  if (this->avatar_url().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_avatar_url());
  }

  // bool open = 5;
  if (this->open() != 0) {
    total_size += 1 + 1;
  }

  // int32 max_count = 6;
  if (this->max_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_max_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateGroupRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.CreateGroupRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateGroupRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateGroupRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.CreateGroupRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.CreateGroupRequest)
    MergeFrom(*source);
  }
}

void CreateGroupRequest::MergeFrom(const CreateGroupRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.CreateGroupRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.description().size() > 0) {
    _internal_set_description(from._internal_description());
  }
  if (from.lang_tag().size() > 0) {
    _internal_set_lang_tag(from._internal_lang_tag());
  }
  if (from.avatar_url().size() > 0) {
    _internal_set_avatar_url(from._internal_avatar_url());
  }
  if (from.open() != 0) {
    _internal_set_open(from._internal_open());
  }
  if (from.max_count() != 0) {
    _internal_set_max_count(from._internal_max_count());
  }
}

void CreateGroupRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.CreateGroupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateGroupRequest::CopyFrom(const CreateGroupRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.CreateGroupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateGroupRequest::IsInitialized() const {
  return true;
}

void CreateGroupRequest::InternalSwap(CreateGroupRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  lang_tag_.Swap(&other->lang_tag_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  avatar_url_.Swap(&other->avatar_url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CreateGroupRequest, max_count_)
      + sizeof(CreateGroupRequest::max_count_)
      - PROTOBUF_FIELD_OFFSET(CreateGroupRequest, open_)>(
          reinterpret_cast<char*>(&open_),
          reinterpret_cast<char*>(&other->open_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateGroupRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DeleteFriendsRequest::_Internal {
 public:
};

DeleteFriendsRequest::DeleteFriendsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  ids_(arena),
  usernames_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nakama.api.DeleteFriendsRequest)
}
DeleteFriendsRequest::DeleteFriendsRequest(const DeleteFriendsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      ids_(from.ids_),
      usernames_(from.usernames_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:nakama.api.DeleteFriendsRequest)
}

void DeleteFriendsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeleteFriendsRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
}

DeleteFriendsRequest::~DeleteFriendsRequest() {
  // @@protoc_insertion_point(destructor:nakama.api.DeleteFriendsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeleteFriendsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DeleteFriendsRequest::ArenaDtor(void* object) {
  DeleteFriendsRequest* _this = reinterpret_cast< DeleteFriendsRequest* >(object);
  (void)_this;
}
void DeleteFriendsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteFriendsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteFriendsRequest& DeleteFriendsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteFriendsRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  return *internal_default_instance();
}


void DeleteFriendsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.DeleteFriendsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ids_.Clear();
  usernames_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteFriendsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.DeleteFriendsRequest.ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string usernames = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_usernames();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.DeleteFriendsRequest.usernames"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteFriendsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.DeleteFriendsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string ids = 1;
  for (int i = 0, n = this->_internal_ids_size(); i < n; i++) {
    const auto& s = this->_internal_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.DeleteFriendsRequest.ids");
    target = stream->WriteString(1, s, target);
  }

  // repeated string usernames = 2;
  for (int i = 0, n = this->_internal_usernames_size(); i < n; i++) {
    const auto& s = this->_internal_usernames(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.DeleteFriendsRequest.usernames");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.DeleteFriendsRequest)
  return target;
}

size_t DeleteFriendsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.DeleteFriendsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string ids = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(ids_.size());
  for (int i = 0, n = ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      ids_.Get(i));
  }

  // repeated string usernames = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(usernames_.size());
  for (int i = 0, n = usernames_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      usernames_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteFriendsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.DeleteFriendsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteFriendsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteFriendsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.DeleteFriendsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.DeleteFriendsRequest)
    MergeFrom(*source);
  }
}

void DeleteFriendsRequest::MergeFrom(const DeleteFriendsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.DeleteFriendsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ids_.MergeFrom(from.ids_);
  usernames_.MergeFrom(from.usernames_);
}

void DeleteFriendsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.DeleteFriendsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteFriendsRequest::CopyFrom(const DeleteFriendsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.DeleteFriendsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteFriendsRequest::IsInitialized() const {
  return true;
}

void DeleteFriendsRequest::InternalSwap(DeleteFriendsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ids_.InternalSwap(&other->ids_);
  usernames_.InternalSwap(&other->usernames_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteFriendsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DeleteGroupRequest::_Internal {
 public:
};

DeleteGroupRequest::DeleteGroupRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nakama.api.DeleteGroupRequest)
}
DeleteGroupRequest::DeleteGroupRequest(const DeleteGroupRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  group_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_group_id().empty()) {
    group_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_group_id(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:nakama.api.DeleteGroupRequest)
}

void DeleteGroupRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeleteGroupRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  group_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DeleteGroupRequest::~DeleteGroupRequest() {
  // @@protoc_insertion_point(destructor:nakama.api.DeleteGroupRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeleteGroupRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  group_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeleteGroupRequest::ArenaDtor(void* object) {
  DeleteGroupRequest* _this = reinterpret_cast< DeleteGroupRequest* >(object);
  (void)_this;
}
void DeleteGroupRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteGroupRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteGroupRequest& DeleteGroupRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteGroupRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  return *internal_default_instance();
}


void DeleteGroupRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.DeleteGroupRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  group_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteGroupRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string group_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_group_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.DeleteGroupRequest.group_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteGroupRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.DeleteGroupRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string group_id = 1;
  if (this->group_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_group_id().data(), static_cast<int>(this->_internal_group_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.DeleteGroupRequest.group_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_group_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.DeleteGroupRequest)
  return target;
}

size_t DeleteGroupRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.DeleteGroupRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string group_id = 1;
  if (this->group_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_group_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteGroupRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.DeleteGroupRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteGroupRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteGroupRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.DeleteGroupRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.DeleteGroupRequest)
    MergeFrom(*source);
  }
}

void DeleteGroupRequest::MergeFrom(const DeleteGroupRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.DeleteGroupRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.group_id().size() > 0) {
    _internal_set_group_id(from._internal_group_id());
  }
}

void DeleteGroupRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.DeleteGroupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteGroupRequest::CopyFrom(const DeleteGroupRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.DeleteGroupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteGroupRequest::IsInitialized() const {
  return true;
}

void DeleteGroupRequest::InternalSwap(DeleteGroupRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  group_id_.Swap(&other->group_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteGroupRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DeleteLeaderboardRecordRequest::_Internal {
 public:
};

DeleteLeaderboardRecordRequest::DeleteLeaderboardRecordRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nakama.api.DeleteLeaderboardRecordRequest)
}
DeleteLeaderboardRecordRequest::DeleteLeaderboardRecordRequest(const DeleteLeaderboardRecordRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  leaderboard_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_leaderboard_id().empty()) {
    leaderboard_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_leaderboard_id(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:nakama.api.DeleteLeaderboardRecordRequest)
}

void DeleteLeaderboardRecordRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeleteLeaderboardRecordRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  leaderboard_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DeleteLeaderboardRecordRequest::~DeleteLeaderboardRecordRequest() {
  // @@protoc_insertion_point(destructor:nakama.api.DeleteLeaderboardRecordRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeleteLeaderboardRecordRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  leaderboard_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeleteLeaderboardRecordRequest::ArenaDtor(void* object) {
  DeleteLeaderboardRecordRequest* _this = reinterpret_cast< DeleteLeaderboardRecordRequest* >(object);
  (void)_this;
}
void DeleteLeaderboardRecordRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteLeaderboardRecordRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteLeaderboardRecordRequest& DeleteLeaderboardRecordRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteLeaderboardRecordRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  return *internal_default_instance();
}


void DeleteLeaderboardRecordRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.DeleteLeaderboardRecordRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  leaderboard_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteLeaderboardRecordRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string leaderboard_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_leaderboard_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.DeleteLeaderboardRecordRequest.leaderboard_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteLeaderboardRecordRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.DeleteLeaderboardRecordRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string leaderboard_id = 1;
  if (this->leaderboard_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_leaderboard_id().data(), static_cast<int>(this->_internal_leaderboard_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.DeleteLeaderboardRecordRequest.leaderboard_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_leaderboard_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.DeleteLeaderboardRecordRequest)
  return target;
}

size_t DeleteLeaderboardRecordRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.DeleteLeaderboardRecordRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string leaderboard_id = 1;
  if (this->leaderboard_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_leaderboard_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteLeaderboardRecordRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.DeleteLeaderboardRecordRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteLeaderboardRecordRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteLeaderboardRecordRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.DeleteLeaderboardRecordRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.DeleteLeaderboardRecordRequest)
    MergeFrom(*source);
  }
}

void DeleteLeaderboardRecordRequest::MergeFrom(const DeleteLeaderboardRecordRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.DeleteLeaderboardRecordRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.leaderboard_id().size() > 0) {
    _internal_set_leaderboard_id(from._internal_leaderboard_id());
  }
}

void DeleteLeaderboardRecordRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.DeleteLeaderboardRecordRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteLeaderboardRecordRequest::CopyFrom(const DeleteLeaderboardRecordRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.DeleteLeaderboardRecordRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteLeaderboardRecordRequest::IsInitialized() const {
  return true;
}

void DeleteLeaderboardRecordRequest::InternalSwap(DeleteLeaderboardRecordRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  leaderboard_id_.Swap(&other->leaderboard_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteLeaderboardRecordRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DeleteNotificationsRequest::_Internal {
 public:
};

DeleteNotificationsRequest::DeleteNotificationsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nakama.api.DeleteNotificationsRequest)
}
DeleteNotificationsRequest::DeleteNotificationsRequest(const DeleteNotificationsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      ids_(from.ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:nakama.api.DeleteNotificationsRequest)
}

void DeleteNotificationsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeleteNotificationsRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
}

DeleteNotificationsRequest::~DeleteNotificationsRequest() {
  // @@protoc_insertion_point(destructor:nakama.api.DeleteNotificationsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeleteNotificationsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DeleteNotificationsRequest::ArenaDtor(void* object) {
  DeleteNotificationsRequest* _this = reinterpret_cast< DeleteNotificationsRequest* >(object);
  (void)_this;
}
void DeleteNotificationsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteNotificationsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteNotificationsRequest& DeleteNotificationsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteNotificationsRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  return *internal_default_instance();
}


void DeleteNotificationsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.DeleteNotificationsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ids_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteNotificationsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.DeleteNotificationsRequest.ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteNotificationsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.DeleteNotificationsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string ids = 1;
  for (int i = 0, n = this->_internal_ids_size(); i < n; i++) {
    const auto& s = this->_internal_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.DeleteNotificationsRequest.ids");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.DeleteNotificationsRequest)
  return target;
}

size_t DeleteNotificationsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.DeleteNotificationsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string ids = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(ids_.size());
  for (int i = 0, n = ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      ids_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteNotificationsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.DeleteNotificationsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteNotificationsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteNotificationsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.DeleteNotificationsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.DeleteNotificationsRequest)
    MergeFrom(*source);
  }
}

void DeleteNotificationsRequest::MergeFrom(const DeleteNotificationsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.DeleteNotificationsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ids_.MergeFrom(from.ids_);
}

void DeleteNotificationsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.DeleteNotificationsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteNotificationsRequest::CopyFrom(const DeleteNotificationsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.DeleteNotificationsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteNotificationsRequest::IsInitialized() const {
  return true;
}

void DeleteNotificationsRequest::InternalSwap(DeleteNotificationsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ids_.InternalSwap(&other->ids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteNotificationsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DeleteStorageObjectId::_Internal {
 public:
};

DeleteStorageObjectId::DeleteStorageObjectId(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nakama.api.DeleteStorageObjectId)
}
DeleteStorageObjectId::DeleteStorageObjectId(const DeleteStorageObjectId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  collection_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_collection().empty()) {
    collection_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_collection(), 
      GetArena());
  }
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key(), 
      GetArena());
  }
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_version().empty()) {
    version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_version(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:nakama.api.DeleteStorageObjectId)
}

void DeleteStorageObjectId::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeleteStorageObjectId_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  collection_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DeleteStorageObjectId::~DeleteStorageObjectId() {
  // @@protoc_insertion_point(destructor:nakama.api.DeleteStorageObjectId)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeleteStorageObjectId::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  collection_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeleteStorageObjectId::ArenaDtor(void* object) {
  DeleteStorageObjectId* _this = reinterpret_cast< DeleteStorageObjectId* >(object);
  (void)_this;
}
void DeleteStorageObjectId::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteStorageObjectId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteStorageObjectId& DeleteStorageObjectId::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteStorageObjectId_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  return *internal_default_instance();
}


void DeleteStorageObjectId::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.DeleteStorageObjectId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  collection_.ClearToEmpty();
  key_.ClearToEmpty();
  version_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteStorageObjectId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string collection = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_collection();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.DeleteStorageObjectId.collection"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.DeleteStorageObjectId.key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.DeleteStorageObjectId.version"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteStorageObjectId::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.DeleteStorageObjectId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string collection = 1;
  if (this->collection().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_collection().data(), static_cast<int>(this->_internal_collection().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.DeleteStorageObjectId.collection");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_collection(), target);
  }

  // string key = 2;
  if (this->key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.DeleteStorageObjectId.key");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_key(), target);
  }

  // string version = 3;
  if (this->version().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.DeleteStorageObjectId.version");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.DeleteStorageObjectId)
  return target;
}

size_t DeleteStorageObjectId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.DeleteStorageObjectId)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string collection = 1;
  if (this->collection().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_collection());
  }

  // string key = 2;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // string version = 3;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteStorageObjectId::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.DeleteStorageObjectId)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteStorageObjectId* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteStorageObjectId>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.DeleteStorageObjectId)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.DeleteStorageObjectId)
    MergeFrom(*source);
  }
}

void DeleteStorageObjectId::MergeFrom(const DeleteStorageObjectId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.DeleteStorageObjectId)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.collection().size() > 0) {
    _internal_set_collection(from._internal_collection());
  }
  if (from.key().size() > 0) {
    _internal_set_key(from._internal_key());
  }
  if (from.version().size() > 0) {
    _internal_set_version(from._internal_version());
  }
}

void DeleteStorageObjectId::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.DeleteStorageObjectId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteStorageObjectId::CopyFrom(const DeleteStorageObjectId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.DeleteStorageObjectId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteStorageObjectId::IsInitialized() const {
  return true;
}

void DeleteStorageObjectId::InternalSwap(DeleteStorageObjectId* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  collection_.Swap(&other->collection_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  version_.Swap(&other->version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteStorageObjectId::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DeleteStorageObjectsRequest::_Internal {
 public:
};

DeleteStorageObjectsRequest::DeleteStorageObjectsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  object_ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nakama.api.DeleteStorageObjectsRequest)
}
DeleteStorageObjectsRequest::DeleteStorageObjectsRequest(const DeleteStorageObjectsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      object_ids_(from.object_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:nakama.api.DeleteStorageObjectsRequest)
}

void DeleteStorageObjectsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeleteStorageObjectsRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
}

DeleteStorageObjectsRequest::~DeleteStorageObjectsRequest() {
  // @@protoc_insertion_point(destructor:nakama.api.DeleteStorageObjectsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeleteStorageObjectsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DeleteStorageObjectsRequest::ArenaDtor(void* object) {
  DeleteStorageObjectsRequest* _this = reinterpret_cast< DeleteStorageObjectsRequest* >(object);
  (void)_this;
}
void DeleteStorageObjectsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteStorageObjectsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteStorageObjectsRequest& DeleteStorageObjectsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteStorageObjectsRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  return *internal_default_instance();
}


void DeleteStorageObjectsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.DeleteStorageObjectsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  object_ids_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteStorageObjectsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .nakama.api.DeleteStorageObjectId object_ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_object_ids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteStorageObjectsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.DeleteStorageObjectsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .nakama.api.DeleteStorageObjectId object_ids = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_object_ids_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_object_ids(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.DeleteStorageObjectsRequest)
  return target;
}

size_t DeleteStorageObjectsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.DeleteStorageObjectsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .nakama.api.DeleteStorageObjectId object_ids = 1;
  total_size += 1UL * this->_internal_object_ids_size();
  for (const auto& msg : this->object_ids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteStorageObjectsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.DeleteStorageObjectsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteStorageObjectsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteStorageObjectsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.DeleteStorageObjectsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.DeleteStorageObjectsRequest)
    MergeFrom(*source);
  }
}

void DeleteStorageObjectsRequest::MergeFrom(const DeleteStorageObjectsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.DeleteStorageObjectsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  object_ids_.MergeFrom(from.object_ids_);
}

void DeleteStorageObjectsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.DeleteStorageObjectsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteStorageObjectsRequest::CopyFrom(const DeleteStorageObjectsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.DeleteStorageObjectsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteStorageObjectsRequest::IsInitialized() const {
  return true;
}

void DeleteStorageObjectsRequest::InternalSwap(DeleteStorageObjectsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  object_ids_.InternalSwap(&other->object_ids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteStorageObjectsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

Event_PropertiesEntry_DoNotUse::Event_PropertiesEntry_DoNotUse() {}
Event_PropertiesEntry_DoNotUse::Event_PropertiesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Event_PropertiesEntry_DoNotUse::MergeFrom(const Event_PropertiesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Event_PropertiesEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void Event_PropertiesEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

class Event::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const Event* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
Event::_Internal::timestamp(const Event* msg) {
  return *msg->timestamp_;
}
void Event::clear_timestamp() {
  if (GetArena() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
}
Event::Event(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  properties_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nakama.api.Event)
}
Event::Event(const Event& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  properties_.MergeFrom(from.properties_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  if (from._internal_has_timestamp()) {
    timestamp_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = nullptr;
  }
  external_ = from.external_;
  // @@protoc_insertion_point(copy_constructor:nakama.api.Event)
}

void Event::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Event_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&external_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(external_));
}

Event::~Event() {
  // @@protoc_insertion_point(destructor:nakama.api.Event)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Event::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete timestamp_;
}

void Event::ArenaDtor(void* object) {
  Event* _this = reinterpret_cast< Event* >(object);
  (void)_this;
}
void Event::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Event::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Event& Event::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Event_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  return *internal_default_instance();
}


void Event::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.Event)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  properties_.Clear();
  name_.ClearToEmpty();
  if (GetArena() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
  external_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Event::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.Event.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> properties = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&properties_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool external = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          external_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Event::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.Event)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.Event.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // map<string, string> properties = 2;
  if (!this->_internal_properties().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "nakama.api.Event.PropertiesEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "nakama.api.Event.PropertiesEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_properties().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_properties().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_properties().begin();
          it != this->_internal_properties().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Event_PropertiesEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_properties().begin();
          it != this->_internal_properties().end(); ++it) {
        target = Event_PropertiesEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // .google.protobuf.Timestamp timestamp = 3;
  if (this->has_timestamp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::timestamp(this), target, stream);
  }

  // bool external = 4;
  if (this->external() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_external(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.Event)
  return target;
}

size_t Event::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.Event)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> properties = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_properties_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_properties().begin();
      it != this->_internal_properties().end(); ++it) {
    total_size += Event_PropertiesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .google.protobuf.Timestamp timestamp = 3;
  if (this->has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  // bool external = 4;
  if (this->external() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Event::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.Event)
  GOOGLE_DCHECK_NE(&from, this);
  const Event* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Event>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.Event)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.Event)
    MergeFrom(*source);
  }
}

void Event::MergeFrom(const Event& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.Event)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  properties_.MergeFrom(from.properties_);
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.has_timestamp()) {
    _internal_mutable_timestamp()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_timestamp());
  }
  if (from.external() != 0) {
    _internal_set_external(from._internal_external());
  }
}

void Event::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.Event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Event::CopyFrom(const Event& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.Event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Event::IsInitialized() const {
  return true;
}

void Event::InternalSwap(Event* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  properties_.Swap(&other->properties_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Event, external_)
      + sizeof(Event::external_)
      - PROTOBUF_FIELD_OFFSET(Event, timestamp_)>(
          reinterpret_cast<char*>(&timestamp_),
          reinterpret_cast<char*>(&other->timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Event::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Friend::_Internal {
 public:
  static const ::nakama::api::User& user(const Friend* msg);
  static const PROTOBUF_NAMESPACE_ID::Int32Value& state(const Friend* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& update_time(const Friend* msg);
};

const ::nakama::api::User&
Friend::_Internal::user(const Friend* msg) {
  return *msg->user_;
}
const PROTOBUF_NAMESPACE_ID::Int32Value&
Friend::_Internal::state(const Friend* msg) {
  return *msg->state_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
Friend::_Internal::update_time(const Friend* msg) {
  return *msg->update_time_;
}
void Friend::clear_state() {
  if (GetArena() == nullptr && state_ != nullptr) {
    delete state_;
  }
  state_ = nullptr;
}
void Friend::clear_update_time() {
  if (GetArena() == nullptr && update_time_ != nullptr) {
    delete update_time_;
  }
  update_time_ = nullptr;
}
Friend::Friend(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nakama.api.Friend)
}
Friend::Friend(const Friend& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user()) {
    user_ = new ::nakama::api::User(*from.user_);
  } else {
    user_ = nullptr;
  }
  if (from._internal_has_state()) {
    state_ = new PROTOBUF_NAMESPACE_ID::Int32Value(*from.state_);
  } else {
    state_ = nullptr;
  }
  if (from._internal_has_update_time()) {
    update_time_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.update_time_);
  } else {
    update_time_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:nakama.api.Friend)
}

void Friend::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Friend_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&user_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&update_time_) -
      reinterpret_cast<char*>(&user_)) + sizeof(update_time_));
}

Friend::~Friend() {
  // @@protoc_insertion_point(destructor:nakama.api.Friend)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Friend::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete user_;
  if (this != internal_default_instance()) delete state_;
  if (this != internal_default_instance()) delete update_time_;
}

void Friend::ArenaDtor(void* object) {
  Friend* _this = reinterpret_cast< Friend* >(object);
  (void)_this;
}
void Friend::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Friend::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Friend& Friend::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Friend_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  return *internal_default_instance();
}


void Friend::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.Friend)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && user_ != nullptr) {
    delete user_;
  }
  user_ = nullptr;
  if (GetArena() == nullptr && state_ != nullptr) {
    delete state_;
  }
  state_ = nullptr;
  if (GetArena() == nullptr && update_time_ != nullptr) {
    delete update_time_;
  }
  update_time_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Friend::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .nakama.api.User user = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Int32Value state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp update_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_update_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Friend::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.Friend)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .nakama.api.User user = 1;
  if (this->has_user()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user(this), target, stream);
  }

  // .google.protobuf.Int32Value state = 2;
  if (this->has_state()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::state(this), target, stream);
  }

  // .google.protobuf.Timestamp update_time = 3;
  if (this->has_update_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::update_time(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.Friend)
  return target;
}

size_t Friend::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.Friend)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .nakama.api.User user = 1;
  if (this->has_user()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_);
  }

  // .google.protobuf.Int32Value state = 2;
  if (this->has_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *state_);
  }

  // .google.protobuf.Timestamp update_time = 3;
  if (this->has_update_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *update_time_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Friend::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.Friend)
  GOOGLE_DCHECK_NE(&from, this);
  const Friend* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Friend>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.Friend)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.Friend)
    MergeFrom(*source);
  }
}

void Friend::MergeFrom(const Friend& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.Friend)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_user()) {
    _internal_mutable_user()->::nakama::api::User::MergeFrom(from._internal_user());
  }
  if (from.has_state()) {
    _internal_mutable_state()->PROTOBUF_NAMESPACE_ID::Int32Value::MergeFrom(from._internal_state());
  }
  if (from.has_update_time()) {
    _internal_mutable_update_time()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_update_time());
  }
}

void Friend::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.Friend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Friend::CopyFrom(const Friend& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.Friend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Friend::IsInitialized() const {
  return true;
}

void Friend::InternalSwap(Friend* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Friend, update_time_)
      + sizeof(Friend::update_time_)
      - PROTOBUF_FIELD_OFFSET(Friend, user_)>(
          reinterpret_cast<char*>(&user_),
          reinterpret_cast<char*>(&other->user_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Friend::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FriendList::_Internal {
 public:
};

FriendList::FriendList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  friends_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nakama.api.FriendList)
}
FriendList::FriendList(const FriendList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      friends_(from.friends_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  cursor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cursor().empty()) {
    cursor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_cursor(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:nakama.api.FriendList)
}

void FriendList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FriendList_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  cursor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

FriendList::~FriendList() {
  // @@protoc_insertion_point(destructor:nakama.api.FriendList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FriendList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  cursor_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FriendList::ArenaDtor(void* object) {
  FriendList* _this = reinterpret_cast< FriendList* >(object);
  (void)_this;
}
void FriendList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FriendList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FriendList& FriendList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FriendList_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  return *internal_default_instance();
}


void FriendList::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.FriendList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  friends_.Clear();
  cursor_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FriendList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .nakama.api.Friend friends = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_friends(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // string cursor = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_cursor();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.FriendList.cursor"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FriendList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.FriendList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .nakama.api.Friend friends = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_friends_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_friends(i), target, stream);
  }

  // string cursor = 2;
  if (this->cursor().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cursor().data(), static_cast<int>(this->_internal_cursor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.FriendList.cursor");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_cursor(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.FriendList)
  return target;
}

size_t FriendList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.FriendList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .nakama.api.Friend friends = 1;
  total_size += 1UL * this->_internal_friends_size();
  for (const auto& msg : this->friends_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string cursor = 2;
  if (this->cursor().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cursor());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FriendList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.FriendList)
  GOOGLE_DCHECK_NE(&from, this);
  const FriendList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FriendList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.FriendList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.FriendList)
    MergeFrom(*source);
  }
}

void FriendList::MergeFrom(const FriendList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.FriendList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  friends_.MergeFrom(from.friends_);
  if (from.cursor().size() > 0) {
    _internal_set_cursor(from._internal_cursor());
  }
}

void FriendList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.FriendList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendList::CopyFrom(const FriendList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.FriendList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendList::IsInitialized() const {
  return true;
}

void FriendList::InternalSwap(FriendList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  friends_.InternalSwap(&other->friends_);
  cursor_.Swap(&other->cursor_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata FriendList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetUsersRequest::_Internal {
 public:
};

GetUsersRequest::GetUsersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  ids_(arena),
  usernames_(arena),
  facebook_ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nakama.api.GetUsersRequest)
}
GetUsersRequest::GetUsersRequest(const GetUsersRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      ids_(from.ids_),
      usernames_(from.usernames_),
      facebook_ids_(from.facebook_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:nakama.api.GetUsersRequest)
}

void GetUsersRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetUsersRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
}

GetUsersRequest::~GetUsersRequest() {
  // @@protoc_insertion_point(destructor:nakama.api.GetUsersRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetUsersRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetUsersRequest::ArenaDtor(void* object) {
  GetUsersRequest* _this = reinterpret_cast< GetUsersRequest* >(object);
  (void)_this;
}
void GetUsersRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetUsersRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetUsersRequest& GetUsersRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetUsersRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  return *internal_default_instance();
}


void GetUsersRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.GetUsersRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ids_.Clear();
  usernames_.Clear();
  facebook_ids_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetUsersRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.GetUsersRequest.ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string usernames = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_usernames();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.GetUsersRequest.usernames"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string facebook_ids = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_facebook_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.GetUsersRequest.facebook_ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetUsersRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.GetUsersRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string ids = 1;
  for (int i = 0, n = this->_internal_ids_size(); i < n; i++) {
    const auto& s = this->_internal_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.GetUsersRequest.ids");
    target = stream->WriteString(1, s, target);
  }

  // repeated string usernames = 2;
  for (int i = 0, n = this->_internal_usernames_size(); i < n; i++) {
    const auto& s = this->_internal_usernames(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.GetUsersRequest.usernames");
    target = stream->WriteString(2, s, target);
  }

  // repeated string facebook_ids = 3;
  for (int i = 0, n = this->_internal_facebook_ids_size(); i < n; i++) {
    const auto& s = this->_internal_facebook_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.GetUsersRequest.facebook_ids");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.GetUsersRequest)
  return target;
}

size_t GetUsersRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.GetUsersRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string ids = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(ids_.size());
  for (int i = 0, n = ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      ids_.Get(i));
  }

  // repeated string usernames = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(usernames_.size());
  for (int i = 0, n = usernames_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      usernames_.Get(i));
  }

  // repeated string facebook_ids = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(facebook_ids_.size());
  for (int i = 0, n = facebook_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      facebook_ids_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetUsersRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.GetUsersRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetUsersRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetUsersRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.GetUsersRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.GetUsersRequest)
    MergeFrom(*source);
  }
}

void GetUsersRequest::MergeFrom(const GetUsersRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.GetUsersRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ids_.MergeFrom(from.ids_);
  usernames_.MergeFrom(from.usernames_);
  facebook_ids_.MergeFrom(from.facebook_ids_);
}

void GetUsersRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.GetUsersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetUsersRequest::CopyFrom(const GetUsersRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.GetUsersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUsersRequest::IsInitialized() const {
  return true;
}

void GetUsersRequest::InternalSwap(GetUsersRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ids_.InternalSwap(&other->ids_);
  usernames_.InternalSwap(&other->usernames_);
  facebook_ids_.InternalSwap(&other->facebook_ids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetUsersRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Group::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::BoolValue& open(const Group* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& create_time(const Group* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& update_time(const Group* msg);
};

const PROTOBUF_NAMESPACE_ID::BoolValue&
Group::_Internal::open(const Group* msg) {
  return *msg->open_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
Group::_Internal::create_time(const Group* msg) {
  return *msg->create_time_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
Group::_Internal::update_time(const Group* msg) {
  return *msg->update_time_;
}
void Group::clear_open() {
  if (GetArena() == nullptr && open_ != nullptr) {
    delete open_;
  }
  open_ = nullptr;
}
void Group::clear_create_time() {
  if (GetArena() == nullptr && create_time_ != nullptr) {
    delete create_time_;
  }
  create_time_ = nullptr;
}
void Group::clear_update_time() {
  if (GetArena() == nullptr && update_time_ != nullptr) {
    delete update_time_;
  }
  update_time_ = nullptr;
}
Group::Group(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nakama.api.Group)
}
Group::Group(const Group& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArena());
  }
  creator_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_creator_id().empty()) {
    creator_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_creator_id(), 
      GetArena());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_description(), 
      GetArena());
  }
  lang_tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_lang_tag().empty()) {
    lang_tag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_lang_tag(), 
      GetArena());
  }
  metadata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_metadata().empty()) {
    metadata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_metadata(), 
      GetArena());
  }
  avatar_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_avatar_url().empty()) {
    avatar_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_avatar_url(), 
      GetArena());
  }
  if (from._internal_has_open()) {
    open_ = new PROTOBUF_NAMESPACE_ID::BoolValue(*from.open_);
  } else {
    open_ = nullptr;
  }
  if (from._internal_has_create_time()) {
    create_time_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.create_time_);
  } else {
    create_time_ = nullptr;
  }
  if (from._internal_has_update_time()) {
    update_time_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.update_time_);
  } else {
    update_time_ = nullptr;
  }
  ::memcpy(&edge_count_, &from.edge_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_count_) -
    reinterpret_cast<char*>(&edge_count_)) + sizeof(max_count_));
  // @@protoc_insertion_point(copy_constructor:nakama.api.Group)
}

void Group::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Group_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  creator_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lang_tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  metadata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  avatar_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&open_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&max_count_) -
      reinterpret_cast<char*>(&open_)) + sizeof(max_count_));
}

Group::~Group() {
  // @@protoc_insertion_point(destructor:nakama.api.Group)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Group::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  creator_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lang_tag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  metadata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  avatar_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete open_;
  if (this != internal_default_instance()) delete create_time_;
  if (this != internal_default_instance()) delete update_time_;
}

void Group::ArenaDtor(void* object) {
  Group* _this = reinterpret_cast< Group* >(object);
  (void)_this;
}
void Group::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Group::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Group& Group::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Group_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  return *internal_default_instance();
}


void Group::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.Group)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  creator_id_.ClearToEmpty();
  name_.ClearToEmpty();
  description_.ClearToEmpty();
  lang_tag_.ClearToEmpty();
  metadata_.ClearToEmpty();
  avatar_url_.ClearToEmpty();
  if (GetArena() == nullptr && open_ != nullptr) {
    delete open_;
  }
  open_ = nullptr;
  if (GetArena() == nullptr && create_time_ != nullptr) {
    delete create_time_;
  }
  create_time_ = nullptr;
  if (GetArena() == nullptr && update_time_ != nullptr) {
    delete update_time_;
  }
  update_time_ = nullptr;
  ::memset(&edge_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_count_) -
      reinterpret_cast<char*>(&edge_count_)) + sizeof(max_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Group::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.Group.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string creator_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_creator_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.Group.creator_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.Group.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string description = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.Group.description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string lang_tag = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_lang_tag();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.Group.lang_tag"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string metadata = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_metadata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.Group.metadata"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string avatar_url = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_avatar_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.Group.avatar_url"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.BoolValue open = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_open(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 edge_count = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          edge_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 max_count = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          max_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp create_time = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_create_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp update_time = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_update_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Group::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.Group)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.Group.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string creator_id = 2;
  if (this->creator_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_creator_id().data(), static_cast<int>(this->_internal_creator_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.Group.creator_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_creator_id(), target);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.Group.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // string description = 4;
  if (this->description().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.Group.description");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_description(), target);
  }

  // string lang_tag = 5;
  if (this->lang_tag().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_lang_tag().data(), static_cast<int>(this->_internal_lang_tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.Group.lang_tag");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_lang_tag(), target);
  }

  // string metadata = 6;
  if (this->metadata().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_metadata().data(), static_cast<int>(this->_internal_metadata().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.Group.metadata");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_metadata(), target);
  }

  // string avatar_url = 7;
  if (this->avatar_url().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_avatar_url().data(), static_cast<int>(this->_internal_avatar_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.Group.avatar_url");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_avatar_url(), target);
  }

  // .google.protobuf.BoolValue open = 8;
  if (this->has_open()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::open(this), target, stream);
  }

  // int32 edge_count = 9;
  if (this->edge_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_edge_count(), target);
  }

  // int32 max_count = 10;
  if (this->max_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_max_count(), target);
  }

  // .google.protobuf.Timestamp create_time = 11;
  if (this->has_create_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::create_time(this), target, stream);
  }

  // .google.protobuf.Timestamp update_time = 12;
  if (this->has_update_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::update_time(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.Group)
  return target;
}

size_t Group::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.Group)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string creator_id = 2;
  if (this->creator_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_creator_id());
  }

  // string name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string description = 4;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // string lang_tag = 5;
  if (this->lang_tag().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_lang_tag());
  }

  // string metadata = 6;
  if (this->metadata().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_metadata());
  }

  // string avatar_url = 7;
  if (this->avatar_url().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_avatar_url());
  }

  // .google.protobuf.BoolValue open = 8;
  if (this->has_open()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *open_);
  }

  // .google.protobuf.Timestamp create_time = 11;
  if (this->has_create_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *create_time_);
  }

  // .google.protobuf.Timestamp update_time = 12;
  if (this->has_update_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *update_time_);
  }

  // int32 edge_count = 9;
  if (this->edge_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_edge_count());
  }

  // int32 max_count = 10;
  if (this->max_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_max_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Group::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.Group)
  GOOGLE_DCHECK_NE(&from, this);
  const Group* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Group>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.Group)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.Group)
    MergeFrom(*source);
  }
}

void Group::MergeFrom(const Group& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.Group)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.creator_id().size() > 0) {
    _internal_set_creator_id(from._internal_creator_id());
  }
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.description().size() > 0) {
    _internal_set_description(from._internal_description());
  }
  if (from.lang_tag().size() > 0) {
    _internal_set_lang_tag(from._internal_lang_tag());
  }
  if (from.metadata().size() > 0) {
    _internal_set_metadata(from._internal_metadata());
  }
  if (from.avatar_url().size() > 0) {
    _internal_set_avatar_url(from._internal_avatar_url());
  }
  if (from.has_open()) {
    _internal_mutable_open()->PROTOBUF_NAMESPACE_ID::BoolValue::MergeFrom(from._internal_open());
  }
  if (from.has_create_time()) {
    _internal_mutable_create_time()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_create_time());
  }
  if (from.has_update_time()) {
    _internal_mutable_update_time()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_update_time());
  }
  if (from.edge_count() != 0) {
    _internal_set_edge_count(from._internal_edge_count());
  }
  if (from.max_count() != 0) {
    _internal_set_max_count(from._internal_max_count());
  }
}

void Group::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.Group)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Group::CopyFrom(const Group& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.Group)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Group::IsInitialized() const {
  return true;
}

void Group::InternalSwap(Group* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  creator_id_.Swap(&other->creator_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  lang_tag_.Swap(&other->lang_tag_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  metadata_.Swap(&other->metadata_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  avatar_url_.Swap(&other->avatar_url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Group, max_count_)
      + sizeof(Group::max_count_)
      - PROTOBUF_FIELD_OFFSET(Group, open_)>(
          reinterpret_cast<char*>(&open_),
          reinterpret_cast<char*>(&other->open_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Group::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GroupList::_Internal {
 public:
};

GroupList::GroupList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  groups_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nakama.api.GroupList)
}
GroupList::GroupList(const GroupList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      groups_(from.groups_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  cursor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cursor().empty()) {
    cursor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_cursor(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:nakama.api.GroupList)
}

void GroupList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GroupList_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  cursor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GroupList::~GroupList() {
  // @@protoc_insertion_point(destructor:nakama.api.GroupList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GroupList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  cursor_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GroupList::ArenaDtor(void* object) {
  GroupList* _this = reinterpret_cast< GroupList* >(object);
  (void)_this;
}
void GroupList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GroupList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GroupList& GroupList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GroupList_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  return *internal_default_instance();
}


void GroupList::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.GroupList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  groups_.Clear();
  cursor_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GroupList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .nakama.api.Group groups = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_groups(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // string cursor = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_cursor();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.GroupList.cursor"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GroupList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.GroupList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .nakama.api.Group groups = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_groups_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_groups(i), target, stream);
  }

  // string cursor = 2;
  if (this->cursor().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cursor().data(), static_cast<int>(this->_internal_cursor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.GroupList.cursor");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_cursor(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.GroupList)
  return target;
}

size_t GroupList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.GroupList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .nakama.api.Group groups = 1;
  total_size += 1UL * this->_internal_groups_size();
  for (const auto& msg : this->groups_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string cursor = 2;
  if (this->cursor().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cursor());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GroupList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.GroupList)
  GOOGLE_DCHECK_NE(&from, this);
  const GroupList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GroupList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.GroupList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.GroupList)
    MergeFrom(*source);
  }
}

void GroupList::MergeFrom(const GroupList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.GroupList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  groups_.MergeFrom(from.groups_);
  if (from.cursor().size() > 0) {
    _internal_set_cursor(from._internal_cursor());
  }
}

void GroupList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.GroupList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupList::CopyFrom(const GroupList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.GroupList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupList::IsInitialized() const {
  return true;
}

void GroupList::InternalSwap(GroupList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  groups_.InternalSwap(&other->groups_);
  cursor_.Swap(&other->cursor_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata GroupList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GroupUserList_GroupUser::_Internal {
 public:
  static const ::nakama::api::User& user(const GroupUserList_GroupUser* msg);
  static const PROTOBUF_NAMESPACE_ID::Int32Value& state(const GroupUserList_GroupUser* msg);
};

const ::nakama::api::User&
GroupUserList_GroupUser::_Internal::user(const GroupUserList_GroupUser* msg) {
  return *msg->user_;
}
const PROTOBUF_NAMESPACE_ID::Int32Value&
GroupUserList_GroupUser::_Internal::state(const GroupUserList_GroupUser* msg) {
  return *msg->state_;
}
void GroupUserList_GroupUser::clear_state() {
  if (GetArena() == nullptr && state_ != nullptr) {
    delete state_;
  }
  state_ = nullptr;
}
GroupUserList_GroupUser::GroupUserList_GroupUser(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nakama.api.GroupUserList.GroupUser)
}
GroupUserList_GroupUser::GroupUserList_GroupUser(const GroupUserList_GroupUser& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user()) {
    user_ = new ::nakama::api::User(*from.user_);
  } else {
    user_ = nullptr;
  }
  if (from._internal_has_state()) {
    state_ = new PROTOBUF_NAMESPACE_ID::Int32Value(*from.state_);
  } else {
    state_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:nakama.api.GroupUserList.GroupUser)
}

void GroupUserList_GroupUser::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GroupUserList_GroupUser_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&user_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&user_)) + sizeof(state_));
}

GroupUserList_GroupUser::~GroupUserList_GroupUser() {
  // @@protoc_insertion_point(destructor:nakama.api.GroupUserList.GroupUser)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GroupUserList_GroupUser::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete user_;
  if (this != internal_default_instance()) delete state_;
}

void GroupUserList_GroupUser::ArenaDtor(void* object) {
  GroupUserList_GroupUser* _this = reinterpret_cast< GroupUserList_GroupUser* >(object);
  (void)_this;
}
void GroupUserList_GroupUser::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GroupUserList_GroupUser::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GroupUserList_GroupUser& GroupUserList_GroupUser::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GroupUserList_GroupUser_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  return *internal_default_instance();
}


void GroupUserList_GroupUser::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.GroupUserList.GroupUser)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && user_ != nullptr) {
    delete user_;
  }
  user_ = nullptr;
  if (GetArena() == nullptr && state_ != nullptr) {
    delete state_;
  }
  state_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GroupUserList_GroupUser::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .nakama.api.User user = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Int32Value state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GroupUserList_GroupUser::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.GroupUserList.GroupUser)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .nakama.api.User user = 1;
  if (this->has_user()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user(this), target, stream);
  }

  // .google.protobuf.Int32Value state = 2;
  if (this->has_state()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::state(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.GroupUserList.GroupUser)
  return target;
}

size_t GroupUserList_GroupUser::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.GroupUserList.GroupUser)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .nakama.api.User user = 1;
  if (this->has_user()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_);
  }

  // .google.protobuf.Int32Value state = 2;
  if (this->has_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *state_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GroupUserList_GroupUser::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.GroupUserList.GroupUser)
  GOOGLE_DCHECK_NE(&from, this);
  const GroupUserList_GroupUser* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GroupUserList_GroupUser>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.GroupUserList.GroupUser)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.GroupUserList.GroupUser)
    MergeFrom(*source);
  }
}

void GroupUserList_GroupUser::MergeFrom(const GroupUserList_GroupUser& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.GroupUserList.GroupUser)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_user()) {
    _internal_mutable_user()->::nakama::api::User::MergeFrom(from._internal_user());
  }
  if (from.has_state()) {
    _internal_mutable_state()->PROTOBUF_NAMESPACE_ID::Int32Value::MergeFrom(from._internal_state());
  }
}

void GroupUserList_GroupUser::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.GroupUserList.GroupUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupUserList_GroupUser::CopyFrom(const GroupUserList_GroupUser& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.GroupUserList.GroupUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupUserList_GroupUser::IsInitialized() const {
  return true;
}

void GroupUserList_GroupUser::InternalSwap(GroupUserList_GroupUser* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GroupUserList_GroupUser, state_)
      + sizeof(GroupUserList_GroupUser::state_)
      - PROTOBUF_FIELD_OFFSET(GroupUserList_GroupUser, user_)>(
          reinterpret_cast<char*>(&user_),
          reinterpret_cast<char*>(&other->user_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GroupUserList_GroupUser::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GroupUserList::_Internal {
 public:
};

GroupUserList::GroupUserList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  group_users_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nakama.api.GroupUserList)
}
GroupUserList::GroupUserList(const GroupUserList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      group_users_(from.group_users_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  cursor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cursor().empty()) {
    cursor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_cursor(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:nakama.api.GroupUserList)
}

void GroupUserList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GroupUserList_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  cursor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GroupUserList::~GroupUserList() {
  // @@protoc_insertion_point(destructor:nakama.api.GroupUserList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GroupUserList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  cursor_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GroupUserList::ArenaDtor(void* object) {
  GroupUserList* _this = reinterpret_cast< GroupUserList* >(object);
  (void)_this;
}
void GroupUserList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GroupUserList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GroupUserList& GroupUserList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GroupUserList_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  return *internal_default_instance();
}


void GroupUserList::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.GroupUserList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  group_users_.Clear();
  cursor_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GroupUserList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .nakama.api.GroupUserList.GroupUser group_users = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_group_users(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // string cursor = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_cursor();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.GroupUserList.cursor"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GroupUserList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.GroupUserList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .nakama.api.GroupUserList.GroupUser group_users = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_group_users_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_group_users(i), target, stream);
  }

  // string cursor = 2;
  if (this->cursor().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cursor().data(), static_cast<int>(this->_internal_cursor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.GroupUserList.cursor");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_cursor(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.GroupUserList)
  return target;
}

size_t GroupUserList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.GroupUserList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .nakama.api.GroupUserList.GroupUser group_users = 1;
  total_size += 1UL * this->_internal_group_users_size();
  for (const auto& msg : this->group_users_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string cursor = 2;
  if (this->cursor().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cursor());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GroupUserList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.GroupUserList)
  GOOGLE_DCHECK_NE(&from, this);
  const GroupUserList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GroupUserList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.GroupUserList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.GroupUserList)
    MergeFrom(*source);
  }
}

void GroupUserList::MergeFrom(const GroupUserList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.GroupUserList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  group_users_.MergeFrom(from.group_users_);
  if (from.cursor().size() > 0) {
    _internal_set_cursor(from._internal_cursor());
  }
}

void GroupUserList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.GroupUserList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupUserList::CopyFrom(const GroupUserList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.GroupUserList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupUserList::IsInitialized() const {
  return true;
}

void GroupUserList::InternalSwap(GroupUserList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  group_users_.InternalSwap(&other->group_users_);
  cursor_.Swap(&other->cursor_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata GroupUserList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ImportFacebookFriendsRequest::_Internal {
 public:
  static const ::nakama::api::AccountFacebook& account(const ImportFacebookFriendsRequest* msg);
  static const PROTOBUF_NAMESPACE_ID::BoolValue& reset(const ImportFacebookFriendsRequest* msg);
};

const ::nakama::api::AccountFacebook&
ImportFacebookFriendsRequest::_Internal::account(const ImportFacebookFriendsRequest* msg) {
  return *msg->account_;
}
const PROTOBUF_NAMESPACE_ID::BoolValue&
ImportFacebookFriendsRequest::_Internal::reset(const ImportFacebookFriendsRequest* msg) {
  return *msg->reset_;
}
void ImportFacebookFriendsRequest::clear_reset() {
  if (GetArena() == nullptr && reset_ != nullptr) {
    delete reset_;
  }
  reset_ = nullptr;
}
ImportFacebookFriendsRequest::ImportFacebookFriendsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nakama.api.ImportFacebookFriendsRequest)
}
ImportFacebookFriendsRequest::ImportFacebookFriendsRequest(const ImportFacebookFriendsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_account()) {
    account_ = new ::nakama::api::AccountFacebook(*from.account_);
  } else {
    account_ = nullptr;
  }
  if (from._internal_has_reset()) {
    reset_ = new PROTOBUF_NAMESPACE_ID::BoolValue(*from.reset_);
  } else {
    reset_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:nakama.api.ImportFacebookFriendsRequest)
}

void ImportFacebookFriendsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ImportFacebookFriendsRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&account_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&reset_) -
      reinterpret_cast<char*>(&account_)) + sizeof(reset_));
}

ImportFacebookFriendsRequest::~ImportFacebookFriendsRequest() {
  // @@protoc_insertion_point(destructor:nakama.api.ImportFacebookFriendsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ImportFacebookFriendsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete account_;
  if (this != internal_default_instance()) delete reset_;
}

void ImportFacebookFriendsRequest::ArenaDtor(void* object) {
  ImportFacebookFriendsRequest* _this = reinterpret_cast< ImportFacebookFriendsRequest* >(object);
  (void)_this;
}
void ImportFacebookFriendsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ImportFacebookFriendsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ImportFacebookFriendsRequest& ImportFacebookFriendsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ImportFacebookFriendsRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  return *internal_default_instance();
}


void ImportFacebookFriendsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.ImportFacebookFriendsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && account_ != nullptr) {
    delete account_;
  }
  account_ = nullptr;
  if (GetArena() == nullptr && reset_ != nullptr) {
    delete reset_;
  }
  reset_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ImportFacebookFriendsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .nakama.api.AccountFacebook account = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_account(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.BoolValue reset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_reset(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ImportFacebookFriendsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.ImportFacebookFriendsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .nakama.api.AccountFacebook account = 1;
  if (this->has_account()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::account(this), target, stream);
  }

  // .google.protobuf.BoolValue reset = 2;
  if (this->has_reset()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::reset(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.ImportFacebookFriendsRequest)
  return target;
}

size_t ImportFacebookFriendsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.ImportFacebookFriendsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .nakama.api.AccountFacebook account = 1;
  if (this->has_account()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *account_);
  }

  // .google.protobuf.BoolValue reset = 2;
  if (this->has_reset()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *reset_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ImportFacebookFriendsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.ImportFacebookFriendsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ImportFacebookFriendsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ImportFacebookFriendsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.ImportFacebookFriendsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.ImportFacebookFriendsRequest)
    MergeFrom(*source);
  }
}

void ImportFacebookFriendsRequest::MergeFrom(const ImportFacebookFriendsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.ImportFacebookFriendsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_account()) {
    _internal_mutable_account()->::nakama::api::AccountFacebook::MergeFrom(from._internal_account());
  }
  if (from.has_reset()) {
    _internal_mutable_reset()->PROTOBUF_NAMESPACE_ID::BoolValue::MergeFrom(from._internal_reset());
  }
}

void ImportFacebookFriendsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.ImportFacebookFriendsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImportFacebookFriendsRequest::CopyFrom(const ImportFacebookFriendsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.ImportFacebookFriendsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImportFacebookFriendsRequest::IsInitialized() const {
  return true;
}

void ImportFacebookFriendsRequest::InternalSwap(ImportFacebookFriendsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ImportFacebookFriendsRequest, reset_)
      + sizeof(ImportFacebookFriendsRequest::reset_)
      - PROTOBUF_FIELD_OFFSET(ImportFacebookFriendsRequest, account_)>(
          reinterpret_cast<char*>(&account_),
          reinterpret_cast<char*>(&other->account_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ImportFacebookFriendsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ImportSteamFriendsRequest::_Internal {
 public:
  static const ::nakama::api::AccountSteam& account(const ImportSteamFriendsRequest* msg);
  static const PROTOBUF_NAMESPACE_ID::BoolValue& reset(const ImportSteamFriendsRequest* msg);
};

const ::nakama::api::AccountSteam&
ImportSteamFriendsRequest::_Internal::account(const ImportSteamFriendsRequest* msg) {
  return *msg->account_;
}
const PROTOBUF_NAMESPACE_ID::BoolValue&
ImportSteamFriendsRequest::_Internal::reset(const ImportSteamFriendsRequest* msg) {
  return *msg->reset_;
}
void ImportSteamFriendsRequest::clear_reset() {
  if (GetArena() == nullptr && reset_ != nullptr) {
    delete reset_;
  }
  reset_ = nullptr;
}
ImportSteamFriendsRequest::ImportSteamFriendsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nakama.api.ImportSteamFriendsRequest)
}
ImportSteamFriendsRequest::ImportSteamFriendsRequest(const ImportSteamFriendsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_account()) {
    account_ = new ::nakama::api::AccountSteam(*from.account_);
  } else {
    account_ = nullptr;
  }
  if (from._internal_has_reset()) {
    reset_ = new PROTOBUF_NAMESPACE_ID::BoolValue(*from.reset_);
  } else {
    reset_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:nakama.api.ImportSteamFriendsRequest)
}

void ImportSteamFriendsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ImportSteamFriendsRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&account_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&reset_) -
      reinterpret_cast<char*>(&account_)) + sizeof(reset_));
}

ImportSteamFriendsRequest::~ImportSteamFriendsRequest() {
  // @@protoc_insertion_point(destructor:nakama.api.ImportSteamFriendsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ImportSteamFriendsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete account_;
  if (this != internal_default_instance()) delete reset_;
}

void ImportSteamFriendsRequest::ArenaDtor(void* object) {
  ImportSteamFriendsRequest* _this = reinterpret_cast< ImportSteamFriendsRequest* >(object);
  (void)_this;
}
void ImportSteamFriendsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ImportSteamFriendsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ImportSteamFriendsRequest& ImportSteamFriendsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ImportSteamFriendsRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  return *internal_default_instance();
}


void ImportSteamFriendsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.ImportSteamFriendsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && account_ != nullptr) {
    delete account_;
  }
  account_ = nullptr;
  if (GetArena() == nullptr && reset_ != nullptr) {
    delete reset_;
  }
  reset_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ImportSteamFriendsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .nakama.api.AccountSteam account = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_account(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.BoolValue reset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_reset(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ImportSteamFriendsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.ImportSteamFriendsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .nakama.api.AccountSteam account = 1;
  if (this->has_account()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::account(this), target, stream);
  }

  // .google.protobuf.BoolValue reset = 2;
  if (this->has_reset()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::reset(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.ImportSteamFriendsRequest)
  return target;
}

size_t ImportSteamFriendsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.ImportSteamFriendsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .nakama.api.AccountSteam account = 1;
  if (this->has_account()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *account_);
  }

  // .google.protobuf.BoolValue reset = 2;
  if (this->has_reset()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *reset_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ImportSteamFriendsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.ImportSteamFriendsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ImportSteamFriendsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ImportSteamFriendsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.ImportSteamFriendsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.ImportSteamFriendsRequest)
    MergeFrom(*source);
  }
}

void ImportSteamFriendsRequest::MergeFrom(const ImportSteamFriendsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.ImportSteamFriendsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_account()) {
    _internal_mutable_account()->::nakama::api::AccountSteam::MergeFrom(from._internal_account());
  }
  if (from.has_reset()) {
    _internal_mutable_reset()->PROTOBUF_NAMESPACE_ID::BoolValue::MergeFrom(from._internal_reset());
  }
}

void ImportSteamFriendsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.ImportSteamFriendsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImportSteamFriendsRequest::CopyFrom(const ImportSteamFriendsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.ImportSteamFriendsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImportSteamFriendsRequest::IsInitialized() const {
  return true;
}

void ImportSteamFriendsRequest::InternalSwap(ImportSteamFriendsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ImportSteamFriendsRequest, reset_)
      + sizeof(ImportSteamFriendsRequest::reset_)
      - PROTOBUF_FIELD_OFFSET(ImportSteamFriendsRequest, account_)>(
          reinterpret_cast<char*>(&account_),
          reinterpret_cast<char*>(&other->account_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ImportSteamFriendsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class JoinGroupRequest::_Internal {
 public:
};

JoinGroupRequest::JoinGroupRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nakama.api.JoinGroupRequest)
}
JoinGroupRequest::JoinGroupRequest(const JoinGroupRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  group_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_group_id().empty()) {
    group_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_group_id(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:nakama.api.JoinGroupRequest)
}

void JoinGroupRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_JoinGroupRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  group_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

JoinGroupRequest::~JoinGroupRequest() {
  // @@protoc_insertion_point(destructor:nakama.api.JoinGroupRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void JoinGroupRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  group_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void JoinGroupRequest::ArenaDtor(void* object) {
  JoinGroupRequest* _this = reinterpret_cast< JoinGroupRequest* >(object);
  (void)_this;
}
void JoinGroupRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void JoinGroupRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const JoinGroupRequest& JoinGroupRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_JoinGroupRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  return *internal_default_instance();
}


void JoinGroupRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.JoinGroupRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  group_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* JoinGroupRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string group_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_group_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.JoinGroupRequest.group_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* JoinGroupRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.JoinGroupRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string group_id = 1;
  if (this->group_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_group_id().data(), static_cast<int>(this->_internal_group_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.JoinGroupRequest.group_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_group_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.JoinGroupRequest)
  return target;
}

size_t JoinGroupRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.JoinGroupRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string group_id = 1;
  if (this->group_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_group_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JoinGroupRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.JoinGroupRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const JoinGroupRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<JoinGroupRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.JoinGroupRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.JoinGroupRequest)
    MergeFrom(*source);
  }
}

void JoinGroupRequest::MergeFrom(const JoinGroupRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.JoinGroupRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.group_id().size() > 0) {
    _internal_set_group_id(from._internal_group_id());
  }
}

void JoinGroupRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.JoinGroupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JoinGroupRequest::CopyFrom(const JoinGroupRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.JoinGroupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoinGroupRequest::IsInitialized() const {
  return true;
}

void JoinGroupRequest::InternalSwap(JoinGroupRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  group_id_.Swap(&other->group_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata JoinGroupRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class JoinTournamentRequest::_Internal {
 public:
};

JoinTournamentRequest::JoinTournamentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nakama.api.JoinTournamentRequest)
}
JoinTournamentRequest::JoinTournamentRequest(const JoinTournamentRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tournament_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tournament_id().empty()) {
    tournament_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tournament_id(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:nakama.api.JoinTournamentRequest)
}

void JoinTournamentRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_JoinTournamentRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  tournament_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

JoinTournamentRequest::~JoinTournamentRequest() {
  // @@protoc_insertion_point(destructor:nakama.api.JoinTournamentRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void JoinTournamentRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  tournament_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void JoinTournamentRequest::ArenaDtor(void* object) {
  JoinTournamentRequest* _this = reinterpret_cast< JoinTournamentRequest* >(object);
  (void)_this;
}
void JoinTournamentRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void JoinTournamentRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const JoinTournamentRequest& JoinTournamentRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_JoinTournamentRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  return *internal_default_instance();
}


void JoinTournamentRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.JoinTournamentRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tournament_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* JoinTournamentRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string tournament_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_tournament_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.JoinTournamentRequest.tournament_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* JoinTournamentRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.JoinTournamentRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tournament_id = 1;
  if (this->tournament_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tournament_id().data(), static_cast<int>(this->_internal_tournament_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.JoinTournamentRequest.tournament_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_tournament_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.JoinTournamentRequest)
  return target;
}

size_t JoinTournamentRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.JoinTournamentRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string tournament_id = 1;
  if (this->tournament_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tournament_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JoinTournamentRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.JoinTournamentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const JoinTournamentRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<JoinTournamentRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.JoinTournamentRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.JoinTournamentRequest)
    MergeFrom(*source);
  }
}

void JoinTournamentRequest::MergeFrom(const JoinTournamentRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.JoinTournamentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.tournament_id().size() > 0) {
    _internal_set_tournament_id(from._internal_tournament_id());
  }
}

void JoinTournamentRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.JoinTournamentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JoinTournamentRequest::CopyFrom(const JoinTournamentRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.JoinTournamentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoinTournamentRequest::IsInitialized() const {
  return true;
}

void JoinTournamentRequest::InternalSwap(JoinTournamentRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  tournament_id_.Swap(&other->tournament_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata JoinTournamentRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class KickGroupUsersRequest::_Internal {
 public:
};

KickGroupUsersRequest::KickGroupUsersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  user_ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nakama.api.KickGroupUsersRequest)
}
KickGroupUsersRequest::KickGroupUsersRequest(const KickGroupUsersRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      user_ids_(from.user_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  group_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_group_id().empty()) {
    group_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_group_id(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:nakama.api.KickGroupUsersRequest)
}

void KickGroupUsersRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_KickGroupUsersRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  group_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

KickGroupUsersRequest::~KickGroupUsersRequest() {
  // @@protoc_insertion_point(destructor:nakama.api.KickGroupUsersRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void KickGroupUsersRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  group_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void KickGroupUsersRequest::ArenaDtor(void* object) {
  KickGroupUsersRequest* _this = reinterpret_cast< KickGroupUsersRequest* >(object);
  (void)_this;
}
void KickGroupUsersRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void KickGroupUsersRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KickGroupUsersRequest& KickGroupUsersRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_KickGroupUsersRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  return *internal_default_instance();
}


void KickGroupUsersRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.KickGroupUsersRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_ids_.Clear();
  group_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KickGroupUsersRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string group_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_group_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.KickGroupUsersRequest.group_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string user_ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_user_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.KickGroupUsersRequest.user_ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* KickGroupUsersRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.KickGroupUsersRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string group_id = 1;
  if (this->group_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_group_id().data(), static_cast<int>(this->_internal_group_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.KickGroupUsersRequest.group_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_group_id(), target);
  }

  // repeated string user_ids = 2;
  for (int i = 0, n = this->_internal_user_ids_size(); i < n; i++) {
    const auto& s = this->_internal_user_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.KickGroupUsersRequest.user_ids");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.KickGroupUsersRequest)
  return target;
}

size_t KickGroupUsersRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.KickGroupUsersRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string user_ids = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(user_ids_.size());
  for (int i = 0, n = user_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      user_ids_.Get(i));
  }

  // string group_id = 1;
  if (this->group_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_group_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KickGroupUsersRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.KickGroupUsersRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const KickGroupUsersRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<KickGroupUsersRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.KickGroupUsersRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.KickGroupUsersRequest)
    MergeFrom(*source);
  }
}

void KickGroupUsersRequest::MergeFrom(const KickGroupUsersRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.KickGroupUsersRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  user_ids_.MergeFrom(from.user_ids_);
  if (from.group_id().size() > 0) {
    _internal_set_group_id(from._internal_group_id());
  }
}

void KickGroupUsersRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.KickGroupUsersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KickGroupUsersRequest::CopyFrom(const KickGroupUsersRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.KickGroupUsersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KickGroupUsersRequest::IsInitialized() const {
  return true;
}

void KickGroupUsersRequest::InternalSwap(KickGroupUsersRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  user_ids_.InternalSwap(&other->user_ids_);
  group_id_.Swap(&other->group_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata KickGroupUsersRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Leaderboard::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& create_time(const Leaderboard* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
Leaderboard::_Internal::create_time(const Leaderboard* msg) {
  return *msg->create_time_;
}
void Leaderboard::clear_create_time() {
  if (GetArena() == nullptr && create_time_ != nullptr) {
    delete create_time_;
  }
  create_time_ = nullptr;
}
Leaderboard::Leaderboard(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nakama.api.Leaderboard)
}
Leaderboard::Leaderboard(const Leaderboard& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArena());
  }
  metadata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_metadata().empty()) {
    metadata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_metadata(), 
      GetArena());
  }
  if (from._internal_has_create_time()) {
    create_time_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.create_time_);
  } else {
    create_time_ = nullptr;
  }
  ::memcpy(&sort_order_, &from.sort_order_,
    static_cast<size_t>(reinterpret_cast<char*>(&authoritative_) -
    reinterpret_cast<char*>(&sort_order_)) + sizeof(authoritative_));
  // @@protoc_insertion_point(copy_constructor:nakama.api.Leaderboard)
}

void Leaderboard::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Leaderboard_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  metadata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&create_time_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&authoritative_) -
      reinterpret_cast<char*>(&create_time_)) + sizeof(authoritative_));
}

Leaderboard::~Leaderboard() {
  // @@protoc_insertion_point(destructor:nakama.api.Leaderboard)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Leaderboard::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  metadata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete create_time_;
}

void Leaderboard::ArenaDtor(void* object) {
  Leaderboard* _this = reinterpret_cast< Leaderboard* >(object);
  (void)_this;
}
void Leaderboard::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Leaderboard::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Leaderboard& Leaderboard::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Leaderboard_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  return *internal_default_instance();
}


void Leaderboard::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.Leaderboard)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  metadata_.ClearToEmpty();
  if (GetArena() == nullptr && create_time_ != nullptr) {
    delete create_time_;
  }
  create_time_ = nullptr;
  ::memset(&sort_order_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&authoritative_) -
      reinterpret_cast<char*>(&sort_order_)) + sizeof(authoritative_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Leaderboard::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.Leaderboard.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 sort_order = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          sort_order_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nakama.api.Operator operator = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_operator_(static_cast<::nakama::api::Operator>(val));
        } else goto handle_unusual;
        continue;
      // uint32 prev_reset = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          prev_reset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 next_reset = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          next_reset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string metadata = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_metadata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.Leaderboard.metadata"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp create_time = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_create_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool authoritative = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          authoritative_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Leaderboard::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.Leaderboard)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.Leaderboard.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // uint32 sort_order = 2;
  if (this->sort_order() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_sort_order(), target);
  }

  // .nakama.api.Operator operator = 3;
  if (this->operator_() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_operator_(), target);
  }

  // uint32 prev_reset = 4;
  if (this->prev_reset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_prev_reset(), target);
  }

  // uint32 next_reset = 5;
  if (this->next_reset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_next_reset(), target);
  }

  // string metadata = 6;
  if (this->metadata().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_metadata().data(), static_cast<int>(this->_internal_metadata().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.Leaderboard.metadata");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_metadata(), target);
  }

  // .google.protobuf.Timestamp create_time = 7;
  if (this->has_create_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::create_time(this), target, stream);
  }

  // bool authoritative = 8;
  if (this->authoritative() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_authoritative(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.Leaderboard)
  return target;
}

size_t Leaderboard::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.Leaderboard)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string metadata = 6;
  if (this->metadata().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_metadata());
  }

  // .google.protobuf.Timestamp create_time = 7;
  if (this->has_create_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *create_time_);
  }

  // uint32 sort_order = 2;
  if (this->sort_order() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sort_order());
  }

  // .nakama.api.Operator operator = 3;
  if (this->operator_() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_operator_());
  }

  // uint32 prev_reset = 4;
  if (this->prev_reset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_prev_reset());
  }

  // uint32 next_reset = 5;
  if (this->next_reset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_next_reset());
  }

  // bool authoritative = 8;
  if (this->authoritative() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Leaderboard::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.Leaderboard)
  GOOGLE_DCHECK_NE(&from, this);
  const Leaderboard* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Leaderboard>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.Leaderboard)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.Leaderboard)
    MergeFrom(*source);
  }
}

void Leaderboard::MergeFrom(const Leaderboard& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.Leaderboard)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.metadata().size() > 0) {
    _internal_set_metadata(from._internal_metadata());
  }
  if (from.has_create_time()) {
    _internal_mutable_create_time()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_create_time());
  }
  if (from.sort_order() != 0) {
    _internal_set_sort_order(from._internal_sort_order());
  }
  if (from.operator_() != 0) {
    _internal_set_operator_(from._internal_operator_());
  }
  if (from.prev_reset() != 0) {
    _internal_set_prev_reset(from._internal_prev_reset());
  }
  if (from.next_reset() != 0) {
    _internal_set_next_reset(from._internal_next_reset());
  }
  if (from.authoritative() != 0) {
    _internal_set_authoritative(from._internal_authoritative());
  }
}

void Leaderboard::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.Leaderboard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Leaderboard::CopyFrom(const Leaderboard& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.Leaderboard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Leaderboard::IsInitialized() const {
  return true;
}

void Leaderboard::InternalSwap(Leaderboard* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  metadata_.Swap(&other->metadata_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Leaderboard, authoritative_)
      + sizeof(Leaderboard::authoritative_)
      - PROTOBUF_FIELD_OFFSET(Leaderboard, create_time_)>(
          reinterpret_cast<char*>(&create_time_),
          reinterpret_cast<char*>(&other->create_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Leaderboard::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LeaderboardList::_Internal {
 public:
};

LeaderboardList::LeaderboardList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  leaderboards_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nakama.api.LeaderboardList)
}
LeaderboardList::LeaderboardList(const LeaderboardList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      leaderboards_(from.leaderboards_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  cursor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cursor().empty()) {
    cursor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_cursor(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:nakama.api.LeaderboardList)
}

void LeaderboardList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LeaderboardList_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  cursor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

LeaderboardList::~LeaderboardList() {
  // @@protoc_insertion_point(destructor:nakama.api.LeaderboardList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LeaderboardList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  cursor_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LeaderboardList::ArenaDtor(void* object) {
  LeaderboardList* _this = reinterpret_cast< LeaderboardList* >(object);
  (void)_this;
}
void LeaderboardList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LeaderboardList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LeaderboardList& LeaderboardList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LeaderboardList_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  return *internal_default_instance();
}


void LeaderboardList::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.LeaderboardList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  leaderboards_.Clear();
  cursor_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LeaderboardList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .nakama.api.Leaderboard leaderboards = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_leaderboards(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // string cursor = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_cursor();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.LeaderboardList.cursor"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LeaderboardList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.LeaderboardList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .nakama.api.Leaderboard leaderboards = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_leaderboards_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_leaderboards(i), target, stream);
  }

  // string cursor = 2;
  if (this->cursor().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cursor().data(), static_cast<int>(this->_internal_cursor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.LeaderboardList.cursor");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_cursor(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.LeaderboardList)
  return target;
}

size_t LeaderboardList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.LeaderboardList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .nakama.api.Leaderboard leaderboards = 1;
  total_size += 1UL * this->_internal_leaderboards_size();
  for (const auto& msg : this->leaderboards_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string cursor = 2;
  if (this->cursor().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cursor());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LeaderboardList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.LeaderboardList)
  GOOGLE_DCHECK_NE(&from, this);
  const LeaderboardList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LeaderboardList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.LeaderboardList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.LeaderboardList)
    MergeFrom(*source);
  }
}

void LeaderboardList::MergeFrom(const LeaderboardList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.LeaderboardList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  leaderboards_.MergeFrom(from.leaderboards_);
  if (from.cursor().size() > 0) {
    _internal_set_cursor(from._internal_cursor());
  }
}

void LeaderboardList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.LeaderboardList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LeaderboardList::CopyFrom(const LeaderboardList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.LeaderboardList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaderboardList::IsInitialized() const {
  return true;
}

void LeaderboardList::InternalSwap(LeaderboardList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  leaderboards_.InternalSwap(&other->leaderboards_);
  cursor_.Swap(&other->cursor_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata LeaderboardList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LeaderboardRecord::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::StringValue& username(const LeaderboardRecord* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& create_time(const LeaderboardRecord* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& update_time(const LeaderboardRecord* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& expiry_time(const LeaderboardRecord* msg);
};

const PROTOBUF_NAMESPACE_ID::StringValue&
LeaderboardRecord::_Internal::username(const LeaderboardRecord* msg) {
  return *msg->username_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
LeaderboardRecord::_Internal::create_time(const LeaderboardRecord* msg) {
  return *msg->create_time_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
LeaderboardRecord::_Internal::update_time(const LeaderboardRecord* msg) {
  return *msg->update_time_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
LeaderboardRecord::_Internal::expiry_time(const LeaderboardRecord* msg) {
  return *msg->expiry_time_;
}
void LeaderboardRecord::clear_username() {
  if (GetArena() == nullptr && username_ != nullptr) {
    delete username_;
  }
  username_ = nullptr;
}
void LeaderboardRecord::clear_create_time() {
  if (GetArena() == nullptr && create_time_ != nullptr) {
    delete create_time_;
  }
  create_time_ = nullptr;
}
void LeaderboardRecord::clear_update_time() {
  if (GetArena() == nullptr && update_time_ != nullptr) {
    delete update_time_;
  }
  update_time_ = nullptr;
}
void LeaderboardRecord::clear_expiry_time() {
  if (GetArena() == nullptr && expiry_time_ != nullptr) {
    delete expiry_time_;
  }
  expiry_time_ = nullptr;
}
LeaderboardRecord::LeaderboardRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nakama.api.LeaderboardRecord)
}
LeaderboardRecord::LeaderboardRecord(const LeaderboardRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  leaderboard_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_leaderboard_id().empty()) {
    leaderboard_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_leaderboard_id(), 
      GetArena());
  }
  owner_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_owner_id().empty()) {
    owner_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_owner_id(), 
      GetArena());
  }
  metadata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_metadata().empty()) {
    metadata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_metadata(), 
      GetArena());
  }
  if (from._internal_has_username()) {
    username_ = new PROTOBUF_NAMESPACE_ID::StringValue(*from.username_);
  } else {
    username_ = nullptr;
  }
  if (from._internal_has_create_time()) {
    create_time_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.create_time_);
  } else {
    create_time_ = nullptr;
  }
  if (from._internal_has_update_time()) {
    update_time_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.update_time_);
  } else {
    update_time_ = nullptr;
  }
  if (from._internal_has_expiry_time()) {
    expiry_time_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.expiry_time_);
  } else {
    expiry_time_ = nullptr;
  }
  ::memcpy(&score_, &from.score_,
    static_cast<size_t>(reinterpret_cast<char*>(&rank_) -
    reinterpret_cast<char*>(&score_)) + sizeof(rank_));
  // @@protoc_insertion_point(copy_constructor:nakama.api.LeaderboardRecord)
}

void LeaderboardRecord::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LeaderboardRecord_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  leaderboard_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  owner_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  metadata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&username_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&rank_) -
      reinterpret_cast<char*>(&username_)) + sizeof(rank_));
}

LeaderboardRecord::~LeaderboardRecord() {
  // @@protoc_insertion_point(destructor:nakama.api.LeaderboardRecord)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LeaderboardRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  leaderboard_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  owner_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  metadata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete username_;
  if (this != internal_default_instance()) delete create_time_;
  if (this != internal_default_instance()) delete update_time_;
  if (this != internal_default_instance()) delete expiry_time_;
}

void LeaderboardRecord::ArenaDtor(void* object) {
  LeaderboardRecord* _this = reinterpret_cast< LeaderboardRecord* >(object);
  (void)_this;
}
void LeaderboardRecord::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LeaderboardRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LeaderboardRecord& LeaderboardRecord::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LeaderboardRecord_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  return *internal_default_instance();
}


void LeaderboardRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.LeaderboardRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  leaderboard_id_.ClearToEmpty();
  owner_id_.ClearToEmpty();
  metadata_.ClearToEmpty();
  if (GetArena() == nullptr && username_ != nullptr) {
    delete username_;
  }
  username_ = nullptr;
  if (GetArena() == nullptr && create_time_ != nullptr) {
    delete create_time_;
  }
  create_time_ = nullptr;
  if (GetArena() == nullptr && update_time_ != nullptr) {
    delete update_time_;
  }
  update_time_ = nullptr;
  if (GetArena() == nullptr && expiry_time_ != nullptr) {
    delete expiry_time_;
  }
  expiry_time_ = nullptr;
  ::memset(&score_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rank_) -
      reinterpret_cast<char*>(&score_)) + sizeof(rank_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LeaderboardRecord::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string leaderboard_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_leaderboard_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.LeaderboardRecord.leaderboard_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string owner_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_owner_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.LeaderboardRecord.owner_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.StringValue username = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_username(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 score = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 subscore = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          subscore_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 num_score = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          num_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string metadata = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_metadata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.LeaderboardRecord.metadata"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp create_time = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_create_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp update_time = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_update_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp expiry_time = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_expiry_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 rank = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 max_num_score = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          max_num_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LeaderboardRecord::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.LeaderboardRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string leaderboard_id = 1;
  if (this->leaderboard_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_leaderboard_id().data(), static_cast<int>(this->_internal_leaderboard_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.LeaderboardRecord.leaderboard_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_leaderboard_id(), target);
  }

  // string owner_id = 2;
  if (this->owner_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_owner_id().data(), static_cast<int>(this->_internal_owner_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.LeaderboardRecord.owner_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_owner_id(), target);
  }

  // .google.protobuf.StringValue username = 3;
  if (this->has_username()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::username(this), target, stream);
  }

  // int64 score = 4;
  if (this->score() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_score(), target);
  }

  // int64 subscore = 5;
  if (this->subscore() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_subscore(), target);
  }

  // int32 num_score = 6;
  if (this->num_score() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_num_score(), target);
  }

  // string metadata = 7;
  if (this->metadata().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_metadata().data(), static_cast<int>(this->_internal_metadata().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.LeaderboardRecord.metadata");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_metadata(), target);
  }

  // .google.protobuf.Timestamp create_time = 8;
  if (this->has_create_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::create_time(this), target, stream);
  }

  // .google.protobuf.Timestamp update_time = 9;
  if (this->has_update_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::update_time(this), target, stream);
  }

  // .google.protobuf.Timestamp expiry_time = 10;
  if (this->has_expiry_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::expiry_time(this), target, stream);
  }

  // int64 rank = 11;
  if (this->rank() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(11, this->_internal_rank(), target);
  }

  // uint32 max_num_score = 12;
  if (this->max_num_score() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_max_num_score(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.LeaderboardRecord)
  return target;
}

size_t LeaderboardRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.LeaderboardRecord)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string leaderboard_id = 1;
  if (this->leaderboard_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_leaderboard_id());
  }

  // string owner_id = 2;
  if (this->owner_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_owner_id());
  }

  // string metadata = 7;
  if (this->metadata().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_metadata());
  }

  // .google.protobuf.StringValue username = 3;
  if (this->has_username()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *username_);
  }

  // .google.protobuf.Timestamp create_time = 8;
  if (this->has_create_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *create_time_);
  }

  // .google.protobuf.Timestamp update_time = 9;
  if (this->has_update_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *update_time_);
  }

  // .google.protobuf.Timestamp expiry_time = 10;
  if (this->has_expiry_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *expiry_time_);
  }

  // int64 score = 4;
  if (this->score() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_score());
  }

  // int64 subscore = 5;
  if (this->subscore() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_subscore());
  }

  // int32 num_score = 6;
  if (this->num_score() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num_score());
  }

  // uint32 max_num_score = 12;
  if (this->max_num_score() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_max_num_score());
  }

  // int64 rank = 11;
  if (this->rank() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_rank());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LeaderboardRecord::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.LeaderboardRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const LeaderboardRecord* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LeaderboardRecord>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.LeaderboardRecord)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.LeaderboardRecord)
    MergeFrom(*source);
  }
}

void LeaderboardRecord::MergeFrom(const LeaderboardRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.LeaderboardRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.leaderboard_id().size() > 0) {
    _internal_set_leaderboard_id(from._internal_leaderboard_id());
  }
  if (from.owner_id().size() > 0) {
    _internal_set_owner_id(from._internal_owner_id());
  }
  if (from.metadata().size() > 0) {
    _internal_set_metadata(from._internal_metadata());
  }
  if (from.has_username()) {
    _internal_mutable_username()->PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from._internal_username());
  }
  if (from.has_create_time()) {
    _internal_mutable_create_time()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_create_time());
  }
  if (from.has_update_time()) {
    _internal_mutable_update_time()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_update_time());
  }
  if (from.has_expiry_time()) {
    _internal_mutable_expiry_time()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_expiry_time());
  }
  if (from.score() != 0) {
    _internal_set_score(from._internal_score());
  }
  if (from.subscore() != 0) {
    _internal_set_subscore(from._internal_subscore());
  }
  if (from.num_score() != 0) {
    _internal_set_num_score(from._internal_num_score());
  }
  if (from.max_num_score() != 0) {
    _internal_set_max_num_score(from._internal_max_num_score());
  }
  if (from.rank() != 0) {
    _internal_set_rank(from._internal_rank());
  }
}

void LeaderboardRecord::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.LeaderboardRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LeaderboardRecord::CopyFrom(const LeaderboardRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.LeaderboardRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaderboardRecord::IsInitialized() const {
  return true;
}

void LeaderboardRecord::InternalSwap(LeaderboardRecord* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  leaderboard_id_.Swap(&other->leaderboard_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  owner_id_.Swap(&other->owner_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  metadata_.Swap(&other->metadata_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LeaderboardRecord, rank_)
      + sizeof(LeaderboardRecord::rank_)
      - PROTOBUF_FIELD_OFFSET(LeaderboardRecord, username_)>(
          reinterpret_cast<char*>(&username_),
          reinterpret_cast<char*>(&other->username_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LeaderboardRecord::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LeaderboardRecordList::_Internal {
 public:
};

LeaderboardRecordList::LeaderboardRecordList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  records_(arena),
  owner_records_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nakama.api.LeaderboardRecordList)
}
LeaderboardRecordList::LeaderboardRecordList(const LeaderboardRecordList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      records_(from.records_),
      owner_records_(from.owner_records_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  next_cursor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_next_cursor().empty()) {
    next_cursor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_next_cursor(), 
      GetArena());
  }
  prev_cursor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_prev_cursor().empty()) {
    prev_cursor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_prev_cursor(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:nakama.api.LeaderboardRecordList)
}

void LeaderboardRecordList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LeaderboardRecordList_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  next_cursor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  prev_cursor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

LeaderboardRecordList::~LeaderboardRecordList() {
  // @@protoc_insertion_point(destructor:nakama.api.LeaderboardRecordList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LeaderboardRecordList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  next_cursor_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  prev_cursor_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LeaderboardRecordList::ArenaDtor(void* object) {
  LeaderboardRecordList* _this = reinterpret_cast< LeaderboardRecordList* >(object);
  (void)_this;
}
void LeaderboardRecordList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LeaderboardRecordList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LeaderboardRecordList& LeaderboardRecordList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LeaderboardRecordList_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  return *internal_default_instance();
}


void LeaderboardRecordList::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.LeaderboardRecordList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  records_.Clear();
  owner_records_.Clear();
  next_cursor_.ClearToEmpty();
  prev_cursor_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LeaderboardRecordList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .nakama.api.LeaderboardRecord records = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_records(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .nakama.api.LeaderboardRecord owner_records = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_owner_records(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // string next_cursor = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_next_cursor();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.LeaderboardRecordList.next_cursor"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string prev_cursor = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_prev_cursor();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.LeaderboardRecordList.prev_cursor"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LeaderboardRecordList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.LeaderboardRecordList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .nakama.api.LeaderboardRecord records = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_records_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_records(i), target, stream);
  }

  // repeated .nakama.api.LeaderboardRecord owner_records = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_owner_records_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_owner_records(i), target, stream);
  }

  // string next_cursor = 3;
  if (this->next_cursor().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_next_cursor().data(), static_cast<int>(this->_internal_next_cursor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.LeaderboardRecordList.next_cursor");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_next_cursor(), target);
  }

  // string prev_cursor = 4;
  if (this->prev_cursor().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_prev_cursor().data(), static_cast<int>(this->_internal_prev_cursor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.LeaderboardRecordList.prev_cursor");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_prev_cursor(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.LeaderboardRecordList)
  return target;
}

size_t LeaderboardRecordList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.LeaderboardRecordList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .nakama.api.LeaderboardRecord records = 1;
  total_size += 1UL * this->_internal_records_size();
  for (const auto& msg : this->records_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .nakama.api.LeaderboardRecord owner_records = 2;
  total_size += 1UL * this->_internal_owner_records_size();
  for (const auto& msg : this->owner_records_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string next_cursor = 3;
  if (this->next_cursor().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_next_cursor());
  }

  // string prev_cursor = 4;
  if (this->prev_cursor().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_prev_cursor());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LeaderboardRecordList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.LeaderboardRecordList)
  GOOGLE_DCHECK_NE(&from, this);
  const LeaderboardRecordList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LeaderboardRecordList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.LeaderboardRecordList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.LeaderboardRecordList)
    MergeFrom(*source);
  }
}

void LeaderboardRecordList::MergeFrom(const LeaderboardRecordList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.LeaderboardRecordList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  records_.MergeFrom(from.records_);
  owner_records_.MergeFrom(from.owner_records_);
  if (from.next_cursor().size() > 0) {
    _internal_set_next_cursor(from._internal_next_cursor());
  }
  if (from.prev_cursor().size() > 0) {
    _internal_set_prev_cursor(from._internal_prev_cursor());
  }
}

void LeaderboardRecordList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.LeaderboardRecordList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LeaderboardRecordList::CopyFrom(const LeaderboardRecordList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.LeaderboardRecordList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaderboardRecordList::IsInitialized() const {
  return true;
}

void LeaderboardRecordList::InternalSwap(LeaderboardRecordList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  records_.InternalSwap(&other->records_);
  owner_records_.InternalSwap(&other->owner_records_);
  next_cursor_.Swap(&other->next_cursor_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  prev_cursor_.Swap(&other->prev_cursor_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata LeaderboardRecordList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LeaveGroupRequest::_Internal {
 public:
};

LeaveGroupRequest::LeaveGroupRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nakama.api.LeaveGroupRequest)
}
LeaveGroupRequest::LeaveGroupRequest(const LeaveGroupRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  group_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_group_id().empty()) {
    group_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_group_id(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:nakama.api.LeaveGroupRequest)
}

void LeaveGroupRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LeaveGroupRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  group_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

LeaveGroupRequest::~LeaveGroupRequest() {
  // @@protoc_insertion_point(destructor:nakama.api.LeaveGroupRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LeaveGroupRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  group_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LeaveGroupRequest::ArenaDtor(void* object) {
  LeaveGroupRequest* _this = reinterpret_cast< LeaveGroupRequest* >(object);
  (void)_this;
}
void LeaveGroupRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LeaveGroupRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LeaveGroupRequest& LeaveGroupRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LeaveGroupRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  return *internal_default_instance();
}


void LeaveGroupRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.LeaveGroupRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  group_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LeaveGroupRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string group_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_group_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.LeaveGroupRequest.group_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LeaveGroupRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.LeaveGroupRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string group_id = 1;
  if (this->group_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_group_id().data(), static_cast<int>(this->_internal_group_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.LeaveGroupRequest.group_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_group_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.LeaveGroupRequest)
  return target;
}

size_t LeaveGroupRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.LeaveGroupRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string group_id = 1;
  if (this->group_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_group_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LeaveGroupRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.LeaveGroupRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const LeaveGroupRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LeaveGroupRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.LeaveGroupRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.LeaveGroupRequest)
    MergeFrom(*source);
  }
}

void LeaveGroupRequest::MergeFrom(const LeaveGroupRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.LeaveGroupRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.group_id().size() > 0) {
    _internal_set_group_id(from._internal_group_id());
  }
}

void LeaveGroupRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.LeaveGroupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LeaveGroupRequest::CopyFrom(const LeaveGroupRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.LeaveGroupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaveGroupRequest::IsInitialized() const {
  return true;
}

void LeaveGroupRequest::InternalSwap(LeaveGroupRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  group_id_.Swap(&other->group_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata LeaveGroupRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LinkFacebookRequest::_Internal {
 public:
  static const ::nakama::api::AccountFacebook& account(const LinkFacebookRequest* msg);
  static const PROTOBUF_NAMESPACE_ID::BoolValue& sync(const LinkFacebookRequest* msg);
};

const ::nakama::api::AccountFacebook&
LinkFacebookRequest::_Internal::account(const LinkFacebookRequest* msg) {
  return *msg->account_;
}
const PROTOBUF_NAMESPACE_ID::BoolValue&
LinkFacebookRequest::_Internal::sync(const LinkFacebookRequest* msg) {
  return *msg->sync_;
}
void LinkFacebookRequest::clear_sync() {
  if (GetArena() == nullptr && sync_ != nullptr) {
    delete sync_;
  }
  sync_ = nullptr;
}
LinkFacebookRequest::LinkFacebookRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nakama.api.LinkFacebookRequest)
}
LinkFacebookRequest::LinkFacebookRequest(const LinkFacebookRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_account()) {
    account_ = new ::nakama::api::AccountFacebook(*from.account_);
  } else {
    account_ = nullptr;
  }
  if (from._internal_has_sync()) {
    sync_ = new PROTOBUF_NAMESPACE_ID::BoolValue(*from.sync_);
  } else {
    sync_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:nakama.api.LinkFacebookRequest)
}

void LinkFacebookRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LinkFacebookRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&account_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&sync_) -
      reinterpret_cast<char*>(&account_)) + sizeof(sync_));
}

LinkFacebookRequest::~LinkFacebookRequest() {
  // @@protoc_insertion_point(destructor:nakama.api.LinkFacebookRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LinkFacebookRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete account_;
  if (this != internal_default_instance()) delete sync_;
}

void LinkFacebookRequest::ArenaDtor(void* object) {
  LinkFacebookRequest* _this = reinterpret_cast< LinkFacebookRequest* >(object);
  (void)_this;
}
void LinkFacebookRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LinkFacebookRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LinkFacebookRequest& LinkFacebookRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LinkFacebookRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  return *internal_default_instance();
}


void LinkFacebookRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.LinkFacebookRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && account_ != nullptr) {
    delete account_;
  }
  account_ = nullptr;
  if (GetArena() == nullptr && sync_ != nullptr) {
    delete sync_;
  }
  sync_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LinkFacebookRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .nakama.api.AccountFacebook account = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_account(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.BoolValue sync = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_sync(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LinkFacebookRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.LinkFacebookRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .nakama.api.AccountFacebook account = 1;
  if (this->has_account()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::account(this), target, stream);
  }

  // .google.protobuf.BoolValue sync = 2;
  if (this->has_sync()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::sync(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.LinkFacebookRequest)
  return target;
}

size_t LinkFacebookRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.LinkFacebookRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .nakama.api.AccountFacebook account = 1;
  if (this->has_account()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *account_);
  }

  // .google.protobuf.BoolValue sync = 2;
  if (this->has_sync()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sync_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LinkFacebookRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.LinkFacebookRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const LinkFacebookRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LinkFacebookRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.LinkFacebookRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.LinkFacebookRequest)
    MergeFrom(*source);
  }
}

void LinkFacebookRequest::MergeFrom(const LinkFacebookRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.LinkFacebookRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_account()) {
    _internal_mutable_account()->::nakama::api::AccountFacebook::MergeFrom(from._internal_account());
  }
  if (from.has_sync()) {
    _internal_mutable_sync()->PROTOBUF_NAMESPACE_ID::BoolValue::MergeFrom(from._internal_sync());
  }
}

void LinkFacebookRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.LinkFacebookRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LinkFacebookRequest::CopyFrom(const LinkFacebookRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.LinkFacebookRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LinkFacebookRequest::IsInitialized() const {
  return true;
}

void LinkFacebookRequest::InternalSwap(LinkFacebookRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LinkFacebookRequest, sync_)
      + sizeof(LinkFacebookRequest::sync_)
      - PROTOBUF_FIELD_OFFSET(LinkFacebookRequest, account_)>(
          reinterpret_cast<char*>(&account_),
          reinterpret_cast<char*>(&other->account_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LinkFacebookRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LinkSteamRequest::_Internal {
 public:
  static const ::nakama::api::AccountSteam& account(const LinkSteamRequest* msg);
  static const PROTOBUF_NAMESPACE_ID::BoolValue& sync(const LinkSteamRequest* msg);
};

const ::nakama::api::AccountSteam&
LinkSteamRequest::_Internal::account(const LinkSteamRequest* msg) {
  return *msg->account_;
}
const PROTOBUF_NAMESPACE_ID::BoolValue&
LinkSteamRequest::_Internal::sync(const LinkSteamRequest* msg) {
  return *msg->sync_;
}
void LinkSteamRequest::clear_sync() {
  if (GetArena() == nullptr && sync_ != nullptr) {
    delete sync_;
  }
  sync_ = nullptr;
}
LinkSteamRequest::LinkSteamRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nakama.api.LinkSteamRequest)
}
LinkSteamRequest::LinkSteamRequest(const LinkSteamRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_account()) {
    account_ = new ::nakama::api::AccountSteam(*from.account_);
  } else {
    account_ = nullptr;
  }
  if (from._internal_has_sync()) {
    sync_ = new PROTOBUF_NAMESPACE_ID::BoolValue(*from.sync_);
  } else {
    sync_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:nakama.api.LinkSteamRequest)
}

void LinkSteamRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LinkSteamRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&account_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&sync_) -
      reinterpret_cast<char*>(&account_)) + sizeof(sync_));
}

LinkSteamRequest::~LinkSteamRequest() {
  // @@protoc_insertion_point(destructor:nakama.api.LinkSteamRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LinkSteamRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete account_;
  if (this != internal_default_instance()) delete sync_;
}

void LinkSteamRequest::ArenaDtor(void* object) {
  LinkSteamRequest* _this = reinterpret_cast< LinkSteamRequest* >(object);
  (void)_this;
}
void LinkSteamRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LinkSteamRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LinkSteamRequest& LinkSteamRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LinkSteamRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  return *internal_default_instance();
}


void LinkSteamRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.LinkSteamRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && account_ != nullptr) {
    delete account_;
  }
  account_ = nullptr;
  if (GetArena() == nullptr && sync_ != nullptr) {
    delete sync_;
  }
  sync_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LinkSteamRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .nakama.api.AccountSteam account = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_account(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.BoolValue sync = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_sync(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LinkSteamRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.LinkSteamRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .nakama.api.AccountSteam account = 1;
  if (this->has_account()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::account(this), target, stream);
  }

  // .google.protobuf.BoolValue sync = 2;
  if (this->has_sync()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::sync(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.LinkSteamRequest)
  return target;
}

size_t LinkSteamRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.LinkSteamRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .nakama.api.AccountSteam account = 1;
  if (this->has_account()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *account_);
  }

  // .google.protobuf.BoolValue sync = 2;
  if (this->has_sync()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sync_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LinkSteamRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.LinkSteamRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const LinkSteamRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LinkSteamRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.LinkSteamRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.LinkSteamRequest)
    MergeFrom(*source);
  }
}

void LinkSteamRequest::MergeFrom(const LinkSteamRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.LinkSteamRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_account()) {
    _internal_mutable_account()->::nakama::api::AccountSteam::MergeFrom(from._internal_account());
  }
  if (from.has_sync()) {
    _internal_mutable_sync()->PROTOBUF_NAMESPACE_ID::BoolValue::MergeFrom(from._internal_sync());
  }
}

void LinkSteamRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.LinkSteamRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LinkSteamRequest::CopyFrom(const LinkSteamRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.LinkSteamRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LinkSteamRequest::IsInitialized() const {
  return true;
}

void LinkSteamRequest::InternalSwap(LinkSteamRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LinkSteamRequest, sync_)
      + sizeof(LinkSteamRequest::sync_)
      - PROTOBUF_FIELD_OFFSET(LinkSteamRequest, account_)>(
          reinterpret_cast<char*>(&account_),
          reinterpret_cast<char*>(&other->account_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LinkSteamRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ListChannelMessagesRequest::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Int32Value& limit(const ListChannelMessagesRequest* msg);
  static const PROTOBUF_NAMESPACE_ID::BoolValue& forward(const ListChannelMessagesRequest* msg);
};

const PROTOBUF_NAMESPACE_ID::Int32Value&
ListChannelMessagesRequest::_Internal::limit(const ListChannelMessagesRequest* msg) {
  return *msg->limit_;
}
const PROTOBUF_NAMESPACE_ID::BoolValue&
ListChannelMessagesRequest::_Internal::forward(const ListChannelMessagesRequest* msg) {
  return *msg->forward_;
}
void ListChannelMessagesRequest::clear_limit() {
  if (GetArena() == nullptr && limit_ != nullptr) {
    delete limit_;
  }
  limit_ = nullptr;
}
void ListChannelMessagesRequest::clear_forward() {
  if (GetArena() == nullptr && forward_ != nullptr) {
    delete forward_;
  }
  forward_ = nullptr;
}
ListChannelMessagesRequest::ListChannelMessagesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nakama.api.ListChannelMessagesRequest)
}
ListChannelMessagesRequest::ListChannelMessagesRequest(const ListChannelMessagesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  channel_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_channel_id().empty()) {
    channel_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_channel_id(), 
      GetArena());
  }
  cursor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cursor().empty()) {
    cursor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_cursor(), 
      GetArena());
  }
  if (from._internal_has_limit()) {
    limit_ = new PROTOBUF_NAMESPACE_ID::Int32Value(*from.limit_);
  } else {
    limit_ = nullptr;
  }
  if (from._internal_has_forward()) {
    forward_ = new PROTOBUF_NAMESPACE_ID::BoolValue(*from.forward_);
  } else {
    forward_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:nakama.api.ListChannelMessagesRequest)
}

void ListChannelMessagesRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListChannelMessagesRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  channel_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cursor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&limit_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&forward_) -
      reinterpret_cast<char*>(&limit_)) + sizeof(forward_));
}

ListChannelMessagesRequest::~ListChannelMessagesRequest() {
  // @@protoc_insertion_point(destructor:nakama.api.ListChannelMessagesRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListChannelMessagesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  channel_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cursor_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete limit_;
  if (this != internal_default_instance()) delete forward_;
}

void ListChannelMessagesRequest::ArenaDtor(void* object) {
  ListChannelMessagesRequest* _this = reinterpret_cast< ListChannelMessagesRequest* >(object);
  (void)_this;
}
void ListChannelMessagesRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListChannelMessagesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListChannelMessagesRequest& ListChannelMessagesRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListChannelMessagesRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  return *internal_default_instance();
}


void ListChannelMessagesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.ListChannelMessagesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channel_id_.ClearToEmpty();
  cursor_.ClearToEmpty();
  if (GetArena() == nullptr && limit_ != nullptr) {
    delete limit_;
  }
  limit_ = nullptr;
  if (GetArena() == nullptr && forward_ != nullptr) {
    delete forward_;
  }
  forward_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListChannelMessagesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string channel_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_channel_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.ListChannelMessagesRequest.channel_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Int32Value limit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_limit(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.BoolValue forward = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_forward(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string cursor = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_cursor();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.ListChannelMessagesRequest.cursor"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListChannelMessagesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.ListChannelMessagesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string channel_id = 1;
  if (this->channel_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_channel_id().data(), static_cast<int>(this->_internal_channel_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.ListChannelMessagesRequest.channel_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_channel_id(), target);
  }

  // .google.protobuf.Int32Value limit = 2;
  if (this->has_limit()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::limit(this), target, stream);
  }

  // .google.protobuf.BoolValue forward = 3;
  if (this->has_forward()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::forward(this), target, stream);
  }

  // string cursor = 4;
  if (this->cursor().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cursor().data(), static_cast<int>(this->_internal_cursor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.ListChannelMessagesRequest.cursor");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_cursor(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.ListChannelMessagesRequest)
  return target;
}

size_t ListChannelMessagesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.ListChannelMessagesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string channel_id = 1;
  if (this->channel_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_channel_id());
  }

  // string cursor = 4;
  if (this->cursor().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cursor());
  }

  // .google.protobuf.Int32Value limit = 2;
  if (this->has_limit()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *limit_);
  }

  // .google.protobuf.BoolValue forward = 3;
  if (this->has_forward()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *forward_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListChannelMessagesRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.ListChannelMessagesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListChannelMessagesRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListChannelMessagesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.ListChannelMessagesRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.ListChannelMessagesRequest)
    MergeFrom(*source);
  }
}

void ListChannelMessagesRequest::MergeFrom(const ListChannelMessagesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.ListChannelMessagesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.channel_id().size() > 0) {
    _internal_set_channel_id(from._internal_channel_id());
  }
  if (from.cursor().size() > 0) {
    _internal_set_cursor(from._internal_cursor());
  }
  if (from.has_limit()) {
    _internal_mutable_limit()->PROTOBUF_NAMESPACE_ID::Int32Value::MergeFrom(from._internal_limit());
  }
  if (from.has_forward()) {
    _internal_mutable_forward()->PROTOBUF_NAMESPACE_ID::BoolValue::MergeFrom(from._internal_forward());
  }
}

void ListChannelMessagesRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.ListChannelMessagesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListChannelMessagesRequest::CopyFrom(const ListChannelMessagesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.ListChannelMessagesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListChannelMessagesRequest::IsInitialized() const {
  return true;
}

void ListChannelMessagesRequest::InternalSwap(ListChannelMessagesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  channel_id_.Swap(&other->channel_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  cursor_.Swap(&other->cursor_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ListChannelMessagesRequest, forward_)
      + sizeof(ListChannelMessagesRequest::forward_)
      - PROTOBUF_FIELD_OFFSET(ListChannelMessagesRequest, limit_)>(
          reinterpret_cast<char*>(&limit_),
          reinterpret_cast<char*>(&other->limit_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ListChannelMessagesRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ListFriendsRequest::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Int32Value& limit(const ListFriendsRequest* msg);
  static const PROTOBUF_NAMESPACE_ID::Int32Value& state(const ListFriendsRequest* msg);
};

const PROTOBUF_NAMESPACE_ID::Int32Value&
ListFriendsRequest::_Internal::limit(const ListFriendsRequest* msg) {
  return *msg->limit_;
}
const PROTOBUF_NAMESPACE_ID::Int32Value&
ListFriendsRequest::_Internal::state(const ListFriendsRequest* msg) {
  return *msg->state_;
}
void ListFriendsRequest::clear_limit() {
  if (GetArena() == nullptr && limit_ != nullptr) {
    delete limit_;
  }
  limit_ = nullptr;
}
void ListFriendsRequest::clear_state() {
  if (GetArena() == nullptr && state_ != nullptr) {
    delete state_;
  }
  state_ = nullptr;
}
ListFriendsRequest::ListFriendsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nakama.api.ListFriendsRequest)
}
ListFriendsRequest::ListFriendsRequest(const ListFriendsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  cursor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cursor().empty()) {
    cursor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_cursor(), 
      GetArena());
  }
  if (from._internal_has_limit()) {
    limit_ = new PROTOBUF_NAMESPACE_ID::Int32Value(*from.limit_);
  } else {
    limit_ = nullptr;
  }
  if (from._internal_has_state()) {
    state_ = new PROTOBUF_NAMESPACE_ID::Int32Value(*from.state_);
  } else {
    state_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:nakama.api.ListFriendsRequest)
}

void ListFriendsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListFriendsRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  cursor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&limit_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&limit_)) + sizeof(state_));
}

ListFriendsRequest::~ListFriendsRequest() {
  // @@protoc_insertion_point(destructor:nakama.api.ListFriendsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListFriendsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  cursor_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete limit_;
  if (this != internal_default_instance()) delete state_;
}

void ListFriendsRequest::ArenaDtor(void* object) {
  ListFriendsRequest* _this = reinterpret_cast< ListFriendsRequest* >(object);
  (void)_this;
}
void ListFriendsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListFriendsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListFriendsRequest& ListFriendsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListFriendsRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  return *internal_default_instance();
}


void ListFriendsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.ListFriendsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cursor_.ClearToEmpty();
  if (GetArena() == nullptr && limit_ != nullptr) {
    delete limit_;
  }
  limit_ = nullptr;
  if (GetArena() == nullptr && state_ != nullptr) {
    delete state_;
  }
  state_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListFriendsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.protobuf.Int32Value limit = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_limit(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Int32Value state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string cursor = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_cursor();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.ListFriendsRequest.cursor"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListFriendsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.ListFriendsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Int32Value limit = 1;
  if (this->has_limit()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::limit(this), target, stream);
  }

  // .google.protobuf.Int32Value state = 2;
  if (this->has_state()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::state(this), target, stream);
  }

  // string cursor = 3;
  if (this->cursor().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cursor().data(), static_cast<int>(this->_internal_cursor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.ListFriendsRequest.cursor");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_cursor(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.ListFriendsRequest)
  return target;
}

size_t ListFriendsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.ListFriendsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string cursor = 3;
  if (this->cursor().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cursor());
  }

  // .google.protobuf.Int32Value limit = 1;
  if (this->has_limit()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *limit_);
  }

  // .google.protobuf.Int32Value state = 2;
  if (this->has_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *state_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListFriendsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.ListFriendsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListFriendsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListFriendsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.ListFriendsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.ListFriendsRequest)
    MergeFrom(*source);
  }
}

void ListFriendsRequest::MergeFrom(const ListFriendsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.ListFriendsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cursor().size() > 0) {
    _internal_set_cursor(from._internal_cursor());
  }
  if (from.has_limit()) {
    _internal_mutable_limit()->PROTOBUF_NAMESPACE_ID::Int32Value::MergeFrom(from._internal_limit());
  }
  if (from.has_state()) {
    _internal_mutable_state()->PROTOBUF_NAMESPACE_ID::Int32Value::MergeFrom(from._internal_state());
  }
}

void ListFriendsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.ListFriendsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListFriendsRequest::CopyFrom(const ListFriendsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.ListFriendsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListFriendsRequest::IsInitialized() const {
  return true;
}

void ListFriendsRequest::InternalSwap(ListFriendsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  cursor_.Swap(&other->cursor_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ListFriendsRequest, state_)
      + sizeof(ListFriendsRequest::state_)
      - PROTOBUF_FIELD_OFFSET(ListFriendsRequest, limit_)>(
          reinterpret_cast<char*>(&limit_),
          reinterpret_cast<char*>(&other->limit_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ListFriendsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ListGroupsRequest::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Int32Value& limit(const ListGroupsRequest* msg);
  static const PROTOBUF_NAMESPACE_ID::Int32Value& members(const ListGroupsRequest* msg);
  static const PROTOBUF_NAMESPACE_ID::BoolValue& open(const ListGroupsRequest* msg);
};

const PROTOBUF_NAMESPACE_ID::Int32Value&
ListGroupsRequest::_Internal::limit(const ListGroupsRequest* msg) {
  return *msg->limit_;
}
const PROTOBUF_NAMESPACE_ID::Int32Value&
ListGroupsRequest::_Internal::members(const ListGroupsRequest* msg) {
  return *msg->members_;
}
const PROTOBUF_NAMESPACE_ID::BoolValue&
ListGroupsRequest::_Internal::open(const ListGroupsRequest* msg) {
  return *msg->open_;
}
void ListGroupsRequest::clear_limit() {
  if (GetArena() == nullptr && limit_ != nullptr) {
    delete limit_;
  }
  limit_ = nullptr;
}
void ListGroupsRequest::clear_members() {
  if (GetArena() == nullptr && members_ != nullptr) {
    delete members_;
  }
  members_ = nullptr;
}
void ListGroupsRequest::clear_open() {
  if (GetArena() == nullptr && open_ != nullptr) {
    delete open_;
  }
  open_ = nullptr;
}
ListGroupsRequest::ListGroupsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nakama.api.ListGroupsRequest)
}
ListGroupsRequest::ListGroupsRequest(const ListGroupsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  cursor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cursor().empty()) {
    cursor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_cursor(), 
      GetArena());
  }
  lang_tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_lang_tag().empty()) {
    lang_tag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_lang_tag(), 
      GetArena());
  }
  if (from._internal_has_limit()) {
    limit_ = new PROTOBUF_NAMESPACE_ID::Int32Value(*from.limit_);
  } else {
    limit_ = nullptr;
  }
  if (from._internal_has_members()) {
    members_ = new PROTOBUF_NAMESPACE_ID::Int32Value(*from.members_);
  } else {
    members_ = nullptr;
  }
  if (from._internal_has_open()) {
    open_ = new PROTOBUF_NAMESPACE_ID::BoolValue(*from.open_);
  } else {
    open_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:nakama.api.ListGroupsRequest)
}

void ListGroupsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListGroupsRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cursor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lang_tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&limit_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&open_) -
      reinterpret_cast<char*>(&limit_)) + sizeof(open_));
}

ListGroupsRequest::~ListGroupsRequest() {
  // @@protoc_insertion_point(destructor:nakama.api.ListGroupsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListGroupsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cursor_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lang_tag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete limit_;
  if (this != internal_default_instance()) delete members_;
  if (this != internal_default_instance()) delete open_;
}

void ListGroupsRequest::ArenaDtor(void* object) {
  ListGroupsRequest* _this = reinterpret_cast< ListGroupsRequest* >(object);
  (void)_this;
}
void ListGroupsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListGroupsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListGroupsRequest& ListGroupsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListGroupsRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  return *internal_default_instance();
}


void ListGroupsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.ListGroupsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  cursor_.ClearToEmpty();
  lang_tag_.ClearToEmpty();
  if (GetArena() == nullptr && limit_ != nullptr) {
    delete limit_;
  }
  limit_ = nullptr;
  if (GetArena() == nullptr && members_ != nullptr) {
    delete members_;
  }
  members_ = nullptr;
  if (GetArena() == nullptr && open_ != nullptr) {
    delete open_;
  }
  open_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListGroupsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.ListGroupsRequest.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string cursor = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_cursor();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.ListGroupsRequest.cursor"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Int32Value limit = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_limit(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string lang_tag = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_lang_tag();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.ListGroupsRequest.lang_tag"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Int32Value members = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_members(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.BoolValue open = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_open(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListGroupsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.ListGroupsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.ListGroupsRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string cursor = 2;
  if (this->cursor().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cursor().data(), static_cast<int>(this->_internal_cursor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.ListGroupsRequest.cursor");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_cursor(), target);
  }

  // .google.protobuf.Int32Value limit = 3;
  if (this->has_limit()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::limit(this), target, stream);
  }

  // string lang_tag = 4;
  if (this->lang_tag().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_lang_tag().data(), static_cast<int>(this->_internal_lang_tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.ListGroupsRequest.lang_tag");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_lang_tag(), target);
  }

  // .google.protobuf.Int32Value members = 5;
  if (this->has_members()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::members(this), target, stream);
  }

  // .google.protobuf.BoolValue open = 6;
  if (this->has_open()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::open(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.ListGroupsRequest)
  return target;
}

size_t ListGroupsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.ListGroupsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string cursor = 2;
  if (this->cursor().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cursor());
  }

  // string lang_tag = 4;
  if (this->lang_tag().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_lang_tag());
  }

  // .google.protobuf.Int32Value limit = 3;
  if (this->has_limit()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *limit_);
  }

  // .google.protobuf.Int32Value members = 5;
  if (this->has_members()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *members_);
  }

  // .google.protobuf.BoolValue open = 6;
  if (this->has_open()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *open_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListGroupsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.ListGroupsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListGroupsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListGroupsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.ListGroupsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.ListGroupsRequest)
    MergeFrom(*source);
  }
}

void ListGroupsRequest::MergeFrom(const ListGroupsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.ListGroupsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.cursor().size() > 0) {
    _internal_set_cursor(from._internal_cursor());
  }
  if (from.lang_tag().size() > 0) {
    _internal_set_lang_tag(from._internal_lang_tag());
  }
  if (from.has_limit()) {
    _internal_mutable_limit()->PROTOBUF_NAMESPACE_ID::Int32Value::MergeFrom(from._internal_limit());
  }
  if (from.has_members()) {
    _internal_mutable_members()->PROTOBUF_NAMESPACE_ID::Int32Value::MergeFrom(from._internal_members());
  }
  if (from.has_open()) {
    _internal_mutable_open()->PROTOBUF_NAMESPACE_ID::BoolValue::MergeFrom(from._internal_open());
  }
}

void ListGroupsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.ListGroupsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListGroupsRequest::CopyFrom(const ListGroupsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.ListGroupsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListGroupsRequest::IsInitialized() const {
  return true;
}

void ListGroupsRequest::InternalSwap(ListGroupsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  cursor_.Swap(&other->cursor_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  lang_tag_.Swap(&other->lang_tag_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ListGroupsRequest, open_)
      + sizeof(ListGroupsRequest::open_)
      - PROTOBUF_FIELD_OFFSET(ListGroupsRequest, limit_)>(
          reinterpret_cast<char*>(&limit_),
          reinterpret_cast<char*>(&other->limit_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ListGroupsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ListGroupUsersRequest::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Int32Value& limit(const ListGroupUsersRequest* msg);
  static const PROTOBUF_NAMESPACE_ID::Int32Value& state(const ListGroupUsersRequest* msg);
};

const PROTOBUF_NAMESPACE_ID::Int32Value&
ListGroupUsersRequest::_Internal::limit(const ListGroupUsersRequest* msg) {
  return *msg->limit_;
}
const PROTOBUF_NAMESPACE_ID::Int32Value&
ListGroupUsersRequest::_Internal::state(const ListGroupUsersRequest* msg) {
  return *msg->state_;
}
void ListGroupUsersRequest::clear_limit() {
  if (GetArena() == nullptr && limit_ != nullptr) {
    delete limit_;
  }
  limit_ = nullptr;
}
void ListGroupUsersRequest::clear_state() {
  if (GetArena() == nullptr && state_ != nullptr) {
    delete state_;
  }
  state_ = nullptr;
}
ListGroupUsersRequest::ListGroupUsersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nakama.api.ListGroupUsersRequest)
}
ListGroupUsersRequest::ListGroupUsersRequest(const ListGroupUsersRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  group_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_group_id().empty()) {
    group_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_group_id(), 
      GetArena());
  }
  cursor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cursor().empty()) {
    cursor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_cursor(), 
      GetArena());
  }
  if (from._internal_has_limit()) {
    limit_ = new PROTOBUF_NAMESPACE_ID::Int32Value(*from.limit_);
  } else {
    limit_ = nullptr;
  }
  if (from._internal_has_state()) {
    state_ = new PROTOBUF_NAMESPACE_ID::Int32Value(*from.state_);
  } else {
    state_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:nakama.api.ListGroupUsersRequest)
}

void ListGroupUsersRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListGroupUsersRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  group_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cursor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&limit_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&limit_)) + sizeof(state_));
}

ListGroupUsersRequest::~ListGroupUsersRequest() {
  // @@protoc_insertion_point(destructor:nakama.api.ListGroupUsersRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListGroupUsersRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  group_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cursor_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete limit_;
  if (this != internal_default_instance()) delete state_;
}

void ListGroupUsersRequest::ArenaDtor(void* object) {
  ListGroupUsersRequest* _this = reinterpret_cast< ListGroupUsersRequest* >(object);
  (void)_this;
}
void ListGroupUsersRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListGroupUsersRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListGroupUsersRequest& ListGroupUsersRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListGroupUsersRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  return *internal_default_instance();
}


void ListGroupUsersRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.ListGroupUsersRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  group_id_.ClearToEmpty();
  cursor_.ClearToEmpty();
  if (GetArena() == nullptr && limit_ != nullptr) {
    delete limit_;
  }
  limit_ = nullptr;
  if (GetArena() == nullptr && state_ != nullptr) {
    delete state_;
  }
  state_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListGroupUsersRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string group_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_group_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.ListGroupUsersRequest.group_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Int32Value limit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_limit(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Int32Value state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string cursor = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_cursor();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.ListGroupUsersRequest.cursor"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListGroupUsersRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.ListGroupUsersRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string group_id = 1;
  if (this->group_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_group_id().data(), static_cast<int>(this->_internal_group_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.ListGroupUsersRequest.group_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_group_id(), target);
  }

  // .google.protobuf.Int32Value limit = 2;
  if (this->has_limit()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::limit(this), target, stream);
  }

  // .google.protobuf.Int32Value state = 3;
  if (this->has_state()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::state(this), target, stream);
  }

  // string cursor = 4;
  if (this->cursor().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cursor().data(), static_cast<int>(this->_internal_cursor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.ListGroupUsersRequest.cursor");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_cursor(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.ListGroupUsersRequest)
  return target;
}

size_t ListGroupUsersRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.ListGroupUsersRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string group_id = 1;
  if (this->group_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_group_id());
  }

  // string cursor = 4;
  if (this->cursor().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cursor());
  }

  // .google.protobuf.Int32Value limit = 2;
  if (this->has_limit()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *limit_);
  }

  // .google.protobuf.Int32Value state = 3;
  if (this->has_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *state_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListGroupUsersRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.ListGroupUsersRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListGroupUsersRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListGroupUsersRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.ListGroupUsersRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.ListGroupUsersRequest)
    MergeFrom(*source);
  }
}

void ListGroupUsersRequest::MergeFrom(const ListGroupUsersRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.ListGroupUsersRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.group_id().size() > 0) {
    _internal_set_group_id(from._internal_group_id());
  }
  if (from.cursor().size() > 0) {
    _internal_set_cursor(from._internal_cursor());
  }
  if (from.has_limit()) {
    _internal_mutable_limit()->PROTOBUF_NAMESPACE_ID::Int32Value::MergeFrom(from._internal_limit());
  }
  if (from.has_state()) {
    _internal_mutable_state()->PROTOBUF_NAMESPACE_ID::Int32Value::MergeFrom(from._internal_state());
  }
}

void ListGroupUsersRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.ListGroupUsersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListGroupUsersRequest::CopyFrom(const ListGroupUsersRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.ListGroupUsersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListGroupUsersRequest::IsInitialized() const {
  return true;
}

void ListGroupUsersRequest::InternalSwap(ListGroupUsersRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  group_id_.Swap(&other->group_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  cursor_.Swap(&other->cursor_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ListGroupUsersRequest, state_)
      + sizeof(ListGroupUsersRequest::state_)
      - PROTOBUF_FIELD_OFFSET(ListGroupUsersRequest, limit_)>(
          reinterpret_cast<char*>(&limit_),
          reinterpret_cast<char*>(&other->limit_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ListGroupUsersRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ListLeaderboardRecordsAroundOwnerRequest::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::UInt32Value& limit(const ListLeaderboardRecordsAroundOwnerRequest* msg);
  static const PROTOBUF_NAMESPACE_ID::Int64Value& expiry(const ListLeaderboardRecordsAroundOwnerRequest* msg);
};

const PROTOBUF_NAMESPACE_ID::UInt32Value&
ListLeaderboardRecordsAroundOwnerRequest::_Internal::limit(const ListLeaderboardRecordsAroundOwnerRequest* msg) {
  return *msg->limit_;
}
const PROTOBUF_NAMESPACE_ID::Int64Value&
ListLeaderboardRecordsAroundOwnerRequest::_Internal::expiry(const ListLeaderboardRecordsAroundOwnerRequest* msg) {
  return *msg->expiry_;
}
void ListLeaderboardRecordsAroundOwnerRequest::clear_limit() {
  if (GetArena() == nullptr && limit_ != nullptr) {
    delete limit_;
  }
  limit_ = nullptr;
}
void ListLeaderboardRecordsAroundOwnerRequest::clear_expiry() {
  if (GetArena() == nullptr && expiry_ != nullptr) {
    delete expiry_;
  }
  expiry_ = nullptr;
}
ListLeaderboardRecordsAroundOwnerRequest::ListLeaderboardRecordsAroundOwnerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nakama.api.ListLeaderboardRecordsAroundOwnerRequest)
}
ListLeaderboardRecordsAroundOwnerRequest::ListLeaderboardRecordsAroundOwnerRequest(const ListLeaderboardRecordsAroundOwnerRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  leaderboard_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_leaderboard_id().empty()) {
    leaderboard_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_leaderboard_id(), 
      GetArena());
  }
  owner_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_owner_id().empty()) {
    owner_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_owner_id(), 
      GetArena());
  }
  if (from._internal_has_limit()) {
    limit_ = new PROTOBUF_NAMESPACE_ID::UInt32Value(*from.limit_);
  } else {
    limit_ = nullptr;
  }
  if (from._internal_has_expiry()) {
    expiry_ = new PROTOBUF_NAMESPACE_ID::Int64Value(*from.expiry_);
  } else {
    expiry_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:nakama.api.ListLeaderboardRecordsAroundOwnerRequest)
}

void ListLeaderboardRecordsAroundOwnerRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListLeaderboardRecordsAroundOwnerRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  leaderboard_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  owner_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&limit_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&expiry_) -
      reinterpret_cast<char*>(&limit_)) + sizeof(expiry_));
}

ListLeaderboardRecordsAroundOwnerRequest::~ListLeaderboardRecordsAroundOwnerRequest() {
  // @@protoc_insertion_point(destructor:nakama.api.ListLeaderboardRecordsAroundOwnerRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListLeaderboardRecordsAroundOwnerRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  leaderboard_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  owner_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete limit_;
  if (this != internal_default_instance()) delete expiry_;
}

void ListLeaderboardRecordsAroundOwnerRequest::ArenaDtor(void* object) {
  ListLeaderboardRecordsAroundOwnerRequest* _this = reinterpret_cast< ListLeaderboardRecordsAroundOwnerRequest* >(object);
  (void)_this;
}
void ListLeaderboardRecordsAroundOwnerRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListLeaderboardRecordsAroundOwnerRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListLeaderboardRecordsAroundOwnerRequest& ListLeaderboardRecordsAroundOwnerRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListLeaderboardRecordsAroundOwnerRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  return *internal_default_instance();
}


void ListLeaderboardRecordsAroundOwnerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.ListLeaderboardRecordsAroundOwnerRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  leaderboard_id_.ClearToEmpty();
  owner_id_.ClearToEmpty();
  if (GetArena() == nullptr && limit_ != nullptr) {
    delete limit_;
  }
  limit_ = nullptr;
  if (GetArena() == nullptr && expiry_ != nullptr) {
    delete expiry_;
  }
  expiry_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListLeaderboardRecordsAroundOwnerRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string leaderboard_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_leaderboard_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.ListLeaderboardRecordsAroundOwnerRequest.leaderboard_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.UInt32Value limit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_limit(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string owner_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_owner_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.ListLeaderboardRecordsAroundOwnerRequest.owner_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Int64Value expiry = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_expiry(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListLeaderboardRecordsAroundOwnerRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.ListLeaderboardRecordsAroundOwnerRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string leaderboard_id = 1;
  if (this->leaderboard_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_leaderboard_id().data(), static_cast<int>(this->_internal_leaderboard_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.ListLeaderboardRecordsAroundOwnerRequest.leaderboard_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_leaderboard_id(), target);
  }

  // .google.protobuf.UInt32Value limit = 2;
  if (this->has_limit()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::limit(this), target, stream);
  }

  // string owner_id = 3;
  if (this->owner_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_owner_id().data(), static_cast<int>(this->_internal_owner_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.ListLeaderboardRecordsAroundOwnerRequest.owner_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_owner_id(), target);
  }

  // .google.protobuf.Int64Value expiry = 4;
  if (this->has_expiry()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::expiry(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.ListLeaderboardRecordsAroundOwnerRequest)
  return target;
}

size_t ListLeaderboardRecordsAroundOwnerRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.ListLeaderboardRecordsAroundOwnerRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string leaderboard_id = 1;
  if (this->leaderboard_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_leaderboard_id());
  }

  // string owner_id = 3;
  if (this->owner_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_owner_id());
  }

  // .google.protobuf.UInt32Value limit = 2;
  if (this->has_limit()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *limit_);
  }

  // .google.protobuf.Int64Value expiry = 4;
  if (this->has_expiry()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *expiry_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListLeaderboardRecordsAroundOwnerRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.ListLeaderboardRecordsAroundOwnerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListLeaderboardRecordsAroundOwnerRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListLeaderboardRecordsAroundOwnerRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.ListLeaderboardRecordsAroundOwnerRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.ListLeaderboardRecordsAroundOwnerRequest)
    MergeFrom(*source);
  }
}

void ListLeaderboardRecordsAroundOwnerRequest::MergeFrom(const ListLeaderboardRecordsAroundOwnerRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.ListLeaderboardRecordsAroundOwnerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.leaderboard_id().size() > 0) {
    _internal_set_leaderboard_id(from._internal_leaderboard_id());
  }
  if (from.owner_id().size() > 0) {
    _internal_set_owner_id(from._internal_owner_id());
  }
  if (from.has_limit()) {
    _internal_mutable_limit()->PROTOBUF_NAMESPACE_ID::UInt32Value::MergeFrom(from._internal_limit());
  }
  if (from.has_expiry()) {
    _internal_mutable_expiry()->PROTOBUF_NAMESPACE_ID::Int64Value::MergeFrom(from._internal_expiry());
  }
}

void ListLeaderboardRecordsAroundOwnerRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.ListLeaderboardRecordsAroundOwnerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListLeaderboardRecordsAroundOwnerRequest::CopyFrom(const ListLeaderboardRecordsAroundOwnerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.ListLeaderboardRecordsAroundOwnerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListLeaderboardRecordsAroundOwnerRequest::IsInitialized() const {
  return true;
}

void ListLeaderboardRecordsAroundOwnerRequest::InternalSwap(ListLeaderboardRecordsAroundOwnerRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  leaderboard_id_.Swap(&other->leaderboard_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  owner_id_.Swap(&other->owner_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ListLeaderboardRecordsAroundOwnerRequest, expiry_)
      + sizeof(ListLeaderboardRecordsAroundOwnerRequest::expiry_)
      - PROTOBUF_FIELD_OFFSET(ListLeaderboardRecordsAroundOwnerRequest, limit_)>(
          reinterpret_cast<char*>(&limit_),
          reinterpret_cast<char*>(&other->limit_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ListLeaderboardRecordsAroundOwnerRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ListLeaderboardRecordsRequest::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Int32Value& limit(const ListLeaderboardRecordsRequest* msg);
  static const PROTOBUF_NAMESPACE_ID::Int64Value& expiry(const ListLeaderboardRecordsRequest* msg);
};

const PROTOBUF_NAMESPACE_ID::Int32Value&
ListLeaderboardRecordsRequest::_Internal::limit(const ListLeaderboardRecordsRequest* msg) {
  return *msg->limit_;
}
const PROTOBUF_NAMESPACE_ID::Int64Value&
ListLeaderboardRecordsRequest::_Internal::expiry(const ListLeaderboardRecordsRequest* msg) {
  return *msg->expiry_;
}
void ListLeaderboardRecordsRequest::clear_limit() {
  if (GetArena() == nullptr && limit_ != nullptr) {
    delete limit_;
  }
  limit_ = nullptr;
}
void ListLeaderboardRecordsRequest::clear_expiry() {
  if (GetArena() == nullptr && expiry_ != nullptr) {
    delete expiry_;
  }
  expiry_ = nullptr;
}
ListLeaderboardRecordsRequest::ListLeaderboardRecordsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  owner_ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nakama.api.ListLeaderboardRecordsRequest)
}
ListLeaderboardRecordsRequest::ListLeaderboardRecordsRequest(const ListLeaderboardRecordsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      owner_ids_(from.owner_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  leaderboard_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_leaderboard_id().empty()) {
    leaderboard_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_leaderboard_id(), 
      GetArena());
  }
  cursor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cursor().empty()) {
    cursor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_cursor(), 
      GetArena());
  }
  if (from._internal_has_limit()) {
    limit_ = new PROTOBUF_NAMESPACE_ID::Int32Value(*from.limit_);
  } else {
    limit_ = nullptr;
  }
  if (from._internal_has_expiry()) {
    expiry_ = new PROTOBUF_NAMESPACE_ID::Int64Value(*from.expiry_);
  } else {
    expiry_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:nakama.api.ListLeaderboardRecordsRequest)
}

void ListLeaderboardRecordsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListLeaderboardRecordsRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  leaderboard_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cursor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&limit_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&expiry_) -
      reinterpret_cast<char*>(&limit_)) + sizeof(expiry_));
}

ListLeaderboardRecordsRequest::~ListLeaderboardRecordsRequest() {
  // @@protoc_insertion_point(destructor:nakama.api.ListLeaderboardRecordsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListLeaderboardRecordsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  leaderboard_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cursor_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete limit_;
  if (this != internal_default_instance()) delete expiry_;
}

void ListLeaderboardRecordsRequest::ArenaDtor(void* object) {
  ListLeaderboardRecordsRequest* _this = reinterpret_cast< ListLeaderboardRecordsRequest* >(object);
  (void)_this;
}
void ListLeaderboardRecordsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListLeaderboardRecordsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListLeaderboardRecordsRequest& ListLeaderboardRecordsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListLeaderboardRecordsRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  return *internal_default_instance();
}


void ListLeaderboardRecordsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.ListLeaderboardRecordsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  owner_ids_.Clear();
  leaderboard_id_.ClearToEmpty();
  cursor_.ClearToEmpty();
  if (GetArena() == nullptr && limit_ != nullptr) {
    delete limit_;
  }
  limit_ = nullptr;
  if (GetArena() == nullptr && expiry_ != nullptr) {
    delete expiry_;
  }
  expiry_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListLeaderboardRecordsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string leaderboard_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_leaderboard_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.ListLeaderboardRecordsRequest.leaderboard_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string owner_ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_owner_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.ListLeaderboardRecordsRequest.owner_ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Int32Value limit = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_limit(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string cursor = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_cursor();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.ListLeaderboardRecordsRequest.cursor"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Int64Value expiry = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_expiry(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListLeaderboardRecordsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.ListLeaderboardRecordsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string leaderboard_id = 1;
  if (this->leaderboard_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_leaderboard_id().data(), static_cast<int>(this->_internal_leaderboard_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.ListLeaderboardRecordsRequest.leaderboard_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_leaderboard_id(), target);
  }

  // repeated string owner_ids = 2;
  for (int i = 0, n = this->_internal_owner_ids_size(); i < n; i++) {
    const auto& s = this->_internal_owner_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.ListLeaderboardRecordsRequest.owner_ids");
    target = stream->WriteString(2, s, target);
  }

  // .google.protobuf.Int32Value limit = 3;
  if (this->has_limit()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::limit(this), target, stream);
  }

  // string cursor = 4;
  if (this->cursor().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cursor().data(), static_cast<int>(this->_internal_cursor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.ListLeaderboardRecordsRequest.cursor");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_cursor(), target);
  }

  // .google.protobuf.Int64Value expiry = 5;
  if (this->has_expiry()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::expiry(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.ListLeaderboardRecordsRequest)
  return target;
}

size_t ListLeaderboardRecordsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.ListLeaderboardRecordsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string owner_ids = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(owner_ids_.size());
  for (int i = 0, n = owner_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      owner_ids_.Get(i));
  }

  // string leaderboard_id = 1;
  if (this->leaderboard_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_leaderboard_id());
  }

  // string cursor = 4;
  if (this->cursor().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cursor());
  }

  // .google.protobuf.Int32Value limit = 3;
  if (this->has_limit()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *limit_);
  }

  // .google.protobuf.Int64Value expiry = 5;
  if (this->has_expiry()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *expiry_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListLeaderboardRecordsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.ListLeaderboardRecordsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListLeaderboardRecordsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListLeaderboardRecordsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.ListLeaderboardRecordsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.ListLeaderboardRecordsRequest)
    MergeFrom(*source);
  }
}

void ListLeaderboardRecordsRequest::MergeFrom(const ListLeaderboardRecordsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.ListLeaderboardRecordsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  owner_ids_.MergeFrom(from.owner_ids_);
  if (from.leaderboard_id().size() > 0) {
    _internal_set_leaderboard_id(from._internal_leaderboard_id());
  }
  if (from.cursor().size() > 0) {
    _internal_set_cursor(from._internal_cursor());
  }
  if (from.has_limit()) {
    _internal_mutable_limit()->PROTOBUF_NAMESPACE_ID::Int32Value::MergeFrom(from._internal_limit());
  }
  if (from.has_expiry()) {
    _internal_mutable_expiry()->PROTOBUF_NAMESPACE_ID::Int64Value::MergeFrom(from._internal_expiry());
  }
}

void ListLeaderboardRecordsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.ListLeaderboardRecordsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListLeaderboardRecordsRequest::CopyFrom(const ListLeaderboardRecordsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.ListLeaderboardRecordsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListLeaderboardRecordsRequest::IsInitialized() const {
  return true;
}

void ListLeaderboardRecordsRequest::InternalSwap(ListLeaderboardRecordsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  owner_ids_.InternalSwap(&other->owner_ids_);
  leaderboard_id_.Swap(&other->leaderboard_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  cursor_.Swap(&other->cursor_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ListLeaderboardRecordsRequest, expiry_)
      + sizeof(ListLeaderboardRecordsRequest::expiry_)
      - PROTOBUF_FIELD_OFFSET(ListLeaderboardRecordsRequest, limit_)>(
          reinterpret_cast<char*>(&limit_),
          reinterpret_cast<char*>(&other->limit_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ListLeaderboardRecordsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ListMatchesRequest::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Int32Value& limit(const ListMatchesRequest* msg);
  static const PROTOBUF_NAMESPACE_ID::BoolValue& authoritative(const ListMatchesRequest* msg);
  static const PROTOBUF_NAMESPACE_ID::StringValue& label(const ListMatchesRequest* msg);
  static const PROTOBUF_NAMESPACE_ID::Int32Value& min_size(const ListMatchesRequest* msg);
  static const PROTOBUF_NAMESPACE_ID::Int32Value& max_size(const ListMatchesRequest* msg);
  static const PROTOBUF_NAMESPACE_ID::StringValue& query(const ListMatchesRequest* msg);
};

const PROTOBUF_NAMESPACE_ID::Int32Value&
ListMatchesRequest::_Internal::limit(const ListMatchesRequest* msg) {
  return *msg->limit_;
}
const PROTOBUF_NAMESPACE_ID::BoolValue&
ListMatchesRequest::_Internal::authoritative(const ListMatchesRequest* msg) {
  return *msg->authoritative_;
}
const PROTOBUF_NAMESPACE_ID::StringValue&
ListMatchesRequest::_Internal::label(const ListMatchesRequest* msg) {
  return *msg->label_;
}
const PROTOBUF_NAMESPACE_ID::Int32Value&
ListMatchesRequest::_Internal::min_size(const ListMatchesRequest* msg) {
  return *msg->min_size_;
}
const PROTOBUF_NAMESPACE_ID::Int32Value&
ListMatchesRequest::_Internal::max_size(const ListMatchesRequest* msg) {
  return *msg->max_size_;
}
const PROTOBUF_NAMESPACE_ID::StringValue&
ListMatchesRequest::_Internal::query(const ListMatchesRequest* msg) {
  return *msg->query_;
}
void ListMatchesRequest::clear_limit() {
  if (GetArena() == nullptr && limit_ != nullptr) {
    delete limit_;
  }
  limit_ = nullptr;
}
void ListMatchesRequest::clear_authoritative() {
  if (GetArena() == nullptr && authoritative_ != nullptr) {
    delete authoritative_;
  }
  authoritative_ = nullptr;
}
void ListMatchesRequest::clear_label() {
  if (GetArena() == nullptr && label_ != nullptr) {
    delete label_;
  }
  label_ = nullptr;
}
void ListMatchesRequest::clear_min_size() {
  if (GetArena() == nullptr && min_size_ != nullptr) {
    delete min_size_;
  }
  min_size_ = nullptr;
}
void ListMatchesRequest::clear_max_size() {
  if (GetArena() == nullptr && max_size_ != nullptr) {
    delete max_size_;
  }
  max_size_ = nullptr;
}
void ListMatchesRequest::clear_query() {
  if (GetArena() == nullptr && query_ != nullptr) {
    delete query_;
  }
  query_ = nullptr;
}
ListMatchesRequest::ListMatchesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nakama.api.ListMatchesRequest)
}
ListMatchesRequest::ListMatchesRequest(const ListMatchesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_limit()) {
    limit_ = new PROTOBUF_NAMESPACE_ID::Int32Value(*from.limit_);
  } else {
    limit_ = nullptr;
  }
  if (from._internal_has_authoritative()) {
    authoritative_ = new PROTOBUF_NAMESPACE_ID::BoolValue(*from.authoritative_);
  } else {
    authoritative_ = nullptr;
  }
  if (from._internal_has_label()) {
    label_ = new PROTOBUF_NAMESPACE_ID::StringValue(*from.label_);
  } else {
    label_ = nullptr;
  }
  if (from._internal_has_min_size()) {
    min_size_ = new PROTOBUF_NAMESPACE_ID::Int32Value(*from.min_size_);
  } else {
    min_size_ = nullptr;
  }
  if (from._internal_has_max_size()) {
    max_size_ = new PROTOBUF_NAMESPACE_ID::Int32Value(*from.max_size_);
  } else {
    max_size_ = nullptr;
  }
  if (from._internal_has_query()) {
    query_ = new PROTOBUF_NAMESPACE_ID::StringValue(*from.query_);
  } else {
    query_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:nakama.api.ListMatchesRequest)
}

void ListMatchesRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListMatchesRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&limit_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&query_) -
      reinterpret_cast<char*>(&limit_)) + sizeof(query_));
}

ListMatchesRequest::~ListMatchesRequest() {
  // @@protoc_insertion_point(destructor:nakama.api.ListMatchesRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListMatchesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete limit_;
  if (this != internal_default_instance()) delete authoritative_;
  if (this != internal_default_instance()) delete label_;
  if (this != internal_default_instance()) delete min_size_;
  if (this != internal_default_instance()) delete max_size_;
  if (this != internal_default_instance()) delete query_;
}

void ListMatchesRequest::ArenaDtor(void* object) {
  ListMatchesRequest* _this = reinterpret_cast< ListMatchesRequest* >(object);
  (void)_this;
}
void ListMatchesRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListMatchesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListMatchesRequest& ListMatchesRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListMatchesRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  return *internal_default_instance();
}


void ListMatchesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.ListMatchesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && limit_ != nullptr) {
    delete limit_;
  }
  limit_ = nullptr;
  if (GetArena() == nullptr && authoritative_ != nullptr) {
    delete authoritative_;
  }
  authoritative_ = nullptr;
  if (GetArena() == nullptr && label_ != nullptr) {
    delete label_;
  }
  label_ = nullptr;
  if (GetArena() == nullptr && min_size_ != nullptr) {
    delete min_size_;
  }
  min_size_ = nullptr;
  if (GetArena() == nullptr && max_size_ != nullptr) {
    delete max_size_;
  }
  max_size_ = nullptr;
  if (GetArena() == nullptr && query_ != nullptr) {
    delete query_;
  }
  query_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListMatchesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.protobuf.Int32Value limit = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_limit(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.BoolValue authoritative = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_authoritative(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.StringValue label = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_label(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Int32Value min_size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_min_size(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Int32Value max_size = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_max_size(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.StringValue query = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_query(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListMatchesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.ListMatchesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Int32Value limit = 1;
  if (this->has_limit()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::limit(this), target, stream);
  }

  // .google.protobuf.BoolValue authoritative = 2;
  if (this->has_authoritative()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::authoritative(this), target, stream);
  }

  // .google.protobuf.StringValue label = 3;
  if (this->has_label()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::label(this), target, stream);
  }

  // .google.protobuf.Int32Value min_size = 4;
  if (this->has_min_size()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::min_size(this), target, stream);
  }

  // .google.protobuf.Int32Value max_size = 5;
  if (this->has_max_size()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::max_size(this), target, stream);
  }

  // .google.protobuf.StringValue query = 6;
  if (this->has_query()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::query(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.ListMatchesRequest)
  return target;
}

size_t ListMatchesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.ListMatchesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Int32Value limit = 1;
  if (this->has_limit()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *limit_);
  }

  // .google.protobuf.BoolValue authoritative = 2;
  if (this->has_authoritative()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *authoritative_);
  }

  // .google.protobuf.StringValue label = 3;
  if (this->has_label()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *label_);
  }

  // .google.protobuf.Int32Value min_size = 4;
  if (this->has_min_size()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *min_size_);
  }

  // .google.protobuf.Int32Value max_size = 5;
  if (this->has_max_size()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *max_size_);
  }

  // .google.protobuf.StringValue query = 6;
  if (this->has_query()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *query_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListMatchesRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.ListMatchesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListMatchesRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListMatchesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.ListMatchesRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.ListMatchesRequest)
    MergeFrom(*source);
  }
}

void ListMatchesRequest::MergeFrom(const ListMatchesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.ListMatchesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_limit()) {
    _internal_mutable_limit()->PROTOBUF_NAMESPACE_ID::Int32Value::MergeFrom(from._internal_limit());
  }
  if (from.has_authoritative()) {
    _internal_mutable_authoritative()->PROTOBUF_NAMESPACE_ID::BoolValue::MergeFrom(from._internal_authoritative());
  }
  if (from.has_label()) {
    _internal_mutable_label()->PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from._internal_label());
  }
  if (from.has_min_size()) {
    _internal_mutable_min_size()->PROTOBUF_NAMESPACE_ID::Int32Value::MergeFrom(from._internal_min_size());
  }
  if (from.has_max_size()) {
    _internal_mutable_max_size()->PROTOBUF_NAMESPACE_ID::Int32Value::MergeFrom(from._internal_max_size());
  }
  if (from.has_query()) {
    _internal_mutable_query()->PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from._internal_query());
  }
}

void ListMatchesRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.ListMatchesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListMatchesRequest::CopyFrom(const ListMatchesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.ListMatchesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListMatchesRequest::IsInitialized() const {
  return true;
}

void ListMatchesRequest::InternalSwap(ListMatchesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ListMatchesRequest, query_)
      + sizeof(ListMatchesRequest::query_)
      - PROTOBUF_FIELD_OFFSET(ListMatchesRequest, limit_)>(
          reinterpret_cast<char*>(&limit_),
          reinterpret_cast<char*>(&other->limit_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ListMatchesRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ListNotificationsRequest::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Int32Value& limit(const ListNotificationsRequest* msg);
};

const PROTOBUF_NAMESPACE_ID::Int32Value&
ListNotificationsRequest::_Internal::limit(const ListNotificationsRequest* msg) {
  return *msg->limit_;
}
void ListNotificationsRequest::clear_limit() {
  if (GetArena() == nullptr && limit_ != nullptr) {
    delete limit_;
  }
  limit_ = nullptr;
}
ListNotificationsRequest::ListNotificationsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nakama.api.ListNotificationsRequest)
}
ListNotificationsRequest::ListNotificationsRequest(const ListNotificationsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  cacheable_cursor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cacheable_cursor().empty()) {
    cacheable_cursor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_cacheable_cursor(), 
      GetArena());
  }
  if (from._internal_has_limit()) {
    limit_ = new PROTOBUF_NAMESPACE_ID::Int32Value(*from.limit_);
  } else {
    limit_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:nakama.api.ListNotificationsRequest)
}

void ListNotificationsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListNotificationsRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  cacheable_cursor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  limit_ = nullptr;
}

ListNotificationsRequest::~ListNotificationsRequest() {
  // @@protoc_insertion_point(destructor:nakama.api.ListNotificationsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListNotificationsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  cacheable_cursor_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete limit_;
}

void ListNotificationsRequest::ArenaDtor(void* object) {
  ListNotificationsRequest* _this = reinterpret_cast< ListNotificationsRequest* >(object);
  (void)_this;
}
void ListNotificationsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListNotificationsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListNotificationsRequest& ListNotificationsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListNotificationsRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  return *internal_default_instance();
}


void ListNotificationsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.ListNotificationsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cacheable_cursor_.ClearToEmpty();
  if (GetArena() == nullptr && limit_ != nullptr) {
    delete limit_;
  }
  limit_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListNotificationsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.protobuf.Int32Value limit = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_limit(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string cacheable_cursor = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_cacheable_cursor();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.ListNotificationsRequest.cacheable_cursor"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListNotificationsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.ListNotificationsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Int32Value limit = 1;
  if (this->has_limit()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::limit(this), target, stream);
  }

  // string cacheable_cursor = 2;
  if (this->cacheable_cursor().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cacheable_cursor().data(), static_cast<int>(this->_internal_cacheable_cursor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.ListNotificationsRequest.cacheable_cursor");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_cacheable_cursor(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.ListNotificationsRequest)
  return target;
}

size_t ListNotificationsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.ListNotificationsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string cacheable_cursor = 2;
  if (this->cacheable_cursor().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cacheable_cursor());
  }

  // .google.protobuf.Int32Value limit = 1;
  if (this->has_limit()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *limit_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListNotificationsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.ListNotificationsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListNotificationsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListNotificationsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.ListNotificationsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.ListNotificationsRequest)
    MergeFrom(*source);
  }
}

void ListNotificationsRequest::MergeFrom(const ListNotificationsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.ListNotificationsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cacheable_cursor().size() > 0) {
    _internal_set_cacheable_cursor(from._internal_cacheable_cursor());
  }
  if (from.has_limit()) {
    _internal_mutable_limit()->PROTOBUF_NAMESPACE_ID::Int32Value::MergeFrom(from._internal_limit());
  }
}

void ListNotificationsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.ListNotificationsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListNotificationsRequest::CopyFrom(const ListNotificationsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.ListNotificationsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListNotificationsRequest::IsInitialized() const {
  return true;
}

void ListNotificationsRequest::InternalSwap(ListNotificationsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  cacheable_cursor_.Swap(&other->cacheable_cursor_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(limit_, other->limit_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListNotificationsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ListStorageObjectsRequest::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Int32Value& limit(const ListStorageObjectsRequest* msg);
};

const PROTOBUF_NAMESPACE_ID::Int32Value&
ListStorageObjectsRequest::_Internal::limit(const ListStorageObjectsRequest* msg) {
  return *msg->limit_;
}
void ListStorageObjectsRequest::clear_limit() {
  if (GetArena() == nullptr && limit_ != nullptr) {
    delete limit_;
  }
  limit_ = nullptr;
}
ListStorageObjectsRequest::ListStorageObjectsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nakama.api.ListStorageObjectsRequest)
}
ListStorageObjectsRequest::ListStorageObjectsRequest(const ListStorageObjectsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_id().empty()) {
    user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_user_id(), 
      GetArena());
  }
  collection_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_collection().empty()) {
    collection_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_collection(), 
      GetArena());
  }
  cursor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cursor().empty()) {
    cursor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_cursor(), 
      GetArena());
  }
  if (from._internal_has_limit()) {
    limit_ = new PROTOBUF_NAMESPACE_ID::Int32Value(*from.limit_);
  } else {
    limit_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:nakama.api.ListStorageObjectsRequest)
}

void ListStorageObjectsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListStorageObjectsRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  collection_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cursor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  limit_ = nullptr;
}

ListStorageObjectsRequest::~ListStorageObjectsRequest() {
  // @@protoc_insertion_point(destructor:nakama.api.ListStorageObjectsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListStorageObjectsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  collection_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cursor_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete limit_;
}

void ListStorageObjectsRequest::ArenaDtor(void* object) {
  ListStorageObjectsRequest* _this = reinterpret_cast< ListStorageObjectsRequest* >(object);
  (void)_this;
}
void ListStorageObjectsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListStorageObjectsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListStorageObjectsRequest& ListStorageObjectsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListStorageObjectsRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  return *internal_default_instance();
}


void ListStorageObjectsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.ListStorageObjectsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_id_.ClearToEmpty();
  collection_.ClearToEmpty();
  cursor_.ClearToEmpty();
  if (GetArena() == nullptr && limit_ != nullptr) {
    delete limit_;
  }
  limit_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListStorageObjectsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.ListStorageObjectsRequest.user_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string collection = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_collection();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.ListStorageObjectsRequest.collection"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Int32Value limit = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_limit(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string cursor = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_cursor();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.ListStorageObjectsRequest.cursor"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListStorageObjectsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.ListStorageObjectsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_id = 1;
  if (this->user_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.ListStorageObjectsRequest.user_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user_id(), target);
  }

  // string collection = 2;
  if (this->collection().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_collection().data(), static_cast<int>(this->_internal_collection().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.ListStorageObjectsRequest.collection");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_collection(), target);
  }

  // .google.protobuf.Int32Value limit = 3;
  if (this->has_limit()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::limit(this), target, stream);
  }

  // string cursor = 4;
  if (this->cursor().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cursor().data(), static_cast<int>(this->_internal_cursor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.ListStorageObjectsRequest.cursor");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_cursor(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.ListStorageObjectsRequest)
  return target;
}

size_t ListStorageObjectsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.ListStorageObjectsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user_id = 1;
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // string collection = 2;
  if (this->collection().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_collection());
  }

  // string cursor = 4;
  if (this->cursor().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cursor());
  }

  // .google.protobuf.Int32Value limit = 3;
  if (this->has_limit()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *limit_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListStorageObjectsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.ListStorageObjectsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListStorageObjectsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListStorageObjectsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.ListStorageObjectsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.ListStorageObjectsRequest)
    MergeFrom(*source);
  }
}

void ListStorageObjectsRequest::MergeFrom(const ListStorageObjectsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.ListStorageObjectsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_id().size() > 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.collection().size() > 0) {
    _internal_set_collection(from._internal_collection());
  }
  if (from.cursor().size() > 0) {
    _internal_set_cursor(from._internal_cursor());
  }
  if (from.has_limit()) {
    _internal_mutable_limit()->PROTOBUF_NAMESPACE_ID::Int32Value::MergeFrom(from._internal_limit());
  }
}

void ListStorageObjectsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.ListStorageObjectsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListStorageObjectsRequest::CopyFrom(const ListStorageObjectsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.ListStorageObjectsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListStorageObjectsRequest::IsInitialized() const {
  return true;
}

void ListStorageObjectsRequest::InternalSwap(ListStorageObjectsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  user_id_.Swap(&other->user_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  collection_.Swap(&other->collection_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  cursor_.Swap(&other->cursor_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(limit_, other->limit_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListStorageObjectsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ListTournamentRecordsAroundOwnerRequest::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::UInt32Value& limit(const ListTournamentRecordsAroundOwnerRequest* msg);
  static const PROTOBUF_NAMESPACE_ID::Int64Value& expiry(const ListTournamentRecordsAroundOwnerRequest* msg);
};

const PROTOBUF_NAMESPACE_ID::UInt32Value&
ListTournamentRecordsAroundOwnerRequest::_Internal::limit(const ListTournamentRecordsAroundOwnerRequest* msg) {
  return *msg->limit_;
}
const PROTOBUF_NAMESPACE_ID::Int64Value&
ListTournamentRecordsAroundOwnerRequest::_Internal::expiry(const ListTournamentRecordsAroundOwnerRequest* msg) {
  return *msg->expiry_;
}
void ListTournamentRecordsAroundOwnerRequest::clear_limit() {
  if (GetArena() == nullptr && limit_ != nullptr) {
    delete limit_;
  }
  limit_ = nullptr;
}
void ListTournamentRecordsAroundOwnerRequest::clear_expiry() {
  if (GetArena() == nullptr && expiry_ != nullptr) {
    delete expiry_;
  }
  expiry_ = nullptr;
}
ListTournamentRecordsAroundOwnerRequest::ListTournamentRecordsAroundOwnerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nakama.api.ListTournamentRecordsAroundOwnerRequest)
}
ListTournamentRecordsAroundOwnerRequest::ListTournamentRecordsAroundOwnerRequest(const ListTournamentRecordsAroundOwnerRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tournament_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tournament_id().empty()) {
    tournament_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tournament_id(), 
      GetArena());
  }
  owner_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_owner_id().empty()) {
    owner_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_owner_id(), 
      GetArena());
  }
  if (from._internal_has_limit()) {
    limit_ = new PROTOBUF_NAMESPACE_ID::UInt32Value(*from.limit_);
  } else {
    limit_ = nullptr;
  }
  if (from._internal_has_expiry()) {
    expiry_ = new PROTOBUF_NAMESPACE_ID::Int64Value(*from.expiry_);
  } else {
    expiry_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:nakama.api.ListTournamentRecordsAroundOwnerRequest)
}

void ListTournamentRecordsAroundOwnerRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListTournamentRecordsAroundOwnerRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  tournament_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  owner_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&limit_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&expiry_) -
      reinterpret_cast<char*>(&limit_)) + sizeof(expiry_));
}

ListTournamentRecordsAroundOwnerRequest::~ListTournamentRecordsAroundOwnerRequest() {
  // @@protoc_insertion_point(destructor:nakama.api.ListTournamentRecordsAroundOwnerRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListTournamentRecordsAroundOwnerRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  tournament_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  owner_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete limit_;
  if (this != internal_default_instance()) delete expiry_;
}

void ListTournamentRecordsAroundOwnerRequest::ArenaDtor(void* object) {
  ListTournamentRecordsAroundOwnerRequest* _this = reinterpret_cast< ListTournamentRecordsAroundOwnerRequest* >(object);
  (void)_this;
}
void ListTournamentRecordsAroundOwnerRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListTournamentRecordsAroundOwnerRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListTournamentRecordsAroundOwnerRequest& ListTournamentRecordsAroundOwnerRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListTournamentRecordsAroundOwnerRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  return *internal_default_instance();
}


void ListTournamentRecordsAroundOwnerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.ListTournamentRecordsAroundOwnerRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tournament_id_.ClearToEmpty();
  owner_id_.ClearToEmpty();
  if (GetArena() == nullptr && limit_ != nullptr) {
    delete limit_;
  }
  limit_ = nullptr;
  if (GetArena() == nullptr && expiry_ != nullptr) {
    delete expiry_;
  }
  expiry_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListTournamentRecordsAroundOwnerRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string tournament_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_tournament_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.ListTournamentRecordsAroundOwnerRequest.tournament_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.UInt32Value limit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_limit(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string owner_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_owner_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.ListTournamentRecordsAroundOwnerRequest.owner_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Int64Value expiry = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_expiry(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListTournamentRecordsAroundOwnerRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.ListTournamentRecordsAroundOwnerRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tournament_id = 1;
  if (this->tournament_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tournament_id().data(), static_cast<int>(this->_internal_tournament_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.ListTournamentRecordsAroundOwnerRequest.tournament_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_tournament_id(), target);
  }

  // .google.protobuf.UInt32Value limit = 2;
  if (this->has_limit()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::limit(this), target, stream);
  }

  // string owner_id = 3;
  if (this->owner_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_owner_id().data(), static_cast<int>(this->_internal_owner_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.ListTournamentRecordsAroundOwnerRequest.owner_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_owner_id(), target);
  }

  // .google.protobuf.Int64Value expiry = 4;
  if (this->has_expiry()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::expiry(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.ListTournamentRecordsAroundOwnerRequest)
  return target;
}

size_t ListTournamentRecordsAroundOwnerRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.ListTournamentRecordsAroundOwnerRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string tournament_id = 1;
  if (this->tournament_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tournament_id());
  }

  // string owner_id = 3;
  if (this->owner_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_owner_id());
  }

  // .google.protobuf.UInt32Value limit = 2;
  if (this->has_limit()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *limit_);
  }

  // .google.protobuf.Int64Value expiry = 4;
  if (this->has_expiry()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *expiry_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListTournamentRecordsAroundOwnerRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.ListTournamentRecordsAroundOwnerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListTournamentRecordsAroundOwnerRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListTournamentRecordsAroundOwnerRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.ListTournamentRecordsAroundOwnerRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.ListTournamentRecordsAroundOwnerRequest)
    MergeFrom(*source);
  }
}

void ListTournamentRecordsAroundOwnerRequest::MergeFrom(const ListTournamentRecordsAroundOwnerRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.ListTournamentRecordsAroundOwnerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.tournament_id().size() > 0) {
    _internal_set_tournament_id(from._internal_tournament_id());
  }
  if (from.owner_id().size() > 0) {
    _internal_set_owner_id(from._internal_owner_id());
  }
  if (from.has_limit()) {
    _internal_mutable_limit()->PROTOBUF_NAMESPACE_ID::UInt32Value::MergeFrom(from._internal_limit());
  }
  if (from.has_expiry()) {
    _internal_mutable_expiry()->PROTOBUF_NAMESPACE_ID::Int64Value::MergeFrom(from._internal_expiry());
  }
}

void ListTournamentRecordsAroundOwnerRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.ListTournamentRecordsAroundOwnerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListTournamentRecordsAroundOwnerRequest::CopyFrom(const ListTournamentRecordsAroundOwnerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.ListTournamentRecordsAroundOwnerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListTournamentRecordsAroundOwnerRequest::IsInitialized() const {
  return true;
}

void ListTournamentRecordsAroundOwnerRequest::InternalSwap(ListTournamentRecordsAroundOwnerRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  tournament_id_.Swap(&other->tournament_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  owner_id_.Swap(&other->owner_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ListTournamentRecordsAroundOwnerRequest, expiry_)
      + sizeof(ListTournamentRecordsAroundOwnerRequest::expiry_)
      - PROTOBUF_FIELD_OFFSET(ListTournamentRecordsAroundOwnerRequest, limit_)>(
          reinterpret_cast<char*>(&limit_),
          reinterpret_cast<char*>(&other->limit_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ListTournamentRecordsAroundOwnerRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ListTournamentRecordsRequest::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Int32Value& limit(const ListTournamentRecordsRequest* msg);
  static const PROTOBUF_NAMESPACE_ID::Int64Value& expiry(const ListTournamentRecordsRequest* msg);
};

const PROTOBUF_NAMESPACE_ID::Int32Value&
ListTournamentRecordsRequest::_Internal::limit(const ListTournamentRecordsRequest* msg) {
  return *msg->limit_;
}
const PROTOBUF_NAMESPACE_ID::Int64Value&
ListTournamentRecordsRequest::_Internal::expiry(const ListTournamentRecordsRequest* msg) {
  return *msg->expiry_;
}
void ListTournamentRecordsRequest::clear_limit() {
  if (GetArena() == nullptr && limit_ != nullptr) {
    delete limit_;
  }
  limit_ = nullptr;
}
void ListTournamentRecordsRequest::clear_expiry() {
  if (GetArena() == nullptr && expiry_ != nullptr) {
    delete expiry_;
  }
  expiry_ = nullptr;
}
ListTournamentRecordsRequest::ListTournamentRecordsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  owner_ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nakama.api.ListTournamentRecordsRequest)
}
ListTournamentRecordsRequest::ListTournamentRecordsRequest(const ListTournamentRecordsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      owner_ids_(from.owner_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tournament_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tournament_id().empty()) {
    tournament_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tournament_id(), 
      GetArena());
  }
  cursor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cursor().empty()) {
    cursor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_cursor(), 
      GetArena());
  }
  if (from._internal_has_limit()) {
    limit_ = new PROTOBUF_NAMESPACE_ID::Int32Value(*from.limit_);
  } else {
    limit_ = nullptr;
  }
  if (from._internal_has_expiry()) {
    expiry_ = new PROTOBUF_NAMESPACE_ID::Int64Value(*from.expiry_);
  } else {
    expiry_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:nakama.api.ListTournamentRecordsRequest)
}

void ListTournamentRecordsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListTournamentRecordsRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  tournament_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cursor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&limit_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&expiry_) -
      reinterpret_cast<char*>(&limit_)) + sizeof(expiry_));
}

ListTournamentRecordsRequest::~ListTournamentRecordsRequest() {
  // @@protoc_insertion_point(destructor:nakama.api.ListTournamentRecordsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListTournamentRecordsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  tournament_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cursor_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete limit_;
  if (this != internal_default_instance()) delete expiry_;
}

void ListTournamentRecordsRequest::ArenaDtor(void* object) {
  ListTournamentRecordsRequest* _this = reinterpret_cast< ListTournamentRecordsRequest* >(object);
  (void)_this;
}
void ListTournamentRecordsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListTournamentRecordsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListTournamentRecordsRequest& ListTournamentRecordsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListTournamentRecordsRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  return *internal_default_instance();
}


void ListTournamentRecordsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.ListTournamentRecordsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  owner_ids_.Clear();
  tournament_id_.ClearToEmpty();
  cursor_.ClearToEmpty();
  if (GetArena() == nullptr && limit_ != nullptr) {
    delete limit_;
  }
  limit_ = nullptr;
  if (GetArena() == nullptr && expiry_ != nullptr) {
    delete expiry_;
  }
  expiry_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListTournamentRecordsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string tournament_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_tournament_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.ListTournamentRecordsRequest.tournament_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string owner_ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_owner_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.ListTournamentRecordsRequest.owner_ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Int32Value limit = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_limit(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string cursor = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_cursor();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.ListTournamentRecordsRequest.cursor"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Int64Value expiry = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_expiry(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListTournamentRecordsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.ListTournamentRecordsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tournament_id = 1;
  if (this->tournament_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tournament_id().data(), static_cast<int>(this->_internal_tournament_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.ListTournamentRecordsRequest.tournament_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_tournament_id(), target);
  }

  // repeated string owner_ids = 2;
  for (int i = 0, n = this->_internal_owner_ids_size(); i < n; i++) {
    const auto& s = this->_internal_owner_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.ListTournamentRecordsRequest.owner_ids");
    target = stream->WriteString(2, s, target);
  }

  // .google.protobuf.Int32Value limit = 3;
  if (this->has_limit()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::limit(this), target, stream);
  }

  // string cursor = 4;
  if (this->cursor().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cursor().data(), static_cast<int>(this->_internal_cursor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.ListTournamentRecordsRequest.cursor");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_cursor(), target);
  }

  // .google.protobuf.Int64Value expiry = 5;
  if (this->has_expiry()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::expiry(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.ListTournamentRecordsRequest)
  return target;
}

size_t ListTournamentRecordsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.ListTournamentRecordsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string owner_ids = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(owner_ids_.size());
  for (int i = 0, n = owner_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      owner_ids_.Get(i));
  }

  // string tournament_id = 1;
  if (this->tournament_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tournament_id());
  }

  // string cursor = 4;
  if (this->cursor().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cursor());
  }

  // .google.protobuf.Int32Value limit = 3;
  if (this->has_limit()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *limit_);
  }

  // .google.protobuf.Int64Value expiry = 5;
  if (this->has_expiry()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *expiry_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListTournamentRecordsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.ListTournamentRecordsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListTournamentRecordsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListTournamentRecordsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.ListTournamentRecordsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.ListTournamentRecordsRequest)
    MergeFrom(*source);
  }
}

void ListTournamentRecordsRequest::MergeFrom(const ListTournamentRecordsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.ListTournamentRecordsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  owner_ids_.MergeFrom(from.owner_ids_);
  if (from.tournament_id().size() > 0) {
    _internal_set_tournament_id(from._internal_tournament_id());
  }
  if (from.cursor().size() > 0) {
    _internal_set_cursor(from._internal_cursor());
  }
  if (from.has_limit()) {
    _internal_mutable_limit()->PROTOBUF_NAMESPACE_ID::Int32Value::MergeFrom(from._internal_limit());
  }
  if (from.has_expiry()) {
    _internal_mutable_expiry()->PROTOBUF_NAMESPACE_ID::Int64Value::MergeFrom(from._internal_expiry());
  }
}

void ListTournamentRecordsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.ListTournamentRecordsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListTournamentRecordsRequest::CopyFrom(const ListTournamentRecordsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.ListTournamentRecordsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListTournamentRecordsRequest::IsInitialized() const {
  return true;
}

void ListTournamentRecordsRequest::InternalSwap(ListTournamentRecordsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  owner_ids_.InternalSwap(&other->owner_ids_);
  tournament_id_.Swap(&other->tournament_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  cursor_.Swap(&other->cursor_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ListTournamentRecordsRequest, expiry_)
      + sizeof(ListTournamentRecordsRequest::expiry_)
      - PROTOBUF_FIELD_OFFSET(ListTournamentRecordsRequest, limit_)>(
          reinterpret_cast<char*>(&limit_),
          reinterpret_cast<char*>(&other->limit_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ListTournamentRecordsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ListTournamentsRequest::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::UInt32Value& category_start(const ListTournamentsRequest* msg);
  static const PROTOBUF_NAMESPACE_ID::UInt32Value& category_end(const ListTournamentsRequest* msg);
  static const PROTOBUF_NAMESPACE_ID::UInt32Value& start_time(const ListTournamentsRequest* msg);
  static const PROTOBUF_NAMESPACE_ID::UInt32Value& end_time(const ListTournamentsRequest* msg);
  static const PROTOBUF_NAMESPACE_ID::Int32Value& limit(const ListTournamentsRequest* msg);
};

const PROTOBUF_NAMESPACE_ID::UInt32Value&
ListTournamentsRequest::_Internal::category_start(const ListTournamentsRequest* msg) {
  return *msg->category_start_;
}
const PROTOBUF_NAMESPACE_ID::UInt32Value&
ListTournamentsRequest::_Internal::category_end(const ListTournamentsRequest* msg) {
  return *msg->category_end_;
}
const PROTOBUF_NAMESPACE_ID::UInt32Value&
ListTournamentsRequest::_Internal::start_time(const ListTournamentsRequest* msg) {
  return *msg->start_time_;
}
const PROTOBUF_NAMESPACE_ID::UInt32Value&
ListTournamentsRequest::_Internal::end_time(const ListTournamentsRequest* msg) {
  return *msg->end_time_;
}
const PROTOBUF_NAMESPACE_ID::Int32Value&
ListTournamentsRequest::_Internal::limit(const ListTournamentsRequest* msg) {
  return *msg->limit_;
}
void ListTournamentsRequest::clear_category_start() {
  if (GetArena() == nullptr && category_start_ != nullptr) {
    delete category_start_;
  }
  category_start_ = nullptr;
}
void ListTournamentsRequest::clear_category_end() {
  if (GetArena() == nullptr && category_end_ != nullptr) {
    delete category_end_;
  }
  category_end_ = nullptr;
}
void ListTournamentsRequest::clear_start_time() {
  if (GetArena() == nullptr && start_time_ != nullptr) {
    delete start_time_;
  }
  start_time_ = nullptr;
}
void ListTournamentsRequest::clear_end_time() {
  if (GetArena() == nullptr && end_time_ != nullptr) {
    delete end_time_;
  }
  end_time_ = nullptr;
}
void ListTournamentsRequest::clear_limit() {
  if (GetArena() == nullptr && limit_ != nullptr) {
    delete limit_;
  }
  limit_ = nullptr;
}
ListTournamentsRequest::ListTournamentsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nakama.api.ListTournamentsRequest)
}
ListTournamentsRequest::ListTournamentsRequest(const ListTournamentsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  cursor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cursor().empty()) {
    cursor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_cursor(), 
      GetArena());
  }
  if (from._internal_has_category_start()) {
    category_start_ = new PROTOBUF_NAMESPACE_ID::UInt32Value(*from.category_start_);
  } else {
    category_start_ = nullptr;
  }
  if (from._internal_has_category_end()) {
    category_end_ = new PROTOBUF_NAMESPACE_ID::UInt32Value(*from.category_end_);
  } else {
    category_end_ = nullptr;
  }
  if (from._internal_has_start_time()) {
    start_time_ = new PROTOBUF_NAMESPACE_ID::UInt32Value(*from.start_time_);
  } else {
    start_time_ = nullptr;
  }
  if (from._internal_has_end_time()) {
    end_time_ = new PROTOBUF_NAMESPACE_ID::UInt32Value(*from.end_time_);
  } else {
    end_time_ = nullptr;
  }
  if (from._internal_has_limit()) {
    limit_ = new PROTOBUF_NAMESPACE_ID::Int32Value(*from.limit_);
  } else {
    limit_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:nakama.api.ListTournamentsRequest)
}

void ListTournamentsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListTournamentsRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  cursor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&category_start_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&limit_) -
      reinterpret_cast<char*>(&category_start_)) + sizeof(limit_));
}

ListTournamentsRequest::~ListTournamentsRequest() {
  // @@protoc_insertion_point(destructor:nakama.api.ListTournamentsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListTournamentsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  cursor_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete category_start_;
  if (this != internal_default_instance()) delete category_end_;
  if (this != internal_default_instance()) delete start_time_;
  if (this != internal_default_instance()) delete end_time_;
  if (this != internal_default_instance()) delete limit_;
}

void ListTournamentsRequest::ArenaDtor(void* object) {
  ListTournamentsRequest* _this = reinterpret_cast< ListTournamentsRequest* >(object);
  (void)_this;
}
void ListTournamentsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListTournamentsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListTournamentsRequest& ListTournamentsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListTournamentsRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  return *internal_default_instance();
}


void ListTournamentsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.ListTournamentsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cursor_.ClearToEmpty();
  if (GetArena() == nullptr && category_start_ != nullptr) {
    delete category_start_;
  }
  category_start_ = nullptr;
  if (GetArena() == nullptr && category_end_ != nullptr) {
    delete category_end_;
  }
  category_end_ = nullptr;
  if (GetArena() == nullptr && start_time_ != nullptr) {
    delete start_time_;
  }
  start_time_ = nullptr;
  if (GetArena() == nullptr && end_time_ != nullptr) {
    delete end_time_;
  }
  end_time_ = nullptr;
  if (GetArena() == nullptr && limit_ != nullptr) {
    delete limit_;
  }
  limit_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListTournamentsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.protobuf.UInt32Value category_start = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_category_start(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.UInt32Value category_end = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_category_end(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.UInt32Value start_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_start_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.UInt32Value end_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_end_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Int32Value limit = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_limit(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string cursor = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_cursor();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.ListTournamentsRequest.cursor"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListTournamentsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.ListTournamentsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.UInt32Value category_start = 1;
  if (this->has_category_start()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::category_start(this), target, stream);
  }

  // .google.protobuf.UInt32Value category_end = 2;
  if (this->has_category_end()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::category_end(this), target, stream);
  }

  // .google.protobuf.UInt32Value start_time = 3;
  if (this->has_start_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::start_time(this), target, stream);
  }

  // .google.protobuf.UInt32Value end_time = 4;
  if (this->has_end_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::end_time(this), target, stream);
  }

  // .google.protobuf.Int32Value limit = 6;
  if (this->has_limit()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::limit(this), target, stream);
  }

  // string cursor = 8;
  if (this->cursor().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cursor().data(), static_cast<int>(this->_internal_cursor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.ListTournamentsRequest.cursor");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_cursor(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.ListTournamentsRequest)
  return target;
}

size_t ListTournamentsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.ListTournamentsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string cursor = 8;
  if (this->cursor().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cursor());
  }

  // .google.protobuf.UInt32Value category_start = 1;
  if (this->has_category_start()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *category_start_);
  }

  // .google.protobuf.UInt32Value category_end = 2;
  if (this->has_category_end()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *category_end_);
  }

  // .google.protobuf.UInt32Value start_time = 3;
  if (this->has_start_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *start_time_);
  }

  // .google.protobuf.UInt32Value end_time = 4;
  if (this->has_end_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *end_time_);
  }

  // .google.protobuf.Int32Value limit = 6;
  if (this->has_limit()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *limit_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListTournamentsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.ListTournamentsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListTournamentsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListTournamentsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.ListTournamentsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.ListTournamentsRequest)
    MergeFrom(*source);
  }
}

void ListTournamentsRequest::MergeFrom(const ListTournamentsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.ListTournamentsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cursor().size() > 0) {
    _internal_set_cursor(from._internal_cursor());
  }
  if (from.has_category_start()) {
    _internal_mutable_category_start()->PROTOBUF_NAMESPACE_ID::UInt32Value::MergeFrom(from._internal_category_start());
  }
  if (from.has_category_end()) {
    _internal_mutable_category_end()->PROTOBUF_NAMESPACE_ID::UInt32Value::MergeFrom(from._internal_category_end());
  }
  if (from.has_start_time()) {
    _internal_mutable_start_time()->PROTOBUF_NAMESPACE_ID::UInt32Value::MergeFrom(from._internal_start_time());
  }
  if (from.has_end_time()) {
    _internal_mutable_end_time()->PROTOBUF_NAMESPACE_ID::UInt32Value::MergeFrom(from._internal_end_time());
  }
  if (from.has_limit()) {
    _internal_mutable_limit()->PROTOBUF_NAMESPACE_ID::Int32Value::MergeFrom(from._internal_limit());
  }
}

void ListTournamentsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.ListTournamentsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListTournamentsRequest::CopyFrom(const ListTournamentsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.ListTournamentsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListTournamentsRequest::IsInitialized() const {
  return true;
}

void ListTournamentsRequest::InternalSwap(ListTournamentsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  cursor_.Swap(&other->cursor_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ListTournamentsRequest, limit_)
      + sizeof(ListTournamentsRequest::limit_)
      - PROTOBUF_FIELD_OFFSET(ListTournamentsRequest, category_start_)>(
          reinterpret_cast<char*>(&category_start_),
          reinterpret_cast<char*>(&other->category_start_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ListTournamentsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ListUserGroupsRequest::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Int32Value& limit(const ListUserGroupsRequest* msg);
  static const PROTOBUF_NAMESPACE_ID::Int32Value& state(const ListUserGroupsRequest* msg);
};

const PROTOBUF_NAMESPACE_ID::Int32Value&
ListUserGroupsRequest::_Internal::limit(const ListUserGroupsRequest* msg) {
  return *msg->limit_;
}
const PROTOBUF_NAMESPACE_ID::Int32Value&
ListUserGroupsRequest::_Internal::state(const ListUserGroupsRequest* msg) {
  return *msg->state_;
}
void ListUserGroupsRequest::clear_limit() {
  if (GetArena() == nullptr && limit_ != nullptr) {
    delete limit_;
  }
  limit_ = nullptr;
}
void ListUserGroupsRequest::clear_state() {
  if (GetArena() == nullptr && state_ != nullptr) {
    delete state_;
  }
  state_ = nullptr;
}
ListUserGroupsRequest::ListUserGroupsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nakama.api.ListUserGroupsRequest)
}
ListUserGroupsRequest::ListUserGroupsRequest(const ListUserGroupsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_id().empty()) {
    user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_user_id(), 
      GetArena());
  }
  cursor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cursor().empty()) {
    cursor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_cursor(), 
      GetArena());
  }
  if (from._internal_has_limit()) {
    limit_ = new PROTOBUF_NAMESPACE_ID::Int32Value(*from.limit_);
  } else {
    limit_ = nullptr;
  }
  if (from._internal_has_state()) {
    state_ = new PROTOBUF_NAMESPACE_ID::Int32Value(*from.state_);
  } else {
    state_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:nakama.api.ListUserGroupsRequest)
}

void ListUserGroupsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListUserGroupsRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cursor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&limit_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&limit_)) + sizeof(state_));
}

ListUserGroupsRequest::~ListUserGroupsRequest() {
  // @@protoc_insertion_point(destructor:nakama.api.ListUserGroupsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListUserGroupsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cursor_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete limit_;
  if (this != internal_default_instance()) delete state_;
}

void ListUserGroupsRequest::ArenaDtor(void* object) {
  ListUserGroupsRequest* _this = reinterpret_cast< ListUserGroupsRequest* >(object);
  (void)_this;
}
void ListUserGroupsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListUserGroupsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListUserGroupsRequest& ListUserGroupsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListUserGroupsRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  return *internal_default_instance();
}


void ListUserGroupsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.ListUserGroupsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_id_.ClearToEmpty();
  cursor_.ClearToEmpty();
  if (GetArena() == nullptr && limit_ != nullptr) {
    delete limit_;
  }
  limit_ = nullptr;
  if (GetArena() == nullptr && state_ != nullptr) {
    delete state_;
  }
  state_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListUserGroupsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.ListUserGroupsRequest.user_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Int32Value limit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_limit(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Int32Value state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string cursor = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_cursor();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.ListUserGroupsRequest.cursor"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListUserGroupsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.ListUserGroupsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_id = 1;
  if (this->user_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.ListUserGroupsRequest.user_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user_id(), target);
  }

  // .google.protobuf.Int32Value limit = 2;
  if (this->has_limit()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::limit(this), target, stream);
  }

  // .google.protobuf.Int32Value state = 3;
  if (this->has_state()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::state(this), target, stream);
  }

  // string cursor = 4;
  if (this->cursor().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cursor().data(), static_cast<int>(this->_internal_cursor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.ListUserGroupsRequest.cursor");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_cursor(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.ListUserGroupsRequest)
  return target;
}

size_t ListUserGroupsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.ListUserGroupsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user_id = 1;
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // string cursor = 4;
  if (this->cursor().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cursor());
  }

  // .google.protobuf.Int32Value limit = 2;
  if (this->has_limit()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *limit_);
  }

  // .google.protobuf.Int32Value state = 3;
  if (this->has_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *state_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListUserGroupsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.ListUserGroupsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListUserGroupsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListUserGroupsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.ListUserGroupsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.ListUserGroupsRequest)
    MergeFrom(*source);
  }
}

void ListUserGroupsRequest::MergeFrom(const ListUserGroupsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.ListUserGroupsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_id().size() > 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.cursor().size() > 0) {
    _internal_set_cursor(from._internal_cursor());
  }
  if (from.has_limit()) {
    _internal_mutable_limit()->PROTOBUF_NAMESPACE_ID::Int32Value::MergeFrom(from._internal_limit());
  }
  if (from.has_state()) {
    _internal_mutable_state()->PROTOBUF_NAMESPACE_ID::Int32Value::MergeFrom(from._internal_state());
  }
}

void ListUserGroupsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.ListUserGroupsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListUserGroupsRequest::CopyFrom(const ListUserGroupsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.ListUserGroupsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListUserGroupsRequest::IsInitialized() const {
  return true;
}

void ListUserGroupsRequest::InternalSwap(ListUserGroupsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  user_id_.Swap(&other->user_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  cursor_.Swap(&other->cursor_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ListUserGroupsRequest, state_)
      + sizeof(ListUserGroupsRequest::state_)
      - PROTOBUF_FIELD_OFFSET(ListUserGroupsRequest, limit_)>(
          reinterpret_cast<char*>(&limit_),
          reinterpret_cast<char*>(&other->limit_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ListUserGroupsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Match::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::StringValue& label(const Match* msg);
};

const PROTOBUF_NAMESPACE_ID::StringValue&
Match::_Internal::label(const Match* msg) {
  return *msg->label_;
}
void Match::clear_label() {
  if (GetArena() == nullptr && label_ != nullptr) {
    delete label_;
  }
  label_ = nullptr;
}
Match::Match(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nakama.api.Match)
}
Match::Match(const Match& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  match_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_match_id().empty()) {
    match_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_match_id(), 
      GetArena());
  }
  handler_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_handler_name().empty()) {
    handler_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_handler_name(), 
      GetArena());
  }
  if (from._internal_has_label()) {
    label_ = new PROTOBUF_NAMESPACE_ID::StringValue(*from.label_);
  } else {
    label_ = nullptr;
  }
  ::memcpy(&authoritative_, &from.authoritative_,
    static_cast<size_t>(reinterpret_cast<char*>(&tick_rate_) -
    reinterpret_cast<char*>(&authoritative_)) + sizeof(tick_rate_));
  // @@protoc_insertion_point(copy_constructor:nakama.api.Match)
}

void Match::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Match_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  match_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  handler_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&label_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&tick_rate_) -
      reinterpret_cast<char*>(&label_)) + sizeof(tick_rate_));
}

Match::~Match() {
  // @@protoc_insertion_point(destructor:nakama.api.Match)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Match::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  match_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  handler_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete label_;
}

void Match::ArenaDtor(void* object) {
  Match* _this = reinterpret_cast< Match* >(object);
  (void)_this;
}
void Match::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Match::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Match& Match::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Match_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  return *internal_default_instance();
}


void Match::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.Match)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  match_id_.ClearToEmpty();
  handler_name_.ClearToEmpty();
  if (GetArena() == nullptr && label_ != nullptr) {
    delete label_;
  }
  label_ = nullptr;
  ::memset(&authoritative_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tick_rate_) -
      reinterpret_cast<char*>(&authoritative_)) + sizeof(tick_rate_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Match::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string match_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_match_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.Match.match_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool authoritative = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          authoritative_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.StringValue label = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_label(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 tick_rate = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          tick_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string handler_name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_handler_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.Match.handler_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Match::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.Match)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string match_id = 1;
  if (this->match_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_match_id().data(), static_cast<int>(this->_internal_match_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.Match.match_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_match_id(), target);
  }

  // bool authoritative = 2;
  if (this->authoritative() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_authoritative(), target);
  }

  // .google.protobuf.StringValue label = 3;
  if (this->has_label()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::label(this), target, stream);
  }

  // int32 size = 4;
  if (this->size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_size(), target);
  }

  // int32 tick_rate = 5;
  if (this->tick_rate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_tick_rate(), target);
  }

  // string handler_name = 6;
  if (this->handler_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_handler_name().data(), static_cast<int>(this->_internal_handler_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.Match.handler_name");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_handler_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.Match)
  return target;
}

size_t Match::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.Match)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string match_id = 1;
  if (this->match_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_match_id());
  }

  // string handler_name = 6;
  if (this->handler_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_handler_name());
  }

  // .google.protobuf.StringValue label = 3;
  if (this->has_label()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *label_);
  }

  // bool authoritative = 2;
  if (this->authoritative() != 0) {
    total_size += 1 + 1;
  }

  // int32 size = 4;
  if (this->size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_size());
  }

  // int32 tick_rate = 5;
  if (this->tick_rate() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_tick_rate());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Match::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.Match)
  GOOGLE_DCHECK_NE(&from, this);
  const Match* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Match>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.Match)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.Match)
    MergeFrom(*source);
  }
}

void Match::MergeFrom(const Match& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.Match)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.match_id().size() > 0) {
    _internal_set_match_id(from._internal_match_id());
  }
  if (from.handler_name().size() > 0) {
    _internal_set_handler_name(from._internal_handler_name());
  }
  if (from.has_label()) {
    _internal_mutable_label()->PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from._internal_label());
  }
  if (from.authoritative() != 0) {
    _internal_set_authoritative(from._internal_authoritative());
  }
  if (from.size() != 0) {
    _internal_set_size(from._internal_size());
  }
  if (from.tick_rate() != 0) {
    _internal_set_tick_rate(from._internal_tick_rate());
  }
}

void Match::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.Match)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Match::CopyFrom(const Match& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.Match)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Match::IsInitialized() const {
  return true;
}

void Match::InternalSwap(Match* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  match_id_.Swap(&other->match_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  handler_name_.Swap(&other->handler_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Match, tick_rate_)
      + sizeof(Match::tick_rate_)
      - PROTOBUF_FIELD_OFFSET(Match, label_)>(
          reinterpret_cast<char*>(&label_),
          reinterpret_cast<char*>(&other->label_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Match::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MatchList::_Internal {
 public:
};

MatchList::MatchList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  matches_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nakama.api.MatchList)
}
MatchList::MatchList(const MatchList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      matches_(from.matches_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:nakama.api.MatchList)
}

void MatchList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MatchList_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
}

MatchList::~MatchList() {
  // @@protoc_insertion_point(destructor:nakama.api.MatchList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MatchList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MatchList::ArenaDtor(void* object) {
  MatchList* _this = reinterpret_cast< MatchList* >(object);
  (void)_this;
}
void MatchList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MatchList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MatchList& MatchList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MatchList_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  return *internal_default_instance();
}


void MatchList::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.MatchList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  matches_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MatchList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .nakama.api.Match matches = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_matches(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MatchList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.MatchList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .nakama.api.Match matches = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_matches_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_matches(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.MatchList)
  return target;
}

size_t MatchList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.MatchList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .nakama.api.Match matches = 1;
  total_size += 1UL * this->_internal_matches_size();
  for (const auto& msg : this->matches_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MatchList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.MatchList)
  GOOGLE_DCHECK_NE(&from, this);
  const MatchList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MatchList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.MatchList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.MatchList)
    MergeFrom(*source);
  }
}

void MatchList::MergeFrom(const MatchList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.MatchList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  matches_.MergeFrom(from.matches_);
}

void MatchList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.MatchList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatchList::CopyFrom(const MatchList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.MatchList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchList::IsInitialized() const {
  return true;
}

void MatchList::InternalSwap(MatchList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  matches_.InternalSwap(&other->matches_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MatchList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Notification::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& create_time(const Notification* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
Notification::_Internal::create_time(const Notification* msg) {
  return *msg->create_time_;
}
void Notification::clear_create_time() {
  if (GetArena() == nullptr && create_time_ != nullptr) {
    delete create_time_;
  }
  create_time_ = nullptr;
}
Notification::Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nakama.api.Notification)
}
Notification::Notification(const Notification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArena());
  }
  subject_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_subject().empty()) {
    subject_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_subject(), 
      GetArena());
  }
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_content().empty()) {
    content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_content(), 
      GetArena());
  }
  sender_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sender_id().empty()) {
    sender_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sender_id(), 
      GetArena());
  }
  if (from._internal_has_create_time()) {
    create_time_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.create_time_);
  } else {
    create_time_ = nullptr;
  }
  ::memcpy(&code_, &from.code_,
    static_cast<size_t>(reinterpret_cast<char*>(&persistent_) -
    reinterpret_cast<char*>(&code_)) + sizeof(persistent_));
  // @@protoc_insertion_point(copy_constructor:nakama.api.Notification)
}

void Notification::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Notification_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  subject_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sender_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&create_time_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&persistent_) -
      reinterpret_cast<char*>(&create_time_)) + sizeof(persistent_));
}

Notification::~Notification() {
  // @@protoc_insertion_point(destructor:nakama.api.Notification)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Notification::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  subject_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  content_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sender_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete create_time_;
}

void Notification::ArenaDtor(void* object) {
  Notification* _this = reinterpret_cast< Notification* >(object);
  (void)_this;
}
void Notification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Notification& Notification::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Notification_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  return *internal_default_instance();
}


void Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.Notification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  subject_.ClearToEmpty();
  content_.ClearToEmpty();
  sender_id_.ClearToEmpty();
  if (GetArena() == nullptr && create_time_ != nullptr) {
    delete create_time_;
  }
  create_time_ = nullptr;
  ::memset(&code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&persistent_) -
      reinterpret_cast<char*>(&code_)) + sizeof(persistent_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Notification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.Notification.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string subject = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_subject();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.Notification.subject"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string content = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_content();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.Notification.content"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 code = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sender_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_sender_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.Notification.sender_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp create_time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_create_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool persistent = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          persistent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Notification::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.Notification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.Notification.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string subject = 2;
  if (this->subject().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_subject().data(), static_cast<int>(this->_internal_subject().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.Notification.subject");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_subject(), target);
  }

  // string content = 3;
  if (this->content().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content().data(), static_cast<int>(this->_internal_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.Notification.content");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_content(), target);
  }

  // int32 code = 4;
  if (this->code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_code(), target);
  }

  // string sender_id = 5;
  if (this->sender_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sender_id().data(), static_cast<int>(this->_internal_sender_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.Notification.sender_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_sender_id(), target);
  }

  // .google.protobuf.Timestamp create_time = 6;
  if (this->has_create_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::create_time(this), target, stream);
  }

  // bool persistent = 7;
  if (this->persistent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_persistent(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.Notification)
  return target;
}

size_t Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.Notification)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string subject = 2;
  if (this->subject().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_subject());
  }

  // string content = 3;
  if (this->content().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content());
  }

  // string sender_id = 5;
  if (this->sender_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sender_id());
  }

  // .google.protobuf.Timestamp create_time = 6;
  if (this->has_create_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *create_time_);
  }

  // int32 code = 4;
  if (this->code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_code());
  }

  // bool persistent = 7;
  if (this->persistent() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Notification::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.Notification)
  GOOGLE_DCHECK_NE(&from, this);
  const Notification* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Notification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.Notification)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.Notification)
    MergeFrom(*source);
  }
}

void Notification::MergeFrom(const Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.Notification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.subject().size() > 0) {
    _internal_set_subject(from._internal_subject());
  }
  if (from.content().size() > 0) {
    _internal_set_content(from._internal_content());
  }
  if (from.sender_id().size() > 0) {
    _internal_set_sender_id(from._internal_sender_id());
  }
  if (from.has_create_time()) {
    _internal_mutable_create_time()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_create_time());
  }
  if (from.code() != 0) {
    _internal_set_code(from._internal_code());
  }
  if (from.persistent() != 0) {
    _internal_set_persistent(from._internal_persistent());
  }
}

void Notification::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Notification::CopyFrom(const Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Notification::IsInitialized() const {
  return true;
}

void Notification::InternalSwap(Notification* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  subject_.Swap(&other->subject_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  content_.Swap(&other->content_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sender_id_.Swap(&other->sender_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Notification, persistent_)
      + sizeof(Notification::persistent_)
      - PROTOBUF_FIELD_OFFSET(Notification, create_time_)>(
          reinterpret_cast<char*>(&create_time_),
          reinterpret_cast<char*>(&other->create_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Notification::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class NotificationList::_Internal {
 public:
};

NotificationList::NotificationList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  notifications_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nakama.api.NotificationList)
}
NotificationList::NotificationList(const NotificationList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      notifications_(from.notifications_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  cacheable_cursor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cacheable_cursor().empty()) {
    cacheable_cursor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_cacheable_cursor(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:nakama.api.NotificationList)
}

void NotificationList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NotificationList_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  cacheable_cursor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

NotificationList::~NotificationList() {
  // @@protoc_insertion_point(destructor:nakama.api.NotificationList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NotificationList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  cacheable_cursor_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NotificationList::ArenaDtor(void* object) {
  NotificationList* _this = reinterpret_cast< NotificationList* >(object);
  (void)_this;
}
void NotificationList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NotificationList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NotificationList& NotificationList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NotificationList_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  return *internal_default_instance();
}


void NotificationList::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.NotificationList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  notifications_.Clear();
  cacheable_cursor_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NotificationList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .nakama.api.Notification notifications = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_notifications(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // string cacheable_cursor = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_cacheable_cursor();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.NotificationList.cacheable_cursor"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NotificationList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.NotificationList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .nakama.api.Notification notifications = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_notifications_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_notifications(i), target, stream);
  }

  // string cacheable_cursor = 2;
  if (this->cacheable_cursor().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cacheable_cursor().data(), static_cast<int>(this->_internal_cacheable_cursor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.NotificationList.cacheable_cursor");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_cacheable_cursor(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.NotificationList)
  return target;
}

size_t NotificationList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.NotificationList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .nakama.api.Notification notifications = 1;
  total_size += 1UL * this->_internal_notifications_size();
  for (const auto& msg : this->notifications_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string cacheable_cursor = 2;
  if (this->cacheable_cursor().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cacheable_cursor());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NotificationList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.NotificationList)
  GOOGLE_DCHECK_NE(&from, this);
  const NotificationList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NotificationList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.NotificationList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.NotificationList)
    MergeFrom(*source);
  }
}

void NotificationList::MergeFrom(const NotificationList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.NotificationList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  notifications_.MergeFrom(from.notifications_);
  if (from.cacheable_cursor().size() > 0) {
    _internal_set_cacheable_cursor(from._internal_cacheable_cursor());
  }
}

void NotificationList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.NotificationList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotificationList::CopyFrom(const NotificationList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.NotificationList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotificationList::IsInitialized() const {
  return true;
}

void NotificationList::InternalSwap(NotificationList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  notifications_.InternalSwap(&other->notifications_);
  cacheable_cursor_.Swap(&other->cacheable_cursor_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata NotificationList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PromoteGroupUsersRequest::_Internal {
 public:
};

PromoteGroupUsersRequest::PromoteGroupUsersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  user_ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nakama.api.PromoteGroupUsersRequest)
}
PromoteGroupUsersRequest::PromoteGroupUsersRequest(const PromoteGroupUsersRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      user_ids_(from.user_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  group_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_group_id().empty()) {
    group_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_group_id(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:nakama.api.PromoteGroupUsersRequest)
}

void PromoteGroupUsersRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PromoteGroupUsersRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  group_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PromoteGroupUsersRequest::~PromoteGroupUsersRequest() {
  // @@protoc_insertion_point(destructor:nakama.api.PromoteGroupUsersRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PromoteGroupUsersRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  group_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PromoteGroupUsersRequest::ArenaDtor(void* object) {
  PromoteGroupUsersRequest* _this = reinterpret_cast< PromoteGroupUsersRequest* >(object);
  (void)_this;
}
void PromoteGroupUsersRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PromoteGroupUsersRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PromoteGroupUsersRequest& PromoteGroupUsersRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PromoteGroupUsersRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  return *internal_default_instance();
}


void PromoteGroupUsersRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.PromoteGroupUsersRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_ids_.Clear();
  group_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PromoteGroupUsersRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string group_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_group_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.PromoteGroupUsersRequest.group_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string user_ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_user_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.PromoteGroupUsersRequest.user_ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PromoteGroupUsersRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.PromoteGroupUsersRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string group_id = 1;
  if (this->group_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_group_id().data(), static_cast<int>(this->_internal_group_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.PromoteGroupUsersRequest.group_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_group_id(), target);
  }

  // repeated string user_ids = 2;
  for (int i = 0, n = this->_internal_user_ids_size(); i < n; i++) {
    const auto& s = this->_internal_user_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.PromoteGroupUsersRequest.user_ids");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.PromoteGroupUsersRequest)
  return target;
}

size_t PromoteGroupUsersRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.PromoteGroupUsersRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string user_ids = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(user_ids_.size());
  for (int i = 0, n = user_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      user_ids_.Get(i));
  }

  // string group_id = 1;
  if (this->group_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_group_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PromoteGroupUsersRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.PromoteGroupUsersRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PromoteGroupUsersRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PromoteGroupUsersRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.PromoteGroupUsersRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.PromoteGroupUsersRequest)
    MergeFrom(*source);
  }
}

void PromoteGroupUsersRequest::MergeFrom(const PromoteGroupUsersRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.PromoteGroupUsersRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  user_ids_.MergeFrom(from.user_ids_);
  if (from.group_id().size() > 0) {
    _internal_set_group_id(from._internal_group_id());
  }
}

void PromoteGroupUsersRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.PromoteGroupUsersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PromoteGroupUsersRequest::CopyFrom(const PromoteGroupUsersRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.PromoteGroupUsersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PromoteGroupUsersRequest::IsInitialized() const {
  return true;
}

void PromoteGroupUsersRequest::InternalSwap(PromoteGroupUsersRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  user_ids_.InternalSwap(&other->user_ids_);
  group_id_.Swap(&other->group_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata PromoteGroupUsersRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DemoteGroupUsersRequest::_Internal {
 public:
};

DemoteGroupUsersRequest::DemoteGroupUsersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  user_ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nakama.api.DemoteGroupUsersRequest)
}
DemoteGroupUsersRequest::DemoteGroupUsersRequest(const DemoteGroupUsersRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      user_ids_(from.user_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  group_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_group_id().empty()) {
    group_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_group_id(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:nakama.api.DemoteGroupUsersRequest)
}

void DemoteGroupUsersRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DemoteGroupUsersRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  group_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DemoteGroupUsersRequest::~DemoteGroupUsersRequest() {
  // @@protoc_insertion_point(destructor:nakama.api.DemoteGroupUsersRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DemoteGroupUsersRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  group_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DemoteGroupUsersRequest::ArenaDtor(void* object) {
  DemoteGroupUsersRequest* _this = reinterpret_cast< DemoteGroupUsersRequest* >(object);
  (void)_this;
}
void DemoteGroupUsersRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DemoteGroupUsersRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DemoteGroupUsersRequest& DemoteGroupUsersRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DemoteGroupUsersRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  return *internal_default_instance();
}


void DemoteGroupUsersRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.DemoteGroupUsersRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_ids_.Clear();
  group_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DemoteGroupUsersRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string group_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_group_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.DemoteGroupUsersRequest.group_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string user_ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_user_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.DemoteGroupUsersRequest.user_ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DemoteGroupUsersRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.DemoteGroupUsersRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string group_id = 1;
  if (this->group_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_group_id().data(), static_cast<int>(this->_internal_group_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.DemoteGroupUsersRequest.group_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_group_id(), target);
  }

  // repeated string user_ids = 2;
  for (int i = 0, n = this->_internal_user_ids_size(); i < n; i++) {
    const auto& s = this->_internal_user_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.DemoteGroupUsersRequest.user_ids");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.DemoteGroupUsersRequest)
  return target;
}

size_t DemoteGroupUsersRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.DemoteGroupUsersRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string user_ids = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(user_ids_.size());
  for (int i = 0, n = user_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      user_ids_.Get(i));
  }

  // string group_id = 1;
  if (this->group_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_group_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DemoteGroupUsersRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.DemoteGroupUsersRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DemoteGroupUsersRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DemoteGroupUsersRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.DemoteGroupUsersRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.DemoteGroupUsersRequest)
    MergeFrom(*source);
  }
}

void DemoteGroupUsersRequest::MergeFrom(const DemoteGroupUsersRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.DemoteGroupUsersRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  user_ids_.MergeFrom(from.user_ids_);
  if (from.group_id().size() > 0) {
    _internal_set_group_id(from._internal_group_id());
  }
}

void DemoteGroupUsersRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.DemoteGroupUsersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DemoteGroupUsersRequest::CopyFrom(const DemoteGroupUsersRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.DemoteGroupUsersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DemoteGroupUsersRequest::IsInitialized() const {
  return true;
}

void DemoteGroupUsersRequest::InternalSwap(DemoteGroupUsersRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  user_ids_.InternalSwap(&other->user_ids_);
  group_id_.Swap(&other->group_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata DemoteGroupUsersRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ReadStorageObjectId::_Internal {
 public:
};

ReadStorageObjectId::ReadStorageObjectId(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nakama.api.ReadStorageObjectId)
}
ReadStorageObjectId::ReadStorageObjectId(const ReadStorageObjectId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  collection_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_collection().empty()) {
    collection_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_collection(), 
      GetArena());
  }
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key(), 
      GetArena());
  }
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_id().empty()) {
    user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_user_id(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:nakama.api.ReadStorageObjectId)
}

void ReadStorageObjectId::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReadStorageObjectId_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  collection_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ReadStorageObjectId::~ReadStorageObjectId() {
  // @@protoc_insertion_point(destructor:nakama.api.ReadStorageObjectId)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReadStorageObjectId::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  collection_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ReadStorageObjectId::ArenaDtor(void* object) {
  ReadStorageObjectId* _this = reinterpret_cast< ReadStorageObjectId* >(object);
  (void)_this;
}
void ReadStorageObjectId::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReadStorageObjectId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReadStorageObjectId& ReadStorageObjectId::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReadStorageObjectId_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  return *internal_default_instance();
}


void ReadStorageObjectId::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.ReadStorageObjectId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  collection_.ClearToEmpty();
  key_.ClearToEmpty();
  user_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReadStorageObjectId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string collection = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_collection();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.ReadStorageObjectId.collection"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.ReadStorageObjectId.key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string user_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.ReadStorageObjectId.user_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReadStorageObjectId::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.ReadStorageObjectId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string collection = 1;
  if (this->collection().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_collection().data(), static_cast<int>(this->_internal_collection().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.ReadStorageObjectId.collection");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_collection(), target);
  }

  // string key = 2;
  if (this->key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.ReadStorageObjectId.key");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_key(), target);
  }

  // string user_id = 3;
  if (this->user_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.ReadStorageObjectId.user_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_user_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.ReadStorageObjectId)
  return target;
}

size_t ReadStorageObjectId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.ReadStorageObjectId)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string collection = 1;
  if (this->collection().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_collection());
  }

  // string key = 2;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // string user_id = 3;
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReadStorageObjectId::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.ReadStorageObjectId)
  GOOGLE_DCHECK_NE(&from, this);
  const ReadStorageObjectId* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReadStorageObjectId>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.ReadStorageObjectId)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.ReadStorageObjectId)
    MergeFrom(*source);
  }
}

void ReadStorageObjectId::MergeFrom(const ReadStorageObjectId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.ReadStorageObjectId)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.collection().size() > 0) {
    _internal_set_collection(from._internal_collection());
  }
  if (from.key().size() > 0) {
    _internal_set_key(from._internal_key());
  }
  if (from.user_id().size() > 0) {
    _internal_set_user_id(from._internal_user_id());
  }
}

void ReadStorageObjectId::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.ReadStorageObjectId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadStorageObjectId::CopyFrom(const ReadStorageObjectId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.ReadStorageObjectId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadStorageObjectId::IsInitialized() const {
  return true;
}

void ReadStorageObjectId::InternalSwap(ReadStorageObjectId* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  collection_.Swap(&other->collection_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_id_.Swap(&other->user_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ReadStorageObjectId::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ReadStorageObjectsRequest::_Internal {
 public:
};

ReadStorageObjectsRequest::ReadStorageObjectsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  object_ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nakama.api.ReadStorageObjectsRequest)
}
ReadStorageObjectsRequest::ReadStorageObjectsRequest(const ReadStorageObjectsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      object_ids_(from.object_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:nakama.api.ReadStorageObjectsRequest)
}

void ReadStorageObjectsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReadStorageObjectsRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
}

ReadStorageObjectsRequest::~ReadStorageObjectsRequest() {
  // @@protoc_insertion_point(destructor:nakama.api.ReadStorageObjectsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReadStorageObjectsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ReadStorageObjectsRequest::ArenaDtor(void* object) {
  ReadStorageObjectsRequest* _this = reinterpret_cast< ReadStorageObjectsRequest* >(object);
  (void)_this;
}
void ReadStorageObjectsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReadStorageObjectsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReadStorageObjectsRequest& ReadStorageObjectsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReadStorageObjectsRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  return *internal_default_instance();
}


void ReadStorageObjectsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.ReadStorageObjectsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  object_ids_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReadStorageObjectsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .nakama.api.ReadStorageObjectId object_ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_object_ids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReadStorageObjectsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.ReadStorageObjectsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .nakama.api.ReadStorageObjectId object_ids = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_object_ids_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_object_ids(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.ReadStorageObjectsRequest)
  return target;
}

size_t ReadStorageObjectsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.ReadStorageObjectsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .nakama.api.ReadStorageObjectId object_ids = 1;
  total_size += 1UL * this->_internal_object_ids_size();
  for (const auto& msg : this->object_ids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReadStorageObjectsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.ReadStorageObjectsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ReadStorageObjectsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReadStorageObjectsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.ReadStorageObjectsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.ReadStorageObjectsRequest)
    MergeFrom(*source);
  }
}

void ReadStorageObjectsRequest::MergeFrom(const ReadStorageObjectsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.ReadStorageObjectsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  object_ids_.MergeFrom(from.object_ids_);
}

void ReadStorageObjectsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.ReadStorageObjectsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadStorageObjectsRequest::CopyFrom(const ReadStorageObjectsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.ReadStorageObjectsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadStorageObjectsRequest::IsInitialized() const {
  return true;
}

void ReadStorageObjectsRequest::InternalSwap(ReadStorageObjectsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  object_ids_.InternalSwap(&other->object_ids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReadStorageObjectsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Rpc::_Internal {
 public:
};

Rpc::Rpc(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nakama.api.Rpc)
}
Rpc::Rpc(const Rpc& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArena());
  }
  payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_payload().empty()) {
    payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_payload(), 
      GetArena());
  }
  http_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_http_key().empty()) {
    http_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_http_key(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:nakama.api.Rpc)
}

void Rpc::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Rpc_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  http_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Rpc::~Rpc() {
  // @@protoc_insertion_point(destructor:nakama.api.Rpc)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Rpc::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payload_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  http_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Rpc::ArenaDtor(void* object) {
  Rpc* _this = reinterpret_cast< Rpc* >(object);
  (void)_this;
}
void Rpc::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Rpc::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Rpc& Rpc::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Rpc_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  return *internal_default_instance();
}


void Rpc::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.Rpc)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  payload_.ClearToEmpty();
  http_key_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Rpc::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.Rpc.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string payload = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_payload();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.Rpc.payload"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string http_key = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_http_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.Rpc.http_key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Rpc::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.Rpc)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.Rpc.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string payload = 2;
  if (this->payload().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_payload().data(), static_cast<int>(this->_internal_payload().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.Rpc.payload");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_payload(), target);
  }

  // string http_key = 3;
  if (this->http_key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_http_key().data(), static_cast<int>(this->_internal_http_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.Rpc.http_key");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_http_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.Rpc)
  return target;
}

size_t Rpc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.Rpc)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string payload = 2;
  if (this->payload().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_payload());
  }

  // string http_key = 3;
  if (this->http_key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_http_key());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Rpc::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.Rpc)
  GOOGLE_DCHECK_NE(&from, this);
  const Rpc* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Rpc>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.Rpc)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.Rpc)
    MergeFrom(*source);
  }
}

void Rpc::MergeFrom(const Rpc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.Rpc)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.payload().size() > 0) {
    _internal_set_payload(from._internal_payload());
  }
  if (from.http_key().size() > 0) {
    _internal_set_http_key(from._internal_http_key());
  }
}

void Rpc::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.Rpc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rpc::CopyFrom(const Rpc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.Rpc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rpc::IsInitialized() const {
  return true;
}

void Rpc::InternalSwap(Rpc* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  payload_.Swap(&other->payload_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  http_key_.Swap(&other->http_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Rpc::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Session::_Internal {
 public:
};

Session::Session(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nakama.api.Session)
}
Session::Session(const Session& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_token().empty()) {
    token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_token(), 
      GetArena());
  }
  refresh_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_refresh_token().empty()) {
    refresh_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_refresh_token(), 
      GetArena());
  }
  created_ = from.created_;
  // @@protoc_insertion_point(copy_constructor:nakama.api.Session)
}

void Session::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Session_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  refresh_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  created_ = false;
}

Session::~Session() {
  // @@protoc_insertion_point(destructor:nakama.api.Session)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Session::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  refresh_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Session::ArenaDtor(void* object) {
  Session* _this = reinterpret_cast< Session* >(object);
  (void)_this;
}
void Session::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Session::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Session& Session::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Session_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  return *internal_default_instance();
}


void Session::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.Session)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  token_.ClearToEmpty();
  refresh_token_.ClearToEmpty();
  created_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Session::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool created = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          created_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.Session.token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string refresh_token = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_refresh_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.Session.refresh_token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Session::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.Session)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool created = 1;
  if (this->created() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_created(), target);
  }

  // string token = 2;
  if (this->token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.Session.token");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_token(), target);
  }

  // string refresh_token = 3;
  if (this->refresh_token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_refresh_token().data(), static_cast<int>(this->_internal_refresh_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.Session.refresh_token");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_refresh_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.Session)
  return target;
}

size_t Session::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.Session)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string token = 2;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  // string refresh_token = 3;
  if (this->refresh_token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_refresh_token());
  }

  // bool created = 1;
  if (this->created() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Session::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.Session)
  GOOGLE_DCHECK_NE(&from, this);
  const Session* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Session>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.Session)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.Session)
    MergeFrom(*source);
  }
}

void Session::MergeFrom(const Session& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.Session)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.token().size() > 0) {
    _internal_set_token(from._internal_token());
  }
  if (from.refresh_token().size() > 0) {
    _internal_set_refresh_token(from._internal_refresh_token());
  }
  if (from.created() != 0) {
    _internal_set_created(from._internal_created());
  }
}

void Session::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.Session)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Session::CopyFrom(const Session& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.Session)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Session::IsInitialized() const {
  return true;
}

void Session::InternalSwap(Session* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  token_.Swap(&other->token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  refresh_token_.Swap(&other->refresh_token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(created_, other->created_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Session::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class StorageObject::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& create_time(const StorageObject* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& update_time(const StorageObject* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
StorageObject::_Internal::create_time(const StorageObject* msg) {
  return *msg->create_time_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
StorageObject::_Internal::update_time(const StorageObject* msg) {
  return *msg->update_time_;
}
void StorageObject::clear_create_time() {
  if (GetArena() == nullptr && create_time_ != nullptr) {
    delete create_time_;
  }
  create_time_ = nullptr;
}
void StorageObject::clear_update_time() {
  if (GetArena() == nullptr && update_time_ != nullptr) {
    delete update_time_;
  }
  update_time_ = nullptr;
}
StorageObject::StorageObject(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nakama.api.StorageObject)
}
StorageObject::StorageObject(const StorageObject& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  collection_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_collection().empty()) {
    collection_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_collection(), 
      GetArena());
  }
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key(), 
      GetArena());
  }
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_id().empty()) {
    user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_user_id(), 
      GetArena());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArena());
  }
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_version().empty()) {
    version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_version(), 
      GetArena());
  }
  if (from._internal_has_create_time()) {
    create_time_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.create_time_);
  } else {
    create_time_ = nullptr;
  }
  if (from._internal_has_update_time()) {
    update_time_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.update_time_);
  } else {
    update_time_ = nullptr;
  }
  ::memcpy(&permission_read_, &from.permission_read_,
    static_cast<size_t>(reinterpret_cast<char*>(&permission_write_) -
    reinterpret_cast<char*>(&permission_read_)) + sizeof(permission_write_));
  // @@protoc_insertion_point(copy_constructor:nakama.api.StorageObject)
}

void StorageObject::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StorageObject_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  collection_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&create_time_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&permission_write_) -
      reinterpret_cast<char*>(&create_time_)) + sizeof(permission_write_));
}

StorageObject::~StorageObject() {
  // @@protoc_insertion_point(destructor:nakama.api.StorageObject)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StorageObject::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  collection_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete create_time_;
  if (this != internal_default_instance()) delete update_time_;
}

void StorageObject::ArenaDtor(void* object) {
  StorageObject* _this = reinterpret_cast< StorageObject* >(object);
  (void)_this;
}
void StorageObject::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StorageObject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StorageObject& StorageObject::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StorageObject_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  return *internal_default_instance();
}


void StorageObject::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.StorageObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  collection_.ClearToEmpty();
  key_.ClearToEmpty();
  user_id_.ClearToEmpty();
  value_.ClearToEmpty();
  version_.ClearToEmpty();
  if (GetArena() == nullptr && create_time_ != nullptr) {
    delete create_time_;
  }
  create_time_ = nullptr;
  if (GetArena() == nullptr && update_time_ != nullptr) {
    delete update_time_;
  }
  update_time_ = nullptr;
  ::memset(&permission_read_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&permission_write_) -
      reinterpret_cast<char*>(&permission_read_)) + sizeof(permission_write_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StorageObject::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string collection = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_collection();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.StorageObject.collection"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.StorageObject.key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string user_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.StorageObject.user_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.StorageObject.value"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string version = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.StorageObject.version"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 permission_read = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          permission_read_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 permission_write = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          permission_write_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp create_time = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_create_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp update_time = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_update_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StorageObject::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.StorageObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string collection = 1;
  if (this->collection().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_collection().data(), static_cast<int>(this->_internal_collection().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.StorageObject.collection");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_collection(), target);
  }

  // string key = 2;
  if (this->key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.StorageObject.key");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_key(), target);
  }

  // string user_id = 3;
  if (this->user_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.StorageObject.user_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_user_id(), target);
  }

  // string value = 4;
  if (this->value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.StorageObject.value");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_value(), target);
  }

  // string version = 5;
  if (this->version().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.StorageObject.version");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_version(), target);
  }

  // int32 permission_read = 6;
  if (this->permission_read() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_permission_read(), target);
  }

  // int32 permission_write = 7;
  if (this->permission_write() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_permission_write(), target);
  }

  // .google.protobuf.Timestamp create_time = 8;
  if (this->has_create_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::create_time(this), target, stream);
  }

  // .google.protobuf.Timestamp update_time = 9;
  if (this->has_update_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::update_time(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.StorageObject)
  return target;
}

size_t StorageObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.StorageObject)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string collection = 1;
  if (this->collection().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_collection());
  }

  // string key = 2;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // string user_id = 3;
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // string value = 4;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  // string version = 5;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  // .google.protobuf.Timestamp create_time = 8;
  if (this->has_create_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *create_time_);
  }

  // .google.protobuf.Timestamp update_time = 9;
  if (this->has_update_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *update_time_);
  }

  // int32 permission_read = 6;
  if (this->permission_read() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_permission_read());
  }

  // int32 permission_write = 7;
  if (this->permission_write() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_permission_write());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StorageObject::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.StorageObject)
  GOOGLE_DCHECK_NE(&from, this);
  const StorageObject* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StorageObject>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.StorageObject)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.StorageObject)
    MergeFrom(*source);
  }
}

void StorageObject::MergeFrom(const StorageObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.StorageObject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.collection().size() > 0) {
    _internal_set_collection(from._internal_collection());
  }
  if (from.key().size() > 0) {
    _internal_set_key(from._internal_key());
  }
  if (from.user_id().size() > 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.value().size() > 0) {
    _internal_set_value(from._internal_value());
  }
  if (from.version().size() > 0) {
    _internal_set_version(from._internal_version());
  }
  if (from.has_create_time()) {
    _internal_mutable_create_time()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_create_time());
  }
  if (from.has_update_time()) {
    _internal_mutable_update_time()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_update_time());
  }
  if (from.permission_read() != 0) {
    _internal_set_permission_read(from._internal_permission_read());
  }
  if (from.permission_write() != 0) {
    _internal_set_permission_write(from._internal_permission_write());
  }
}

void StorageObject::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.StorageObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StorageObject::CopyFrom(const StorageObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.StorageObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StorageObject::IsInitialized() const {
  return true;
}

void StorageObject::InternalSwap(StorageObject* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  collection_.Swap(&other->collection_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_id_.Swap(&other->user_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  version_.Swap(&other->version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StorageObject, permission_write_)
      + sizeof(StorageObject::permission_write_)
      - PROTOBUF_FIELD_OFFSET(StorageObject, create_time_)>(
          reinterpret_cast<char*>(&create_time_),
          reinterpret_cast<char*>(&other->create_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StorageObject::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class StorageObjectAck::_Internal {
 public:
};

StorageObjectAck::StorageObjectAck(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nakama.api.StorageObjectAck)
}
StorageObjectAck::StorageObjectAck(const StorageObjectAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  collection_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_collection().empty()) {
    collection_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_collection(), 
      GetArena());
  }
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key(), 
      GetArena());
  }
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_version().empty()) {
    version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_version(), 
      GetArena());
  }
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_id().empty()) {
    user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_user_id(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:nakama.api.StorageObjectAck)
}

void StorageObjectAck::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StorageObjectAck_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  collection_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

StorageObjectAck::~StorageObjectAck() {
  // @@protoc_insertion_point(destructor:nakama.api.StorageObjectAck)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StorageObjectAck::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  collection_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StorageObjectAck::ArenaDtor(void* object) {
  StorageObjectAck* _this = reinterpret_cast< StorageObjectAck* >(object);
  (void)_this;
}
void StorageObjectAck::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StorageObjectAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StorageObjectAck& StorageObjectAck::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StorageObjectAck_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  return *internal_default_instance();
}


void StorageObjectAck::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.StorageObjectAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  collection_.ClearToEmpty();
  key_.ClearToEmpty();
  version_.ClearToEmpty();
  user_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StorageObjectAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string collection = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_collection();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.StorageObjectAck.collection"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.StorageObjectAck.key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.StorageObjectAck.version"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string user_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.StorageObjectAck.user_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StorageObjectAck::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.StorageObjectAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string collection = 1;
  if (this->collection().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_collection().data(), static_cast<int>(this->_internal_collection().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.StorageObjectAck.collection");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_collection(), target);
  }

  // string key = 2;
  if (this->key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.StorageObjectAck.key");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_key(), target);
  }

  // string version = 3;
  if (this->version().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.StorageObjectAck.version");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_version(), target);
  }

  // string user_id = 4;
  if (this->user_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.StorageObjectAck.user_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_user_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.StorageObjectAck)
  return target;
}

size_t StorageObjectAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.StorageObjectAck)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string collection = 1;
  if (this->collection().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_collection());
  }

  // string key = 2;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // string version = 3;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  // string user_id = 4;
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StorageObjectAck::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.StorageObjectAck)
  GOOGLE_DCHECK_NE(&from, this);
  const StorageObjectAck* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StorageObjectAck>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.StorageObjectAck)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.StorageObjectAck)
    MergeFrom(*source);
  }
}

void StorageObjectAck::MergeFrom(const StorageObjectAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.StorageObjectAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.collection().size() > 0) {
    _internal_set_collection(from._internal_collection());
  }
  if (from.key().size() > 0) {
    _internal_set_key(from._internal_key());
  }
  if (from.version().size() > 0) {
    _internal_set_version(from._internal_version());
  }
  if (from.user_id().size() > 0) {
    _internal_set_user_id(from._internal_user_id());
  }
}

void StorageObjectAck::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.StorageObjectAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StorageObjectAck::CopyFrom(const StorageObjectAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.StorageObjectAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StorageObjectAck::IsInitialized() const {
  return true;
}

void StorageObjectAck::InternalSwap(StorageObjectAck* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  collection_.Swap(&other->collection_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  version_.Swap(&other->version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_id_.Swap(&other->user_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata StorageObjectAck::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class StorageObjectAcks::_Internal {
 public:
};

StorageObjectAcks::StorageObjectAcks(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  acks_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nakama.api.StorageObjectAcks)
}
StorageObjectAcks::StorageObjectAcks(const StorageObjectAcks& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      acks_(from.acks_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:nakama.api.StorageObjectAcks)
}

void StorageObjectAcks::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StorageObjectAcks_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
}

StorageObjectAcks::~StorageObjectAcks() {
  // @@protoc_insertion_point(destructor:nakama.api.StorageObjectAcks)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StorageObjectAcks::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void StorageObjectAcks::ArenaDtor(void* object) {
  StorageObjectAcks* _this = reinterpret_cast< StorageObjectAcks* >(object);
  (void)_this;
}
void StorageObjectAcks::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StorageObjectAcks::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StorageObjectAcks& StorageObjectAcks::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StorageObjectAcks_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  return *internal_default_instance();
}


void StorageObjectAcks::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.StorageObjectAcks)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  acks_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StorageObjectAcks::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .nakama.api.StorageObjectAck acks = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_acks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StorageObjectAcks::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.StorageObjectAcks)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .nakama.api.StorageObjectAck acks = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_acks_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_acks(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.StorageObjectAcks)
  return target;
}

size_t StorageObjectAcks::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.StorageObjectAcks)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .nakama.api.StorageObjectAck acks = 1;
  total_size += 1UL * this->_internal_acks_size();
  for (const auto& msg : this->acks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StorageObjectAcks::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.StorageObjectAcks)
  GOOGLE_DCHECK_NE(&from, this);
  const StorageObjectAcks* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StorageObjectAcks>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.StorageObjectAcks)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.StorageObjectAcks)
    MergeFrom(*source);
  }
}

void StorageObjectAcks::MergeFrom(const StorageObjectAcks& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.StorageObjectAcks)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  acks_.MergeFrom(from.acks_);
}

void StorageObjectAcks::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.StorageObjectAcks)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StorageObjectAcks::CopyFrom(const StorageObjectAcks& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.StorageObjectAcks)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StorageObjectAcks::IsInitialized() const {
  return true;
}

void StorageObjectAcks::InternalSwap(StorageObjectAcks* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  acks_.InternalSwap(&other->acks_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StorageObjectAcks::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class StorageObjects::_Internal {
 public:
};

StorageObjects::StorageObjects(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  objects_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nakama.api.StorageObjects)
}
StorageObjects::StorageObjects(const StorageObjects& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      objects_(from.objects_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:nakama.api.StorageObjects)
}

void StorageObjects::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StorageObjects_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
}

StorageObjects::~StorageObjects() {
  // @@protoc_insertion_point(destructor:nakama.api.StorageObjects)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StorageObjects::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void StorageObjects::ArenaDtor(void* object) {
  StorageObjects* _this = reinterpret_cast< StorageObjects* >(object);
  (void)_this;
}
void StorageObjects::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StorageObjects::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StorageObjects& StorageObjects::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StorageObjects_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  return *internal_default_instance();
}


void StorageObjects::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.StorageObjects)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  objects_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StorageObjects::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .nakama.api.StorageObject objects = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_objects(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StorageObjects::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.StorageObjects)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .nakama.api.StorageObject objects = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_objects_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_objects(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.StorageObjects)
  return target;
}

size_t StorageObjects::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.StorageObjects)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .nakama.api.StorageObject objects = 1;
  total_size += 1UL * this->_internal_objects_size();
  for (const auto& msg : this->objects_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StorageObjects::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.StorageObjects)
  GOOGLE_DCHECK_NE(&from, this);
  const StorageObjects* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StorageObjects>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.StorageObjects)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.StorageObjects)
    MergeFrom(*source);
  }
}

void StorageObjects::MergeFrom(const StorageObjects& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.StorageObjects)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  objects_.MergeFrom(from.objects_);
}

void StorageObjects::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.StorageObjects)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StorageObjects::CopyFrom(const StorageObjects& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.StorageObjects)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StorageObjects::IsInitialized() const {
  return true;
}

void StorageObjects::InternalSwap(StorageObjects* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  objects_.InternalSwap(&other->objects_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StorageObjects::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class StorageObjectList::_Internal {
 public:
};

StorageObjectList::StorageObjectList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  objects_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nakama.api.StorageObjectList)
}
StorageObjectList::StorageObjectList(const StorageObjectList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      objects_(from.objects_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  cursor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cursor().empty()) {
    cursor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_cursor(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:nakama.api.StorageObjectList)
}

void StorageObjectList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StorageObjectList_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  cursor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

StorageObjectList::~StorageObjectList() {
  // @@protoc_insertion_point(destructor:nakama.api.StorageObjectList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StorageObjectList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  cursor_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StorageObjectList::ArenaDtor(void* object) {
  StorageObjectList* _this = reinterpret_cast< StorageObjectList* >(object);
  (void)_this;
}
void StorageObjectList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StorageObjectList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StorageObjectList& StorageObjectList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StorageObjectList_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  return *internal_default_instance();
}


void StorageObjectList::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.StorageObjectList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  objects_.Clear();
  cursor_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StorageObjectList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .nakama.api.StorageObject objects = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_objects(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // string cursor = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_cursor();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.StorageObjectList.cursor"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StorageObjectList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.StorageObjectList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .nakama.api.StorageObject objects = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_objects_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_objects(i), target, stream);
  }

  // string cursor = 2;
  if (this->cursor().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cursor().data(), static_cast<int>(this->_internal_cursor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.StorageObjectList.cursor");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_cursor(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.StorageObjectList)
  return target;
}

size_t StorageObjectList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.StorageObjectList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .nakama.api.StorageObject objects = 1;
  total_size += 1UL * this->_internal_objects_size();
  for (const auto& msg : this->objects_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string cursor = 2;
  if (this->cursor().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cursor());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StorageObjectList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.StorageObjectList)
  GOOGLE_DCHECK_NE(&from, this);
  const StorageObjectList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StorageObjectList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.StorageObjectList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.StorageObjectList)
    MergeFrom(*source);
  }
}

void StorageObjectList::MergeFrom(const StorageObjectList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.StorageObjectList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  objects_.MergeFrom(from.objects_);
  if (from.cursor().size() > 0) {
    _internal_set_cursor(from._internal_cursor());
  }
}

void StorageObjectList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.StorageObjectList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StorageObjectList::CopyFrom(const StorageObjectList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.StorageObjectList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StorageObjectList::IsInitialized() const {
  return true;
}

void StorageObjectList::InternalSwap(StorageObjectList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  objects_.InternalSwap(&other->objects_);
  cursor_.Swap(&other->cursor_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata StorageObjectList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Tournament::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& create_time(const Tournament* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& start_time(const Tournament* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& end_time(const Tournament* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
Tournament::_Internal::create_time(const Tournament* msg) {
  return *msg->create_time_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
Tournament::_Internal::start_time(const Tournament* msg) {
  return *msg->start_time_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
Tournament::_Internal::end_time(const Tournament* msg) {
  return *msg->end_time_;
}
void Tournament::clear_create_time() {
  if (GetArena() == nullptr && create_time_ != nullptr) {
    delete create_time_;
  }
  create_time_ = nullptr;
}
void Tournament::clear_start_time() {
  if (GetArena() == nullptr && start_time_ != nullptr) {
    delete start_time_;
  }
  start_time_ = nullptr;
}
void Tournament::clear_end_time() {
  if (GetArena() == nullptr && end_time_ != nullptr) {
    delete end_time_;
  }
  end_time_ = nullptr;
}
Tournament::Tournament(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nakama.api.Tournament)
}
Tournament::Tournament(const Tournament& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArena());
  }
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_title().empty()) {
    title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_title(), 
      GetArena());
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_description(), 
      GetArena());
  }
  metadata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_metadata().empty()) {
    metadata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_metadata(), 
      GetArena());
  }
  if (from._internal_has_create_time()) {
    create_time_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.create_time_);
  } else {
    create_time_ = nullptr;
  }
  if (from._internal_has_start_time()) {
    start_time_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.start_time_);
  } else {
    start_time_ = nullptr;
  }
  if (from._internal_has_end_time()) {
    end_time_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.end_time_);
  } else {
    end_time_ = nullptr;
  }
  ::memcpy(&category_, &from.category_,
    static_cast<size_t>(reinterpret_cast<char*>(&operator__) -
    reinterpret_cast<char*>(&category_)) + sizeof(operator__));
  // @@protoc_insertion_point(copy_constructor:nakama.api.Tournament)
}

void Tournament::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Tournament_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  metadata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&create_time_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&operator__) -
      reinterpret_cast<char*>(&create_time_)) + sizeof(operator__));
}

Tournament::~Tournament() {
  // @@protoc_insertion_point(destructor:nakama.api.Tournament)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Tournament::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  metadata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete create_time_;
  if (this != internal_default_instance()) delete start_time_;
  if (this != internal_default_instance()) delete end_time_;
}

void Tournament::ArenaDtor(void* object) {
  Tournament* _this = reinterpret_cast< Tournament* >(object);
  (void)_this;
}
void Tournament::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Tournament::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Tournament& Tournament::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Tournament_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  return *internal_default_instance();
}


void Tournament::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.Tournament)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  title_.ClearToEmpty();
  description_.ClearToEmpty();
  metadata_.ClearToEmpty();
  if (GetArena() == nullptr && create_time_ != nullptr) {
    delete create_time_;
  }
  create_time_ = nullptr;
  if (GetArena() == nullptr && start_time_ != nullptr) {
    delete start_time_;
  }
  start_time_ = nullptr;
  if (GetArena() == nullptr && end_time_ != nullptr) {
    delete end_time_;
  }
  end_time_ = nullptr;
  ::memset(&category_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&operator__) -
      reinterpret_cast<char*>(&category_)) + sizeof(operator__));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Tournament::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.Tournament.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string title = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.Tournament.title"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string description = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.Tournament.description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 category = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          category_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 sort_order = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          sort_order_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 size = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 max_size = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          max_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 max_num_score = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          max_num_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool can_enter = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          can_enter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 end_active = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          end_active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 next_reset = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          next_reset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string metadata = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_metadata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.Tournament.metadata"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp create_time = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_create_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp start_time = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_start_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp end_time = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_end_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 duration = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 start_active = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          start_active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 prev_reset = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          prev_reset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nakama.api.Operator operator = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_operator_(static_cast<::nakama::api::Operator>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Tournament::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.Tournament)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.Tournament.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string title = 2;
  if (this->title().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.Tournament.title");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_title(), target);
  }

  // string description = 3;
  if (this->description().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.Tournament.description");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_description(), target);
  }

  // uint32 category = 4;
  if (this->category() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_category(), target);
  }

  // uint32 sort_order = 5;
  if (this->sort_order() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_sort_order(), target);
  }

  // uint32 size = 6;
  if (this->size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_size(), target);
  }

  // uint32 max_size = 7;
  if (this->max_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_max_size(), target);
  }

  // uint32 max_num_score = 8;
  if (this->max_num_score() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_max_num_score(), target);
  }

  // bool can_enter = 9;
  if (this->can_enter() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_can_enter(), target);
  }

  // uint32 end_active = 10;
  if (this->end_active() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_end_active(), target);
  }

  // uint32 next_reset = 11;
  if (this->next_reset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_next_reset(), target);
  }

  // string metadata = 12;
  if (this->metadata().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_metadata().data(), static_cast<int>(this->_internal_metadata().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.Tournament.metadata");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_metadata(), target);
  }

  // .google.protobuf.Timestamp create_time = 13;
  if (this->has_create_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::create_time(this), target, stream);
  }

  // .google.protobuf.Timestamp start_time = 14;
  if (this->has_start_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::start_time(this), target, stream);
  }

  // .google.protobuf.Timestamp end_time = 15;
  if (this->has_end_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::end_time(this), target, stream);
  }

  // uint32 duration = 16;
  if (this->duration() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(16, this->_internal_duration(), target);
  }

  // uint32 start_active = 17;
  if (this->start_active() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(17, this->_internal_start_active(), target);
  }

  // uint32 prev_reset = 18;
  if (this->prev_reset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(18, this->_internal_prev_reset(), target);
  }

  // .nakama.api.Operator operator = 19;
  if (this->operator_() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      19, this->_internal_operator_(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.Tournament)
  return target;
}

size_t Tournament::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.Tournament)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string title = 2;
  if (this->title().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  // string description = 3;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // string metadata = 12;
  if (this->metadata().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_metadata());
  }

  // .google.protobuf.Timestamp create_time = 13;
  if (this->has_create_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *create_time_);
  }

  // .google.protobuf.Timestamp start_time = 14;
  if (this->has_start_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *start_time_);
  }

  // .google.protobuf.Timestamp end_time = 15;
  if (this->has_end_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *end_time_);
  }

  // uint32 category = 4;
  if (this->category() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_category());
  }

  // uint32 sort_order = 5;
  if (this->sort_order() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sort_order());
  }

  // uint32 size = 6;
  if (this->size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_size());
  }

  // uint32 max_size = 7;
  if (this->max_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_max_size());
  }

  // uint32 max_num_score = 8;
  if (this->max_num_score() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_max_num_score());
  }

  // bool can_enter = 9;
  if (this->can_enter() != 0) {
    total_size += 1 + 1;
  }

  // uint32 end_active = 10;
  if (this->end_active() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_end_active());
  }

  // uint32 next_reset = 11;
  if (this->next_reset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_next_reset());
  }

  // uint32 duration = 16;
  if (this->duration() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_duration());
  }

  // uint32 start_active = 17;
  if (this->start_active() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_start_active());
  }

  // uint32 prev_reset = 18;
  if (this->prev_reset() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_prev_reset());
  }

  // .nakama.api.Operator operator = 19;
  if (this->operator_() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_operator_());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Tournament::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.Tournament)
  GOOGLE_DCHECK_NE(&from, this);
  const Tournament* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Tournament>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.Tournament)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.Tournament)
    MergeFrom(*source);
  }
}

void Tournament::MergeFrom(const Tournament& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.Tournament)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.title().size() > 0) {
    _internal_set_title(from._internal_title());
  }
  if (from.description().size() > 0) {
    _internal_set_description(from._internal_description());
  }
  if (from.metadata().size() > 0) {
    _internal_set_metadata(from._internal_metadata());
  }
  if (from.has_create_time()) {
    _internal_mutable_create_time()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_create_time());
  }
  if (from.has_start_time()) {
    _internal_mutable_start_time()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_start_time());
  }
  if (from.has_end_time()) {
    _internal_mutable_end_time()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_end_time());
  }
  if (from.category() != 0) {
    _internal_set_category(from._internal_category());
  }
  if (from.sort_order() != 0) {
    _internal_set_sort_order(from._internal_sort_order());
  }
  if (from.size() != 0) {
    _internal_set_size(from._internal_size());
  }
  if (from.max_size() != 0) {
    _internal_set_max_size(from._internal_max_size());
  }
  if (from.max_num_score() != 0) {
    _internal_set_max_num_score(from._internal_max_num_score());
  }
  if (from.can_enter() != 0) {
    _internal_set_can_enter(from._internal_can_enter());
  }
  if (from.end_active() != 0) {
    _internal_set_end_active(from._internal_end_active());
  }
  if (from.next_reset() != 0) {
    _internal_set_next_reset(from._internal_next_reset());
  }
  if (from.duration() != 0) {
    _internal_set_duration(from._internal_duration());
  }
  if (from.start_active() != 0) {
    _internal_set_start_active(from._internal_start_active());
  }
  if (from.prev_reset() != 0) {
    _internal_set_prev_reset(from._internal_prev_reset());
  }
  if (from.operator_() != 0) {
    _internal_set_operator_(from._internal_operator_());
  }
}

void Tournament::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.Tournament)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Tournament::CopyFrom(const Tournament& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.Tournament)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tournament::IsInitialized() const {
  return true;
}

void Tournament::InternalSwap(Tournament* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  title_.Swap(&other->title_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  metadata_.Swap(&other->metadata_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Tournament, operator__)
      + sizeof(Tournament::operator__)
      - PROTOBUF_FIELD_OFFSET(Tournament, create_time_)>(
          reinterpret_cast<char*>(&create_time_),
          reinterpret_cast<char*>(&other->create_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Tournament::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TournamentList::_Internal {
 public:
};

TournamentList::TournamentList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  tournaments_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nakama.api.TournamentList)
}
TournamentList::TournamentList(const TournamentList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      tournaments_(from.tournaments_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  cursor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cursor().empty()) {
    cursor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_cursor(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:nakama.api.TournamentList)
}

void TournamentList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TournamentList_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  cursor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

TournamentList::~TournamentList() {
  // @@protoc_insertion_point(destructor:nakama.api.TournamentList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TournamentList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  cursor_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TournamentList::ArenaDtor(void* object) {
  TournamentList* _this = reinterpret_cast< TournamentList* >(object);
  (void)_this;
}
void TournamentList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TournamentList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TournamentList& TournamentList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TournamentList_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  return *internal_default_instance();
}


void TournamentList::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.TournamentList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tournaments_.Clear();
  cursor_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TournamentList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .nakama.api.Tournament tournaments = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tournaments(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // string cursor = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_cursor();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.TournamentList.cursor"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TournamentList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.TournamentList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .nakama.api.Tournament tournaments = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tournaments_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_tournaments(i), target, stream);
  }

  // string cursor = 2;
  if (this->cursor().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cursor().data(), static_cast<int>(this->_internal_cursor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.TournamentList.cursor");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_cursor(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.TournamentList)
  return target;
}

size_t TournamentList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.TournamentList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .nakama.api.Tournament tournaments = 1;
  total_size += 1UL * this->_internal_tournaments_size();
  for (const auto& msg : this->tournaments_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string cursor = 2;
  if (this->cursor().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cursor());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TournamentList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.TournamentList)
  GOOGLE_DCHECK_NE(&from, this);
  const TournamentList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TournamentList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.TournamentList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.TournamentList)
    MergeFrom(*source);
  }
}

void TournamentList::MergeFrom(const TournamentList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.TournamentList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tournaments_.MergeFrom(from.tournaments_);
  if (from.cursor().size() > 0) {
    _internal_set_cursor(from._internal_cursor());
  }
}

void TournamentList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.TournamentList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TournamentList::CopyFrom(const TournamentList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.TournamentList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TournamentList::IsInitialized() const {
  return true;
}

void TournamentList::InternalSwap(TournamentList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  tournaments_.InternalSwap(&other->tournaments_);
  cursor_.Swap(&other->cursor_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata TournamentList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TournamentRecordList::_Internal {
 public:
};

TournamentRecordList::TournamentRecordList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  records_(arena),
  owner_records_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nakama.api.TournamentRecordList)
}
TournamentRecordList::TournamentRecordList(const TournamentRecordList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      records_(from.records_),
      owner_records_(from.owner_records_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  next_cursor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_next_cursor().empty()) {
    next_cursor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_next_cursor(), 
      GetArena());
  }
  prev_cursor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_prev_cursor().empty()) {
    prev_cursor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_prev_cursor(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:nakama.api.TournamentRecordList)
}

void TournamentRecordList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TournamentRecordList_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  next_cursor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  prev_cursor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

TournamentRecordList::~TournamentRecordList() {
  // @@protoc_insertion_point(destructor:nakama.api.TournamentRecordList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TournamentRecordList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  next_cursor_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  prev_cursor_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TournamentRecordList::ArenaDtor(void* object) {
  TournamentRecordList* _this = reinterpret_cast< TournamentRecordList* >(object);
  (void)_this;
}
void TournamentRecordList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TournamentRecordList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TournamentRecordList& TournamentRecordList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TournamentRecordList_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  return *internal_default_instance();
}


void TournamentRecordList::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.TournamentRecordList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  records_.Clear();
  owner_records_.Clear();
  next_cursor_.ClearToEmpty();
  prev_cursor_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TournamentRecordList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .nakama.api.LeaderboardRecord records = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_records(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .nakama.api.LeaderboardRecord owner_records = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_owner_records(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // string next_cursor = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_next_cursor();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.TournamentRecordList.next_cursor"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string prev_cursor = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_prev_cursor();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.TournamentRecordList.prev_cursor"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TournamentRecordList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.TournamentRecordList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .nakama.api.LeaderboardRecord records = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_records_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_records(i), target, stream);
  }

  // repeated .nakama.api.LeaderboardRecord owner_records = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_owner_records_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_owner_records(i), target, stream);
  }

  // string next_cursor = 3;
  if (this->next_cursor().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_next_cursor().data(), static_cast<int>(this->_internal_next_cursor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.TournamentRecordList.next_cursor");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_next_cursor(), target);
  }

  // string prev_cursor = 4;
  if (this->prev_cursor().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_prev_cursor().data(), static_cast<int>(this->_internal_prev_cursor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.TournamentRecordList.prev_cursor");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_prev_cursor(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.TournamentRecordList)
  return target;
}

size_t TournamentRecordList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.TournamentRecordList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .nakama.api.LeaderboardRecord records = 1;
  total_size += 1UL * this->_internal_records_size();
  for (const auto& msg : this->records_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .nakama.api.LeaderboardRecord owner_records = 2;
  total_size += 1UL * this->_internal_owner_records_size();
  for (const auto& msg : this->owner_records_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string next_cursor = 3;
  if (this->next_cursor().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_next_cursor());
  }

  // string prev_cursor = 4;
  if (this->prev_cursor().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_prev_cursor());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TournamentRecordList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.TournamentRecordList)
  GOOGLE_DCHECK_NE(&from, this);
  const TournamentRecordList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TournamentRecordList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.TournamentRecordList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.TournamentRecordList)
    MergeFrom(*source);
  }
}

void TournamentRecordList::MergeFrom(const TournamentRecordList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.TournamentRecordList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  records_.MergeFrom(from.records_);
  owner_records_.MergeFrom(from.owner_records_);
  if (from.next_cursor().size() > 0) {
    _internal_set_next_cursor(from._internal_next_cursor());
  }
  if (from.prev_cursor().size() > 0) {
    _internal_set_prev_cursor(from._internal_prev_cursor());
  }
}

void TournamentRecordList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.TournamentRecordList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TournamentRecordList::CopyFrom(const TournamentRecordList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.TournamentRecordList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TournamentRecordList::IsInitialized() const {
  return true;
}

void TournamentRecordList::InternalSwap(TournamentRecordList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  records_.InternalSwap(&other->records_);
  owner_records_.InternalSwap(&other->owner_records_);
  next_cursor_.Swap(&other->next_cursor_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  prev_cursor_.Swap(&other->prev_cursor_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata TournamentRecordList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class UpdateAccountRequest::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::StringValue& username(const UpdateAccountRequest* msg);
  static const PROTOBUF_NAMESPACE_ID::StringValue& display_name(const UpdateAccountRequest* msg);
  static const PROTOBUF_NAMESPACE_ID::StringValue& avatar_url(const UpdateAccountRequest* msg);
  static const PROTOBUF_NAMESPACE_ID::StringValue& lang_tag(const UpdateAccountRequest* msg);
  static const PROTOBUF_NAMESPACE_ID::StringValue& location(const UpdateAccountRequest* msg);
  static const PROTOBUF_NAMESPACE_ID::StringValue& timezone(const UpdateAccountRequest* msg);
};

const PROTOBUF_NAMESPACE_ID::StringValue&
UpdateAccountRequest::_Internal::username(const UpdateAccountRequest* msg) {
  return *msg->username_;
}
const PROTOBUF_NAMESPACE_ID::StringValue&
UpdateAccountRequest::_Internal::display_name(const UpdateAccountRequest* msg) {
  return *msg->display_name_;
}
const PROTOBUF_NAMESPACE_ID::StringValue&
UpdateAccountRequest::_Internal::avatar_url(const UpdateAccountRequest* msg) {
  return *msg->avatar_url_;
}
const PROTOBUF_NAMESPACE_ID::StringValue&
UpdateAccountRequest::_Internal::lang_tag(const UpdateAccountRequest* msg) {
  return *msg->lang_tag_;
}
const PROTOBUF_NAMESPACE_ID::StringValue&
UpdateAccountRequest::_Internal::location(const UpdateAccountRequest* msg) {
  return *msg->location_;
}
const PROTOBUF_NAMESPACE_ID::StringValue&
UpdateAccountRequest::_Internal::timezone(const UpdateAccountRequest* msg) {
  return *msg->timezone_;
}
void UpdateAccountRequest::clear_username() {
  if (GetArena() == nullptr && username_ != nullptr) {
    delete username_;
  }
  username_ = nullptr;
}
void UpdateAccountRequest::clear_display_name() {
  if (GetArena() == nullptr && display_name_ != nullptr) {
    delete display_name_;
  }
  display_name_ = nullptr;
}
void UpdateAccountRequest::clear_avatar_url() {
  if (GetArena() == nullptr && avatar_url_ != nullptr) {
    delete avatar_url_;
  }
  avatar_url_ = nullptr;
}
void UpdateAccountRequest::clear_lang_tag() {
  if (GetArena() == nullptr && lang_tag_ != nullptr) {
    delete lang_tag_;
  }
  lang_tag_ = nullptr;
}
void UpdateAccountRequest::clear_location() {
  if (GetArena() == nullptr && location_ != nullptr) {
    delete location_;
  }
  location_ = nullptr;
}
void UpdateAccountRequest::clear_timezone() {
  if (GetArena() == nullptr && timezone_ != nullptr) {
    delete timezone_;
  }
  timezone_ = nullptr;
}
UpdateAccountRequest::UpdateAccountRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nakama.api.UpdateAccountRequest)
}
UpdateAccountRequest::UpdateAccountRequest(const UpdateAccountRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_username()) {
    username_ = new PROTOBUF_NAMESPACE_ID::StringValue(*from.username_);
  } else {
    username_ = nullptr;
  }
  if (from._internal_has_display_name()) {
    display_name_ = new PROTOBUF_NAMESPACE_ID::StringValue(*from.display_name_);
  } else {
    display_name_ = nullptr;
  }
  if (from._internal_has_avatar_url()) {
    avatar_url_ = new PROTOBUF_NAMESPACE_ID::StringValue(*from.avatar_url_);
  } else {
    avatar_url_ = nullptr;
  }
  if (from._internal_has_lang_tag()) {
    lang_tag_ = new PROTOBUF_NAMESPACE_ID::StringValue(*from.lang_tag_);
  } else {
    lang_tag_ = nullptr;
  }
  if (from._internal_has_location()) {
    location_ = new PROTOBUF_NAMESPACE_ID::StringValue(*from.location_);
  } else {
    location_ = nullptr;
  }
  if (from._internal_has_timezone()) {
    timezone_ = new PROTOBUF_NAMESPACE_ID::StringValue(*from.timezone_);
  } else {
    timezone_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:nakama.api.UpdateAccountRequest)
}

void UpdateAccountRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdateAccountRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&username_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&timezone_) -
      reinterpret_cast<char*>(&username_)) + sizeof(timezone_));
}

UpdateAccountRequest::~UpdateAccountRequest() {
  // @@protoc_insertion_point(destructor:nakama.api.UpdateAccountRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UpdateAccountRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete username_;
  if (this != internal_default_instance()) delete display_name_;
  if (this != internal_default_instance()) delete avatar_url_;
  if (this != internal_default_instance()) delete lang_tag_;
  if (this != internal_default_instance()) delete location_;
  if (this != internal_default_instance()) delete timezone_;
}

void UpdateAccountRequest::ArenaDtor(void* object) {
  UpdateAccountRequest* _this = reinterpret_cast< UpdateAccountRequest* >(object);
  (void)_this;
}
void UpdateAccountRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateAccountRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateAccountRequest& UpdateAccountRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateAccountRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  return *internal_default_instance();
}


void UpdateAccountRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.UpdateAccountRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && username_ != nullptr) {
    delete username_;
  }
  username_ = nullptr;
  if (GetArena() == nullptr && display_name_ != nullptr) {
    delete display_name_;
  }
  display_name_ = nullptr;
  if (GetArena() == nullptr && avatar_url_ != nullptr) {
    delete avatar_url_;
  }
  avatar_url_ = nullptr;
  if (GetArena() == nullptr && lang_tag_ != nullptr) {
    delete lang_tag_;
  }
  lang_tag_ = nullptr;
  if (GetArena() == nullptr && location_ != nullptr) {
    delete location_;
  }
  location_ = nullptr;
  if (GetArena() == nullptr && timezone_ != nullptr) {
    delete timezone_;
  }
  timezone_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateAccountRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.protobuf.StringValue username = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_username(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.StringValue display_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_display_name(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.StringValue avatar_url = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_avatar_url(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.StringValue lang_tag = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_lang_tag(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.StringValue location = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.StringValue timezone = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_timezone(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateAccountRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.UpdateAccountRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.StringValue username = 1;
  if (this->has_username()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::username(this), target, stream);
  }

  // .google.protobuf.StringValue display_name = 2;
  if (this->has_display_name()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::display_name(this), target, stream);
  }

  // .google.protobuf.StringValue avatar_url = 3;
  if (this->has_avatar_url()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::avatar_url(this), target, stream);
  }

  // .google.protobuf.StringValue lang_tag = 4;
  if (this->has_lang_tag()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::lang_tag(this), target, stream);
  }

  // .google.protobuf.StringValue location = 5;
  if (this->has_location()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::location(this), target, stream);
  }

  // .google.protobuf.StringValue timezone = 6;
  if (this->has_timezone()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::timezone(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.UpdateAccountRequest)
  return target;
}

size_t UpdateAccountRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.UpdateAccountRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.StringValue username = 1;
  if (this->has_username()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *username_);
  }

  // .google.protobuf.StringValue display_name = 2;
  if (this->has_display_name()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *display_name_);
  }

  // .google.protobuf.StringValue avatar_url = 3;
  if (this->has_avatar_url()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *avatar_url_);
  }

  // .google.protobuf.StringValue lang_tag = 4;
  if (this->has_lang_tag()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lang_tag_);
  }

  // .google.protobuf.StringValue location = 5;
  if (this->has_location()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *location_);
  }

  // .google.protobuf.StringValue timezone = 6;
  if (this->has_timezone()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timezone_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateAccountRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.UpdateAccountRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateAccountRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateAccountRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.UpdateAccountRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.UpdateAccountRequest)
    MergeFrom(*source);
  }
}

void UpdateAccountRequest::MergeFrom(const UpdateAccountRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.UpdateAccountRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_username()) {
    _internal_mutable_username()->PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from._internal_username());
  }
  if (from.has_display_name()) {
    _internal_mutable_display_name()->PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from._internal_display_name());
  }
  if (from.has_avatar_url()) {
    _internal_mutable_avatar_url()->PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from._internal_avatar_url());
  }
  if (from.has_lang_tag()) {
    _internal_mutable_lang_tag()->PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from._internal_lang_tag());
  }
  if (from.has_location()) {
    _internal_mutable_location()->PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from._internal_location());
  }
  if (from.has_timezone()) {
    _internal_mutable_timezone()->PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from._internal_timezone());
  }
}

void UpdateAccountRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.UpdateAccountRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateAccountRequest::CopyFrom(const UpdateAccountRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.UpdateAccountRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateAccountRequest::IsInitialized() const {
  return true;
}

void UpdateAccountRequest::InternalSwap(UpdateAccountRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateAccountRequest, timezone_)
      + sizeof(UpdateAccountRequest::timezone_)
      - PROTOBUF_FIELD_OFFSET(UpdateAccountRequest, username_)>(
          reinterpret_cast<char*>(&username_),
          reinterpret_cast<char*>(&other->username_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateAccountRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class UpdateGroupRequest::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::StringValue& name(const UpdateGroupRequest* msg);
  static const PROTOBUF_NAMESPACE_ID::StringValue& description(const UpdateGroupRequest* msg);
  static const PROTOBUF_NAMESPACE_ID::StringValue& lang_tag(const UpdateGroupRequest* msg);
  static const PROTOBUF_NAMESPACE_ID::StringValue& avatar_url(const UpdateGroupRequest* msg);
  static const PROTOBUF_NAMESPACE_ID::BoolValue& open(const UpdateGroupRequest* msg);
};

const PROTOBUF_NAMESPACE_ID::StringValue&
UpdateGroupRequest::_Internal::name(const UpdateGroupRequest* msg) {
  return *msg->name_;
}
const PROTOBUF_NAMESPACE_ID::StringValue&
UpdateGroupRequest::_Internal::description(const UpdateGroupRequest* msg) {
  return *msg->description_;
}
const PROTOBUF_NAMESPACE_ID::StringValue&
UpdateGroupRequest::_Internal::lang_tag(const UpdateGroupRequest* msg) {
  return *msg->lang_tag_;
}
const PROTOBUF_NAMESPACE_ID::StringValue&
UpdateGroupRequest::_Internal::avatar_url(const UpdateGroupRequest* msg) {
  return *msg->avatar_url_;
}
const PROTOBUF_NAMESPACE_ID::BoolValue&
UpdateGroupRequest::_Internal::open(const UpdateGroupRequest* msg) {
  return *msg->open_;
}
void UpdateGroupRequest::clear_name() {
  if (GetArena() == nullptr && name_ != nullptr) {
    delete name_;
  }
  name_ = nullptr;
}
void UpdateGroupRequest::clear_description() {
  if (GetArena() == nullptr && description_ != nullptr) {
    delete description_;
  }
  description_ = nullptr;
}
void UpdateGroupRequest::clear_lang_tag() {
  if (GetArena() == nullptr && lang_tag_ != nullptr) {
    delete lang_tag_;
  }
  lang_tag_ = nullptr;
}
void UpdateGroupRequest::clear_avatar_url() {
  if (GetArena() == nullptr && avatar_url_ != nullptr) {
    delete avatar_url_;
  }
  avatar_url_ = nullptr;
}
void UpdateGroupRequest::clear_open() {
  if (GetArena() == nullptr && open_ != nullptr) {
    delete open_;
  }
  open_ = nullptr;
}
UpdateGroupRequest::UpdateGroupRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nakama.api.UpdateGroupRequest)
}
UpdateGroupRequest::UpdateGroupRequest(const UpdateGroupRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  group_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_group_id().empty()) {
    group_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_group_id(), 
      GetArena());
  }
  if (from._internal_has_name()) {
    name_ = new PROTOBUF_NAMESPACE_ID::StringValue(*from.name_);
  } else {
    name_ = nullptr;
  }
  if (from._internal_has_description()) {
    description_ = new PROTOBUF_NAMESPACE_ID::StringValue(*from.description_);
  } else {
    description_ = nullptr;
  }
  if (from._internal_has_lang_tag()) {
    lang_tag_ = new PROTOBUF_NAMESPACE_ID::StringValue(*from.lang_tag_);
  } else {
    lang_tag_ = nullptr;
  }
  if (from._internal_has_avatar_url()) {
    avatar_url_ = new PROTOBUF_NAMESPACE_ID::StringValue(*from.avatar_url_);
  } else {
    avatar_url_ = nullptr;
  }
  if (from._internal_has_open()) {
    open_ = new PROTOBUF_NAMESPACE_ID::BoolValue(*from.open_);
  } else {
    open_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:nakama.api.UpdateGroupRequest)
}

void UpdateGroupRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdateGroupRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  group_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&name_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&open_) -
      reinterpret_cast<char*>(&name_)) + sizeof(open_));
}

UpdateGroupRequest::~UpdateGroupRequest() {
  // @@protoc_insertion_point(destructor:nakama.api.UpdateGroupRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UpdateGroupRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  group_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete name_;
  if (this != internal_default_instance()) delete description_;
  if (this != internal_default_instance()) delete lang_tag_;
  if (this != internal_default_instance()) delete avatar_url_;
  if (this != internal_default_instance()) delete open_;
}

void UpdateGroupRequest::ArenaDtor(void* object) {
  UpdateGroupRequest* _this = reinterpret_cast< UpdateGroupRequest* >(object);
  (void)_this;
}
void UpdateGroupRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateGroupRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateGroupRequest& UpdateGroupRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateGroupRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  return *internal_default_instance();
}


void UpdateGroupRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.UpdateGroupRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  group_id_.ClearToEmpty();
  if (GetArena() == nullptr && name_ != nullptr) {
    delete name_;
  }
  name_ = nullptr;
  if (GetArena() == nullptr && description_ != nullptr) {
    delete description_;
  }
  description_ = nullptr;
  if (GetArena() == nullptr && lang_tag_ != nullptr) {
    delete lang_tag_;
  }
  lang_tag_ = nullptr;
  if (GetArena() == nullptr && avatar_url_ != nullptr) {
    delete avatar_url_;
  }
  avatar_url_ = nullptr;
  if (GetArena() == nullptr && open_ != nullptr) {
    delete open_;
  }
  open_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateGroupRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string group_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_group_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.UpdateGroupRequest.group_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.StringValue name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_name(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.StringValue description = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_description(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.StringValue lang_tag = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_lang_tag(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.StringValue avatar_url = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_avatar_url(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.BoolValue open = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_open(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateGroupRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.UpdateGroupRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string group_id = 1;
  if (this->group_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_group_id().data(), static_cast<int>(this->_internal_group_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.UpdateGroupRequest.group_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_group_id(), target);
  }

  // .google.protobuf.StringValue name = 2;
  if (this->has_name()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::name(this), target, stream);
  }

  // .google.protobuf.StringValue description = 3;
  if (this->has_description()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::description(this), target, stream);
  }

  // .google.protobuf.StringValue lang_tag = 4;
  if (this->has_lang_tag()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::lang_tag(this), target, stream);
  }

  // .google.protobuf.StringValue avatar_url = 5;
  if (this->has_avatar_url()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::avatar_url(this), target, stream);
  }

  // .google.protobuf.BoolValue open = 6;
  if (this->has_open()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::open(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.UpdateGroupRequest)
  return target;
}

size_t UpdateGroupRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.UpdateGroupRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string group_id = 1;
  if (this->group_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_group_id());
  }

  // .google.protobuf.StringValue name = 2;
  if (this->has_name()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *name_);
  }

  // .google.protobuf.StringValue description = 3;
  if (this->has_description()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *description_);
  }

  // .google.protobuf.StringValue lang_tag = 4;
  if (this->has_lang_tag()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lang_tag_);
  }

  // .google.protobuf.StringValue avatar_url = 5;
  if (this->has_avatar_url()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *avatar_url_);
  }

  // .google.protobuf.BoolValue open = 6;
  if (this->has_open()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *open_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateGroupRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.UpdateGroupRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateGroupRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateGroupRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.UpdateGroupRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.UpdateGroupRequest)
    MergeFrom(*source);
  }
}

void UpdateGroupRequest::MergeFrom(const UpdateGroupRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.UpdateGroupRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.group_id().size() > 0) {
    _internal_set_group_id(from._internal_group_id());
  }
  if (from.has_name()) {
    _internal_mutable_name()->PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from._internal_name());
  }
  if (from.has_description()) {
    _internal_mutable_description()->PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from._internal_description());
  }
  if (from.has_lang_tag()) {
    _internal_mutable_lang_tag()->PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from._internal_lang_tag());
  }
  if (from.has_avatar_url()) {
    _internal_mutable_avatar_url()->PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from._internal_avatar_url());
  }
  if (from.has_open()) {
    _internal_mutable_open()->PROTOBUF_NAMESPACE_ID::BoolValue::MergeFrom(from._internal_open());
  }
}

void UpdateGroupRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.UpdateGroupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateGroupRequest::CopyFrom(const UpdateGroupRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.UpdateGroupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateGroupRequest::IsInitialized() const {
  return true;
}

void UpdateGroupRequest::InternalSwap(UpdateGroupRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  group_id_.Swap(&other->group_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateGroupRequest, open_)
      + sizeof(UpdateGroupRequest::open_)
      - PROTOBUF_FIELD_OFFSET(UpdateGroupRequest, name_)>(
          reinterpret_cast<char*>(&name_),
          reinterpret_cast<char*>(&other->name_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateGroupRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class User::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& create_time(const User* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& update_time(const User* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
User::_Internal::create_time(const User* msg) {
  return *msg->create_time_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
User::_Internal::update_time(const User* msg) {
  return *msg->update_time_;
}
void User::clear_create_time() {
  if (GetArena() == nullptr && create_time_ != nullptr) {
    delete create_time_;
  }
  create_time_ = nullptr;
}
void User::clear_update_time() {
  if (GetArena() == nullptr && update_time_ != nullptr) {
    delete update_time_;
  }
  update_time_ = nullptr;
}
User::User(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nakama.api.User)
}
User::User(const User& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArena());
  }
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_username().empty()) {
    username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_username(), 
      GetArena());
  }
  display_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_display_name().empty()) {
    display_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_display_name(), 
      GetArena());
  }
  avatar_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_avatar_url().empty()) {
    avatar_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_avatar_url(), 
      GetArena());
  }
  lang_tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_lang_tag().empty()) {
    lang_tag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_lang_tag(), 
      GetArena());
  }
  location_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_location().empty()) {
    location_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_location(), 
      GetArena());
  }
  timezone_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_timezone().empty()) {
    timezone_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_timezone(), 
      GetArena());
  }
  metadata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_metadata().empty()) {
    metadata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_metadata(), 
      GetArena());
  }
  facebook_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_facebook_id().empty()) {
    facebook_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_facebook_id(), 
      GetArena());
  }
  google_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_google_id().empty()) {
    google_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_google_id(), 
      GetArena());
  }
  gamecenter_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_gamecenter_id().empty()) {
    gamecenter_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_gamecenter_id(), 
      GetArena());
  }
  steam_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_steam_id().empty()) {
    steam_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_steam_id(), 
      GetArena());
  }
  facebook_instant_game_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_facebook_instant_game_id().empty()) {
    facebook_instant_game_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_facebook_instant_game_id(), 
      GetArena());
  }
  apple_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_apple_id().empty()) {
    apple_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_apple_id(), 
      GetArena());
  }
  if (from._internal_has_create_time()) {
    create_time_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.create_time_);
  } else {
    create_time_ = nullptr;
  }
  if (from._internal_has_update_time()) {
    update_time_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.update_time_);
  } else {
    update_time_ = nullptr;
  }
  ::memcpy(&online_, &from.online_,
    static_cast<size_t>(reinterpret_cast<char*>(&edge_count_) -
    reinterpret_cast<char*>(&online_)) + sizeof(edge_count_));
  // @@protoc_insertion_point(copy_constructor:nakama.api.User)
}

void User::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_User_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  display_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  avatar_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lang_tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  location_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  timezone_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  metadata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  facebook_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  google_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gamecenter_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  steam_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  facebook_instant_game_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  apple_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&create_time_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&edge_count_) -
      reinterpret_cast<char*>(&create_time_)) + sizeof(edge_count_));
}

User::~User() {
  // @@protoc_insertion_point(destructor:nakama.api.User)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void User::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  display_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  avatar_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lang_tag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  location_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  timezone_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  metadata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  facebook_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  google_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gamecenter_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  steam_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  facebook_instant_game_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  apple_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete create_time_;
  if (this != internal_default_instance()) delete update_time_;
}

void User::ArenaDtor(void* object) {
  User* _this = reinterpret_cast< User* >(object);
  (void)_this;
}
void User::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void User::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const User& User::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_User_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  return *internal_default_instance();
}


void User::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.User)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  username_.ClearToEmpty();
  display_name_.ClearToEmpty();
  avatar_url_.ClearToEmpty();
  lang_tag_.ClearToEmpty();
  location_.ClearToEmpty();
  timezone_.ClearToEmpty();
  metadata_.ClearToEmpty();
  facebook_id_.ClearToEmpty();
  google_id_.ClearToEmpty();
  gamecenter_id_.ClearToEmpty();
  steam_id_.ClearToEmpty();
  facebook_instant_game_id_.ClearToEmpty();
  apple_id_.ClearToEmpty();
  if (GetArena() == nullptr && create_time_ != nullptr) {
    delete create_time_;
  }
  create_time_ = nullptr;
  if (GetArena() == nullptr && update_time_ != nullptr) {
    delete update_time_;
  }
  update_time_ = nullptr;
  ::memset(&online_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&edge_count_) -
      reinterpret_cast<char*>(&online_)) + sizeof(edge_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* User::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.User.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string username = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.User.username"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string display_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_display_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.User.display_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string avatar_url = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_avatar_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.User.avatar_url"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string lang_tag = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_lang_tag();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.User.lang_tag"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string location = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_location();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.User.location"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string timezone = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_timezone();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.User.timezone"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string metadata = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_metadata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.User.metadata"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string facebook_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_facebook_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.User.facebook_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string google_id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_google_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.User.google_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string gamecenter_id = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_gamecenter_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.User.gamecenter_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string steam_id = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_steam_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.User.steam_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool online = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          online_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 edge_count = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          edge_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp create_time = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_create_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp update_time = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_update_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string facebook_instant_game_id = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          auto str = _internal_mutable_facebook_instant_game_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.User.facebook_instant_game_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string apple_id = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          auto str = _internal_mutable_apple_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.User.apple_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* User::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.User)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.User.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string username = 2;
  if (this->username().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.User.username");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_username(), target);
  }

  // string display_name = 3;
  if (this->display_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_display_name().data(), static_cast<int>(this->_internal_display_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.User.display_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_display_name(), target);
  }

  // string avatar_url = 4;
  if (this->avatar_url().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_avatar_url().data(), static_cast<int>(this->_internal_avatar_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.User.avatar_url");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_avatar_url(), target);
  }

  // string lang_tag = 5;
  if (this->lang_tag().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_lang_tag().data(), static_cast<int>(this->_internal_lang_tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.User.lang_tag");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_lang_tag(), target);
  }

  // string location = 6;
  if (this->location().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_location().data(), static_cast<int>(this->_internal_location().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.User.location");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_location(), target);
  }

  // string timezone = 7;
  if (this->timezone().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_timezone().data(), static_cast<int>(this->_internal_timezone().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.User.timezone");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_timezone(), target);
  }

  // string metadata = 8;
  if (this->metadata().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_metadata().data(), static_cast<int>(this->_internal_metadata().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.User.metadata");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_metadata(), target);
  }

  // string facebook_id = 9;
  if (this->facebook_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_facebook_id().data(), static_cast<int>(this->_internal_facebook_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.User.facebook_id");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_facebook_id(), target);
  }

  // string google_id = 10;
  if (this->google_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_google_id().data(), static_cast<int>(this->_internal_google_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.User.google_id");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_google_id(), target);
  }

  // string gamecenter_id = 11;
  if (this->gamecenter_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_gamecenter_id().data(), static_cast<int>(this->_internal_gamecenter_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.User.gamecenter_id");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_gamecenter_id(), target);
  }

  // string steam_id = 12;
  if (this->steam_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_steam_id().data(), static_cast<int>(this->_internal_steam_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.User.steam_id");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_steam_id(), target);
  }

  // bool online = 13;
  if (this->online() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_online(), target);
  }

  // int32 edge_count = 14;
  if (this->edge_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_edge_count(), target);
  }

  // .google.protobuf.Timestamp create_time = 15;
  if (this->has_create_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::create_time(this), target, stream);
  }

  // .google.protobuf.Timestamp update_time = 16;
  if (this->has_update_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::update_time(this), target, stream);
  }

  // string facebook_instant_game_id = 17;
  if (this->facebook_instant_game_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_facebook_instant_game_id().data(), static_cast<int>(this->_internal_facebook_instant_game_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.User.facebook_instant_game_id");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_facebook_instant_game_id(), target);
  }

  // string apple_id = 18;
  if (this->apple_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_apple_id().data(), static_cast<int>(this->_internal_apple_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.User.apple_id");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_apple_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.User)
  return target;
}

size_t User::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.User)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string username = 2;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  // string display_name = 3;
  if (this->display_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_display_name());
  }

  // string avatar_url = 4;
  if (this->avatar_url().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_avatar_url());
  }

  // string lang_tag = 5;
  if (this->lang_tag().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_lang_tag());
  }

  // string location = 6;
  if (this->location().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_location());
  }

  // string timezone = 7;
  if (this->timezone().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_timezone());
  }

  // string metadata = 8;
  if (this->metadata().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_metadata());
  }

  // string facebook_id = 9;
  if (this->facebook_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_facebook_id());
  }

  // string google_id = 10;
  if (this->google_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_google_id());
  }

  // string gamecenter_id = 11;
  if (this->gamecenter_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_gamecenter_id());
  }

  // string steam_id = 12;
  if (this->steam_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_steam_id());
  }

  // string facebook_instant_game_id = 17;
  if (this->facebook_instant_game_id().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_facebook_instant_game_id());
  }

  // string apple_id = 18;
  if (this->apple_id().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_apple_id());
  }

  // .google.protobuf.Timestamp create_time = 15;
  if (this->has_create_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *create_time_);
  }

  // .google.protobuf.Timestamp update_time = 16;
  if (this->has_update_time()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *update_time_);
  }

  // bool online = 13;
  if (this->online() != 0) {
    total_size += 1 + 1;
  }

  // int32 edge_count = 14;
  if (this->edge_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_edge_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void User::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.User)
  GOOGLE_DCHECK_NE(&from, this);
  const User* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<User>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.User)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.User)
    MergeFrom(*source);
  }
}

void User::MergeFrom(const User& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.User)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.username().size() > 0) {
    _internal_set_username(from._internal_username());
  }
  if (from.display_name().size() > 0) {
    _internal_set_display_name(from._internal_display_name());
  }
  if (from.avatar_url().size() > 0) {
    _internal_set_avatar_url(from._internal_avatar_url());
  }
  if (from.lang_tag().size() > 0) {
    _internal_set_lang_tag(from._internal_lang_tag());
  }
  if (from.location().size() > 0) {
    _internal_set_location(from._internal_location());
  }
  if (from.timezone().size() > 0) {
    _internal_set_timezone(from._internal_timezone());
  }
  if (from.metadata().size() > 0) {
    _internal_set_metadata(from._internal_metadata());
  }
  if (from.facebook_id().size() > 0) {
    _internal_set_facebook_id(from._internal_facebook_id());
  }
  if (from.google_id().size() > 0) {
    _internal_set_google_id(from._internal_google_id());
  }
  if (from.gamecenter_id().size() > 0) {
    _internal_set_gamecenter_id(from._internal_gamecenter_id());
  }
  if (from.steam_id().size() > 0) {
    _internal_set_steam_id(from._internal_steam_id());
  }
  if (from.facebook_instant_game_id().size() > 0) {
    _internal_set_facebook_instant_game_id(from._internal_facebook_instant_game_id());
  }
  if (from.apple_id().size() > 0) {
    _internal_set_apple_id(from._internal_apple_id());
  }
  if (from.has_create_time()) {
    _internal_mutable_create_time()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_create_time());
  }
  if (from.has_update_time()) {
    _internal_mutable_update_time()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_update_time());
  }
  if (from.online() != 0) {
    _internal_set_online(from._internal_online());
  }
  if (from.edge_count() != 0) {
    _internal_set_edge_count(from._internal_edge_count());
  }
}

void User::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.User)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void User::CopyFrom(const User& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.User)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool User::IsInitialized() const {
  return true;
}

void User::InternalSwap(User* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  username_.Swap(&other->username_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  display_name_.Swap(&other->display_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  avatar_url_.Swap(&other->avatar_url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  lang_tag_.Swap(&other->lang_tag_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  location_.Swap(&other->location_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  timezone_.Swap(&other->timezone_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  metadata_.Swap(&other->metadata_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  facebook_id_.Swap(&other->facebook_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  google_id_.Swap(&other->google_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  gamecenter_id_.Swap(&other->gamecenter_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  steam_id_.Swap(&other->steam_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  facebook_instant_game_id_.Swap(&other->facebook_instant_game_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  apple_id_.Swap(&other->apple_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(User, edge_count_)
      + sizeof(User::edge_count_)
      - PROTOBUF_FIELD_OFFSET(User, create_time_)>(
          reinterpret_cast<char*>(&create_time_),
          reinterpret_cast<char*>(&other->create_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata User::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class UserGroupList_UserGroup::_Internal {
 public:
  static const ::nakama::api::Group& group(const UserGroupList_UserGroup* msg);
  static const PROTOBUF_NAMESPACE_ID::Int32Value& state(const UserGroupList_UserGroup* msg);
};

const ::nakama::api::Group&
UserGroupList_UserGroup::_Internal::group(const UserGroupList_UserGroup* msg) {
  return *msg->group_;
}
const PROTOBUF_NAMESPACE_ID::Int32Value&
UserGroupList_UserGroup::_Internal::state(const UserGroupList_UserGroup* msg) {
  return *msg->state_;
}
void UserGroupList_UserGroup::clear_state() {
  if (GetArena() == nullptr && state_ != nullptr) {
    delete state_;
  }
  state_ = nullptr;
}
UserGroupList_UserGroup::UserGroupList_UserGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nakama.api.UserGroupList.UserGroup)
}
UserGroupList_UserGroup::UserGroupList_UserGroup(const UserGroupList_UserGroup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_group()) {
    group_ = new ::nakama::api::Group(*from.group_);
  } else {
    group_ = nullptr;
  }
  if (from._internal_has_state()) {
    state_ = new PROTOBUF_NAMESPACE_ID::Int32Value(*from.state_);
  } else {
    state_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:nakama.api.UserGroupList.UserGroup)
}

void UserGroupList_UserGroup::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UserGroupList_UserGroup_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&group_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&group_)) + sizeof(state_));
}

UserGroupList_UserGroup::~UserGroupList_UserGroup() {
  // @@protoc_insertion_point(destructor:nakama.api.UserGroupList.UserGroup)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UserGroupList_UserGroup::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete group_;
  if (this != internal_default_instance()) delete state_;
}

void UserGroupList_UserGroup::ArenaDtor(void* object) {
  UserGroupList_UserGroup* _this = reinterpret_cast< UserGroupList_UserGroup* >(object);
  (void)_this;
}
void UserGroupList_UserGroup::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UserGroupList_UserGroup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserGroupList_UserGroup& UserGroupList_UserGroup::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserGroupList_UserGroup_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  return *internal_default_instance();
}


void UserGroupList_UserGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.UserGroupList.UserGroup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && group_ != nullptr) {
    delete group_;
  }
  group_ = nullptr;
  if (GetArena() == nullptr && state_ != nullptr) {
    delete state_;
  }
  state_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserGroupList_UserGroup::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .nakama.api.Group group = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_group(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Int32Value state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserGroupList_UserGroup::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.UserGroupList.UserGroup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .nakama.api.Group group = 1;
  if (this->has_group()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::group(this), target, stream);
  }

  // .google.protobuf.Int32Value state = 2;
  if (this->has_state()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::state(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.UserGroupList.UserGroup)
  return target;
}

size_t UserGroupList_UserGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.UserGroupList.UserGroup)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .nakama.api.Group group = 1;
  if (this->has_group()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *group_);
  }

  // .google.protobuf.Int32Value state = 2;
  if (this->has_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *state_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserGroupList_UserGroup::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.UserGroupList.UserGroup)
  GOOGLE_DCHECK_NE(&from, this);
  const UserGroupList_UserGroup* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UserGroupList_UserGroup>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.UserGroupList.UserGroup)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.UserGroupList.UserGroup)
    MergeFrom(*source);
  }
}

void UserGroupList_UserGroup::MergeFrom(const UserGroupList_UserGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.UserGroupList.UserGroup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_group()) {
    _internal_mutable_group()->::nakama::api::Group::MergeFrom(from._internal_group());
  }
  if (from.has_state()) {
    _internal_mutable_state()->PROTOBUF_NAMESPACE_ID::Int32Value::MergeFrom(from._internal_state());
  }
}

void UserGroupList_UserGroup::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.UserGroupList.UserGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserGroupList_UserGroup::CopyFrom(const UserGroupList_UserGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.UserGroupList.UserGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserGroupList_UserGroup::IsInitialized() const {
  return true;
}

void UserGroupList_UserGroup::InternalSwap(UserGroupList_UserGroup* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UserGroupList_UserGroup, state_)
      + sizeof(UserGroupList_UserGroup::state_)
      - PROTOBUF_FIELD_OFFSET(UserGroupList_UserGroup, group_)>(
          reinterpret_cast<char*>(&group_),
          reinterpret_cast<char*>(&other->group_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UserGroupList_UserGroup::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class UserGroupList::_Internal {
 public:
};

UserGroupList::UserGroupList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  user_groups_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nakama.api.UserGroupList)
}
UserGroupList::UserGroupList(const UserGroupList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      user_groups_(from.user_groups_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  cursor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cursor().empty()) {
    cursor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_cursor(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:nakama.api.UserGroupList)
}

void UserGroupList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UserGroupList_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  cursor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

UserGroupList::~UserGroupList() {
  // @@protoc_insertion_point(destructor:nakama.api.UserGroupList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UserGroupList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  cursor_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UserGroupList::ArenaDtor(void* object) {
  UserGroupList* _this = reinterpret_cast< UserGroupList* >(object);
  (void)_this;
}
void UserGroupList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UserGroupList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserGroupList& UserGroupList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserGroupList_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  return *internal_default_instance();
}


void UserGroupList::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.UserGroupList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_groups_.Clear();
  cursor_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserGroupList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .nakama.api.UserGroupList.UserGroup user_groups = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_user_groups(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // string cursor = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_cursor();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.UserGroupList.cursor"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserGroupList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.UserGroupList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .nakama.api.UserGroupList.UserGroup user_groups = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_user_groups_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_user_groups(i), target, stream);
  }

  // string cursor = 2;
  if (this->cursor().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cursor().data(), static_cast<int>(this->_internal_cursor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.UserGroupList.cursor");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_cursor(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.UserGroupList)
  return target;
}

size_t UserGroupList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.UserGroupList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .nakama.api.UserGroupList.UserGroup user_groups = 1;
  total_size += 1UL * this->_internal_user_groups_size();
  for (const auto& msg : this->user_groups_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string cursor = 2;
  if (this->cursor().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cursor());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserGroupList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.UserGroupList)
  GOOGLE_DCHECK_NE(&from, this);
  const UserGroupList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UserGroupList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.UserGroupList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.UserGroupList)
    MergeFrom(*source);
  }
}

void UserGroupList::MergeFrom(const UserGroupList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.UserGroupList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  user_groups_.MergeFrom(from.user_groups_);
  if (from.cursor().size() > 0) {
    _internal_set_cursor(from._internal_cursor());
  }
}

void UserGroupList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.UserGroupList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserGroupList::CopyFrom(const UserGroupList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.UserGroupList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserGroupList::IsInitialized() const {
  return true;
}

void UserGroupList::InternalSwap(UserGroupList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  user_groups_.InternalSwap(&other->user_groups_);
  cursor_.Swap(&other->cursor_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata UserGroupList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Users::_Internal {
 public:
};

Users::Users(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  users_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nakama.api.Users)
}
Users::Users(const Users& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      users_(from.users_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:nakama.api.Users)
}

void Users::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Users_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
}

Users::~Users() {
  // @@protoc_insertion_point(destructor:nakama.api.Users)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Users::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Users::ArenaDtor(void* object) {
  Users* _this = reinterpret_cast< Users* >(object);
  (void)_this;
}
void Users::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Users::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Users& Users::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Users_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  return *internal_default_instance();
}


void Users::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.Users)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  users_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Users::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .nakama.api.User users = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_users(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Users::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.Users)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .nakama.api.User users = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_users_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_users(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.Users)
  return target;
}

size_t Users::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.Users)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .nakama.api.User users = 1;
  total_size += 1UL * this->_internal_users_size();
  for (const auto& msg : this->users_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Users::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.Users)
  GOOGLE_DCHECK_NE(&from, this);
  const Users* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Users>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.Users)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.Users)
    MergeFrom(*source);
  }
}

void Users::MergeFrom(const Users& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.Users)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  users_.MergeFrom(from.users_);
}

void Users::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.Users)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Users::CopyFrom(const Users& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.Users)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Users::IsInitialized() const {
  return true;
}

void Users::InternalSwap(Users* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  users_.InternalSwap(&other->users_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Users::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ValidatePurchaseAppleRequest::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::BoolValue& persist(const ValidatePurchaseAppleRequest* msg);
};

const PROTOBUF_NAMESPACE_ID::BoolValue&
ValidatePurchaseAppleRequest::_Internal::persist(const ValidatePurchaseAppleRequest* msg) {
  return *msg->persist_;
}
void ValidatePurchaseAppleRequest::clear_persist() {
  if (GetArena() == nullptr && persist_ != nullptr) {
    delete persist_;
  }
  persist_ = nullptr;
}
ValidatePurchaseAppleRequest::ValidatePurchaseAppleRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nakama.api.ValidatePurchaseAppleRequest)
}
ValidatePurchaseAppleRequest::ValidatePurchaseAppleRequest(const ValidatePurchaseAppleRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  receipt_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_receipt().empty()) {
    receipt_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_receipt(), 
      GetArena());
  }
  if (from._internal_has_persist()) {
    persist_ = new PROTOBUF_NAMESPACE_ID::BoolValue(*from.persist_);
  } else {
    persist_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:nakama.api.ValidatePurchaseAppleRequest)
}

void ValidatePurchaseAppleRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ValidatePurchaseAppleRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  receipt_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  persist_ = nullptr;
}

ValidatePurchaseAppleRequest::~ValidatePurchaseAppleRequest() {
  // @@protoc_insertion_point(destructor:nakama.api.ValidatePurchaseAppleRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ValidatePurchaseAppleRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  receipt_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete persist_;
}

void ValidatePurchaseAppleRequest::ArenaDtor(void* object) {
  ValidatePurchaseAppleRequest* _this = reinterpret_cast< ValidatePurchaseAppleRequest* >(object);
  (void)_this;
}
void ValidatePurchaseAppleRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ValidatePurchaseAppleRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ValidatePurchaseAppleRequest& ValidatePurchaseAppleRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ValidatePurchaseAppleRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  return *internal_default_instance();
}


void ValidatePurchaseAppleRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.ValidatePurchaseAppleRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  receipt_.ClearToEmpty();
  if (GetArena() == nullptr && persist_ != nullptr) {
    delete persist_;
  }
  persist_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ValidatePurchaseAppleRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string receipt = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_receipt();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.ValidatePurchaseAppleRequest.receipt"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.BoolValue persist = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_persist(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ValidatePurchaseAppleRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.ValidatePurchaseAppleRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string receipt = 1;
  if (this->receipt().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_receipt().data(), static_cast<int>(this->_internal_receipt().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.ValidatePurchaseAppleRequest.receipt");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_receipt(), target);
  }

  // .google.protobuf.BoolValue persist = 2;
  if (this->has_persist()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::persist(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.ValidatePurchaseAppleRequest)
  return target;
}

size_t ValidatePurchaseAppleRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.ValidatePurchaseAppleRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string receipt = 1;
  if (this->receipt().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_receipt());
  }

  // .google.protobuf.BoolValue persist = 2;
  if (this->has_persist()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *persist_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ValidatePurchaseAppleRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.ValidatePurchaseAppleRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ValidatePurchaseAppleRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ValidatePurchaseAppleRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.ValidatePurchaseAppleRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.ValidatePurchaseAppleRequest)
    MergeFrom(*source);
  }
}

void ValidatePurchaseAppleRequest::MergeFrom(const ValidatePurchaseAppleRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.ValidatePurchaseAppleRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.receipt().size() > 0) {
    _internal_set_receipt(from._internal_receipt());
  }
  if (from.has_persist()) {
    _internal_mutable_persist()->PROTOBUF_NAMESPACE_ID::BoolValue::MergeFrom(from._internal_persist());
  }
}

void ValidatePurchaseAppleRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.ValidatePurchaseAppleRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ValidatePurchaseAppleRequest::CopyFrom(const ValidatePurchaseAppleRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.ValidatePurchaseAppleRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ValidatePurchaseAppleRequest::IsInitialized() const {
  return true;
}

void ValidatePurchaseAppleRequest::InternalSwap(ValidatePurchaseAppleRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  receipt_.Swap(&other->receipt_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(persist_, other->persist_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ValidatePurchaseAppleRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ValidatePurchaseGoogleRequest::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::BoolValue& persist(const ValidatePurchaseGoogleRequest* msg);
};

const PROTOBUF_NAMESPACE_ID::BoolValue&
ValidatePurchaseGoogleRequest::_Internal::persist(const ValidatePurchaseGoogleRequest* msg) {
  return *msg->persist_;
}
void ValidatePurchaseGoogleRequest::clear_persist() {
  if (GetArena() == nullptr && persist_ != nullptr) {
    delete persist_;
  }
  persist_ = nullptr;
}
ValidatePurchaseGoogleRequest::ValidatePurchaseGoogleRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nakama.api.ValidatePurchaseGoogleRequest)
}
ValidatePurchaseGoogleRequest::ValidatePurchaseGoogleRequest(const ValidatePurchaseGoogleRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  purchase_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_purchase().empty()) {
    purchase_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_purchase(), 
      GetArena());
  }
  if (from._internal_has_persist()) {
    persist_ = new PROTOBUF_NAMESPACE_ID::BoolValue(*from.persist_);
  } else {
    persist_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:nakama.api.ValidatePurchaseGoogleRequest)
}

void ValidatePurchaseGoogleRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ValidatePurchaseGoogleRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  purchase_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  persist_ = nullptr;
}

ValidatePurchaseGoogleRequest::~ValidatePurchaseGoogleRequest() {
  // @@protoc_insertion_point(destructor:nakama.api.ValidatePurchaseGoogleRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ValidatePurchaseGoogleRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  purchase_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete persist_;
}

void ValidatePurchaseGoogleRequest::ArenaDtor(void* object) {
  ValidatePurchaseGoogleRequest* _this = reinterpret_cast< ValidatePurchaseGoogleRequest* >(object);
  (void)_this;
}
void ValidatePurchaseGoogleRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ValidatePurchaseGoogleRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ValidatePurchaseGoogleRequest& ValidatePurchaseGoogleRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ValidatePurchaseGoogleRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  return *internal_default_instance();
}


void ValidatePurchaseGoogleRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.ValidatePurchaseGoogleRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  purchase_.ClearToEmpty();
  if (GetArena() == nullptr && persist_ != nullptr) {
    delete persist_;
  }
  persist_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ValidatePurchaseGoogleRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string purchase = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_purchase();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.ValidatePurchaseGoogleRequest.purchase"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.BoolValue persist = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_persist(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ValidatePurchaseGoogleRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.ValidatePurchaseGoogleRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string purchase = 1;
  if (this->purchase().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_purchase().data(), static_cast<int>(this->_internal_purchase().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.ValidatePurchaseGoogleRequest.purchase");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_purchase(), target);
  }

  // .google.protobuf.BoolValue persist = 2;
  if (this->has_persist()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::persist(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.ValidatePurchaseGoogleRequest)
  return target;
}

size_t ValidatePurchaseGoogleRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.ValidatePurchaseGoogleRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string purchase = 1;
  if (this->purchase().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_purchase());
  }

  // .google.protobuf.BoolValue persist = 2;
  if (this->has_persist()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *persist_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ValidatePurchaseGoogleRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.ValidatePurchaseGoogleRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ValidatePurchaseGoogleRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ValidatePurchaseGoogleRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.ValidatePurchaseGoogleRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.ValidatePurchaseGoogleRequest)
    MergeFrom(*source);
  }
}

void ValidatePurchaseGoogleRequest::MergeFrom(const ValidatePurchaseGoogleRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.ValidatePurchaseGoogleRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.purchase().size() > 0) {
    _internal_set_purchase(from._internal_purchase());
  }
  if (from.has_persist()) {
    _internal_mutable_persist()->PROTOBUF_NAMESPACE_ID::BoolValue::MergeFrom(from._internal_persist());
  }
}

void ValidatePurchaseGoogleRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.ValidatePurchaseGoogleRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ValidatePurchaseGoogleRequest::CopyFrom(const ValidatePurchaseGoogleRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.ValidatePurchaseGoogleRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ValidatePurchaseGoogleRequest::IsInitialized() const {
  return true;
}

void ValidatePurchaseGoogleRequest::InternalSwap(ValidatePurchaseGoogleRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  purchase_.Swap(&other->purchase_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(persist_, other->persist_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ValidatePurchaseGoogleRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ValidatePurchaseHuaweiRequest::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::BoolValue& persist(const ValidatePurchaseHuaweiRequest* msg);
};

const PROTOBUF_NAMESPACE_ID::BoolValue&
ValidatePurchaseHuaweiRequest::_Internal::persist(const ValidatePurchaseHuaweiRequest* msg) {
  return *msg->persist_;
}
void ValidatePurchaseHuaweiRequest::clear_persist() {
  if (GetArena() == nullptr && persist_ != nullptr) {
    delete persist_;
  }
  persist_ = nullptr;
}
ValidatePurchaseHuaweiRequest::ValidatePurchaseHuaweiRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nakama.api.ValidatePurchaseHuaweiRequest)
}
ValidatePurchaseHuaweiRequest::ValidatePurchaseHuaweiRequest(const ValidatePurchaseHuaweiRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  purchase_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_purchase().empty()) {
    purchase_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_purchase(), 
      GetArena());
  }
  signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_signature().empty()) {
    signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_signature(), 
      GetArena());
  }
  if (from._internal_has_persist()) {
    persist_ = new PROTOBUF_NAMESPACE_ID::BoolValue(*from.persist_);
  } else {
    persist_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:nakama.api.ValidatePurchaseHuaweiRequest)
}

void ValidatePurchaseHuaweiRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ValidatePurchaseHuaweiRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  purchase_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  persist_ = nullptr;
}

ValidatePurchaseHuaweiRequest::~ValidatePurchaseHuaweiRequest() {
  // @@protoc_insertion_point(destructor:nakama.api.ValidatePurchaseHuaweiRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ValidatePurchaseHuaweiRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  purchase_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signature_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete persist_;
}

void ValidatePurchaseHuaweiRequest::ArenaDtor(void* object) {
  ValidatePurchaseHuaweiRequest* _this = reinterpret_cast< ValidatePurchaseHuaweiRequest* >(object);
  (void)_this;
}
void ValidatePurchaseHuaweiRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ValidatePurchaseHuaweiRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ValidatePurchaseHuaweiRequest& ValidatePurchaseHuaweiRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ValidatePurchaseHuaweiRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  return *internal_default_instance();
}


void ValidatePurchaseHuaweiRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.ValidatePurchaseHuaweiRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  purchase_.ClearToEmpty();
  signature_.ClearToEmpty();
  if (GetArena() == nullptr && persist_ != nullptr) {
    delete persist_;
  }
  persist_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ValidatePurchaseHuaweiRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string purchase = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_purchase();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.ValidatePurchaseHuaweiRequest.purchase"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string signature = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_signature();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.ValidatePurchaseHuaweiRequest.signature"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.BoolValue persist = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_persist(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ValidatePurchaseHuaweiRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.ValidatePurchaseHuaweiRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string purchase = 1;
  if (this->purchase().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_purchase().data(), static_cast<int>(this->_internal_purchase().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.ValidatePurchaseHuaweiRequest.purchase");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_purchase(), target);
  }

  // string signature = 2;
  if (this->signature().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_signature().data(), static_cast<int>(this->_internal_signature().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.ValidatePurchaseHuaweiRequest.signature");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_signature(), target);
  }

  // .google.protobuf.BoolValue persist = 3;
  if (this->has_persist()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::persist(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.ValidatePurchaseHuaweiRequest)
  return target;
}

size_t ValidatePurchaseHuaweiRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.ValidatePurchaseHuaweiRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string purchase = 1;
  if (this->purchase().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_purchase());
  }

  // string signature = 2;
  if (this->signature().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_signature());
  }

  // .google.protobuf.BoolValue persist = 3;
  if (this->has_persist()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *persist_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ValidatePurchaseHuaweiRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.ValidatePurchaseHuaweiRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ValidatePurchaseHuaweiRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ValidatePurchaseHuaweiRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.ValidatePurchaseHuaweiRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.ValidatePurchaseHuaweiRequest)
    MergeFrom(*source);
  }
}

void ValidatePurchaseHuaweiRequest::MergeFrom(const ValidatePurchaseHuaweiRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.ValidatePurchaseHuaweiRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.purchase().size() > 0) {
    _internal_set_purchase(from._internal_purchase());
  }
  if (from.signature().size() > 0) {
    _internal_set_signature(from._internal_signature());
  }
  if (from.has_persist()) {
    _internal_mutable_persist()->PROTOBUF_NAMESPACE_ID::BoolValue::MergeFrom(from._internal_persist());
  }
}

void ValidatePurchaseHuaweiRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.ValidatePurchaseHuaweiRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ValidatePurchaseHuaweiRequest::CopyFrom(const ValidatePurchaseHuaweiRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.ValidatePurchaseHuaweiRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ValidatePurchaseHuaweiRequest::IsInitialized() const {
  return true;
}

void ValidatePurchaseHuaweiRequest::InternalSwap(ValidatePurchaseHuaweiRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  purchase_.Swap(&other->purchase_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  signature_.Swap(&other->signature_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(persist_, other->persist_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ValidatePurchaseHuaweiRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ValidatedPurchase::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& purchase_time(const ValidatedPurchase* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& create_time(const ValidatedPurchase* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& update_time(const ValidatedPurchase* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
ValidatedPurchase::_Internal::purchase_time(const ValidatedPurchase* msg) {
  return *msg->purchase_time_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
ValidatedPurchase::_Internal::create_time(const ValidatedPurchase* msg) {
  return *msg->create_time_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
ValidatedPurchase::_Internal::update_time(const ValidatedPurchase* msg) {
  return *msg->update_time_;
}
void ValidatedPurchase::clear_purchase_time() {
  if (GetArena() == nullptr && purchase_time_ != nullptr) {
    delete purchase_time_;
  }
  purchase_time_ = nullptr;
}
void ValidatedPurchase::clear_create_time() {
  if (GetArena() == nullptr && create_time_ != nullptr) {
    delete create_time_;
  }
  create_time_ = nullptr;
}
void ValidatedPurchase::clear_update_time() {
  if (GetArena() == nullptr && update_time_ != nullptr) {
    delete update_time_;
  }
  update_time_ = nullptr;
}
ValidatedPurchase::ValidatedPurchase(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nakama.api.ValidatedPurchase)
}
ValidatedPurchase::ValidatedPurchase(const ValidatedPurchase& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  product_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_product_id().empty()) {
    product_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_product_id(), 
      GetArena());
  }
  transaction_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_transaction_id().empty()) {
    transaction_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_transaction_id(), 
      GetArena());
  }
  provider_response_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_provider_response().empty()) {
    provider_response_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_provider_response(), 
      GetArena());
  }
  if (from._internal_has_purchase_time()) {
    purchase_time_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.purchase_time_);
  } else {
    purchase_time_ = nullptr;
  }
  if (from._internal_has_create_time()) {
    create_time_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.create_time_);
  } else {
    create_time_ = nullptr;
  }
  if (from._internal_has_update_time()) {
    update_time_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.update_time_);
  } else {
    update_time_ = nullptr;
  }
  ::memcpy(&store_, &from.store_,
    static_cast<size_t>(reinterpret_cast<char*>(&seen_before_) -
    reinterpret_cast<char*>(&store_)) + sizeof(seen_before_));
  // @@protoc_insertion_point(copy_constructor:nakama.api.ValidatedPurchase)
}

void ValidatedPurchase::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ValidatedPurchase_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  product_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  transaction_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  provider_response_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&purchase_time_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&seen_before_) -
      reinterpret_cast<char*>(&purchase_time_)) + sizeof(seen_before_));
}

ValidatedPurchase::~ValidatedPurchase() {
  // @@protoc_insertion_point(destructor:nakama.api.ValidatedPurchase)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ValidatedPurchase::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  product_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  transaction_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  provider_response_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete purchase_time_;
  if (this != internal_default_instance()) delete create_time_;
  if (this != internal_default_instance()) delete update_time_;
}

void ValidatedPurchase::ArenaDtor(void* object) {
  ValidatedPurchase* _this = reinterpret_cast< ValidatedPurchase* >(object);
  (void)_this;
}
void ValidatedPurchase::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ValidatedPurchase::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ValidatedPurchase& ValidatedPurchase::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ValidatedPurchase_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  return *internal_default_instance();
}


void ValidatedPurchase::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.ValidatedPurchase)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  product_id_.ClearToEmpty();
  transaction_id_.ClearToEmpty();
  provider_response_.ClearToEmpty();
  if (GetArena() == nullptr && purchase_time_ != nullptr) {
    delete purchase_time_;
  }
  purchase_time_ = nullptr;
  if (GetArena() == nullptr && create_time_ != nullptr) {
    delete create_time_;
  }
  create_time_ = nullptr;
  if (GetArena() == nullptr && update_time_ != nullptr) {
    delete update_time_;
  }
  update_time_ = nullptr;
  ::memset(&store_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&seen_before_) -
      reinterpret_cast<char*>(&store_)) + sizeof(seen_before_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ValidatedPurchase::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string product_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_product_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.ValidatedPurchase.product_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string transaction_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_transaction_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.ValidatedPurchase.transaction_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nakama.api.ValidatedPurchase.Store store = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_store(static_cast<::nakama::api::ValidatedPurchase_Store>(val));
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp purchase_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_purchase_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp create_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_create_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp update_time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_update_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string provider_response = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_provider_response();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.ValidatedPurchase.provider_response"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nakama.api.ValidatedPurchase.Environment environment = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_environment(static_cast<::nakama::api::ValidatedPurchase_Environment>(val));
        } else goto handle_unusual;
        continue;
      // bool seen_before = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          seen_before_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ValidatedPurchase::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.ValidatedPurchase)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string product_id = 1;
  if (this->product_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_product_id().data(), static_cast<int>(this->_internal_product_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.ValidatedPurchase.product_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_product_id(), target);
  }

  // string transaction_id = 2;
  if (this->transaction_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_transaction_id().data(), static_cast<int>(this->_internal_transaction_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.ValidatedPurchase.transaction_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_transaction_id(), target);
  }

  // .nakama.api.ValidatedPurchase.Store store = 3;
  if (this->store() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_store(), target);
  }

  // .google.protobuf.Timestamp purchase_time = 4;
  if (this->has_purchase_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::purchase_time(this), target, stream);
  }

  // .google.protobuf.Timestamp create_time = 5;
  if (this->has_create_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::create_time(this), target, stream);
  }

  // .google.protobuf.Timestamp update_time = 6;
  if (this->has_update_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::update_time(this), target, stream);
  }

  // string provider_response = 7;
  if (this->provider_response().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_provider_response().data(), static_cast<int>(this->_internal_provider_response().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.ValidatedPurchase.provider_response");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_provider_response(), target);
  }

  // .nakama.api.ValidatedPurchase.Environment environment = 8;
  if (this->environment() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_environment(), target);
  }

  // bool seen_before = 9;
  if (this->seen_before() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_seen_before(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.ValidatedPurchase)
  return target;
}

size_t ValidatedPurchase::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.ValidatedPurchase)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string product_id = 1;
  if (this->product_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_product_id());
  }

  // string transaction_id = 2;
  if (this->transaction_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_transaction_id());
  }

  // string provider_response = 7;
  if (this->provider_response().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_provider_response());
  }

  // .google.protobuf.Timestamp purchase_time = 4;
  if (this->has_purchase_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *purchase_time_);
  }

  // .google.protobuf.Timestamp create_time = 5;
  if (this->has_create_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *create_time_);
  }

  // .google.protobuf.Timestamp update_time = 6;
  if (this->has_update_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *update_time_);
  }

  // .nakama.api.ValidatedPurchase.Store store = 3;
  if (this->store() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_store());
  }

  // .nakama.api.ValidatedPurchase.Environment environment = 8;
  if (this->environment() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_environment());
  }

  // bool seen_before = 9;
  if (this->seen_before() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ValidatedPurchase::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.ValidatedPurchase)
  GOOGLE_DCHECK_NE(&from, this);
  const ValidatedPurchase* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ValidatedPurchase>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.ValidatedPurchase)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.ValidatedPurchase)
    MergeFrom(*source);
  }
}

void ValidatedPurchase::MergeFrom(const ValidatedPurchase& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.ValidatedPurchase)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.product_id().size() > 0) {
    _internal_set_product_id(from._internal_product_id());
  }
  if (from.transaction_id().size() > 0) {
    _internal_set_transaction_id(from._internal_transaction_id());
  }
  if (from.provider_response().size() > 0) {
    _internal_set_provider_response(from._internal_provider_response());
  }
  if (from.has_purchase_time()) {
    _internal_mutable_purchase_time()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_purchase_time());
  }
  if (from.has_create_time()) {
    _internal_mutable_create_time()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_create_time());
  }
  if (from.has_update_time()) {
    _internal_mutable_update_time()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_update_time());
  }
  if (from.store() != 0) {
    _internal_set_store(from._internal_store());
  }
  if (from.environment() != 0) {
    _internal_set_environment(from._internal_environment());
  }
  if (from.seen_before() != 0) {
    _internal_set_seen_before(from._internal_seen_before());
  }
}

void ValidatedPurchase::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.ValidatedPurchase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ValidatedPurchase::CopyFrom(const ValidatedPurchase& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.ValidatedPurchase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ValidatedPurchase::IsInitialized() const {
  return true;
}

void ValidatedPurchase::InternalSwap(ValidatedPurchase* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  product_id_.Swap(&other->product_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  transaction_id_.Swap(&other->transaction_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  provider_response_.Swap(&other->provider_response_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ValidatedPurchase, seen_before_)
      + sizeof(ValidatedPurchase::seen_before_)
      - PROTOBUF_FIELD_OFFSET(ValidatedPurchase, purchase_time_)>(
          reinterpret_cast<char*>(&purchase_time_),
          reinterpret_cast<char*>(&other->purchase_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ValidatedPurchase::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ValidatePurchaseResponse::_Internal {
 public:
};

ValidatePurchaseResponse::ValidatePurchaseResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  validated_purchases_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nakama.api.ValidatePurchaseResponse)
}
ValidatePurchaseResponse::ValidatePurchaseResponse(const ValidatePurchaseResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      validated_purchases_(from.validated_purchases_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:nakama.api.ValidatePurchaseResponse)
}

void ValidatePurchaseResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ValidatePurchaseResponse_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
}

ValidatePurchaseResponse::~ValidatePurchaseResponse() {
  // @@protoc_insertion_point(destructor:nakama.api.ValidatePurchaseResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ValidatePurchaseResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ValidatePurchaseResponse::ArenaDtor(void* object) {
  ValidatePurchaseResponse* _this = reinterpret_cast< ValidatePurchaseResponse* >(object);
  (void)_this;
}
void ValidatePurchaseResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ValidatePurchaseResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ValidatePurchaseResponse& ValidatePurchaseResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ValidatePurchaseResponse_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  return *internal_default_instance();
}


void ValidatePurchaseResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.ValidatePurchaseResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  validated_purchases_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ValidatePurchaseResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .nakama.api.ValidatedPurchase validated_purchases = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_validated_purchases(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ValidatePurchaseResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.ValidatePurchaseResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .nakama.api.ValidatedPurchase validated_purchases = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_validated_purchases_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_validated_purchases(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.ValidatePurchaseResponse)
  return target;
}

size_t ValidatePurchaseResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.ValidatePurchaseResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .nakama.api.ValidatedPurchase validated_purchases = 1;
  total_size += 1UL * this->_internal_validated_purchases_size();
  for (const auto& msg : this->validated_purchases_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ValidatePurchaseResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.ValidatePurchaseResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ValidatePurchaseResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ValidatePurchaseResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.ValidatePurchaseResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.ValidatePurchaseResponse)
    MergeFrom(*source);
  }
}

void ValidatePurchaseResponse::MergeFrom(const ValidatePurchaseResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.ValidatePurchaseResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  validated_purchases_.MergeFrom(from.validated_purchases_);
}

void ValidatePurchaseResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.ValidatePurchaseResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ValidatePurchaseResponse::CopyFrom(const ValidatePurchaseResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.ValidatePurchaseResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ValidatePurchaseResponse::IsInitialized() const {
  return true;
}

void ValidatePurchaseResponse::InternalSwap(ValidatePurchaseResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  validated_purchases_.InternalSwap(&other->validated_purchases_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ValidatePurchaseResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PurchaseList::_Internal {
 public:
};

PurchaseList::PurchaseList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  validated_purchases_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nakama.api.PurchaseList)
}
PurchaseList::PurchaseList(const PurchaseList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      validated_purchases_(from.validated_purchases_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  cursor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cursor().empty()) {
    cursor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_cursor(), 
      GetArena());
  }
  prev_cursor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_prev_cursor().empty()) {
    prev_cursor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_prev_cursor(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:nakama.api.PurchaseList)
}

void PurchaseList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PurchaseList_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  cursor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  prev_cursor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PurchaseList::~PurchaseList() {
  // @@protoc_insertion_point(destructor:nakama.api.PurchaseList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PurchaseList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  cursor_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  prev_cursor_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PurchaseList::ArenaDtor(void* object) {
  PurchaseList* _this = reinterpret_cast< PurchaseList* >(object);
  (void)_this;
}
void PurchaseList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PurchaseList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PurchaseList& PurchaseList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PurchaseList_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  return *internal_default_instance();
}


void PurchaseList::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.PurchaseList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  validated_purchases_.Clear();
  cursor_.ClearToEmpty();
  prev_cursor_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PurchaseList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .nakama.api.ValidatedPurchase validated_purchases = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_validated_purchases(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // string cursor = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_cursor();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.PurchaseList.cursor"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string prev_cursor = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_prev_cursor();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.PurchaseList.prev_cursor"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PurchaseList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.PurchaseList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .nakama.api.ValidatedPurchase validated_purchases = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_validated_purchases_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_validated_purchases(i), target, stream);
  }

  // string cursor = 2;
  if (this->cursor().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cursor().data(), static_cast<int>(this->_internal_cursor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.PurchaseList.cursor");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_cursor(), target);
  }

  // string prev_cursor = 3;
  if (this->prev_cursor().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_prev_cursor().data(), static_cast<int>(this->_internal_prev_cursor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.PurchaseList.prev_cursor");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_prev_cursor(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.PurchaseList)
  return target;
}

size_t PurchaseList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.PurchaseList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .nakama.api.ValidatedPurchase validated_purchases = 1;
  total_size += 1UL * this->_internal_validated_purchases_size();
  for (const auto& msg : this->validated_purchases_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string cursor = 2;
  if (this->cursor().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cursor());
  }

  // string prev_cursor = 3;
  if (this->prev_cursor().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_prev_cursor());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PurchaseList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.PurchaseList)
  GOOGLE_DCHECK_NE(&from, this);
  const PurchaseList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PurchaseList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.PurchaseList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.PurchaseList)
    MergeFrom(*source);
  }
}

void PurchaseList::MergeFrom(const PurchaseList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.PurchaseList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  validated_purchases_.MergeFrom(from.validated_purchases_);
  if (from.cursor().size() > 0) {
    _internal_set_cursor(from._internal_cursor());
  }
  if (from.prev_cursor().size() > 0) {
    _internal_set_prev_cursor(from._internal_prev_cursor());
  }
}

void PurchaseList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.PurchaseList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PurchaseList::CopyFrom(const PurchaseList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.PurchaseList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PurchaseList::IsInitialized() const {
  return true;
}

void PurchaseList::InternalSwap(PurchaseList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  validated_purchases_.InternalSwap(&other->validated_purchases_);
  cursor_.Swap(&other->cursor_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  prev_cursor_.Swap(&other->prev_cursor_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata PurchaseList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class WriteLeaderboardRecordRequest_LeaderboardRecordWrite::_Internal {
 public:
};

WriteLeaderboardRecordRequest_LeaderboardRecordWrite::WriteLeaderboardRecordRequest_LeaderboardRecordWrite(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nakama.api.WriteLeaderboardRecordRequest.LeaderboardRecordWrite)
}
WriteLeaderboardRecordRequest_LeaderboardRecordWrite::WriteLeaderboardRecordRequest_LeaderboardRecordWrite(const WriteLeaderboardRecordRequest_LeaderboardRecordWrite& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  metadata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_metadata().empty()) {
    metadata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_metadata(), 
      GetArena());
  }
  ::memcpy(&score_, &from.score_,
    static_cast<size_t>(reinterpret_cast<char*>(&operator__) -
    reinterpret_cast<char*>(&score_)) + sizeof(operator__));
  // @@protoc_insertion_point(copy_constructor:nakama.api.WriteLeaderboardRecordRequest.LeaderboardRecordWrite)
}

void WriteLeaderboardRecordRequest_LeaderboardRecordWrite::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WriteLeaderboardRecordRequest_LeaderboardRecordWrite_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  metadata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&score_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&operator__) -
      reinterpret_cast<char*>(&score_)) + sizeof(operator__));
}

WriteLeaderboardRecordRequest_LeaderboardRecordWrite::~WriteLeaderboardRecordRequest_LeaderboardRecordWrite() {
  // @@protoc_insertion_point(destructor:nakama.api.WriteLeaderboardRecordRequest.LeaderboardRecordWrite)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WriteLeaderboardRecordRequest_LeaderboardRecordWrite::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  metadata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void WriteLeaderboardRecordRequest_LeaderboardRecordWrite::ArenaDtor(void* object) {
  WriteLeaderboardRecordRequest_LeaderboardRecordWrite* _this = reinterpret_cast< WriteLeaderboardRecordRequest_LeaderboardRecordWrite* >(object);
  (void)_this;
}
void WriteLeaderboardRecordRequest_LeaderboardRecordWrite::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WriteLeaderboardRecordRequest_LeaderboardRecordWrite::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WriteLeaderboardRecordRequest_LeaderboardRecordWrite& WriteLeaderboardRecordRequest_LeaderboardRecordWrite::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WriteLeaderboardRecordRequest_LeaderboardRecordWrite_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  return *internal_default_instance();
}


void WriteLeaderboardRecordRequest_LeaderboardRecordWrite::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.WriteLeaderboardRecordRequest.LeaderboardRecordWrite)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  metadata_.ClearToEmpty();
  ::memset(&score_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&operator__) -
      reinterpret_cast<char*>(&score_)) + sizeof(operator__));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WriteLeaderboardRecordRequest_LeaderboardRecordWrite::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 score = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 subscore = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          subscore_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string metadata = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_metadata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.WriteLeaderboardRecordRequest.LeaderboardRecordWrite.metadata"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nakama.api.Operator operator = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_operator_(static_cast<::nakama::api::Operator>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WriteLeaderboardRecordRequest_LeaderboardRecordWrite::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.WriteLeaderboardRecordRequest.LeaderboardRecordWrite)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 score = 1;
  if (this->score() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_score(), target);
  }

  // int64 subscore = 2;
  if (this->subscore() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_subscore(), target);
  }

  // string metadata = 3;
  if (this->metadata().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_metadata().data(), static_cast<int>(this->_internal_metadata().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.WriteLeaderboardRecordRequest.LeaderboardRecordWrite.metadata");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_metadata(), target);
  }

  // .nakama.api.Operator operator = 4;
  if (this->operator_() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_operator_(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.WriteLeaderboardRecordRequest.LeaderboardRecordWrite)
  return target;
}

size_t WriteLeaderboardRecordRequest_LeaderboardRecordWrite::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.WriteLeaderboardRecordRequest.LeaderboardRecordWrite)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string metadata = 3;
  if (this->metadata().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_metadata());
  }

  // int64 score = 1;
  if (this->score() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_score());
  }

  // int64 subscore = 2;
  if (this->subscore() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_subscore());
  }

  // .nakama.api.Operator operator = 4;
  if (this->operator_() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_operator_());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WriteLeaderboardRecordRequest_LeaderboardRecordWrite::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.WriteLeaderboardRecordRequest.LeaderboardRecordWrite)
  GOOGLE_DCHECK_NE(&from, this);
  const WriteLeaderboardRecordRequest_LeaderboardRecordWrite* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WriteLeaderboardRecordRequest_LeaderboardRecordWrite>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.WriteLeaderboardRecordRequest.LeaderboardRecordWrite)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.WriteLeaderboardRecordRequest.LeaderboardRecordWrite)
    MergeFrom(*source);
  }
}

void WriteLeaderboardRecordRequest_LeaderboardRecordWrite::MergeFrom(const WriteLeaderboardRecordRequest_LeaderboardRecordWrite& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.WriteLeaderboardRecordRequest.LeaderboardRecordWrite)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.metadata().size() > 0) {
    _internal_set_metadata(from._internal_metadata());
  }
  if (from.score() != 0) {
    _internal_set_score(from._internal_score());
  }
  if (from.subscore() != 0) {
    _internal_set_subscore(from._internal_subscore());
  }
  if (from.operator_() != 0) {
    _internal_set_operator_(from._internal_operator_());
  }
}

void WriteLeaderboardRecordRequest_LeaderboardRecordWrite::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.WriteLeaderboardRecordRequest.LeaderboardRecordWrite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WriteLeaderboardRecordRequest_LeaderboardRecordWrite::CopyFrom(const WriteLeaderboardRecordRequest_LeaderboardRecordWrite& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.WriteLeaderboardRecordRequest.LeaderboardRecordWrite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WriteLeaderboardRecordRequest_LeaderboardRecordWrite::IsInitialized() const {
  return true;
}

void WriteLeaderboardRecordRequest_LeaderboardRecordWrite::InternalSwap(WriteLeaderboardRecordRequest_LeaderboardRecordWrite* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  metadata_.Swap(&other->metadata_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WriteLeaderboardRecordRequest_LeaderboardRecordWrite, operator__)
      + sizeof(WriteLeaderboardRecordRequest_LeaderboardRecordWrite::operator__)
      - PROTOBUF_FIELD_OFFSET(WriteLeaderboardRecordRequest_LeaderboardRecordWrite, score_)>(
          reinterpret_cast<char*>(&score_),
          reinterpret_cast<char*>(&other->score_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WriteLeaderboardRecordRequest_LeaderboardRecordWrite::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class WriteLeaderboardRecordRequest::_Internal {
 public:
  static const ::nakama::api::WriteLeaderboardRecordRequest_LeaderboardRecordWrite& record(const WriteLeaderboardRecordRequest* msg);
};

const ::nakama::api::WriteLeaderboardRecordRequest_LeaderboardRecordWrite&
WriteLeaderboardRecordRequest::_Internal::record(const WriteLeaderboardRecordRequest* msg) {
  return *msg->record_;
}
WriteLeaderboardRecordRequest::WriteLeaderboardRecordRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nakama.api.WriteLeaderboardRecordRequest)
}
WriteLeaderboardRecordRequest::WriteLeaderboardRecordRequest(const WriteLeaderboardRecordRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  leaderboard_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_leaderboard_id().empty()) {
    leaderboard_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_leaderboard_id(), 
      GetArena());
  }
  if (from._internal_has_record()) {
    record_ = new ::nakama::api::WriteLeaderboardRecordRequest_LeaderboardRecordWrite(*from.record_);
  } else {
    record_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:nakama.api.WriteLeaderboardRecordRequest)
}

void WriteLeaderboardRecordRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WriteLeaderboardRecordRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  leaderboard_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  record_ = nullptr;
}

WriteLeaderboardRecordRequest::~WriteLeaderboardRecordRequest() {
  // @@protoc_insertion_point(destructor:nakama.api.WriteLeaderboardRecordRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WriteLeaderboardRecordRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  leaderboard_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete record_;
}

void WriteLeaderboardRecordRequest::ArenaDtor(void* object) {
  WriteLeaderboardRecordRequest* _this = reinterpret_cast< WriteLeaderboardRecordRequest* >(object);
  (void)_this;
}
void WriteLeaderboardRecordRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WriteLeaderboardRecordRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WriteLeaderboardRecordRequest& WriteLeaderboardRecordRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WriteLeaderboardRecordRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  return *internal_default_instance();
}


void WriteLeaderboardRecordRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.WriteLeaderboardRecordRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  leaderboard_id_.ClearToEmpty();
  if (GetArena() == nullptr && record_ != nullptr) {
    delete record_;
  }
  record_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WriteLeaderboardRecordRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string leaderboard_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_leaderboard_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.WriteLeaderboardRecordRequest.leaderboard_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nakama.api.WriteLeaderboardRecordRequest.LeaderboardRecordWrite record = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_record(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WriteLeaderboardRecordRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.WriteLeaderboardRecordRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string leaderboard_id = 1;
  if (this->leaderboard_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_leaderboard_id().data(), static_cast<int>(this->_internal_leaderboard_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.WriteLeaderboardRecordRequest.leaderboard_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_leaderboard_id(), target);
  }

  // .nakama.api.WriteLeaderboardRecordRequest.LeaderboardRecordWrite record = 2;
  if (this->has_record()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::record(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.WriteLeaderboardRecordRequest)
  return target;
}

size_t WriteLeaderboardRecordRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.WriteLeaderboardRecordRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string leaderboard_id = 1;
  if (this->leaderboard_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_leaderboard_id());
  }

  // .nakama.api.WriteLeaderboardRecordRequest.LeaderboardRecordWrite record = 2;
  if (this->has_record()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *record_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WriteLeaderboardRecordRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.WriteLeaderboardRecordRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const WriteLeaderboardRecordRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WriteLeaderboardRecordRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.WriteLeaderboardRecordRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.WriteLeaderboardRecordRequest)
    MergeFrom(*source);
  }
}

void WriteLeaderboardRecordRequest::MergeFrom(const WriteLeaderboardRecordRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.WriteLeaderboardRecordRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.leaderboard_id().size() > 0) {
    _internal_set_leaderboard_id(from._internal_leaderboard_id());
  }
  if (from.has_record()) {
    _internal_mutable_record()->::nakama::api::WriteLeaderboardRecordRequest_LeaderboardRecordWrite::MergeFrom(from._internal_record());
  }
}

void WriteLeaderboardRecordRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.WriteLeaderboardRecordRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WriteLeaderboardRecordRequest::CopyFrom(const WriteLeaderboardRecordRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.WriteLeaderboardRecordRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WriteLeaderboardRecordRequest::IsInitialized() const {
  return true;
}

void WriteLeaderboardRecordRequest::InternalSwap(WriteLeaderboardRecordRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  leaderboard_id_.Swap(&other->leaderboard_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(record_, other->record_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WriteLeaderboardRecordRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class WriteStorageObject::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Int32Value& permission_read(const WriteStorageObject* msg);
  static const PROTOBUF_NAMESPACE_ID::Int32Value& permission_write(const WriteStorageObject* msg);
};

const PROTOBUF_NAMESPACE_ID::Int32Value&
WriteStorageObject::_Internal::permission_read(const WriteStorageObject* msg) {
  return *msg->permission_read_;
}
const PROTOBUF_NAMESPACE_ID::Int32Value&
WriteStorageObject::_Internal::permission_write(const WriteStorageObject* msg) {
  return *msg->permission_write_;
}
void WriteStorageObject::clear_permission_read() {
  if (GetArena() == nullptr && permission_read_ != nullptr) {
    delete permission_read_;
  }
  permission_read_ = nullptr;
}
void WriteStorageObject::clear_permission_write() {
  if (GetArena() == nullptr && permission_write_ != nullptr) {
    delete permission_write_;
  }
  permission_write_ = nullptr;
}
WriteStorageObject::WriteStorageObject(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nakama.api.WriteStorageObject)
}
WriteStorageObject::WriteStorageObject(const WriteStorageObject& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  collection_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_collection().empty()) {
    collection_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_collection(), 
      GetArena());
  }
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key(), 
      GetArena());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArena());
  }
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_version().empty()) {
    version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_version(), 
      GetArena());
  }
  if (from._internal_has_permission_read()) {
    permission_read_ = new PROTOBUF_NAMESPACE_ID::Int32Value(*from.permission_read_);
  } else {
    permission_read_ = nullptr;
  }
  if (from._internal_has_permission_write()) {
    permission_write_ = new PROTOBUF_NAMESPACE_ID::Int32Value(*from.permission_write_);
  } else {
    permission_write_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:nakama.api.WriteStorageObject)
}

void WriteStorageObject::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WriteStorageObject_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  collection_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&permission_read_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&permission_write_) -
      reinterpret_cast<char*>(&permission_read_)) + sizeof(permission_write_));
}

WriteStorageObject::~WriteStorageObject() {
  // @@protoc_insertion_point(destructor:nakama.api.WriteStorageObject)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WriteStorageObject::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  collection_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete permission_read_;
  if (this != internal_default_instance()) delete permission_write_;
}

void WriteStorageObject::ArenaDtor(void* object) {
  WriteStorageObject* _this = reinterpret_cast< WriteStorageObject* >(object);
  (void)_this;
}
void WriteStorageObject::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WriteStorageObject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WriteStorageObject& WriteStorageObject::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WriteStorageObject_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  return *internal_default_instance();
}


void WriteStorageObject::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.WriteStorageObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  collection_.ClearToEmpty();
  key_.ClearToEmpty();
  value_.ClearToEmpty();
  version_.ClearToEmpty();
  if (GetArena() == nullptr && permission_read_ != nullptr) {
    delete permission_read_;
  }
  permission_read_ = nullptr;
  if (GetArena() == nullptr && permission_write_ != nullptr) {
    delete permission_write_;
  }
  permission_write_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WriteStorageObject::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string collection = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_collection();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.WriteStorageObject.collection"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.WriteStorageObject.key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.WriteStorageObject.value"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string version = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.WriteStorageObject.version"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Int32Value permission_read = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_permission_read(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Int32Value permission_write = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_permission_write(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WriteStorageObject::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.WriteStorageObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string collection = 1;
  if (this->collection().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_collection().data(), static_cast<int>(this->_internal_collection().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.WriteStorageObject.collection");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_collection(), target);
  }

  // string key = 2;
  if (this->key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.WriteStorageObject.key");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_key(), target);
  }

  // string value = 3;
  if (this->value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.WriteStorageObject.value");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_value(), target);
  }

  // string version = 4;
  if (this->version().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.WriteStorageObject.version");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_version(), target);
  }

  // .google.protobuf.Int32Value permission_read = 5;
  if (this->has_permission_read()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::permission_read(this), target, stream);
  }

  // .google.protobuf.Int32Value permission_write = 6;
  if (this->has_permission_write()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::permission_write(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.WriteStorageObject)
  return target;
}

size_t WriteStorageObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.WriteStorageObject)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string collection = 1;
  if (this->collection().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_collection());
  }

  // string key = 2;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // string value = 3;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  // string version = 4;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  // .google.protobuf.Int32Value permission_read = 5;
  if (this->has_permission_read()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *permission_read_);
  }

  // .google.protobuf.Int32Value permission_write = 6;
  if (this->has_permission_write()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *permission_write_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WriteStorageObject::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.WriteStorageObject)
  GOOGLE_DCHECK_NE(&from, this);
  const WriteStorageObject* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WriteStorageObject>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.WriteStorageObject)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.WriteStorageObject)
    MergeFrom(*source);
  }
}

void WriteStorageObject::MergeFrom(const WriteStorageObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.WriteStorageObject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.collection().size() > 0) {
    _internal_set_collection(from._internal_collection());
  }
  if (from.key().size() > 0) {
    _internal_set_key(from._internal_key());
  }
  if (from.value().size() > 0) {
    _internal_set_value(from._internal_value());
  }
  if (from.version().size() > 0) {
    _internal_set_version(from._internal_version());
  }
  if (from.has_permission_read()) {
    _internal_mutable_permission_read()->PROTOBUF_NAMESPACE_ID::Int32Value::MergeFrom(from._internal_permission_read());
  }
  if (from.has_permission_write()) {
    _internal_mutable_permission_write()->PROTOBUF_NAMESPACE_ID::Int32Value::MergeFrom(from._internal_permission_write());
  }
}

void WriteStorageObject::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.WriteStorageObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WriteStorageObject::CopyFrom(const WriteStorageObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.WriteStorageObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WriteStorageObject::IsInitialized() const {
  return true;
}

void WriteStorageObject::InternalSwap(WriteStorageObject* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  collection_.Swap(&other->collection_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  version_.Swap(&other->version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WriteStorageObject, permission_write_)
      + sizeof(WriteStorageObject::permission_write_)
      - PROTOBUF_FIELD_OFFSET(WriteStorageObject, permission_read_)>(
          reinterpret_cast<char*>(&permission_read_),
          reinterpret_cast<char*>(&other->permission_read_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WriteStorageObject::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class WriteStorageObjectsRequest::_Internal {
 public:
};

WriteStorageObjectsRequest::WriteStorageObjectsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  objects_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nakama.api.WriteStorageObjectsRequest)
}
WriteStorageObjectsRequest::WriteStorageObjectsRequest(const WriteStorageObjectsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      objects_(from.objects_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:nakama.api.WriteStorageObjectsRequest)
}

void WriteStorageObjectsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WriteStorageObjectsRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
}

WriteStorageObjectsRequest::~WriteStorageObjectsRequest() {
  // @@protoc_insertion_point(destructor:nakama.api.WriteStorageObjectsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WriteStorageObjectsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void WriteStorageObjectsRequest::ArenaDtor(void* object) {
  WriteStorageObjectsRequest* _this = reinterpret_cast< WriteStorageObjectsRequest* >(object);
  (void)_this;
}
void WriteStorageObjectsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WriteStorageObjectsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WriteStorageObjectsRequest& WriteStorageObjectsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WriteStorageObjectsRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  return *internal_default_instance();
}


void WriteStorageObjectsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.WriteStorageObjectsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  objects_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WriteStorageObjectsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .nakama.api.WriteStorageObject objects = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_objects(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WriteStorageObjectsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.WriteStorageObjectsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .nakama.api.WriteStorageObject objects = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_objects_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_objects(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.WriteStorageObjectsRequest)
  return target;
}

size_t WriteStorageObjectsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.WriteStorageObjectsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .nakama.api.WriteStorageObject objects = 1;
  total_size += 1UL * this->_internal_objects_size();
  for (const auto& msg : this->objects_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WriteStorageObjectsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.WriteStorageObjectsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const WriteStorageObjectsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WriteStorageObjectsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.WriteStorageObjectsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.WriteStorageObjectsRequest)
    MergeFrom(*source);
  }
}

void WriteStorageObjectsRequest::MergeFrom(const WriteStorageObjectsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.WriteStorageObjectsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  objects_.MergeFrom(from.objects_);
}

void WriteStorageObjectsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.WriteStorageObjectsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WriteStorageObjectsRequest::CopyFrom(const WriteStorageObjectsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.WriteStorageObjectsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WriteStorageObjectsRequest::IsInitialized() const {
  return true;
}

void WriteStorageObjectsRequest::InternalSwap(WriteStorageObjectsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  objects_.InternalSwap(&other->objects_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WriteStorageObjectsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class WriteTournamentRecordRequest_TournamentRecordWrite::_Internal {
 public:
};

WriteTournamentRecordRequest_TournamentRecordWrite::WriteTournamentRecordRequest_TournamentRecordWrite(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nakama.api.WriteTournamentRecordRequest.TournamentRecordWrite)
}
WriteTournamentRecordRequest_TournamentRecordWrite::WriteTournamentRecordRequest_TournamentRecordWrite(const WriteTournamentRecordRequest_TournamentRecordWrite& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  metadata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_metadata().empty()) {
    metadata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_metadata(), 
      GetArena());
  }
  ::memcpy(&score_, &from.score_,
    static_cast<size_t>(reinterpret_cast<char*>(&operator__) -
    reinterpret_cast<char*>(&score_)) + sizeof(operator__));
  // @@protoc_insertion_point(copy_constructor:nakama.api.WriteTournamentRecordRequest.TournamentRecordWrite)
}

void WriteTournamentRecordRequest_TournamentRecordWrite::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WriteTournamentRecordRequest_TournamentRecordWrite_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  metadata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&score_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&operator__) -
      reinterpret_cast<char*>(&score_)) + sizeof(operator__));
}

WriteTournamentRecordRequest_TournamentRecordWrite::~WriteTournamentRecordRequest_TournamentRecordWrite() {
  // @@protoc_insertion_point(destructor:nakama.api.WriteTournamentRecordRequest.TournamentRecordWrite)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WriteTournamentRecordRequest_TournamentRecordWrite::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  metadata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void WriteTournamentRecordRequest_TournamentRecordWrite::ArenaDtor(void* object) {
  WriteTournamentRecordRequest_TournamentRecordWrite* _this = reinterpret_cast< WriteTournamentRecordRequest_TournamentRecordWrite* >(object);
  (void)_this;
}
void WriteTournamentRecordRequest_TournamentRecordWrite::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WriteTournamentRecordRequest_TournamentRecordWrite::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WriteTournamentRecordRequest_TournamentRecordWrite& WriteTournamentRecordRequest_TournamentRecordWrite::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WriteTournamentRecordRequest_TournamentRecordWrite_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  return *internal_default_instance();
}


void WriteTournamentRecordRequest_TournamentRecordWrite::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.WriteTournamentRecordRequest.TournamentRecordWrite)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  metadata_.ClearToEmpty();
  ::memset(&score_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&operator__) -
      reinterpret_cast<char*>(&score_)) + sizeof(operator__));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WriteTournamentRecordRequest_TournamentRecordWrite::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 score = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 subscore = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          subscore_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string metadata = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_metadata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.WriteTournamentRecordRequest.TournamentRecordWrite.metadata"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nakama.api.Operator operator = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_operator_(static_cast<::nakama::api::Operator>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WriteTournamentRecordRequest_TournamentRecordWrite::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.WriteTournamentRecordRequest.TournamentRecordWrite)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 score = 1;
  if (this->score() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_score(), target);
  }

  // int64 subscore = 2;
  if (this->subscore() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_subscore(), target);
  }

  // string metadata = 3;
  if (this->metadata().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_metadata().data(), static_cast<int>(this->_internal_metadata().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.WriteTournamentRecordRequest.TournamentRecordWrite.metadata");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_metadata(), target);
  }

  // .nakama.api.Operator operator = 4;
  if (this->operator_() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_operator_(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.WriteTournamentRecordRequest.TournamentRecordWrite)
  return target;
}

size_t WriteTournamentRecordRequest_TournamentRecordWrite::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.WriteTournamentRecordRequest.TournamentRecordWrite)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string metadata = 3;
  if (this->metadata().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_metadata());
  }

  // int64 score = 1;
  if (this->score() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_score());
  }

  // int64 subscore = 2;
  if (this->subscore() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_subscore());
  }

  // .nakama.api.Operator operator = 4;
  if (this->operator_() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_operator_());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WriteTournamentRecordRequest_TournamentRecordWrite::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.WriteTournamentRecordRequest.TournamentRecordWrite)
  GOOGLE_DCHECK_NE(&from, this);
  const WriteTournamentRecordRequest_TournamentRecordWrite* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WriteTournamentRecordRequest_TournamentRecordWrite>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.WriteTournamentRecordRequest.TournamentRecordWrite)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.WriteTournamentRecordRequest.TournamentRecordWrite)
    MergeFrom(*source);
  }
}

void WriteTournamentRecordRequest_TournamentRecordWrite::MergeFrom(const WriteTournamentRecordRequest_TournamentRecordWrite& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.WriteTournamentRecordRequest.TournamentRecordWrite)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.metadata().size() > 0) {
    _internal_set_metadata(from._internal_metadata());
  }
  if (from.score() != 0) {
    _internal_set_score(from._internal_score());
  }
  if (from.subscore() != 0) {
    _internal_set_subscore(from._internal_subscore());
  }
  if (from.operator_() != 0) {
    _internal_set_operator_(from._internal_operator_());
  }
}

void WriteTournamentRecordRequest_TournamentRecordWrite::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.WriteTournamentRecordRequest.TournamentRecordWrite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WriteTournamentRecordRequest_TournamentRecordWrite::CopyFrom(const WriteTournamentRecordRequest_TournamentRecordWrite& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.WriteTournamentRecordRequest.TournamentRecordWrite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WriteTournamentRecordRequest_TournamentRecordWrite::IsInitialized() const {
  return true;
}

void WriteTournamentRecordRequest_TournamentRecordWrite::InternalSwap(WriteTournamentRecordRequest_TournamentRecordWrite* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  metadata_.Swap(&other->metadata_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WriteTournamentRecordRequest_TournamentRecordWrite, operator__)
      + sizeof(WriteTournamentRecordRequest_TournamentRecordWrite::operator__)
      - PROTOBUF_FIELD_OFFSET(WriteTournamentRecordRequest_TournamentRecordWrite, score_)>(
          reinterpret_cast<char*>(&score_),
          reinterpret_cast<char*>(&other->score_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WriteTournamentRecordRequest_TournamentRecordWrite::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class WriteTournamentRecordRequest::_Internal {
 public:
  static const ::nakama::api::WriteTournamentRecordRequest_TournamentRecordWrite& record(const WriteTournamentRecordRequest* msg);
};

const ::nakama::api::WriteTournamentRecordRequest_TournamentRecordWrite&
WriteTournamentRecordRequest::_Internal::record(const WriteTournamentRecordRequest* msg) {
  return *msg->record_;
}
WriteTournamentRecordRequest::WriteTournamentRecordRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nakama.api.WriteTournamentRecordRequest)
}
WriteTournamentRecordRequest::WriteTournamentRecordRequest(const WriteTournamentRecordRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tournament_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tournament_id().empty()) {
    tournament_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tournament_id(), 
      GetArena());
  }
  if (from._internal_has_record()) {
    record_ = new ::nakama::api::WriteTournamentRecordRequest_TournamentRecordWrite(*from.record_);
  } else {
    record_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:nakama.api.WriteTournamentRecordRequest)
}

void WriteTournamentRecordRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WriteTournamentRecordRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  tournament_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  record_ = nullptr;
}

WriteTournamentRecordRequest::~WriteTournamentRecordRequest() {
  // @@protoc_insertion_point(destructor:nakama.api.WriteTournamentRecordRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WriteTournamentRecordRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  tournament_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete record_;
}

void WriteTournamentRecordRequest::ArenaDtor(void* object) {
  WriteTournamentRecordRequest* _this = reinterpret_cast< WriteTournamentRecordRequest* >(object);
  (void)_this;
}
void WriteTournamentRecordRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WriteTournamentRecordRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WriteTournamentRecordRequest& WriteTournamentRecordRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WriteTournamentRecordRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base);
  return *internal_default_instance();
}


void WriteTournamentRecordRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.api.WriteTournamentRecordRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tournament_id_.ClearToEmpty();
  if (GetArena() == nullptr && record_ != nullptr) {
    delete record_;
  }
  record_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WriteTournamentRecordRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string tournament_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_tournament_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.api.WriteTournamentRecordRequest.tournament_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nakama.api.WriteTournamentRecordRequest.TournamentRecordWrite record = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_record(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WriteTournamentRecordRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nakama.api.WriteTournamentRecordRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tournament_id = 1;
  if (this->tournament_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tournament_id().data(), static_cast<int>(this->_internal_tournament_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.api.WriteTournamentRecordRequest.tournament_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_tournament_id(), target);
  }

  // .nakama.api.WriteTournamentRecordRequest.TournamentRecordWrite record = 2;
  if (this->has_record()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::record(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.api.WriteTournamentRecordRequest)
  return target;
}

size_t WriteTournamentRecordRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.api.WriteTournamentRecordRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string tournament_id = 1;
  if (this->tournament_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tournament_id());
  }

  // .nakama.api.WriteTournamentRecordRequest.TournamentRecordWrite record = 2;
  if (this->has_record()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *record_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WriteTournamentRecordRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.api.WriteTournamentRecordRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const WriteTournamentRecordRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WriteTournamentRecordRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.api.WriteTournamentRecordRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.api.WriteTournamentRecordRequest)
    MergeFrom(*source);
  }
}

void WriteTournamentRecordRequest::MergeFrom(const WriteTournamentRecordRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.api.WriteTournamentRecordRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.tournament_id().size() > 0) {
    _internal_set_tournament_id(from._internal_tournament_id());
  }
  if (from.has_record()) {
    _internal_mutable_record()->::nakama::api::WriteTournamentRecordRequest_TournamentRecordWrite::MergeFrom(from._internal_record());
  }
}

void WriteTournamentRecordRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.api.WriteTournamentRecordRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WriteTournamentRecordRequest::CopyFrom(const WriteTournamentRecordRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.api.WriteTournamentRecordRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WriteTournamentRecordRequest::IsInitialized() const {
  return true;
}

void WriteTournamentRecordRequest::InternalSwap(WriteTournamentRecordRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  tournament_id_.Swap(&other->tournament_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(record_, other->record_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WriteTournamentRecordRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace api
}  // namespace nakama
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::nakama::api::Account* Arena::CreateMaybeMessage< ::nakama::api::Account >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::api::Account >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::api::AccountRefresh_VarsEntry_DoNotUse* Arena::CreateMaybeMessage< ::nakama::api::AccountRefresh_VarsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::api::AccountRefresh_VarsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::api::AccountRefresh* Arena::CreateMaybeMessage< ::nakama::api::AccountRefresh >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::api::AccountRefresh >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::api::AccountApple_VarsEntry_DoNotUse* Arena::CreateMaybeMessage< ::nakama::api::AccountApple_VarsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::api::AccountApple_VarsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::api::AccountApple* Arena::CreateMaybeMessage< ::nakama::api::AccountApple >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::api::AccountApple >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::api::AccountCustom_VarsEntry_DoNotUse* Arena::CreateMaybeMessage< ::nakama::api::AccountCustom_VarsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::api::AccountCustom_VarsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::api::AccountCustom* Arena::CreateMaybeMessage< ::nakama::api::AccountCustom >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::api::AccountCustom >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::api::AccountDevice_VarsEntry_DoNotUse* Arena::CreateMaybeMessage< ::nakama::api::AccountDevice_VarsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::api::AccountDevice_VarsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::api::AccountDevice* Arena::CreateMaybeMessage< ::nakama::api::AccountDevice >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::api::AccountDevice >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::api::AccountEmail_VarsEntry_DoNotUse* Arena::CreateMaybeMessage< ::nakama::api::AccountEmail_VarsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::api::AccountEmail_VarsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::api::AccountEmail* Arena::CreateMaybeMessage< ::nakama::api::AccountEmail >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::api::AccountEmail >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::api::AccountFacebook_VarsEntry_DoNotUse* Arena::CreateMaybeMessage< ::nakama::api::AccountFacebook_VarsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::api::AccountFacebook_VarsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::api::AccountFacebook* Arena::CreateMaybeMessage< ::nakama::api::AccountFacebook >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::api::AccountFacebook >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::api::AccountFacebookInstantGame_VarsEntry_DoNotUse* Arena::CreateMaybeMessage< ::nakama::api::AccountFacebookInstantGame_VarsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::api::AccountFacebookInstantGame_VarsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::api::AccountFacebookInstantGame* Arena::CreateMaybeMessage< ::nakama::api::AccountFacebookInstantGame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::api::AccountFacebookInstantGame >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::api::AccountGameCenter_VarsEntry_DoNotUse* Arena::CreateMaybeMessage< ::nakama::api::AccountGameCenter_VarsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::api::AccountGameCenter_VarsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::api::AccountGameCenter* Arena::CreateMaybeMessage< ::nakama::api::AccountGameCenter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::api::AccountGameCenter >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::api::AccountGoogle_VarsEntry_DoNotUse* Arena::CreateMaybeMessage< ::nakama::api::AccountGoogle_VarsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::api::AccountGoogle_VarsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::api::AccountGoogle* Arena::CreateMaybeMessage< ::nakama::api::AccountGoogle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::api::AccountGoogle >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::api::AccountSteam_VarsEntry_DoNotUse* Arena::CreateMaybeMessage< ::nakama::api::AccountSteam_VarsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::api::AccountSteam_VarsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::api::AccountSteam* Arena::CreateMaybeMessage< ::nakama::api::AccountSteam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::api::AccountSteam >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::api::AddFriendsRequest* Arena::CreateMaybeMessage< ::nakama::api::AddFriendsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::api::AddFriendsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::api::AddGroupUsersRequest* Arena::CreateMaybeMessage< ::nakama::api::AddGroupUsersRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::api::AddGroupUsersRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::api::SessionRefreshRequest_VarsEntry_DoNotUse* Arena::CreateMaybeMessage< ::nakama::api::SessionRefreshRequest_VarsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::api::SessionRefreshRequest_VarsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::api::SessionRefreshRequest* Arena::CreateMaybeMessage< ::nakama::api::SessionRefreshRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::api::SessionRefreshRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::api::SessionLogoutRequest* Arena::CreateMaybeMessage< ::nakama::api::SessionLogoutRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::api::SessionLogoutRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::api::AuthenticateAppleRequest* Arena::CreateMaybeMessage< ::nakama::api::AuthenticateAppleRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::api::AuthenticateAppleRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::api::AuthenticateCustomRequest* Arena::CreateMaybeMessage< ::nakama::api::AuthenticateCustomRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::api::AuthenticateCustomRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::api::AuthenticateDeviceRequest* Arena::CreateMaybeMessage< ::nakama::api::AuthenticateDeviceRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::api::AuthenticateDeviceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::api::AuthenticateEmailRequest* Arena::CreateMaybeMessage< ::nakama::api::AuthenticateEmailRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::api::AuthenticateEmailRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::api::AuthenticateFacebookRequest* Arena::CreateMaybeMessage< ::nakama::api::AuthenticateFacebookRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::api::AuthenticateFacebookRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::api::AuthenticateFacebookInstantGameRequest* Arena::CreateMaybeMessage< ::nakama::api::AuthenticateFacebookInstantGameRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::api::AuthenticateFacebookInstantGameRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::api::AuthenticateGameCenterRequest* Arena::CreateMaybeMessage< ::nakama::api::AuthenticateGameCenterRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::api::AuthenticateGameCenterRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::api::AuthenticateGoogleRequest* Arena::CreateMaybeMessage< ::nakama::api::AuthenticateGoogleRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::api::AuthenticateGoogleRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::api::AuthenticateSteamRequest* Arena::CreateMaybeMessage< ::nakama::api::AuthenticateSteamRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::api::AuthenticateSteamRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::api::BanGroupUsersRequest* Arena::CreateMaybeMessage< ::nakama::api::BanGroupUsersRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::api::BanGroupUsersRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::api::BlockFriendsRequest* Arena::CreateMaybeMessage< ::nakama::api::BlockFriendsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::api::BlockFriendsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::api::ChannelMessage* Arena::CreateMaybeMessage< ::nakama::api::ChannelMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::api::ChannelMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::api::ChannelMessageList* Arena::CreateMaybeMessage< ::nakama::api::ChannelMessageList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::api::ChannelMessageList >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::api::CreateGroupRequest* Arena::CreateMaybeMessage< ::nakama::api::CreateGroupRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::api::CreateGroupRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::api::DeleteFriendsRequest* Arena::CreateMaybeMessage< ::nakama::api::DeleteFriendsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::api::DeleteFriendsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::api::DeleteGroupRequest* Arena::CreateMaybeMessage< ::nakama::api::DeleteGroupRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::api::DeleteGroupRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::api::DeleteLeaderboardRecordRequest* Arena::CreateMaybeMessage< ::nakama::api::DeleteLeaderboardRecordRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::api::DeleteLeaderboardRecordRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::api::DeleteNotificationsRequest* Arena::CreateMaybeMessage< ::nakama::api::DeleteNotificationsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::api::DeleteNotificationsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::api::DeleteStorageObjectId* Arena::CreateMaybeMessage< ::nakama::api::DeleteStorageObjectId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::api::DeleteStorageObjectId >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::api::DeleteStorageObjectsRequest* Arena::CreateMaybeMessage< ::nakama::api::DeleteStorageObjectsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::api::DeleteStorageObjectsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::api::Event_PropertiesEntry_DoNotUse* Arena::CreateMaybeMessage< ::nakama::api::Event_PropertiesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::api::Event_PropertiesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::api::Event* Arena::CreateMaybeMessage< ::nakama::api::Event >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::api::Event >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::api::Friend* Arena::CreateMaybeMessage< ::nakama::api::Friend >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::api::Friend >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::api::FriendList* Arena::CreateMaybeMessage< ::nakama::api::FriendList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::api::FriendList >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::api::GetUsersRequest* Arena::CreateMaybeMessage< ::nakama::api::GetUsersRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::api::GetUsersRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::api::Group* Arena::CreateMaybeMessage< ::nakama::api::Group >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::api::Group >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::api::GroupList* Arena::CreateMaybeMessage< ::nakama::api::GroupList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::api::GroupList >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::api::GroupUserList_GroupUser* Arena::CreateMaybeMessage< ::nakama::api::GroupUserList_GroupUser >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::api::GroupUserList_GroupUser >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::api::GroupUserList* Arena::CreateMaybeMessage< ::nakama::api::GroupUserList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::api::GroupUserList >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::api::ImportFacebookFriendsRequest* Arena::CreateMaybeMessage< ::nakama::api::ImportFacebookFriendsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::api::ImportFacebookFriendsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::api::ImportSteamFriendsRequest* Arena::CreateMaybeMessage< ::nakama::api::ImportSteamFriendsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::api::ImportSteamFriendsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::api::JoinGroupRequest* Arena::CreateMaybeMessage< ::nakama::api::JoinGroupRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::api::JoinGroupRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::api::JoinTournamentRequest* Arena::CreateMaybeMessage< ::nakama::api::JoinTournamentRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::api::JoinTournamentRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::api::KickGroupUsersRequest* Arena::CreateMaybeMessage< ::nakama::api::KickGroupUsersRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::api::KickGroupUsersRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::api::Leaderboard* Arena::CreateMaybeMessage< ::nakama::api::Leaderboard >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::api::Leaderboard >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::api::LeaderboardList* Arena::CreateMaybeMessage< ::nakama::api::LeaderboardList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::api::LeaderboardList >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::api::LeaderboardRecord* Arena::CreateMaybeMessage< ::nakama::api::LeaderboardRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::api::LeaderboardRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::api::LeaderboardRecordList* Arena::CreateMaybeMessage< ::nakama::api::LeaderboardRecordList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::api::LeaderboardRecordList >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::api::LeaveGroupRequest* Arena::CreateMaybeMessage< ::nakama::api::LeaveGroupRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::api::LeaveGroupRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::api::LinkFacebookRequest* Arena::CreateMaybeMessage< ::nakama::api::LinkFacebookRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::api::LinkFacebookRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::api::LinkSteamRequest* Arena::CreateMaybeMessage< ::nakama::api::LinkSteamRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::api::LinkSteamRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::api::ListChannelMessagesRequest* Arena::CreateMaybeMessage< ::nakama::api::ListChannelMessagesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::api::ListChannelMessagesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::api::ListFriendsRequest* Arena::CreateMaybeMessage< ::nakama::api::ListFriendsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::api::ListFriendsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::api::ListGroupsRequest* Arena::CreateMaybeMessage< ::nakama::api::ListGroupsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::api::ListGroupsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::api::ListGroupUsersRequest* Arena::CreateMaybeMessage< ::nakama::api::ListGroupUsersRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::api::ListGroupUsersRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::api::ListLeaderboardRecordsAroundOwnerRequest* Arena::CreateMaybeMessage< ::nakama::api::ListLeaderboardRecordsAroundOwnerRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::api::ListLeaderboardRecordsAroundOwnerRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::api::ListLeaderboardRecordsRequest* Arena::CreateMaybeMessage< ::nakama::api::ListLeaderboardRecordsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::api::ListLeaderboardRecordsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::api::ListMatchesRequest* Arena::CreateMaybeMessage< ::nakama::api::ListMatchesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::api::ListMatchesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::api::ListNotificationsRequest* Arena::CreateMaybeMessage< ::nakama::api::ListNotificationsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::api::ListNotificationsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::api::ListStorageObjectsRequest* Arena::CreateMaybeMessage< ::nakama::api::ListStorageObjectsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::api::ListStorageObjectsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::api::ListTournamentRecordsAroundOwnerRequest* Arena::CreateMaybeMessage< ::nakama::api::ListTournamentRecordsAroundOwnerRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::api::ListTournamentRecordsAroundOwnerRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::api::ListTournamentRecordsRequest* Arena::CreateMaybeMessage< ::nakama::api::ListTournamentRecordsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::api::ListTournamentRecordsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::api::ListTournamentsRequest* Arena::CreateMaybeMessage< ::nakama::api::ListTournamentsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::api::ListTournamentsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::api::ListUserGroupsRequest* Arena::CreateMaybeMessage< ::nakama::api::ListUserGroupsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::api::ListUserGroupsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::api::Match* Arena::CreateMaybeMessage< ::nakama::api::Match >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::api::Match >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::api::MatchList* Arena::CreateMaybeMessage< ::nakama::api::MatchList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::api::MatchList >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::api::Notification* Arena::CreateMaybeMessage< ::nakama::api::Notification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::api::Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::api::NotificationList* Arena::CreateMaybeMessage< ::nakama::api::NotificationList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::api::NotificationList >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::api::PromoteGroupUsersRequest* Arena::CreateMaybeMessage< ::nakama::api::PromoteGroupUsersRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::api::PromoteGroupUsersRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::api::DemoteGroupUsersRequest* Arena::CreateMaybeMessage< ::nakama::api::DemoteGroupUsersRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::api::DemoteGroupUsersRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::api::ReadStorageObjectId* Arena::CreateMaybeMessage< ::nakama::api::ReadStorageObjectId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::api::ReadStorageObjectId >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::api::ReadStorageObjectsRequest* Arena::CreateMaybeMessage< ::nakama::api::ReadStorageObjectsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::api::ReadStorageObjectsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::api::Rpc* Arena::CreateMaybeMessage< ::nakama::api::Rpc >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::api::Rpc >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::api::Session* Arena::CreateMaybeMessage< ::nakama::api::Session >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::api::Session >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::api::StorageObject* Arena::CreateMaybeMessage< ::nakama::api::StorageObject >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::api::StorageObject >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::api::StorageObjectAck* Arena::CreateMaybeMessage< ::nakama::api::StorageObjectAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::api::StorageObjectAck >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::api::StorageObjectAcks* Arena::CreateMaybeMessage< ::nakama::api::StorageObjectAcks >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::api::StorageObjectAcks >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::api::StorageObjects* Arena::CreateMaybeMessage< ::nakama::api::StorageObjects >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::api::StorageObjects >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::api::StorageObjectList* Arena::CreateMaybeMessage< ::nakama::api::StorageObjectList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::api::StorageObjectList >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::api::Tournament* Arena::CreateMaybeMessage< ::nakama::api::Tournament >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::api::Tournament >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::api::TournamentList* Arena::CreateMaybeMessage< ::nakama::api::TournamentList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::api::TournamentList >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::api::TournamentRecordList* Arena::CreateMaybeMessage< ::nakama::api::TournamentRecordList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::api::TournamentRecordList >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::api::UpdateAccountRequest* Arena::CreateMaybeMessage< ::nakama::api::UpdateAccountRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::api::UpdateAccountRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::api::UpdateGroupRequest* Arena::CreateMaybeMessage< ::nakama::api::UpdateGroupRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::api::UpdateGroupRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::api::User* Arena::CreateMaybeMessage< ::nakama::api::User >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::api::User >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::api::UserGroupList_UserGroup* Arena::CreateMaybeMessage< ::nakama::api::UserGroupList_UserGroup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::api::UserGroupList_UserGroup >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::api::UserGroupList* Arena::CreateMaybeMessage< ::nakama::api::UserGroupList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::api::UserGroupList >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::api::Users* Arena::CreateMaybeMessage< ::nakama::api::Users >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::api::Users >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::api::ValidatePurchaseAppleRequest* Arena::CreateMaybeMessage< ::nakama::api::ValidatePurchaseAppleRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::api::ValidatePurchaseAppleRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::api::ValidatePurchaseGoogleRequest* Arena::CreateMaybeMessage< ::nakama::api::ValidatePurchaseGoogleRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::api::ValidatePurchaseGoogleRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::api::ValidatePurchaseHuaweiRequest* Arena::CreateMaybeMessage< ::nakama::api::ValidatePurchaseHuaweiRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::api::ValidatePurchaseHuaweiRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::api::ValidatedPurchase* Arena::CreateMaybeMessage< ::nakama::api::ValidatedPurchase >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::api::ValidatedPurchase >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::api::ValidatePurchaseResponse* Arena::CreateMaybeMessage< ::nakama::api::ValidatePurchaseResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::api::ValidatePurchaseResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::api::PurchaseList* Arena::CreateMaybeMessage< ::nakama::api::PurchaseList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::api::PurchaseList >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::api::WriteLeaderboardRecordRequest_LeaderboardRecordWrite* Arena::CreateMaybeMessage< ::nakama::api::WriteLeaderboardRecordRequest_LeaderboardRecordWrite >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::api::WriteLeaderboardRecordRequest_LeaderboardRecordWrite >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::api::WriteLeaderboardRecordRequest* Arena::CreateMaybeMessage< ::nakama::api::WriteLeaderboardRecordRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::api::WriteLeaderboardRecordRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::api::WriteStorageObject* Arena::CreateMaybeMessage< ::nakama::api::WriteStorageObject >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::api::WriteStorageObject >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::api::WriteStorageObjectsRequest* Arena::CreateMaybeMessage< ::nakama::api::WriteStorageObjectsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::api::WriteStorageObjectsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::api::WriteTournamentRecordRequest_TournamentRecordWrite* Arena::CreateMaybeMessage< ::nakama::api::WriteTournamentRecordRequest_TournamentRecordWrite >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::api::WriteTournamentRecordRequest_TournamentRecordWrite >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::api::WriteTournamentRecordRequest* Arena::CreateMaybeMessage< ::nakama::api::WriteTournamentRecordRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::api::WriteTournamentRecordRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
