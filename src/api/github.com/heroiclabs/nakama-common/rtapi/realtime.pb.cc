// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: github.com/heroiclabs/nakama-common/rtapi/realtime.proto

#include "github.com/heroiclabs/nakama-common/rtapi/realtime.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fwrappers_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BoolValue_google_2fprotobuf_2fwrappers_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fwrappers_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Int32Value_google_2fprotobuf_2fwrappers_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fwrappers_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StringValue_google_2fprotobuf_2fwrappers_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftimestamp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ChannelMessage_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Notification_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Rpc_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Channel_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ChannelJoin_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChannelLeave_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ChannelMessageAck_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChannelMessageRemove_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChannelMessageSend_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChannelMessageUpdate_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ChannelPresenceEvent_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Error_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Error_ContextEntry_DoNotUse_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Match_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MatchCreate_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MatchData_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MatchDataSend_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MatchJoin_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MatchJoin_MetadataEntry_DoNotUse_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MatchLeave_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MatchPresenceEvent_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_MatchmakerAdd_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MatchmakerAdd_NumericPropertiesEntry_DoNotUse_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MatchmakerAdd_StringPropertiesEntry_DoNotUse_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MatchmakerMatched_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_MatchmakerMatched_MatchmakerUser_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MatchmakerMatched_MatchmakerUser_NumericPropertiesEntry_DoNotUse_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MatchmakerMatched_MatchmakerUser_StringPropertiesEntry_DoNotUse_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MatchmakerRemove_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MatchmakerTicket_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Notifications_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Party_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PartyAccept_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PartyClose_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PartyCreate_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PartyData_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PartyDataSend_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PartyJoin_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PartyJoinRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PartyJoinRequestList_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PartyLeader_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PartyLeave_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_PartyMatchmakerAdd_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PartyMatchmakerAdd_NumericPropertiesEntry_DoNotUse_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PartyMatchmakerAdd_StringPropertiesEntry_DoNotUse_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PartyMatchmakerRemove_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PartyMatchmakerTicket_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PartyPresenceEvent_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PartyPromote_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PartyRemove_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Ping_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Pong_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Status_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StatusFollow_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StatusPresenceEvent_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StatusUnfollow_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StatusUpdate_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Stream_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_StreamData_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_StreamPresenceEvent_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UserPresence_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto;
namespace nakama {
namespace realtime {
class EnvelopeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Envelope> _instance;
} _Envelope_default_instance_;
class ChannelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Channel> _instance;
} _Channel_default_instance_;
class ChannelJoinDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChannelJoin> _instance;
} _ChannelJoin_default_instance_;
class ChannelLeaveDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChannelLeave> _instance;
} _ChannelLeave_default_instance_;
class ChannelMessageAckDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChannelMessageAck> _instance;
} _ChannelMessageAck_default_instance_;
class ChannelMessageSendDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChannelMessageSend> _instance;
} _ChannelMessageSend_default_instance_;
class ChannelMessageUpdateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChannelMessageUpdate> _instance;
} _ChannelMessageUpdate_default_instance_;
class ChannelMessageRemoveDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChannelMessageRemove> _instance;
} _ChannelMessageRemove_default_instance_;
class ChannelPresenceEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChannelPresenceEvent> _instance;
} _ChannelPresenceEvent_default_instance_;
class Error_ContextEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Error_ContextEntry_DoNotUse> _instance;
} _Error_ContextEntry_DoNotUse_default_instance_;
class ErrorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Error> _instance;
} _Error_default_instance_;
class MatchDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Match> _instance;
} _Match_default_instance_;
class MatchCreateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MatchCreate> _instance;
} _MatchCreate_default_instance_;
class MatchDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MatchData> _instance;
} _MatchData_default_instance_;
class MatchDataSendDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MatchDataSend> _instance;
} _MatchDataSend_default_instance_;
class MatchJoin_MetadataEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MatchJoin_MetadataEntry_DoNotUse> _instance;
} _MatchJoin_MetadataEntry_DoNotUse_default_instance_;
class MatchJoinDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MatchJoin> _instance;
} _MatchJoin_default_instance_;
class MatchLeaveDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MatchLeave> _instance;
} _MatchLeave_default_instance_;
class MatchPresenceEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MatchPresenceEvent> _instance;
} _MatchPresenceEvent_default_instance_;
class MatchmakerAdd_StringPropertiesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MatchmakerAdd_StringPropertiesEntry_DoNotUse> _instance;
} _MatchmakerAdd_StringPropertiesEntry_DoNotUse_default_instance_;
class MatchmakerAdd_NumericPropertiesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MatchmakerAdd_NumericPropertiesEntry_DoNotUse> _instance;
} _MatchmakerAdd_NumericPropertiesEntry_DoNotUse_default_instance_;
class MatchmakerAddDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MatchmakerAdd> _instance;
} _MatchmakerAdd_default_instance_;
class MatchmakerMatched_MatchmakerUser_StringPropertiesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MatchmakerMatched_MatchmakerUser_StringPropertiesEntry_DoNotUse> _instance;
} _MatchmakerMatched_MatchmakerUser_StringPropertiesEntry_DoNotUse_default_instance_;
class MatchmakerMatched_MatchmakerUser_NumericPropertiesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MatchmakerMatched_MatchmakerUser_NumericPropertiesEntry_DoNotUse> _instance;
} _MatchmakerMatched_MatchmakerUser_NumericPropertiesEntry_DoNotUse_default_instance_;
class MatchmakerMatched_MatchmakerUserDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MatchmakerMatched_MatchmakerUser> _instance;
} _MatchmakerMatched_MatchmakerUser_default_instance_;
class MatchmakerMatchedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MatchmakerMatched> _instance;
} _MatchmakerMatched_default_instance_;
class MatchmakerRemoveDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MatchmakerRemove> _instance;
} _MatchmakerRemove_default_instance_;
class MatchmakerTicketDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MatchmakerTicket> _instance;
} _MatchmakerTicket_default_instance_;
class NotificationsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Notifications> _instance;
} _Notifications_default_instance_;
class PartyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Party> _instance;
} _Party_default_instance_;
class PartyCreateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PartyCreate> _instance;
} _PartyCreate_default_instance_;
class PartyJoinDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PartyJoin> _instance;
} _PartyJoin_default_instance_;
class PartyLeaveDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PartyLeave> _instance;
} _PartyLeave_default_instance_;
class PartyPromoteDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PartyPromote> _instance;
} _PartyPromote_default_instance_;
class PartyLeaderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PartyLeader> _instance;
} _PartyLeader_default_instance_;
class PartyAcceptDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PartyAccept> _instance;
} _PartyAccept_default_instance_;
class PartyRemoveDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PartyRemove> _instance;
} _PartyRemove_default_instance_;
class PartyCloseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PartyClose> _instance;
} _PartyClose_default_instance_;
class PartyJoinRequestListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PartyJoinRequestList> _instance;
} _PartyJoinRequestList_default_instance_;
class PartyJoinRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PartyJoinRequest> _instance;
} _PartyJoinRequest_default_instance_;
class PartyMatchmakerAdd_StringPropertiesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PartyMatchmakerAdd_StringPropertiesEntry_DoNotUse> _instance;
} _PartyMatchmakerAdd_StringPropertiesEntry_DoNotUse_default_instance_;
class PartyMatchmakerAdd_NumericPropertiesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PartyMatchmakerAdd_NumericPropertiesEntry_DoNotUse> _instance;
} _PartyMatchmakerAdd_NumericPropertiesEntry_DoNotUse_default_instance_;
class PartyMatchmakerAddDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PartyMatchmakerAdd> _instance;
} _PartyMatchmakerAdd_default_instance_;
class PartyMatchmakerRemoveDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PartyMatchmakerRemove> _instance;
} _PartyMatchmakerRemove_default_instance_;
class PartyMatchmakerTicketDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PartyMatchmakerTicket> _instance;
} _PartyMatchmakerTicket_default_instance_;
class PartyDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PartyData> _instance;
} _PartyData_default_instance_;
class PartyDataSendDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PartyDataSend> _instance;
} _PartyDataSend_default_instance_;
class PartyPresenceEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PartyPresenceEvent> _instance;
} _PartyPresenceEvent_default_instance_;
class PingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Ping> _instance;
} _Ping_default_instance_;
class PongDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Pong> _instance;
} _Pong_default_instance_;
class StatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Status> _instance;
} _Status_default_instance_;
class StatusFollowDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StatusFollow> _instance;
} _StatusFollow_default_instance_;
class StatusPresenceEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StatusPresenceEvent> _instance;
} _StatusPresenceEvent_default_instance_;
class StatusUnfollowDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StatusUnfollow> _instance;
} _StatusUnfollow_default_instance_;
class StatusUpdateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StatusUpdate> _instance;
} _StatusUpdate_default_instance_;
class StreamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Stream> _instance;
} _Stream_default_instance_;
class StreamDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StreamData> _instance;
} _StreamData_default_instance_;
class StreamPresenceEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StreamPresenceEvent> _instance;
} _StreamPresenceEvent_default_instance_;
class UserPresenceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserPresence> _instance;
} _UserPresence_default_instance_;
}  // namespace realtime
}  // namespace nakama
static void InitDefaultsscc_info_Channel_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::realtime::_Channel_default_instance_;
    new (ptr) ::nakama::realtime::Channel();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Channel_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Channel_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto}, {
      &scc_info_UserPresence_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base,}};

static void InitDefaultsscc_info_ChannelJoin_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::realtime::_ChannelJoin_default_instance_;
    new (ptr) ::nakama::realtime::ChannelJoin();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ChannelJoin_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ChannelJoin_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto}, {
      &scc_info_BoolValue_google_2fprotobuf_2fwrappers_2eproto.base,}};

static void InitDefaultsscc_info_ChannelLeave_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::realtime::_ChannelLeave_default_instance_;
    new (ptr) ::nakama::realtime::ChannelLeave();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChannelLeave_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ChannelLeave_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto}, {}};

static void InitDefaultsscc_info_ChannelMessageAck_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::realtime::_ChannelMessageAck_default_instance_;
    new (ptr) ::nakama::realtime::ChannelMessageAck();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ChannelMessageAck_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_ChannelMessageAck_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto}, {
      &scc_info_Int32Value_google_2fprotobuf_2fwrappers_2eproto.base,
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,
      &scc_info_BoolValue_google_2fprotobuf_2fwrappers_2eproto.base,}};

static void InitDefaultsscc_info_ChannelMessageRemove_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::realtime::_ChannelMessageRemove_default_instance_;
    new (ptr) ::nakama::realtime::ChannelMessageRemove();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChannelMessageRemove_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ChannelMessageRemove_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto}, {}};

static void InitDefaultsscc_info_ChannelMessageSend_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::realtime::_ChannelMessageSend_default_instance_;
    new (ptr) ::nakama::realtime::ChannelMessageSend();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChannelMessageSend_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ChannelMessageSend_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto}, {}};

static void InitDefaultsscc_info_ChannelMessageUpdate_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::realtime::_ChannelMessageUpdate_default_instance_;
    new (ptr) ::nakama::realtime::ChannelMessageUpdate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChannelMessageUpdate_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ChannelMessageUpdate_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto}, {}};

static void InitDefaultsscc_info_ChannelPresenceEvent_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::realtime::_ChannelPresenceEvent_default_instance_;
    new (ptr) ::nakama::realtime::ChannelPresenceEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ChannelPresenceEvent_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ChannelPresenceEvent_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto}, {
      &scc_info_UserPresence_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base,}};

static void InitDefaultsscc_info_Envelope_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::realtime::_Envelope_default_instance_;
    new (ptr) ::nakama::realtime::Envelope();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<49> scc_info_Envelope_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 49, 0, InitDefaultsscc_info_Envelope_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto}, {
      &scc_info_Channel_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base,
      &scc_info_ChannelJoin_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base,
      &scc_info_ChannelLeave_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base,
      &scc_info_ChannelMessage_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,
      &scc_info_ChannelMessageAck_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base,
      &scc_info_ChannelMessageSend_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base,
      &scc_info_ChannelMessageUpdate_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base,
      &scc_info_ChannelMessageRemove_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base,
      &scc_info_ChannelPresenceEvent_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base,
      &scc_info_Error_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base,
      &scc_info_Match_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base,
      &scc_info_MatchCreate_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base,
      &scc_info_MatchData_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base,
      &scc_info_MatchDataSend_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base,
      &scc_info_MatchJoin_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base,
      &scc_info_MatchLeave_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base,
      &scc_info_MatchPresenceEvent_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base,
      &scc_info_MatchmakerAdd_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base,
      &scc_info_MatchmakerMatched_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base,
      &scc_info_MatchmakerRemove_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base,
      &scc_info_MatchmakerTicket_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base,
      &scc_info_Notifications_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base,
      &scc_info_Rpc_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,
      &scc_info_Status_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base,
      &scc_info_StatusFollow_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base,
      &scc_info_StatusPresenceEvent_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base,
      &scc_info_StatusUnfollow_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base,
      &scc_info_StatusUpdate_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base,
      &scc_info_StreamData_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base,
      &scc_info_StreamPresenceEvent_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base,
      &scc_info_Ping_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base,
      &scc_info_Pong_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base,
      &scc_info_Party_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base,
      &scc_info_PartyCreate_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base,
      &scc_info_PartyJoin_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base,
      &scc_info_PartyLeave_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base,
      &scc_info_PartyPromote_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base,
      &scc_info_PartyLeader_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base,
      &scc_info_PartyAccept_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base,
      &scc_info_PartyRemove_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base,
      &scc_info_PartyClose_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base,
      &scc_info_PartyJoinRequestList_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base,
      &scc_info_PartyJoinRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base,
      &scc_info_PartyMatchmakerAdd_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base,
      &scc_info_PartyMatchmakerRemove_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base,
      &scc_info_PartyMatchmakerTicket_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base,
      &scc_info_PartyData_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base,
      &scc_info_PartyDataSend_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base,
      &scc_info_PartyPresenceEvent_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base,}};

static void InitDefaultsscc_info_Error_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::realtime::_Error_default_instance_;
    new (ptr) ::nakama::realtime::Error();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Error_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Error_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto}, {
      &scc_info_Error_ContextEntry_DoNotUse_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base,}};

static void InitDefaultsscc_info_Error_ContextEntry_DoNotUse_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::realtime::_Error_ContextEntry_DoNotUse_default_instance_;
    new (ptr) ::nakama::realtime::Error_ContextEntry_DoNotUse();
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Error_ContextEntry_DoNotUse_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Error_ContextEntry_DoNotUse_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto}, {}};

static void InitDefaultsscc_info_Match_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::realtime::_Match_default_instance_;
    new (ptr) ::nakama::realtime::Match();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Match_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Match_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto}, {
      &scc_info_StringValue_google_2fprotobuf_2fwrappers_2eproto.base,
      &scc_info_UserPresence_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base,}};

static void InitDefaultsscc_info_MatchCreate_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::realtime::_MatchCreate_default_instance_;
    new (ptr) ::nakama::realtime::MatchCreate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MatchCreate_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MatchCreate_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto}, {}};

static void InitDefaultsscc_info_MatchData_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::realtime::_MatchData_default_instance_;
    new (ptr) ::nakama::realtime::MatchData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MatchData_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MatchData_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto}, {
      &scc_info_UserPresence_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base,}};

static void InitDefaultsscc_info_MatchDataSend_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::realtime::_MatchDataSend_default_instance_;
    new (ptr) ::nakama::realtime::MatchDataSend();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MatchDataSend_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MatchDataSend_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto}, {
      &scc_info_UserPresence_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base,}};

static void InitDefaultsscc_info_MatchJoin_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::realtime::_MatchJoin_default_instance_;
    new (ptr) ::nakama::realtime::MatchJoin();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MatchJoin_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MatchJoin_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto}, {
      &scc_info_MatchJoin_MetadataEntry_DoNotUse_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base,}};

static void InitDefaultsscc_info_MatchJoin_MetadataEntry_DoNotUse_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::realtime::_MatchJoin_MetadataEntry_DoNotUse_default_instance_;
    new (ptr) ::nakama::realtime::MatchJoin_MetadataEntry_DoNotUse();
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MatchJoin_MetadataEntry_DoNotUse_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MatchJoin_MetadataEntry_DoNotUse_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto}, {}};

static void InitDefaultsscc_info_MatchLeave_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::realtime::_MatchLeave_default_instance_;
    new (ptr) ::nakama::realtime::MatchLeave();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MatchLeave_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MatchLeave_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto}, {}};

static void InitDefaultsscc_info_MatchPresenceEvent_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::realtime::_MatchPresenceEvent_default_instance_;
    new (ptr) ::nakama::realtime::MatchPresenceEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MatchPresenceEvent_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MatchPresenceEvent_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto}, {
      &scc_info_UserPresence_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base,}};

static void InitDefaultsscc_info_MatchmakerAdd_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::realtime::_MatchmakerAdd_default_instance_;
    new (ptr) ::nakama::realtime::MatchmakerAdd();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_MatchmakerAdd_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_MatchmakerAdd_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto}, {
      &scc_info_MatchmakerAdd_StringPropertiesEntry_DoNotUse_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base,
      &scc_info_MatchmakerAdd_NumericPropertiesEntry_DoNotUse_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base,
      &scc_info_Int32Value_google_2fprotobuf_2fwrappers_2eproto.base,}};

static void InitDefaultsscc_info_MatchmakerAdd_NumericPropertiesEntry_DoNotUse_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::realtime::_MatchmakerAdd_NumericPropertiesEntry_DoNotUse_default_instance_;
    new (ptr) ::nakama::realtime::MatchmakerAdd_NumericPropertiesEntry_DoNotUse();
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MatchmakerAdd_NumericPropertiesEntry_DoNotUse_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MatchmakerAdd_NumericPropertiesEntry_DoNotUse_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto}, {}};

static void InitDefaultsscc_info_MatchmakerAdd_StringPropertiesEntry_DoNotUse_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::realtime::_MatchmakerAdd_StringPropertiesEntry_DoNotUse_default_instance_;
    new (ptr) ::nakama::realtime::MatchmakerAdd_StringPropertiesEntry_DoNotUse();
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MatchmakerAdd_StringPropertiesEntry_DoNotUse_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MatchmakerAdd_StringPropertiesEntry_DoNotUse_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto}, {}};

static void InitDefaultsscc_info_MatchmakerMatched_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::realtime::_MatchmakerMatched_default_instance_;
    new (ptr) ::nakama::realtime::MatchmakerMatched();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MatchmakerMatched_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MatchmakerMatched_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto}, {
      &scc_info_MatchmakerMatched_MatchmakerUser_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base,}};

static void InitDefaultsscc_info_MatchmakerMatched_MatchmakerUser_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::realtime::_MatchmakerMatched_MatchmakerUser_default_instance_;
    new (ptr) ::nakama::realtime::MatchmakerMatched_MatchmakerUser();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_MatchmakerMatched_MatchmakerUser_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_MatchmakerMatched_MatchmakerUser_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto}, {
      &scc_info_UserPresence_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base,
      &scc_info_MatchmakerMatched_MatchmakerUser_StringPropertiesEntry_DoNotUse_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base,
      &scc_info_MatchmakerMatched_MatchmakerUser_NumericPropertiesEntry_DoNotUse_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base,}};

static void InitDefaultsscc_info_MatchmakerMatched_MatchmakerUser_NumericPropertiesEntry_DoNotUse_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::realtime::_MatchmakerMatched_MatchmakerUser_NumericPropertiesEntry_DoNotUse_default_instance_;
    new (ptr) ::nakama::realtime::MatchmakerMatched_MatchmakerUser_NumericPropertiesEntry_DoNotUse();
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MatchmakerMatched_MatchmakerUser_NumericPropertiesEntry_DoNotUse_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MatchmakerMatched_MatchmakerUser_NumericPropertiesEntry_DoNotUse_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto}, {}};

static void InitDefaultsscc_info_MatchmakerMatched_MatchmakerUser_StringPropertiesEntry_DoNotUse_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::realtime::_MatchmakerMatched_MatchmakerUser_StringPropertiesEntry_DoNotUse_default_instance_;
    new (ptr) ::nakama::realtime::MatchmakerMatched_MatchmakerUser_StringPropertiesEntry_DoNotUse();
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MatchmakerMatched_MatchmakerUser_StringPropertiesEntry_DoNotUse_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MatchmakerMatched_MatchmakerUser_StringPropertiesEntry_DoNotUse_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto}, {}};

static void InitDefaultsscc_info_MatchmakerRemove_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::realtime::_MatchmakerRemove_default_instance_;
    new (ptr) ::nakama::realtime::MatchmakerRemove();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MatchmakerRemove_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MatchmakerRemove_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto}, {}};

static void InitDefaultsscc_info_MatchmakerTicket_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::realtime::_MatchmakerTicket_default_instance_;
    new (ptr) ::nakama::realtime::MatchmakerTicket();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MatchmakerTicket_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MatchmakerTicket_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto}, {}};

static void InitDefaultsscc_info_Notifications_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::realtime::_Notifications_default_instance_;
    new (ptr) ::nakama::realtime::Notifications();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Notifications_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Notifications_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto}, {
      &scc_info_Notification_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto.base,}};

static void InitDefaultsscc_info_Party_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::realtime::_Party_default_instance_;
    new (ptr) ::nakama::realtime::Party();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Party_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Party_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto}, {
      &scc_info_UserPresence_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base,}};

static void InitDefaultsscc_info_PartyAccept_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::realtime::_PartyAccept_default_instance_;
    new (ptr) ::nakama::realtime::PartyAccept();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PartyAccept_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PartyAccept_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto}, {
      &scc_info_UserPresence_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base,}};

static void InitDefaultsscc_info_PartyClose_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::realtime::_PartyClose_default_instance_;
    new (ptr) ::nakama::realtime::PartyClose();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PartyClose_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PartyClose_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto}, {}};

static void InitDefaultsscc_info_PartyCreate_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::realtime::_PartyCreate_default_instance_;
    new (ptr) ::nakama::realtime::PartyCreate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PartyCreate_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PartyCreate_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto}, {}};

static void InitDefaultsscc_info_PartyData_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::realtime::_PartyData_default_instance_;
    new (ptr) ::nakama::realtime::PartyData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PartyData_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PartyData_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto}, {
      &scc_info_UserPresence_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base,}};

static void InitDefaultsscc_info_PartyDataSend_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::realtime::_PartyDataSend_default_instance_;
    new (ptr) ::nakama::realtime::PartyDataSend();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PartyDataSend_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PartyDataSend_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto}, {}};

static void InitDefaultsscc_info_PartyJoin_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::realtime::_PartyJoin_default_instance_;
    new (ptr) ::nakama::realtime::PartyJoin();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PartyJoin_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PartyJoin_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto}, {}};

static void InitDefaultsscc_info_PartyJoinRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::realtime::_PartyJoinRequest_default_instance_;
    new (ptr) ::nakama::realtime::PartyJoinRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PartyJoinRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PartyJoinRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto}, {
      &scc_info_UserPresence_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base,}};

static void InitDefaultsscc_info_PartyJoinRequestList_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::realtime::_PartyJoinRequestList_default_instance_;
    new (ptr) ::nakama::realtime::PartyJoinRequestList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PartyJoinRequestList_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PartyJoinRequestList_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto}, {}};

static void InitDefaultsscc_info_PartyLeader_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::realtime::_PartyLeader_default_instance_;
    new (ptr) ::nakama::realtime::PartyLeader();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PartyLeader_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PartyLeader_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto}, {
      &scc_info_UserPresence_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base,}};

static void InitDefaultsscc_info_PartyLeave_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::realtime::_PartyLeave_default_instance_;
    new (ptr) ::nakama::realtime::PartyLeave();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PartyLeave_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PartyLeave_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto}, {}};

static void InitDefaultsscc_info_PartyMatchmakerAdd_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::realtime::_PartyMatchmakerAdd_default_instance_;
    new (ptr) ::nakama::realtime::PartyMatchmakerAdd();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_PartyMatchmakerAdd_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_PartyMatchmakerAdd_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto}, {
      &scc_info_PartyMatchmakerAdd_StringPropertiesEntry_DoNotUse_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base,
      &scc_info_PartyMatchmakerAdd_NumericPropertiesEntry_DoNotUse_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base,
      &scc_info_Int32Value_google_2fprotobuf_2fwrappers_2eproto.base,}};

static void InitDefaultsscc_info_PartyMatchmakerAdd_NumericPropertiesEntry_DoNotUse_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::realtime::_PartyMatchmakerAdd_NumericPropertiesEntry_DoNotUse_default_instance_;
    new (ptr) ::nakama::realtime::PartyMatchmakerAdd_NumericPropertiesEntry_DoNotUse();
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PartyMatchmakerAdd_NumericPropertiesEntry_DoNotUse_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PartyMatchmakerAdd_NumericPropertiesEntry_DoNotUse_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto}, {}};

static void InitDefaultsscc_info_PartyMatchmakerAdd_StringPropertiesEntry_DoNotUse_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::realtime::_PartyMatchmakerAdd_StringPropertiesEntry_DoNotUse_default_instance_;
    new (ptr) ::nakama::realtime::PartyMatchmakerAdd_StringPropertiesEntry_DoNotUse();
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PartyMatchmakerAdd_StringPropertiesEntry_DoNotUse_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PartyMatchmakerAdd_StringPropertiesEntry_DoNotUse_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto}, {}};

static void InitDefaultsscc_info_PartyMatchmakerRemove_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::realtime::_PartyMatchmakerRemove_default_instance_;
    new (ptr) ::nakama::realtime::PartyMatchmakerRemove();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PartyMatchmakerRemove_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PartyMatchmakerRemove_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto}, {}};

static void InitDefaultsscc_info_PartyMatchmakerTicket_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::realtime::_PartyMatchmakerTicket_default_instance_;
    new (ptr) ::nakama::realtime::PartyMatchmakerTicket();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PartyMatchmakerTicket_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PartyMatchmakerTicket_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto}, {}};

static void InitDefaultsscc_info_PartyPresenceEvent_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::realtime::_PartyPresenceEvent_default_instance_;
    new (ptr) ::nakama::realtime::PartyPresenceEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PartyPresenceEvent_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PartyPresenceEvent_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto}, {
      &scc_info_UserPresence_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base,}};

static void InitDefaultsscc_info_PartyPromote_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::realtime::_PartyPromote_default_instance_;
    new (ptr) ::nakama::realtime::PartyPromote();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PartyPromote_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PartyPromote_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto}, {
      &scc_info_UserPresence_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base,}};

static void InitDefaultsscc_info_PartyRemove_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::realtime::_PartyRemove_default_instance_;
    new (ptr) ::nakama::realtime::PartyRemove();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PartyRemove_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PartyRemove_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto}, {
      &scc_info_UserPresence_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base,}};

static void InitDefaultsscc_info_Ping_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::realtime::_Ping_default_instance_;
    new (ptr) ::nakama::realtime::Ping();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Ping_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Ping_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto}, {}};

static void InitDefaultsscc_info_Pong_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::realtime::_Pong_default_instance_;
    new (ptr) ::nakama::realtime::Pong();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Pong_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Pong_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto}, {}};

static void InitDefaultsscc_info_Status_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::realtime::_Status_default_instance_;
    new (ptr) ::nakama::realtime::Status();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Status_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Status_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto}, {
      &scc_info_UserPresence_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base,}};

static void InitDefaultsscc_info_StatusFollow_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::realtime::_StatusFollow_default_instance_;
    new (ptr) ::nakama::realtime::StatusFollow();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StatusFollow_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StatusFollow_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto}, {}};

static void InitDefaultsscc_info_StatusPresenceEvent_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::realtime::_StatusPresenceEvent_default_instance_;
    new (ptr) ::nakama::realtime::StatusPresenceEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StatusPresenceEvent_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_StatusPresenceEvent_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto}, {
      &scc_info_UserPresence_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base,}};

static void InitDefaultsscc_info_StatusUnfollow_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::realtime::_StatusUnfollow_default_instance_;
    new (ptr) ::nakama::realtime::StatusUnfollow();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StatusUnfollow_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StatusUnfollow_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto}, {}};

static void InitDefaultsscc_info_StatusUpdate_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::realtime::_StatusUpdate_default_instance_;
    new (ptr) ::nakama::realtime::StatusUpdate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StatusUpdate_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_StatusUpdate_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto}, {
      &scc_info_StringValue_google_2fprotobuf_2fwrappers_2eproto.base,}};

static void InitDefaultsscc_info_Stream_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::realtime::_Stream_default_instance_;
    new (ptr) ::nakama::realtime::Stream();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Stream_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Stream_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto}, {}};

static void InitDefaultsscc_info_StreamData_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::realtime::_StreamData_default_instance_;
    new (ptr) ::nakama::realtime::StreamData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_StreamData_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_StreamData_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto}, {
      &scc_info_Stream_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base,
      &scc_info_UserPresence_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base,}};

static void InitDefaultsscc_info_StreamPresenceEvent_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::realtime::_StreamPresenceEvent_default_instance_;
    new (ptr) ::nakama::realtime::StreamPresenceEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_StreamPresenceEvent_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_StreamPresenceEvent_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto}, {
      &scc_info_Stream_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base,
      &scc_info_UserPresence_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base,}};

static void InitDefaultsscc_info_UserPresence_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nakama::realtime::_UserPresence_default_instance_;
    new (ptr) ::nakama::realtime::UserPresence();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UserPresence_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UserPresence_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto}, {
      &scc_info_StringValue_google_2fprotobuf_2fwrappers_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto[59];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::Envelope, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::Envelope, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::Envelope, cid_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::Envelope, message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::Channel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::Channel, id_),
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::Channel, presences_),
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::Channel, self_),
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::Channel, room_name_),
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::Channel, group_id_),
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::Channel, user_id_one_),
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::Channel, user_id_two_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::ChannelJoin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::ChannelJoin, target_),
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::ChannelJoin, type_),
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::ChannelJoin, persistence_),
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::ChannelJoin, hidden_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::ChannelLeave, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::ChannelLeave, channel_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::ChannelMessageAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::ChannelMessageAck, channel_id_),
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::ChannelMessageAck, message_id_),
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::ChannelMessageAck, code_),
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::ChannelMessageAck, username_),
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::ChannelMessageAck, create_time_),
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::ChannelMessageAck, update_time_),
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::ChannelMessageAck, persistent_),
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::ChannelMessageAck, room_name_),
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::ChannelMessageAck, group_id_),
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::ChannelMessageAck, user_id_one_),
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::ChannelMessageAck, user_id_two_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::ChannelMessageSend, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::ChannelMessageSend, channel_id_),
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::ChannelMessageSend, content_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::ChannelMessageUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::ChannelMessageUpdate, channel_id_),
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::ChannelMessageUpdate, message_id_),
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::ChannelMessageUpdate, content_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::ChannelMessageRemove, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::ChannelMessageRemove, channel_id_),
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::ChannelMessageRemove, message_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::ChannelPresenceEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::ChannelPresenceEvent, channel_id_),
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::ChannelPresenceEvent, joins_),
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::ChannelPresenceEvent, leaves_),
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::ChannelPresenceEvent, room_name_),
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::ChannelPresenceEvent, group_id_),
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::ChannelPresenceEvent, user_id_one_),
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::ChannelPresenceEvent, user_id_two_),
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::Error_ContextEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::Error_ContextEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::Error_ContextEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::Error_ContextEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::Error, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::Error, code_),
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::Error, message_),
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::Error, context_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::Match, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::Match, match_id_),
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::Match, authoritative_),
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::Match, label_),
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::Match, size_),
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::Match, presences_),
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::Match, self_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::MatchCreate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::MatchCreate, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::MatchData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::MatchData, match_id_),
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::MatchData, presence_),
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::MatchData, op_code_),
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::MatchData, data_),
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::MatchData, reliable_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::MatchDataSend, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::MatchDataSend, match_id_),
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::MatchDataSend, op_code_),
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::MatchDataSend, data_),
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::MatchDataSend, presences_),
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::MatchDataSend, reliable_),
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::MatchJoin_MetadataEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::MatchJoin_MetadataEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::MatchJoin_MetadataEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::MatchJoin_MetadataEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::MatchJoin, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::MatchJoin, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::MatchJoin, metadata_),
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::MatchJoin, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::MatchLeave, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::MatchLeave, match_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::MatchPresenceEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::MatchPresenceEvent, match_id_),
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::MatchPresenceEvent, joins_),
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::MatchPresenceEvent, leaves_),
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::MatchmakerAdd_StringPropertiesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::MatchmakerAdd_StringPropertiesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::MatchmakerAdd_StringPropertiesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::MatchmakerAdd_StringPropertiesEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::MatchmakerAdd_NumericPropertiesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::MatchmakerAdd_NumericPropertiesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::MatchmakerAdd_NumericPropertiesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::MatchmakerAdd_NumericPropertiesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::MatchmakerAdd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::MatchmakerAdd, min_count_),
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::MatchmakerAdd, max_count_),
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::MatchmakerAdd, query_),
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::MatchmakerAdd, string_properties_),
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::MatchmakerAdd, numeric_properties_),
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::MatchmakerAdd, count_multiple_),
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::MatchmakerMatched_MatchmakerUser_StringPropertiesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::MatchmakerMatched_MatchmakerUser_StringPropertiesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::MatchmakerMatched_MatchmakerUser_StringPropertiesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::MatchmakerMatched_MatchmakerUser_StringPropertiesEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::MatchmakerMatched_MatchmakerUser_NumericPropertiesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::MatchmakerMatched_MatchmakerUser_NumericPropertiesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::MatchmakerMatched_MatchmakerUser_NumericPropertiesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::MatchmakerMatched_MatchmakerUser_NumericPropertiesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::MatchmakerMatched_MatchmakerUser, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::MatchmakerMatched_MatchmakerUser, presence_),
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::MatchmakerMatched_MatchmakerUser, party_id_),
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::MatchmakerMatched_MatchmakerUser, string_properties_),
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::MatchmakerMatched_MatchmakerUser, numeric_properties_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::MatchmakerMatched, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::MatchmakerMatched, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::MatchmakerMatched, ticket_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::MatchmakerMatched, users_),
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::MatchmakerMatched, self_),
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::MatchmakerMatched, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::MatchmakerRemove, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::MatchmakerRemove, ticket_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::MatchmakerTicket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::MatchmakerTicket, ticket_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::Notifications, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::Notifications, notifications_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::Party, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::Party, party_id_),
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::Party, open_),
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::Party, max_size_),
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::Party, self_),
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::Party, leader_),
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::Party, presences_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::PartyCreate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::PartyCreate, open_),
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::PartyCreate, max_size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::PartyJoin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::PartyJoin, party_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::PartyLeave, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::PartyLeave, party_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::PartyPromote, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::PartyPromote, party_id_),
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::PartyPromote, presence_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::PartyLeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::PartyLeader, party_id_),
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::PartyLeader, presence_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::PartyAccept, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::PartyAccept, party_id_),
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::PartyAccept, presence_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::PartyRemove, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::PartyRemove, party_id_),
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::PartyRemove, presence_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::PartyClose, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::PartyClose, party_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::PartyJoinRequestList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::PartyJoinRequestList, party_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::PartyJoinRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::PartyJoinRequest, party_id_),
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::PartyJoinRequest, presences_),
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::PartyMatchmakerAdd_StringPropertiesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::PartyMatchmakerAdd_StringPropertiesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::PartyMatchmakerAdd_StringPropertiesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::PartyMatchmakerAdd_StringPropertiesEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::PartyMatchmakerAdd_NumericPropertiesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::PartyMatchmakerAdd_NumericPropertiesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::PartyMatchmakerAdd_NumericPropertiesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::PartyMatchmakerAdd_NumericPropertiesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::PartyMatchmakerAdd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::PartyMatchmakerAdd, party_id_),
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::PartyMatchmakerAdd, min_count_),
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::PartyMatchmakerAdd, max_count_),
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::PartyMatchmakerAdd, query_),
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::PartyMatchmakerAdd, string_properties_),
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::PartyMatchmakerAdd, numeric_properties_),
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::PartyMatchmakerAdd, count_multiple_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::PartyMatchmakerRemove, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::PartyMatchmakerRemove, party_id_),
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::PartyMatchmakerRemove, ticket_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::PartyMatchmakerTicket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::PartyMatchmakerTicket, party_id_),
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::PartyMatchmakerTicket, ticket_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::PartyData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::PartyData, party_id_),
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::PartyData, presence_),
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::PartyData, op_code_),
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::PartyData, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::PartyDataSend, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::PartyDataSend, party_id_),
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::PartyDataSend, op_code_),
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::PartyDataSend, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::PartyPresenceEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::PartyPresenceEvent, party_id_),
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::PartyPresenceEvent, joins_),
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::PartyPresenceEvent, leaves_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::Ping, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::Pong, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::Status, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::Status, presences_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::StatusFollow, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::StatusFollow, user_ids_),
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::StatusFollow, usernames_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::StatusPresenceEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::StatusPresenceEvent, joins_),
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::StatusPresenceEvent, leaves_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::StatusUnfollow, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::StatusUnfollow, user_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::StatusUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::StatusUpdate, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::Stream, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::Stream, mode_),
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::Stream, subject_),
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::Stream, subcontext_),
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::Stream, label_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::StreamData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::StreamData, stream_),
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::StreamData, sender_),
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::StreamData, data_),
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::StreamData, reliable_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::StreamPresenceEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::StreamPresenceEvent, stream_),
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::StreamPresenceEvent, joins_),
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::StreamPresenceEvent, leaves_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::UserPresence, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::UserPresence, user_id_),
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::UserPresence, session_id_),
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::UserPresence, username_),
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::UserPresence, persistence_),
  PROTOBUF_FIELD_OFFSET(::nakama::realtime::UserPresence, status_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::nakama::realtime::Envelope)},
  { 56, -1, sizeof(::nakama::realtime::Channel)},
  { 68, -1, sizeof(::nakama::realtime::ChannelJoin)},
  { 77, -1, sizeof(::nakama::realtime::ChannelLeave)},
  { 83, -1, sizeof(::nakama::realtime::ChannelMessageAck)},
  { 99, -1, sizeof(::nakama::realtime::ChannelMessageSend)},
  { 106, -1, sizeof(::nakama::realtime::ChannelMessageUpdate)},
  { 114, -1, sizeof(::nakama::realtime::ChannelMessageRemove)},
  { 121, -1, sizeof(::nakama::realtime::ChannelPresenceEvent)},
  { 133, 140, sizeof(::nakama::realtime::Error_ContextEntry_DoNotUse)},
  { 142, -1, sizeof(::nakama::realtime::Error)},
  { 150, -1, sizeof(::nakama::realtime::Match)},
  { 161, -1, sizeof(::nakama::realtime::MatchCreate)},
  { 167, -1, sizeof(::nakama::realtime::MatchData)},
  { 177, -1, sizeof(::nakama::realtime::MatchDataSend)},
  { 187, 194, sizeof(::nakama::realtime::MatchJoin_MetadataEntry_DoNotUse)},
  { 196, -1, sizeof(::nakama::realtime::MatchJoin)},
  { 205, -1, sizeof(::nakama::realtime::MatchLeave)},
  { 211, -1, sizeof(::nakama::realtime::MatchPresenceEvent)},
  { 219, 226, sizeof(::nakama::realtime::MatchmakerAdd_StringPropertiesEntry_DoNotUse)},
  { 228, 235, sizeof(::nakama::realtime::MatchmakerAdd_NumericPropertiesEntry_DoNotUse)},
  { 237, -1, sizeof(::nakama::realtime::MatchmakerAdd)},
  { 248, 255, sizeof(::nakama::realtime::MatchmakerMatched_MatchmakerUser_StringPropertiesEntry_DoNotUse)},
  { 257, 264, sizeof(::nakama::realtime::MatchmakerMatched_MatchmakerUser_NumericPropertiesEntry_DoNotUse)},
  { 266, -1, sizeof(::nakama::realtime::MatchmakerMatched_MatchmakerUser)},
  { 275, -1, sizeof(::nakama::realtime::MatchmakerMatched)},
  { 286, -1, sizeof(::nakama::realtime::MatchmakerRemove)},
  { 292, -1, sizeof(::nakama::realtime::MatchmakerTicket)},
  { 298, -1, sizeof(::nakama::realtime::Notifications)},
  { 304, -1, sizeof(::nakama::realtime::Party)},
  { 315, -1, sizeof(::nakama::realtime::PartyCreate)},
  { 322, -1, sizeof(::nakama::realtime::PartyJoin)},
  { 328, -1, sizeof(::nakama::realtime::PartyLeave)},
  { 334, -1, sizeof(::nakama::realtime::PartyPromote)},
  { 341, -1, sizeof(::nakama::realtime::PartyLeader)},
  { 348, -1, sizeof(::nakama::realtime::PartyAccept)},
  { 355, -1, sizeof(::nakama::realtime::PartyRemove)},
  { 362, -1, sizeof(::nakama::realtime::PartyClose)},
  { 368, -1, sizeof(::nakama::realtime::PartyJoinRequestList)},
  { 374, -1, sizeof(::nakama::realtime::PartyJoinRequest)},
  { 381, 388, sizeof(::nakama::realtime::PartyMatchmakerAdd_StringPropertiesEntry_DoNotUse)},
  { 390, 397, sizeof(::nakama::realtime::PartyMatchmakerAdd_NumericPropertiesEntry_DoNotUse)},
  { 399, -1, sizeof(::nakama::realtime::PartyMatchmakerAdd)},
  { 411, -1, sizeof(::nakama::realtime::PartyMatchmakerRemove)},
  { 418, -1, sizeof(::nakama::realtime::PartyMatchmakerTicket)},
  { 425, -1, sizeof(::nakama::realtime::PartyData)},
  { 434, -1, sizeof(::nakama::realtime::PartyDataSend)},
  { 442, -1, sizeof(::nakama::realtime::PartyPresenceEvent)},
  { 450, -1, sizeof(::nakama::realtime::Ping)},
  { 455, -1, sizeof(::nakama::realtime::Pong)},
  { 460, -1, sizeof(::nakama::realtime::Status)},
  { 466, -1, sizeof(::nakama::realtime::StatusFollow)},
  { 473, -1, sizeof(::nakama::realtime::StatusPresenceEvent)},
  { 480, -1, sizeof(::nakama::realtime::StatusUnfollow)},
  { 486, -1, sizeof(::nakama::realtime::StatusUpdate)},
  { 492, -1, sizeof(::nakama::realtime::Stream)},
  { 501, -1, sizeof(::nakama::realtime::StreamData)},
  { 510, -1, sizeof(::nakama::realtime::StreamPresenceEvent)},
  { 518, -1, sizeof(::nakama::realtime::UserPresence)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::realtime::_Envelope_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::realtime::_Channel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::realtime::_ChannelJoin_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::realtime::_ChannelLeave_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::realtime::_ChannelMessageAck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::realtime::_ChannelMessageSend_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::realtime::_ChannelMessageUpdate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::realtime::_ChannelMessageRemove_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::realtime::_ChannelPresenceEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::realtime::_Error_ContextEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::realtime::_Error_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::realtime::_Match_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::realtime::_MatchCreate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::realtime::_MatchData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::realtime::_MatchDataSend_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::realtime::_MatchJoin_MetadataEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::realtime::_MatchJoin_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::realtime::_MatchLeave_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::realtime::_MatchPresenceEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::realtime::_MatchmakerAdd_StringPropertiesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::realtime::_MatchmakerAdd_NumericPropertiesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::realtime::_MatchmakerAdd_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::realtime::_MatchmakerMatched_MatchmakerUser_StringPropertiesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::realtime::_MatchmakerMatched_MatchmakerUser_NumericPropertiesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::realtime::_MatchmakerMatched_MatchmakerUser_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::realtime::_MatchmakerMatched_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::realtime::_MatchmakerRemove_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::realtime::_MatchmakerTicket_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::realtime::_Notifications_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::realtime::_Party_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::realtime::_PartyCreate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::realtime::_PartyJoin_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::realtime::_PartyLeave_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::realtime::_PartyPromote_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::realtime::_PartyLeader_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::realtime::_PartyAccept_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::realtime::_PartyRemove_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::realtime::_PartyClose_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::realtime::_PartyJoinRequestList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::realtime::_PartyJoinRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::realtime::_PartyMatchmakerAdd_StringPropertiesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::realtime::_PartyMatchmakerAdd_NumericPropertiesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::realtime::_PartyMatchmakerAdd_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::realtime::_PartyMatchmakerRemove_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::realtime::_PartyMatchmakerTicket_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::realtime::_PartyData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::realtime::_PartyDataSend_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::realtime::_PartyPresenceEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::realtime::_Ping_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::realtime::_Pong_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::realtime::_Status_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::realtime::_StatusFollow_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::realtime::_StatusPresenceEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::realtime::_StatusUnfollow_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::realtime::_StatusUpdate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::realtime::_Stream_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::realtime::_StreamData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::realtime::_StreamPresenceEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nakama::realtime::_UserPresence_default_instance_),
};

const char descriptor_table_protodef_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n8github.com/heroiclabs/nakama-common/rt"
  "api/realtime.proto\022\017nakama.realtime\032\037goo"
  "gle/protobuf/timestamp.proto\032\036google/pro"
  "tobuf/wrappers.proto\0321github.com/heroicl"
  "abs/nakama-common/api/api.proto\"\236\026\n\010Enve"
  "lope\022\013\n\003cid\030\001 \001(\t\022+\n\007channel\030\002 \001(\0132\030.nak"
  "ama.realtime.ChannelH\000\0224\n\014channel_join\030\003"
  " \001(\0132\034.nakama.realtime.ChannelJoinH\000\0226\n\r"
  "channel_leave\030\004 \001(\0132\035.nakama.realtime.Ch"
  "annelLeaveH\000\0225\n\017channel_message\030\005 \001(\0132\032."
  "nakama.api.ChannelMessageH\000\022A\n\023channel_m"
  "essage_ack\030\006 \001(\0132\".nakama.realtime.Chann"
  "elMessageAckH\000\022C\n\024channel_message_send\030\007"
  " \001(\0132#.nakama.realtime.ChannelMessageSen"
  "dH\000\022G\n\026channel_message_update\030\010 \001(\0132%.na"
  "kama.realtime.ChannelMessageUpdateH\000\022G\n\026"
  "channel_message_remove\030\t \001(\0132%.nakama.re"
  "altime.ChannelMessageRemoveH\000\022G\n\026channel"
  "_presence_event\030\n \001(\0132%.nakama.realtime."
  "ChannelPresenceEventH\000\022\'\n\005error\030\013 \001(\0132\026."
  "nakama.realtime.ErrorH\000\022\'\n\005match\030\014 \001(\0132\026"
  ".nakama.realtime.MatchH\000\0224\n\014match_create"
  "\030\r \001(\0132\034.nakama.realtime.MatchCreateH\000\0220"
  "\n\nmatch_data\030\016 \001(\0132\032.nakama.realtime.Mat"
  "chDataH\000\0229\n\017match_data_send\030\017 \001(\0132\036.naka"
  "ma.realtime.MatchDataSendH\000\0220\n\nmatch_joi"
  "n\030\020 \001(\0132\032.nakama.realtime.MatchJoinH\000\0222\n"
  "\013match_leave\030\021 \001(\0132\033.nakama.realtime.Mat"
  "chLeaveH\000\022C\n\024match_presence_event\030\022 \001(\0132"
  "#.nakama.realtime.MatchPresenceEventH\000\0228"
  "\n\016matchmaker_add\030\023 \001(\0132\036.nakama.realtime"
  ".MatchmakerAddH\000\022@\n\022matchmaker_matched\030\024"
  " \001(\0132\".nakama.realtime.MatchmakerMatched"
  "H\000\022>\n\021matchmaker_remove\030\025 \001(\0132!.nakama.r"
  "ealtime.MatchmakerRemoveH\000\022>\n\021matchmaker"
  "_ticket\030\026 \001(\0132!.nakama.realtime.Matchmak"
  "erTicketH\000\0227\n\rnotifications\030\027 \001(\0132\036.naka"
  "ma.realtime.NotificationsH\000\022\036\n\003rpc\030\030 \001(\013"
  "2\017.nakama.api.RpcH\000\022)\n\006status\030\031 \001(\0132\027.na"
  "kama.realtime.StatusH\000\0226\n\rstatus_follow\030"
  "\032 \001(\0132\035.nakama.realtime.StatusFollowH\000\022E"
  "\n\025status_presence_event\030\033 \001(\0132$.nakama.r"
  "ealtime.StatusPresenceEventH\000\022:\n\017status_"
  "unfollow\030\034 \001(\0132\037.nakama.realtime.StatusU"
  "nfollowH\000\0226\n\rstatus_update\030\035 \001(\0132\035.nakam"
  "a.realtime.StatusUpdateH\000\0222\n\013stream_data"
  "\030\036 \001(\0132\033.nakama.realtime.StreamDataH\000\022E\n"
  "\025stream_presence_event\030\037 \001(\0132$.nakama.re"
  "altime.StreamPresenceEventH\000\022%\n\004ping\030  \001"
  "(\0132\025.nakama.realtime.PingH\000\022%\n\004pong\030! \001("
  "\0132\025.nakama.realtime.PongH\000\022\'\n\005party\030\" \001("
  "\0132\026.nakama.realtime.PartyH\000\0224\n\014party_cre"
  "ate\030# \001(\0132\034.nakama.realtime.PartyCreateH"
  "\000\0220\n\nparty_join\030$ \001(\0132\032.nakama.realtime."
  "PartyJoinH\000\0222\n\013party_leave\030% \001(\0132\033.nakam"
  "a.realtime.PartyLeaveH\000\0226\n\rparty_promote"
  "\030& \001(\0132\035.nakama.realtime.PartyPromoteH\000\022"
  "4\n\014party_leader\030\' \001(\0132\034.nakama.realtime."
  "PartyLeaderH\000\0224\n\014party_accept\030( \001(\0132\034.na"
  "kama.realtime.PartyAcceptH\000\0224\n\014party_rem"
  "ove\030) \001(\0132\034.nakama.realtime.PartyRemoveH"
  "\000\0222\n\013party_close\030* \001(\0132\033.nakama.realtime"
  ".PartyCloseH\000\022H\n\027party_join_request_list"
  "\030+ \001(\0132%.nakama.realtime.PartyJoinReques"
  "tListH\000\022\?\n\022party_join_request\030, \001(\0132!.na"
  "kama.realtime.PartyJoinRequestH\000\022C\n\024part"
  "y_matchmaker_add\030- \001(\0132#.nakama.realtime"
  ".PartyMatchmakerAddH\000\022I\n\027party_matchmake"
  "r_remove\030. \001(\0132&.nakama.realtime.PartyMa"
  "tchmakerRemoveH\000\022I\n\027party_matchmaker_tic"
  "ket\030/ \001(\0132&.nakama.realtime.PartyMatchma"
  "kerTicketH\000\0220\n\nparty_data\0300 \001(\0132\032.nakama"
  ".realtime.PartyDataH\000\0229\n\017party_data_send"
  "\0301 \001(\0132\036.nakama.realtime.PartyDataSendH\000"
  "\022C\n\024party_presence_event\0302 \001(\0132#.nakama."
  "realtime.PartyPresenceEventH\000B\t\n\007message"
  "\"\303\001\n\007Channel\022\n\n\002id\030\001 \001(\t\0220\n\tpresences\030\002 "
  "\003(\0132\035.nakama.realtime.UserPresence\022+\n\004se"
  "lf\030\003 \001(\0132\035.nakama.realtime.UserPresence\022"
  "\021\n\troom_name\030\004 \001(\t\022\020\n\010group_id\030\005 \001(\t\022\023\n\013"
  "user_id_one\030\006 \001(\t\022\023\n\013user_id_two\030\007 \001(\t\"\317"
  "\001\n\013ChannelJoin\022\016\n\006target\030\001 \001(\t\022\014\n\004type\030\002"
  " \001(\005\022/\n\013persistence\030\003 \001(\0132\032.google.proto"
  "buf.BoolValue\022*\n\006hidden\030\004 \001(\0132\032.google.p"
  "rotobuf.BoolValue\"E\n\004Type\022\024\n\020TYPE_UNSPEC"
  "IFIED\020\000\022\010\n\004ROOM\020\001\022\022\n\016DIRECT_MESSAGE\020\002\022\t\n"
  "\005GROUP\020\003\"\"\n\014ChannelLeave\022\022\n\nchannel_id\030\001"
  " \001(\t\"\331\002\n\021ChannelMessageAck\022\022\n\nchannel_id"
  "\030\001 \001(\t\022\022\n\nmessage_id\030\002 \001(\t\022)\n\004code\030\003 \001(\013"
  "2\033.google.protobuf.Int32Value\022\020\n\010usernam"
  "e\030\004 \001(\t\022/\n\013create_time\030\005 \001(\0132\032.google.pr"
  "otobuf.Timestamp\022/\n\013update_time\030\006 \001(\0132\032."
  "google.protobuf.Timestamp\022.\n\npersistent\030"
  "\007 \001(\0132\032.google.protobuf.BoolValue\022\021\n\troo"
  "m_name\030\010 \001(\t\022\020\n\010group_id\030\t \001(\t\022\023\n\013user_i"
  "d_one\030\n \001(\t\022\023\n\013user_id_two\030\013 \001(\t\"9\n\022Chan"
  "nelMessageSend\022\022\n\nchannel_id\030\001 \001(\t\022\017\n\007co"
  "ntent\030\002 \001(\t\"O\n\024ChannelMessageUpdate\022\022\n\nc"
  "hannel_id\030\001 \001(\t\022\022\n\nmessage_id\030\002 \001(\t\022\017\n\007c"
  "ontent\030\003 \001(\t\">\n\024ChannelMessageRemove\022\022\n\n"
  "channel_id\030\001 \001(\t\022\022\n\nmessage_id\030\002 \001(\t\"\326\001\n"
  "\024ChannelPresenceEvent\022\022\n\nchannel_id\030\001 \001("
  "\t\022,\n\005joins\030\002 \003(\0132\035.nakama.realtime.UserP"
  "resence\022-\n\006leaves\030\003 \003(\0132\035.nakama.realtim"
  "e.UserPresence\022\021\n\troom_name\030\004 \001(\t\022\020\n\010gro"
  "up_id\030\005 \001(\t\022\023\n\013user_id_one\030\006 \001(\t\022\023\n\013user"
  "_id_two\030\007 \001(\t\"\330\002\n\005Error\022\014\n\004code\030\001 \001(\005\022\017\n"
  "\007message\030\002 \001(\t\0224\n\007context\030\003 \003(\0132#.nakama"
  ".realtime.Error.ContextEntry\032.\n\014ContextE"
  "ntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"\311\001\n"
  "\004Code\022\025\n\021RUNTIME_EXCEPTION\020\000\022\030\n\024UNRECOGN"
  "IZED_PAYLOAD\020\001\022\023\n\017MISSING_PAYLOAD\020\002\022\r\n\tB"
  "AD_INPUT\020\003\022\023\n\017MATCH_NOT_FOUND\020\004\022\027\n\023MATCH"
  "_JOIN_REJECTED\020\005\022\036\n\032RUNTIME_FUNCTION_NOT"
  "_FOUND\020\006\022\036\n\032RUNTIME_FUNCTION_EXCEPTION\020\007"
  "\"\312\001\n\005Match\022\020\n\010match_id\030\001 \001(\t\022\025\n\rauthorit"
  "ative\030\002 \001(\010\022+\n\005label\030\003 \001(\0132\034.google.prot"
  "obuf.StringValue\022\014\n\004size\030\004 \001(\005\0220\n\tpresen"
  "ces\030\005 \003(\0132\035.nakama.realtime.UserPresence"
  "\022+\n\004self\030\006 \001(\0132\035.nakama.realtime.UserPre"
  "sence\"\033\n\013MatchCreate\022\014\n\004name\030\001 \001(\t\"\177\n\tMa"
  "tchData\022\020\n\010match_id\030\001 \001(\t\022/\n\010presence\030\002 "
  "\001(\0132\035.nakama.realtime.UserPresence\022\017\n\007op"
  "_code\030\003 \001(\003\022\014\n\004data\030\004 \001(\014\022\020\n\010reliable\030\005 "
  "\001(\010\"\204\001\n\rMatchDataSend\022\020\n\010match_id\030\001 \001(\t\022"
  "\017\n\007op_code\030\002 \001(\003\022\014\n\004data\030\003 \001(\014\0220\n\tpresen"
  "ces\030\004 \003(\0132\035.nakama.realtime.UserPresence"
  "\022\020\n\010reliable\030\005 \001(\010\"\243\001\n\tMatchJoin\022\022\n\010matc"
  "h_id\030\001 \001(\tH\000\022\017\n\005token\030\002 \001(\tH\000\022:\n\010metadat"
  "a\030\003 \003(\0132(.nakama.realtime.MatchJoin.Meta"
  "dataEntry\032/\n\rMetadataEntry\022\013\n\003key\030\001 \001(\t\022"
  "\r\n\005value\030\002 \001(\t:\0028\001B\004\n\002id\"\036\n\nMatchLeave\022\020"
  "\n\010match_id\030\001 \001(\t\"\203\001\n\022MatchPresenceEvent\022"
  "\020\n\010match_id\030\001 \001(\t\022,\n\005joins\030\002 \003(\0132\035.nakam"
  "a.realtime.UserPresence\022-\n\006leaves\030\003 \003(\0132"
  "\035.nakama.realtime.UserPresence\"\220\003\n\rMatch"
  "makerAdd\022\021\n\tmin_count\030\001 \001(\005\022\021\n\tmax_count"
  "\030\002 \001(\005\022\r\n\005query\030\003 \001(\t\022O\n\021string_properti"
  "es\030\004 \003(\01324.nakama.realtime.MatchmakerAdd"
  ".StringPropertiesEntry\022Q\n\022numeric_proper"
  "ties\030\005 \003(\01325.nakama.realtime.MatchmakerA"
  "dd.NumericPropertiesEntry\0223\n\016count_multi"
  "ple\030\006 \001(\0132\033.google.protobuf.Int32Value\0327"
  "\n\025StringPropertiesEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005"
  "value\030\002 \001(\t:\0028\001\0328\n\026NumericPropertiesEntr"
  "y\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\001:\0028\001\"\344\004\n\021Ma"
  "tchmakerMatched\022\016\n\006ticket\030\001 \001(\t\022\022\n\010match"
  "_id\030\002 \001(\tH\000\022\017\n\005token\030\003 \001(\tH\000\022@\n\005users\030\004 "
  "\003(\01321.nakama.realtime.MatchmakerMatched."
  "MatchmakerUser\022\?\n\004self\030\005 \001(\01321.nakama.re"
  "altime.MatchmakerMatched.MatchmakerUser\032"
  "\220\003\n\016MatchmakerUser\022/\n\010presence\030\001 \001(\0132\035.n"
  "akama.realtime.UserPresence\022\020\n\010party_id\030"
  "\002 \001(\t\022b\n\021string_properties\030\005 \003(\0132G.nakam"
  "a.realtime.MatchmakerMatched.MatchmakerU"
  "ser.StringPropertiesEntry\022d\n\022numeric_pro"
  "perties\030\006 \003(\0132H.nakama.realtime.Matchmak"
  "erMatched.MatchmakerUser.NumericProperti"
  "esEntry\0327\n\025StringPropertiesEntry\022\013\n\003key\030"
  "\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\0328\n\026NumericPrope"
  "rtiesEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\001:\002"
  "8\001B\004\n\002id\"\"\n\020MatchmakerRemove\022\016\n\006ticket\030\001"
  " \001(\t\"\"\n\020MatchmakerTicket\022\016\n\006ticket\030\001 \001(\t"
  "\"@\n\rNotifications\022/\n\rnotifications\030\001 \003(\013"
  "2\030.nakama.api.Notification\"\307\001\n\005Party\022\020\n\010"
  "party_id\030\001 \001(\t\022\014\n\004open\030\002 \001(\010\022\020\n\010max_size"
  "\030\003 \001(\005\022+\n\004self\030\004 \001(\0132\035.nakama.realtime.U"
  "serPresence\022-\n\006leader\030\005 \001(\0132\035.nakama.rea"
  "ltime.UserPresence\0220\n\tpresences\030\006 \003(\0132\035."
  "nakama.realtime.UserPresence\"-\n\013PartyCre"
  "ate\022\014\n\004open\030\001 \001(\010\022\020\n\010max_size\030\002 \001(\005\"\035\n\tP"
  "artyJoin\022\020\n\010party_id\030\001 \001(\t\"\036\n\nPartyLeave"
  "\022\020\n\010party_id\030\001 \001(\t\"Q\n\014PartyPromote\022\020\n\010pa"
  "rty_id\030\001 \001(\t\022/\n\010presence\030\002 \001(\0132\035.nakama."
  "realtime.UserPresence\"P\n\013PartyLeader\022\020\n\010"
  "party_id\030\001 \001(\t\022/\n\010presence\030\002 \001(\0132\035.nakam"
  "a.realtime.UserPresence\"P\n\013PartyAccept\022\020"
  "\n\010party_id\030\001 \001(\t\022/\n\010presence\030\002 \001(\0132\035.nak"
  "ama.realtime.UserPresence\"P\n\013PartyRemove"
  "\022\020\n\010party_id\030\001 \001(\t\022/\n\010presence\030\002 \001(\0132\035.n"
  "akama.realtime.UserPresence\"\036\n\nPartyClos"
  "e\022\020\n\010party_id\030\001 \001(\t\"(\n\024PartyJoinRequestL"
  "ist\022\020\n\010party_id\030\001 \001(\t\"V\n\020PartyJoinReques"
  "t\022\020\n\010party_id\030\001 \001(\t\0220\n\tpresences\030\002 \003(\0132\035"
  ".nakama.realtime.UserPresence\"\261\003\n\022PartyM"
  "atchmakerAdd\022\020\n\010party_id\030\001 \001(\t\022\021\n\tmin_co"
  "unt\030\002 \001(\005\022\021\n\tmax_count\030\003 \001(\005\022\r\n\005query\030\004 "
  "\001(\t\022T\n\021string_properties\030\005 \003(\01329.nakama."
  "realtime.PartyMatchmakerAdd.StringProper"
  "tiesEntry\022V\n\022numeric_properties\030\006 \003(\0132:."
  "nakama.realtime.PartyMatchmakerAdd.Numer"
  "icPropertiesEntry\0223\n\016count_multiple\030\007 \001("
  "\0132\033.google.protobuf.Int32Value\0327\n\025String"
  "PropertiesEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 "
  "\001(\t:\0028\001\0328\n\026NumericPropertiesEntry\022\013\n\003key"
  "\030\001 \001(\t\022\r\n\005value\030\002 \001(\001:\0028\001\"9\n\025PartyMatchm"
  "akerRemove\022\020\n\010party_id\030\001 \001(\t\022\016\n\006ticket\030\002"
  " \001(\t\"9\n\025PartyMatchmakerTicket\022\020\n\010party_i"
  "d\030\001 \001(\t\022\016\n\006ticket\030\002 \001(\t\"m\n\tPartyData\022\020\n\010"
  "party_id\030\001 \001(\t\022/\n\010presence\030\002 \001(\0132\035.nakam"
  "a.realtime.UserPresence\022\017\n\007op_code\030\003 \001(\003"
  "\022\014\n\004data\030\004 \001(\014\"@\n\rPartyDataSend\022\020\n\010party"
  "_id\030\001 \001(\t\022\017\n\007op_code\030\002 \001(\003\022\014\n\004data\030\003 \001(\014"
  "\"\203\001\n\022PartyPresenceEvent\022\020\n\010party_id\030\001 \001("
  "\t\022,\n\005joins\030\002 \003(\0132\035.nakama.realtime.UserP"
  "resence\022-\n\006leaves\030\003 \003(\0132\035.nakama.realtim"
  "e.UserPresence\"\006\n\004Ping\"\006\n\004Pong\":\n\006Status"
  "\0220\n\tpresences\030\001 \003(\0132\035.nakama.realtime.Us"
  "erPresence\"3\n\014StatusFollow\022\020\n\010user_ids\030\001"
  " \003(\t\022\021\n\tusernames\030\002 \003(\t\"r\n\023StatusPresenc"
  "eEvent\022,\n\005joins\030\002 \003(\0132\035.nakama.realtime."
  "UserPresence\022-\n\006leaves\030\003 \003(\0132\035.nakama.re"
  "altime.UserPresence\"\"\n\016StatusUnfollow\022\020\n"
  "\010user_ids\030\001 \003(\t\"<\n\014StatusUpdate\022,\n\006statu"
  "s\030\001 \001(\0132\034.google.protobuf.StringValue\"J\n"
  "\006Stream\022\014\n\004mode\030\001 \001(\005\022\017\n\007subject\030\002 \001(\t\022\022"
  "\n\nsubcontext\030\003 \001(\t\022\r\n\005label\030\004 \001(\t\"\204\001\n\nSt"
  "reamData\022\'\n\006stream\030\001 \001(\0132\027.nakama.realti"
  "me.Stream\022-\n\006sender\030\002 \001(\0132\035.nakama.realt"
  "ime.UserPresence\022\014\n\004data\030\003 \001(\t\022\020\n\010reliab"
  "le\030\004 \001(\010\"\233\001\n\023StreamPresenceEvent\022\'\n\006stre"
  "am\030\001 \001(\0132\027.nakama.realtime.Stream\022,\n\005joi"
  "ns\030\002 \003(\0132\035.nakama.realtime.UserPresence\022"
  "-\n\006leaves\030\003 \003(\0132\035.nakama.realtime.UserPr"
  "esence\"\210\001\n\014UserPresence\022\017\n\007user_id\030\001 \001(\t"
  "\022\022\n\nsession_id\030\002 \001(\t\022\020\n\010username\030\003 \001(\t\022\023"
  "\n\013persistence\030\004 \001(\010\022,\n\006status\030\005 \001(\0132\034.go"
  "ogle.protobuf.StringValueBl\n\033com.heroicl"
  "abs.nakama.rtapiB\016NakamaRealtimeP\001Z)gith"
  "ub.com/heroiclabs/nakama-common/rtapi\252\002\017"
  "Nakama.Protobufb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto_deps[3] = {
  &::descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2fapi_2fapi_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
  &::descriptor_table_google_2fprotobuf_2fwrappers_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto_sccs[59] = {
  &scc_info_Channel_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base,
  &scc_info_ChannelJoin_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base,
  &scc_info_ChannelLeave_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base,
  &scc_info_ChannelMessageAck_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base,
  &scc_info_ChannelMessageRemove_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base,
  &scc_info_ChannelMessageSend_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base,
  &scc_info_ChannelMessageUpdate_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base,
  &scc_info_ChannelPresenceEvent_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base,
  &scc_info_Envelope_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base,
  &scc_info_Error_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base,
  &scc_info_Error_ContextEntry_DoNotUse_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base,
  &scc_info_Match_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base,
  &scc_info_MatchCreate_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base,
  &scc_info_MatchData_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base,
  &scc_info_MatchDataSend_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base,
  &scc_info_MatchJoin_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base,
  &scc_info_MatchJoin_MetadataEntry_DoNotUse_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base,
  &scc_info_MatchLeave_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base,
  &scc_info_MatchPresenceEvent_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base,
  &scc_info_MatchmakerAdd_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base,
  &scc_info_MatchmakerAdd_NumericPropertiesEntry_DoNotUse_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base,
  &scc_info_MatchmakerAdd_StringPropertiesEntry_DoNotUse_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base,
  &scc_info_MatchmakerMatched_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base,
  &scc_info_MatchmakerMatched_MatchmakerUser_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base,
  &scc_info_MatchmakerMatched_MatchmakerUser_NumericPropertiesEntry_DoNotUse_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base,
  &scc_info_MatchmakerMatched_MatchmakerUser_StringPropertiesEntry_DoNotUse_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base,
  &scc_info_MatchmakerRemove_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base,
  &scc_info_MatchmakerTicket_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base,
  &scc_info_Notifications_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base,
  &scc_info_Party_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base,
  &scc_info_PartyAccept_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base,
  &scc_info_PartyClose_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base,
  &scc_info_PartyCreate_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base,
  &scc_info_PartyData_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base,
  &scc_info_PartyDataSend_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base,
  &scc_info_PartyJoin_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base,
  &scc_info_PartyJoinRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base,
  &scc_info_PartyJoinRequestList_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base,
  &scc_info_PartyLeader_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base,
  &scc_info_PartyLeave_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base,
  &scc_info_PartyMatchmakerAdd_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base,
  &scc_info_PartyMatchmakerAdd_NumericPropertiesEntry_DoNotUse_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base,
  &scc_info_PartyMatchmakerAdd_StringPropertiesEntry_DoNotUse_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base,
  &scc_info_PartyMatchmakerRemove_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base,
  &scc_info_PartyMatchmakerTicket_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base,
  &scc_info_PartyPresenceEvent_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base,
  &scc_info_PartyPromote_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base,
  &scc_info_PartyRemove_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base,
  &scc_info_Ping_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base,
  &scc_info_Pong_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base,
  &scc_info_Status_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base,
  &scc_info_StatusFollow_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base,
  &scc_info_StatusPresenceEvent_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base,
  &scc_info_StatusUnfollow_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base,
  &scc_info_StatusUpdate_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base,
  &scc_info_Stream_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base,
  &scc_info_StreamData_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base,
  &scc_info_StreamPresenceEvent_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base,
  &scc_info_UserPresence_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto = {
  false, false, descriptor_table_protodef_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto, "github.com/heroiclabs/nakama-common/rtapi/realtime.proto", 9223,
  &descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto_once, descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto_sccs, descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto_deps, 59, 3,
  schemas, file_default_instances, TableStruct_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto::offsets,
  file_level_metadata_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto, 59, file_level_enum_descriptors_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto, file_level_service_descriptors_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto)), true);
namespace nakama {
namespace realtime {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChannelJoin_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto);
  return file_level_enum_descriptors_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto[0];
}
bool ChannelJoin_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ChannelJoin_Type ChannelJoin::TYPE_UNSPECIFIED;
constexpr ChannelJoin_Type ChannelJoin::ROOM;
constexpr ChannelJoin_Type ChannelJoin::DIRECT_MESSAGE;
constexpr ChannelJoin_Type ChannelJoin::GROUP;
constexpr ChannelJoin_Type ChannelJoin::Type_MIN;
constexpr ChannelJoin_Type ChannelJoin::Type_MAX;
constexpr int ChannelJoin::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Error_Code_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto);
  return file_level_enum_descriptors_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto[1];
}
bool Error_Code_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Error_Code Error::RUNTIME_EXCEPTION;
constexpr Error_Code Error::UNRECOGNIZED_PAYLOAD;
constexpr Error_Code Error::MISSING_PAYLOAD;
constexpr Error_Code Error::BAD_INPUT;
constexpr Error_Code Error::MATCH_NOT_FOUND;
constexpr Error_Code Error::MATCH_JOIN_REJECTED;
constexpr Error_Code Error::RUNTIME_FUNCTION_NOT_FOUND;
constexpr Error_Code Error::RUNTIME_FUNCTION_EXCEPTION;
constexpr Error_Code Error::Code_MIN;
constexpr Error_Code Error::Code_MAX;
constexpr int Error::Code_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class Envelope::_Internal {
 public:
  static const ::nakama::realtime::Channel& channel(const Envelope* msg);
  static const ::nakama::realtime::ChannelJoin& channel_join(const Envelope* msg);
  static const ::nakama::realtime::ChannelLeave& channel_leave(const Envelope* msg);
  static const ::nakama::api::ChannelMessage& channel_message(const Envelope* msg);
  static const ::nakama::realtime::ChannelMessageAck& channel_message_ack(const Envelope* msg);
  static const ::nakama::realtime::ChannelMessageSend& channel_message_send(const Envelope* msg);
  static const ::nakama::realtime::ChannelMessageUpdate& channel_message_update(const Envelope* msg);
  static const ::nakama::realtime::ChannelMessageRemove& channel_message_remove(const Envelope* msg);
  static const ::nakama::realtime::ChannelPresenceEvent& channel_presence_event(const Envelope* msg);
  static const ::nakama::realtime::Error& error(const Envelope* msg);
  static const ::nakama::realtime::Match& match(const Envelope* msg);
  static const ::nakama::realtime::MatchCreate& match_create(const Envelope* msg);
  static const ::nakama::realtime::MatchData& match_data(const Envelope* msg);
  static const ::nakama::realtime::MatchDataSend& match_data_send(const Envelope* msg);
  static const ::nakama::realtime::MatchJoin& match_join(const Envelope* msg);
  static const ::nakama::realtime::MatchLeave& match_leave(const Envelope* msg);
  static const ::nakama::realtime::MatchPresenceEvent& match_presence_event(const Envelope* msg);
  static const ::nakama::realtime::MatchmakerAdd& matchmaker_add(const Envelope* msg);
  static const ::nakama::realtime::MatchmakerMatched& matchmaker_matched(const Envelope* msg);
  static const ::nakama::realtime::MatchmakerRemove& matchmaker_remove(const Envelope* msg);
  static const ::nakama::realtime::MatchmakerTicket& matchmaker_ticket(const Envelope* msg);
  static const ::nakama::realtime::Notifications& notifications(const Envelope* msg);
  static const ::nakama::api::Rpc& rpc(const Envelope* msg);
  static const ::nakama::realtime::Status& status(const Envelope* msg);
  static const ::nakama::realtime::StatusFollow& status_follow(const Envelope* msg);
  static const ::nakama::realtime::StatusPresenceEvent& status_presence_event(const Envelope* msg);
  static const ::nakama::realtime::StatusUnfollow& status_unfollow(const Envelope* msg);
  static const ::nakama::realtime::StatusUpdate& status_update(const Envelope* msg);
  static const ::nakama::realtime::StreamData& stream_data(const Envelope* msg);
  static const ::nakama::realtime::StreamPresenceEvent& stream_presence_event(const Envelope* msg);
  static const ::nakama::realtime::Ping& ping(const Envelope* msg);
  static const ::nakama::realtime::Pong& pong(const Envelope* msg);
  static const ::nakama::realtime::Party& party(const Envelope* msg);
  static const ::nakama::realtime::PartyCreate& party_create(const Envelope* msg);
  static const ::nakama::realtime::PartyJoin& party_join(const Envelope* msg);
  static const ::nakama::realtime::PartyLeave& party_leave(const Envelope* msg);
  static const ::nakama::realtime::PartyPromote& party_promote(const Envelope* msg);
  static const ::nakama::realtime::PartyLeader& party_leader(const Envelope* msg);
  static const ::nakama::realtime::PartyAccept& party_accept(const Envelope* msg);
  static const ::nakama::realtime::PartyRemove& party_remove(const Envelope* msg);
  static const ::nakama::realtime::PartyClose& party_close(const Envelope* msg);
  static const ::nakama::realtime::PartyJoinRequestList& party_join_request_list(const Envelope* msg);
  static const ::nakama::realtime::PartyJoinRequest& party_join_request(const Envelope* msg);
  static const ::nakama::realtime::PartyMatchmakerAdd& party_matchmaker_add(const Envelope* msg);
  static const ::nakama::realtime::PartyMatchmakerRemove& party_matchmaker_remove(const Envelope* msg);
  static const ::nakama::realtime::PartyMatchmakerTicket& party_matchmaker_ticket(const Envelope* msg);
  static const ::nakama::realtime::PartyData& party_data(const Envelope* msg);
  static const ::nakama::realtime::PartyDataSend& party_data_send(const Envelope* msg);
  static const ::nakama::realtime::PartyPresenceEvent& party_presence_event(const Envelope* msg);
};

const ::nakama::realtime::Channel&
Envelope::_Internal::channel(const Envelope* msg) {
  return *msg->message_.channel_;
}
const ::nakama::realtime::ChannelJoin&
Envelope::_Internal::channel_join(const Envelope* msg) {
  return *msg->message_.channel_join_;
}
const ::nakama::realtime::ChannelLeave&
Envelope::_Internal::channel_leave(const Envelope* msg) {
  return *msg->message_.channel_leave_;
}
const ::nakama::api::ChannelMessage&
Envelope::_Internal::channel_message(const Envelope* msg) {
  return *msg->message_.channel_message_;
}
const ::nakama::realtime::ChannelMessageAck&
Envelope::_Internal::channel_message_ack(const Envelope* msg) {
  return *msg->message_.channel_message_ack_;
}
const ::nakama::realtime::ChannelMessageSend&
Envelope::_Internal::channel_message_send(const Envelope* msg) {
  return *msg->message_.channel_message_send_;
}
const ::nakama::realtime::ChannelMessageUpdate&
Envelope::_Internal::channel_message_update(const Envelope* msg) {
  return *msg->message_.channel_message_update_;
}
const ::nakama::realtime::ChannelMessageRemove&
Envelope::_Internal::channel_message_remove(const Envelope* msg) {
  return *msg->message_.channel_message_remove_;
}
const ::nakama::realtime::ChannelPresenceEvent&
Envelope::_Internal::channel_presence_event(const Envelope* msg) {
  return *msg->message_.channel_presence_event_;
}
const ::nakama::realtime::Error&
Envelope::_Internal::error(const Envelope* msg) {
  return *msg->message_.error_;
}
const ::nakama::realtime::Match&
Envelope::_Internal::match(const Envelope* msg) {
  return *msg->message_.match_;
}
const ::nakama::realtime::MatchCreate&
Envelope::_Internal::match_create(const Envelope* msg) {
  return *msg->message_.match_create_;
}
const ::nakama::realtime::MatchData&
Envelope::_Internal::match_data(const Envelope* msg) {
  return *msg->message_.match_data_;
}
const ::nakama::realtime::MatchDataSend&
Envelope::_Internal::match_data_send(const Envelope* msg) {
  return *msg->message_.match_data_send_;
}
const ::nakama::realtime::MatchJoin&
Envelope::_Internal::match_join(const Envelope* msg) {
  return *msg->message_.match_join_;
}
const ::nakama::realtime::MatchLeave&
Envelope::_Internal::match_leave(const Envelope* msg) {
  return *msg->message_.match_leave_;
}
const ::nakama::realtime::MatchPresenceEvent&
Envelope::_Internal::match_presence_event(const Envelope* msg) {
  return *msg->message_.match_presence_event_;
}
const ::nakama::realtime::MatchmakerAdd&
Envelope::_Internal::matchmaker_add(const Envelope* msg) {
  return *msg->message_.matchmaker_add_;
}
const ::nakama::realtime::MatchmakerMatched&
Envelope::_Internal::matchmaker_matched(const Envelope* msg) {
  return *msg->message_.matchmaker_matched_;
}
const ::nakama::realtime::MatchmakerRemove&
Envelope::_Internal::matchmaker_remove(const Envelope* msg) {
  return *msg->message_.matchmaker_remove_;
}
const ::nakama::realtime::MatchmakerTicket&
Envelope::_Internal::matchmaker_ticket(const Envelope* msg) {
  return *msg->message_.matchmaker_ticket_;
}
const ::nakama::realtime::Notifications&
Envelope::_Internal::notifications(const Envelope* msg) {
  return *msg->message_.notifications_;
}
const ::nakama::api::Rpc&
Envelope::_Internal::rpc(const Envelope* msg) {
  return *msg->message_.rpc_;
}
const ::nakama::realtime::Status&
Envelope::_Internal::status(const Envelope* msg) {
  return *msg->message_.status_;
}
const ::nakama::realtime::StatusFollow&
Envelope::_Internal::status_follow(const Envelope* msg) {
  return *msg->message_.status_follow_;
}
const ::nakama::realtime::StatusPresenceEvent&
Envelope::_Internal::status_presence_event(const Envelope* msg) {
  return *msg->message_.status_presence_event_;
}
const ::nakama::realtime::StatusUnfollow&
Envelope::_Internal::status_unfollow(const Envelope* msg) {
  return *msg->message_.status_unfollow_;
}
const ::nakama::realtime::StatusUpdate&
Envelope::_Internal::status_update(const Envelope* msg) {
  return *msg->message_.status_update_;
}
const ::nakama::realtime::StreamData&
Envelope::_Internal::stream_data(const Envelope* msg) {
  return *msg->message_.stream_data_;
}
const ::nakama::realtime::StreamPresenceEvent&
Envelope::_Internal::stream_presence_event(const Envelope* msg) {
  return *msg->message_.stream_presence_event_;
}
const ::nakama::realtime::Ping&
Envelope::_Internal::ping(const Envelope* msg) {
  return *msg->message_.ping_;
}
const ::nakama::realtime::Pong&
Envelope::_Internal::pong(const Envelope* msg) {
  return *msg->message_.pong_;
}
const ::nakama::realtime::Party&
Envelope::_Internal::party(const Envelope* msg) {
  return *msg->message_.party_;
}
const ::nakama::realtime::PartyCreate&
Envelope::_Internal::party_create(const Envelope* msg) {
  return *msg->message_.party_create_;
}
const ::nakama::realtime::PartyJoin&
Envelope::_Internal::party_join(const Envelope* msg) {
  return *msg->message_.party_join_;
}
const ::nakama::realtime::PartyLeave&
Envelope::_Internal::party_leave(const Envelope* msg) {
  return *msg->message_.party_leave_;
}
const ::nakama::realtime::PartyPromote&
Envelope::_Internal::party_promote(const Envelope* msg) {
  return *msg->message_.party_promote_;
}
const ::nakama::realtime::PartyLeader&
Envelope::_Internal::party_leader(const Envelope* msg) {
  return *msg->message_.party_leader_;
}
const ::nakama::realtime::PartyAccept&
Envelope::_Internal::party_accept(const Envelope* msg) {
  return *msg->message_.party_accept_;
}
const ::nakama::realtime::PartyRemove&
Envelope::_Internal::party_remove(const Envelope* msg) {
  return *msg->message_.party_remove_;
}
const ::nakama::realtime::PartyClose&
Envelope::_Internal::party_close(const Envelope* msg) {
  return *msg->message_.party_close_;
}
const ::nakama::realtime::PartyJoinRequestList&
Envelope::_Internal::party_join_request_list(const Envelope* msg) {
  return *msg->message_.party_join_request_list_;
}
const ::nakama::realtime::PartyJoinRequest&
Envelope::_Internal::party_join_request(const Envelope* msg) {
  return *msg->message_.party_join_request_;
}
const ::nakama::realtime::PartyMatchmakerAdd&
Envelope::_Internal::party_matchmaker_add(const Envelope* msg) {
  return *msg->message_.party_matchmaker_add_;
}
const ::nakama::realtime::PartyMatchmakerRemove&
Envelope::_Internal::party_matchmaker_remove(const Envelope* msg) {
  return *msg->message_.party_matchmaker_remove_;
}
const ::nakama::realtime::PartyMatchmakerTicket&
Envelope::_Internal::party_matchmaker_ticket(const Envelope* msg) {
  return *msg->message_.party_matchmaker_ticket_;
}
const ::nakama::realtime::PartyData&
Envelope::_Internal::party_data(const Envelope* msg) {
  return *msg->message_.party_data_;
}
const ::nakama::realtime::PartyDataSend&
Envelope::_Internal::party_data_send(const Envelope* msg) {
  return *msg->message_.party_data_send_;
}
const ::nakama::realtime::PartyPresenceEvent&
Envelope::_Internal::party_presence_event(const Envelope* msg) {
  return *msg->message_.party_presence_event_;
}
void Envelope::set_allocated_channel(::nakama::realtime::Channel* channel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_message();
  if (channel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(channel);
    if (message_arena != submessage_arena) {
      channel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, channel, submessage_arena);
    }
    set_has_channel();
    message_.channel_ = channel;
  }
  // @@protoc_insertion_point(field_set_allocated:nakama.realtime.Envelope.channel)
}
void Envelope::set_allocated_channel_join(::nakama::realtime::ChannelJoin* channel_join) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_message();
  if (channel_join) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(channel_join);
    if (message_arena != submessage_arena) {
      channel_join = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, channel_join, submessage_arena);
    }
    set_has_channel_join();
    message_.channel_join_ = channel_join;
  }
  // @@protoc_insertion_point(field_set_allocated:nakama.realtime.Envelope.channel_join)
}
void Envelope::set_allocated_channel_leave(::nakama::realtime::ChannelLeave* channel_leave) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_message();
  if (channel_leave) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(channel_leave);
    if (message_arena != submessage_arena) {
      channel_leave = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, channel_leave, submessage_arena);
    }
    set_has_channel_leave();
    message_.channel_leave_ = channel_leave;
  }
  // @@protoc_insertion_point(field_set_allocated:nakama.realtime.Envelope.channel_leave)
}
void Envelope::set_allocated_channel_message(::nakama::api::ChannelMessage* channel_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_message();
  if (channel_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(channel_message)->GetArena();
    if (message_arena != submessage_arena) {
      channel_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, channel_message, submessage_arena);
    }
    set_has_channel_message();
    message_.channel_message_ = channel_message;
  }
  // @@protoc_insertion_point(field_set_allocated:nakama.realtime.Envelope.channel_message)
}
void Envelope::clear_channel_message() {
  if (_internal_has_channel_message()) {
    if (GetArena() == nullptr) {
      delete message_.channel_message_;
    }
    clear_has_message();
  }
}
void Envelope::set_allocated_channel_message_ack(::nakama::realtime::ChannelMessageAck* channel_message_ack) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_message();
  if (channel_message_ack) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(channel_message_ack);
    if (message_arena != submessage_arena) {
      channel_message_ack = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, channel_message_ack, submessage_arena);
    }
    set_has_channel_message_ack();
    message_.channel_message_ack_ = channel_message_ack;
  }
  // @@protoc_insertion_point(field_set_allocated:nakama.realtime.Envelope.channel_message_ack)
}
void Envelope::set_allocated_channel_message_send(::nakama::realtime::ChannelMessageSend* channel_message_send) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_message();
  if (channel_message_send) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(channel_message_send);
    if (message_arena != submessage_arena) {
      channel_message_send = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, channel_message_send, submessage_arena);
    }
    set_has_channel_message_send();
    message_.channel_message_send_ = channel_message_send;
  }
  // @@protoc_insertion_point(field_set_allocated:nakama.realtime.Envelope.channel_message_send)
}
void Envelope::set_allocated_channel_message_update(::nakama::realtime::ChannelMessageUpdate* channel_message_update) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_message();
  if (channel_message_update) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(channel_message_update);
    if (message_arena != submessage_arena) {
      channel_message_update = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, channel_message_update, submessage_arena);
    }
    set_has_channel_message_update();
    message_.channel_message_update_ = channel_message_update;
  }
  // @@protoc_insertion_point(field_set_allocated:nakama.realtime.Envelope.channel_message_update)
}
void Envelope::set_allocated_channel_message_remove(::nakama::realtime::ChannelMessageRemove* channel_message_remove) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_message();
  if (channel_message_remove) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(channel_message_remove);
    if (message_arena != submessage_arena) {
      channel_message_remove = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, channel_message_remove, submessage_arena);
    }
    set_has_channel_message_remove();
    message_.channel_message_remove_ = channel_message_remove;
  }
  // @@protoc_insertion_point(field_set_allocated:nakama.realtime.Envelope.channel_message_remove)
}
void Envelope::set_allocated_channel_presence_event(::nakama::realtime::ChannelPresenceEvent* channel_presence_event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_message();
  if (channel_presence_event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(channel_presence_event);
    if (message_arena != submessage_arena) {
      channel_presence_event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, channel_presence_event, submessage_arena);
    }
    set_has_channel_presence_event();
    message_.channel_presence_event_ = channel_presence_event;
  }
  // @@protoc_insertion_point(field_set_allocated:nakama.realtime.Envelope.channel_presence_event)
}
void Envelope::set_allocated_error(::nakama::realtime::Error* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_message();
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(error);
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    set_has_error();
    message_.error_ = error;
  }
  // @@protoc_insertion_point(field_set_allocated:nakama.realtime.Envelope.error)
}
void Envelope::set_allocated_match(::nakama::realtime::Match* match) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_message();
  if (match) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(match);
    if (message_arena != submessage_arena) {
      match = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, match, submessage_arena);
    }
    set_has_match();
    message_.match_ = match;
  }
  // @@protoc_insertion_point(field_set_allocated:nakama.realtime.Envelope.match)
}
void Envelope::set_allocated_match_create(::nakama::realtime::MatchCreate* match_create) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_message();
  if (match_create) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(match_create);
    if (message_arena != submessage_arena) {
      match_create = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, match_create, submessage_arena);
    }
    set_has_match_create();
    message_.match_create_ = match_create;
  }
  // @@protoc_insertion_point(field_set_allocated:nakama.realtime.Envelope.match_create)
}
void Envelope::set_allocated_match_data(::nakama::realtime::MatchData* match_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_message();
  if (match_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(match_data);
    if (message_arena != submessage_arena) {
      match_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, match_data, submessage_arena);
    }
    set_has_match_data();
    message_.match_data_ = match_data;
  }
  // @@protoc_insertion_point(field_set_allocated:nakama.realtime.Envelope.match_data)
}
void Envelope::set_allocated_match_data_send(::nakama::realtime::MatchDataSend* match_data_send) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_message();
  if (match_data_send) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(match_data_send);
    if (message_arena != submessage_arena) {
      match_data_send = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, match_data_send, submessage_arena);
    }
    set_has_match_data_send();
    message_.match_data_send_ = match_data_send;
  }
  // @@protoc_insertion_point(field_set_allocated:nakama.realtime.Envelope.match_data_send)
}
void Envelope::set_allocated_match_join(::nakama::realtime::MatchJoin* match_join) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_message();
  if (match_join) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(match_join);
    if (message_arena != submessage_arena) {
      match_join = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, match_join, submessage_arena);
    }
    set_has_match_join();
    message_.match_join_ = match_join;
  }
  // @@protoc_insertion_point(field_set_allocated:nakama.realtime.Envelope.match_join)
}
void Envelope::set_allocated_match_leave(::nakama::realtime::MatchLeave* match_leave) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_message();
  if (match_leave) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(match_leave);
    if (message_arena != submessage_arena) {
      match_leave = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, match_leave, submessage_arena);
    }
    set_has_match_leave();
    message_.match_leave_ = match_leave;
  }
  // @@protoc_insertion_point(field_set_allocated:nakama.realtime.Envelope.match_leave)
}
void Envelope::set_allocated_match_presence_event(::nakama::realtime::MatchPresenceEvent* match_presence_event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_message();
  if (match_presence_event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(match_presence_event);
    if (message_arena != submessage_arena) {
      match_presence_event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, match_presence_event, submessage_arena);
    }
    set_has_match_presence_event();
    message_.match_presence_event_ = match_presence_event;
  }
  // @@protoc_insertion_point(field_set_allocated:nakama.realtime.Envelope.match_presence_event)
}
void Envelope::set_allocated_matchmaker_add(::nakama::realtime::MatchmakerAdd* matchmaker_add) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_message();
  if (matchmaker_add) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(matchmaker_add);
    if (message_arena != submessage_arena) {
      matchmaker_add = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, matchmaker_add, submessage_arena);
    }
    set_has_matchmaker_add();
    message_.matchmaker_add_ = matchmaker_add;
  }
  // @@protoc_insertion_point(field_set_allocated:nakama.realtime.Envelope.matchmaker_add)
}
void Envelope::set_allocated_matchmaker_matched(::nakama::realtime::MatchmakerMatched* matchmaker_matched) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_message();
  if (matchmaker_matched) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(matchmaker_matched);
    if (message_arena != submessage_arena) {
      matchmaker_matched = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, matchmaker_matched, submessage_arena);
    }
    set_has_matchmaker_matched();
    message_.matchmaker_matched_ = matchmaker_matched;
  }
  // @@protoc_insertion_point(field_set_allocated:nakama.realtime.Envelope.matchmaker_matched)
}
void Envelope::set_allocated_matchmaker_remove(::nakama::realtime::MatchmakerRemove* matchmaker_remove) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_message();
  if (matchmaker_remove) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(matchmaker_remove);
    if (message_arena != submessage_arena) {
      matchmaker_remove = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, matchmaker_remove, submessage_arena);
    }
    set_has_matchmaker_remove();
    message_.matchmaker_remove_ = matchmaker_remove;
  }
  // @@protoc_insertion_point(field_set_allocated:nakama.realtime.Envelope.matchmaker_remove)
}
void Envelope::set_allocated_matchmaker_ticket(::nakama::realtime::MatchmakerTicket* matchmaker_ticket) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_message();
  if (matchmaker_ticket) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(matchmaker_ticket);
    if (message_arena != submessage_arena) {
      matchmaker_ticket = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, matchmaker_ticket, submessage_arena);
    }
    set_has_matchmaker_ticket();
    message_.matchmaker_ticket_ = matchmaker_ticket;
  }
  // @@protoc_insertion_point(field_set_allocated:nakama.realtime.Envelope.matchmaker_ticket)
}
void Envelope::set_allocated_notifications(::nakama::realtime::Notifications* notifications) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_message();
  if (notifications) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(notifications);
    if (message_arena != submessage_arena) {
      notifications = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, notifications, submessage_arena);
    }
    set_has_notifications();
    message_.notifications_ = notifications;
  }
  // @@protoc_insertion_point(field_set_allocated:nakama.realtime.Envelope.notifications)
}
void Envelope::set_allocated_rpc(::nakama::api::Rpc* rpc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_message();
  if (rpc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rpc)->GetArena();
    if (message_arena != submessage_arena) {
      rpc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rpc, submessage_arena);
    }
    set_has_rpc();
    message_.rpc_ = rpc;
  }
  // @@protoc_insertion_point(field_set_allocated:nakama.realtime.Envelope.rpc)
}
void Envelope::clear_rpc() {
  if (_internal_has_rpc()) {
    if (GetArena() == nullptr) {
      delete message_.rpc_;
    }
    clear_has_message();
  }
}
void Envelope::set_allocated_status(::nakama::realtime::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_message();
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    set_has_status();
    message_.status_ = status;
  }
  // @@protoc_insertion_point(field_set_allocated:nakama.realtime.Envelope.status)
}
void Envelope::set_allocated_status_follow(::nakama::realtime::StatusFollow* status_follow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_message();
  if (status_follow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(status_follow);
    if (message_arena != submessage_arena) {
      status_follow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status_follow, submessage_arena);
    }
    set_has_status_follow();
    message_.status_follow_ = status_follow;
  }
  // @@protoc_insertion_point(field_set_allocated:nakama.realtime.Envelope.status_follow)
}
void Envelope::set_allocated_status_presence_event(::nakama::realtime::StatusPresenceEvent* status_presence_event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_message();
  if (status_presence_event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(status_presence_event);
    if (message_arena != submessage_arena) {
      status_presence_event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status_presence_event, submessage_arena);
    }
    set_has_status_presence_event();
    message_.status_presence_event_ = status_presence_event;
  }
  // @@protoc_insertion_point(field_set_allocated:nakama.realtime.Envelope.status_presence_event)
}
void Envelope::set_allocated_status_unfollow(::nakama::realtime::StatusUnfollow* status_unfollow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_message();
  if (status_unfollow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(status_unfollow);
    if (message_arena != submessage_arena) {
      status_unfollow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status_unfollow, submessage_arena);
    }
    set_has_status_unfollow();
    message_.status_unfollow_ = status_unfollow;
  }
  // @@protoc_insertion_point(field_set_allocated:nakama.realtime.Envelope.status_unfollow)
}
void Envelope::set_allocated_status_update(::nakama::realtime::StatusUpdate* status_update) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_message();
  if (status_update) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(status_update);
    if (message_arena != submessage_arena) {
      status_update = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status_update, submessage_arena);
    }
    set_has_status_update();
    message_.status_update_ = status_update;
  }
  // @@protoc_insertion_point(field_set_allocated:nakama.realtime.Envelope.status_update)
}
void Envelope::set_allocated_stream_data(::nakama::realtime::StreamData* stream_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_message();
  if (stream_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(stream_data);
    if (message_arena != submessage_arena) {
      stream_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stream_data, submessage_arena);
    }
    set_has_stream_data();
    message_.stream_data_ = stream_data;
  }
  // @@protoc_insertion_point(field_set_allocated:nakama.realtime.Envelope.stream_data)
}
void Envelope::set_allocated_stream_presence_event(::nakama::realtime::StreamPresenceEvent* stream_presence_event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_message();
  if (stream_presence_event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(stream_presence_event);
    if (message_arena != submessage_arena) {
      stream_presence_event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stream_presence_event, submessage_arena);
    }
    set_has_stream_presence_event();
    message_.stream_presence_event_ = stream_presence_event;
  }
  // @@protoc_insertion_point(field_set_allocated:nakama.realtime.Envelope.stream_presence_event)
}
void Envelope::set_allocated_ping(::nakama::realtime::Ping* ping) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_message();
  if (ping) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ping);
    if (message_arena != submessage_arena) {
      ping = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ping, submessage_arena);
    }
    set_has_ping();
    message_.ping_ = ping;
  }
  // @@protoc_insertion_point(field_set_allocated:nakama.realtime.Envelope.ping)
}
void Envelope::set_allocated_pong(::nakama::realtime::Pong* pong) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_message();
  if (pong) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(pong);
    if (message_arena != submessage_arena) {
      pong = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pong, submessage_arena);
    }
    set_has_pong();
    message_.pong_ = pong;
  }
  // @@protoc_insertion_point(field_set_allocated:nakama.realtime.Envelope.pong)
}
void Envelope::set_allocated_party(::nakama::realtime::Party* party) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_message();
  if (party) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(party);
    if (message_arena != submessage_arena) {
      party = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, party, submessage_arena);
    }
    set_has_party();
    message_.party_ = party;
  }
  // @@protoc_insertion_point(field_set_allocated:nakama.realtime.Envelope.party)
}
void Envelope::set_allocated_party_create(::nakama::realtime::PartyCreate* party_create) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_message();
  if (party_create) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(party_create);
    if (message_arena != submessage_arena) {
      party_create = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, party_create, submessage_arena);
    }
    set_has_party_create();
    message_.party_create_ = party_create;
  }
  // @@protoc_insertion_point(field_set_allocated:nakama.realtime.Envelope.party_create)
}
void Envelope::set_allocated_party_join(::nakama::realtime::PartyJoin* party_join) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_message();
  if (party_join) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(party_join);
    if (message_arena != submessage_arena) {
      party_join = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, party_join, submessage_arena);
    }
    set_has_party_join();
    message_.party_join_ = party_join;
  }
  // @@protoc_insertion_point(field_set_allocated:nakama.realtime.Envelope.party_join)
}
void Envelope::set_allocated_party_leave(::nakama::realtime::PartyLeave* party_leave) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_message();
  if (party_leave) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(party_leave);
    if (message_arena != submessage_arena) {
      party_leave = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, party_leave, submessage_arena);
    }
    set_has_party_leave();
    message_.party_leave_ = party_leave;
  }
  // @@protoc_insertion_point(field_set_allocated:nakama.realtime.Envelope.party_leave)
}
void Envelope::set_allocated_party_promote(::nakama::realtime::PartyPromote* party_promote) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_message();
  if (party_promote) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(party_promote);
    if (message_arena != submessage_arena) {
      party_promote = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, party_promote, submessage_arena);
    }
    set_has_party_promote();
    message_.party_promote_ = party_promote;
  }
  // @@protoc_insertion_point(field_set_allocated:nakama.realtime.Envelope.party_promote)
}
void Envelope::set_allocated_party_leader(::nakama::realtime::PartyLeader* party_leader) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_message();
  if (party_leader) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(party_leader);
    if (message_arena != submessage_arena) {
      party_leader = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, party_leader, submessage_arena);
    }
    set_has_party_leader();
    message_.party_leader_ = party_leader;
  }
  // @@protoc_insertion_point(field_set_allocated:nakama.realtime.Envelope.party_leader)
}
void Envelope::set_allocated_party_accept(::nakama::realtime::PartyAccept* party_accept) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_message();
  if (party_accept) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(party_accept);
    if (message_arena != submessage_arena) {
      party_accept = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, party_accept, submessage_arena);
    }
    set_has_party_accept();
    message_.party_accept_ = party_accept;
  }
  // @@protoc_insertion_point(field_set_allocated:nakama.realtime.Envelope.party_accept)
}
void Envelope::set_allocated_party_remove(::nakama::realtime::PartyRemove* party_remove) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_message();
  if (party_remove) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(party_remove);
    if (message_arena != submessage_arena) {
      party_remove = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, party_remove, submessage_arena);
    }
    set_has_party_remove();
    message_.party_remove_ = party_remove;
  }
  // @@protoc_insertion_point(field_set_allocated:nakama.realtime.Envelope.party_remove)
}
void Envelope::set_allocated_party_close(::nakama::realtime::PartyClose* party_close) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_message();
  if (party_close) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(party_close);
    if (message_arena != submessage_arena) {
      party_close = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, party_close, submessage_arena);
    }
    set_has_party_close();
    message_.party_close_ = party_close;
  }
  // @@protoc_insertion_point(field_set_allocated:nakama.realtime.Envelope.party_close)
}
void Envelope::set_allocated_party_join_request_list(::nakama::realtime::PartyJoinRequestList* party_join_request_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_message();
  if (party_join_request_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(party_join_request_list);
    if (message_arena != submessage_arena) {
      party_join_request_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, party_join_request_list, submessage_arena);
    }
    set_has_party_join_request_list();
    message_.party_join_request_list_ = party_join_request_list;
  }
  // @@protoc_insertion_point(field_set_allocated:nakama.realtime.Envelope.party_join_request_list)
}
void Envelope::set_allocated_party_join_request(::nakama::realtime::PartyJoinRequest* party_join_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_message();
  if (party_join_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(party_join_request);
    if (message_arena != submessage_arena) {
      party_join_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, party_join_request, submessage_arena);
    }
    set_has_party_join_request();
    message_.party_join_request_ = party_join_request;
  }
  // @@protoc_insertion_point(field_set_allocated:nakama.realtime.Envelope.party_join_request)
}
void Envelope::set_allocated_party_matchmaker_add(::nakama::realtime::PartyMatchmakerAdd* party_matchmaker_add) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_message();
  if (party_matchmaker_add) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(party_matchmaker_add);
    if (message_arena != submessage_arena) {
      party_matchmaker_add = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, party_matchmaker_add, submessage_arena);
    }
    set_has_party_matchmaker_add();
    message_.party_matchmaker_add_ = party_matchmaker_add;
  }
  // @@protoc_insertion_point(field_set_allocated:nakama.realtime.Envelope.party_matchmaker_add)
}
void Envelope::set_allocated_party_matchmaker_remove(::nakama::realtime::PartyMatchmakerRemove* party_matchmaker_remove) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_message();
  if (party_matchmaker_remove) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(party_matchmaker_remove);
    if (message_arena != submessage_arena) {
      party_matchmaker_remove = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, party_matchmaker_remove, submessage_arena);
    }
    set_has_party_matchmaker_remove();
    message_.party_matchmaker_remove_ = party_matchmaker_remove;
  }
  // @@protoc_insertion_point(field_set_allocated:nakama.realtime.Envelope.party_matchmaker_remove)
}
void Envelope::set_allocated_party_matchmaker_ticket(::nakama::realtime::PartyMatchmakerTicket* party_matchmaker_ticket) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_message();
  if (party_matchmaker_ticket) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(party_matchmaker_ticket);
    if (message_arena != submessage_arena) {
      party_matchmaker_ticket = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, party_matchmaker_ticket, submessage_arena);
    }
    set_has_party_matchmaker_ticket();
    message_.party_matchmaker_ticket_ = party_matchmaker_ticket;
  }
  // @@protoc_insertion_point(field_set_allocated:nakama.realtime.Envelope.party_matchmaker_ticket)
}
void Envelope::set_allocated_party_data(::nakama::realtime::PartyData* party_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_message();
  if (party_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(party_data);
    if (message_arena != submessage_arena) {
      party_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, party_data, submessage_arena);
    }
    set_has_party_data();
    message_.party_data_ = party_data;
  }
  // @@protoc_insertion_point(field_set_allocated:nakama.realtime.Envelope.party_data)
}
void Envelope::set_allocated_party_data_send(::nakama::realtime::PartyDataSend* party_data_send) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_message();
  if (party_data_send) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(party_data_send);
    if (message_arena != submessage_arena) {
      party_data_send = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, party_data_send, submessage_arena);
    }
    set_has_party_data_send();
    message_.party_data_send_ = party_data_send;
  }
  // @@protoc_insertion_point(field_set_allocated:nakama.realtime.Envelope.party_data_send)
}
void Envelope::set_allocated_party_presence_event(::nakama::realtime::PartyPresenceEvent* party_presence_event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_message();
  if (party_presence_event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(party_presence_event);
    if (message_arena != submessage_arena) {
      party_presence_event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, party_presence_event, submessage_arena);
    }
    set_has_party_presence_event();
    message_.party_presence_event_ = party_presence_event;
  }
  // @@protoc_insertion_point(field_set_allocated:nakama.realtime.Envelope.party_presence_event)
}
Envelope::Envelope(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nakama.realtime.Envelope)
}
Envelope::Envelope(const Envelope& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  cid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cid().empty()) {
    cid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_cid(), 
      GetArena());
  }
  clear_has_message();
  switch (from.message_case()) {
    case kChannel: {
      _internal_mutable_channel()->::nakama::realtime::Channel::MergeFrom(from._internal_channel());
      break;
    }
    case kChannelJoin: {
      _internal_mutable_channel_join()->::nakama::realtime::ChannelJoin::MergeFrom(from._internal_channel_join());
      break;
    }
    case kChannelLeave: {
      _internal_mutable_channel_leave()->::nakama::realtime::ChannelLeave::MergeFrom(from._internal_channel_leave());
      break;
    }
    case kChannelMessage: {
      _internal_mutable_channel_message()->::nakama::api::ChannelMessage::MergeFrom(from._internal_channel_message());
      break;
    }
    case kChannelMessageAck: {
      _internal_mutable_channel_message_ack()->::nakama::realtime::ChannelMessageAck::MergeFrom(from._internal_channel_message_ack());
      break;
    }
    case kChannelMessageSend: {
      _internal_mutable_channel_message_send()->::nakama::realtime::ChannelMessageSend::MergeFrom(from._internal_channel_message_send());
      break;
    }
    case kChannelMessageUpdate: {
      _internal_mutable_channel_message_update()->::nakama::realtime::ChannelMessageUpdate::MergeFrom(from._internal_channel_message_update());
      break;
    }
    case kChannelMessageRemove: {
      _internal_mutable_channel_message_remove()->::nakama::realtime::ChannelMessageRemove::MergeFrom(from._internal_channel_message_remove());
      break;
    }
    case kChannelPresenceEvent: {
      _internal_mutable_channel_presence_event()->::nakama::realtime::ChannelPresenceEvent::MergeFrom(from._internal_channel_presence_event());
      break;
    }
    case kError: {
      _internal_mutable_error()->::nakama::realtime::Error::MergeFrom(from._internal_error());
      break;
    }
    case kMatch: {
      _internal_mutable_match()->::nakama::realtime::Match::MergeFrom(from._internal_match());
      break;
    }
    case kMatchCreate: {
      _internal_mutable_match_create()->::nakama::realtime::MatchCreate::MergeFrom(from._internal_match_create());
      break;
    }
    case kMatchData: {
      _internal_mutable_match_data()->::nakama::realtime::MatchData::MergeFrom(from._internal_match_data());
      break;
    }
    case kMatchDataSend: {
      _internal_mutable_match_data_send()->::nakama::realtime::MatchDataSend::MergeFrom(from._internal_match_data_send());
      break;
    }
    case kMatchJoin: {
      _internal_mutable_match_join()->::nakama::realtime::MatchJoin::MergeFrom(from._internal_match_join());
      break;
    }
    case kMatchLeave: {
      _internal_mutable_match_leave()->::nakama::realtime::MatchLeave::MergeFrom(from._internal_match_leave());
      break;
    }
    case kMatchPresenceEvent: {
      _internal_mutable_match_presence_event()->::nakama::realtime::MatchPresenceEvent::MergeFrom(from._internal_match_presence_event());
      break;
    }
    case kMatchmakerAdd: {
      _internal_mutable_matchmaker_add()->::nakama::realtime::MatchmakerAdd::MergeFrom(from._internal_matchmaker_add());
      break;
    }
    case kMatchmakerMatched: {
      _internal_mutable_matchmaker_matched()->::nakama::realtime::MatchmakerMatched::MergeFrom(from._internal_matchmaker_matched());
      break;
    }
    case kMatchmakerRemove: {
      _internal_mutable_matchmaker_remove()->::nakama::realtime::MatchmakerRemove::MergeFrom(from._internal_matchmaker_remove());
      break;
    }
    case kMatchmakerTicket: {
      _internal_mutable_matchmaker_ticket()->::nakama::realtime::MatchmakerTicket::MergeFrom(from._internal_matchmaker_ticket());
      break;
    }
    case kNotifications: {
      _internal_mutable_notifications()->::nakama::realtime::Notifications::MergeFrom(from._internal_notifications());
      break;
    }
    case kRpc: {
      _internal_mutable_rpc()->::nakama::api::Rpc::MergeFrom(from._internal_rpc());
      break;
    }
    case kStatus: {
      _internal_mutable_status()->::nakama::realtime::Status::MergeFrom(from._internal_status());
      break;
    }
    case kStatusFollow: {
      _internal_mutable_status_follow()->::nakama::realtime::StatusFollow::MergeFrom(from._internal_status_follow());
      break;
    }
    case kStatusPresenceEvent: {
      _internal_mutable_status_presence_event()->::nakama::realtime::StatusPresenceEvent::MergeFrom(from._internal_status_presence_event());
      break;
    }
    case kStatusUnfollow: {
      _internal_mutable_status_unfollow()->::nakama::realtime::StatusUnfollow::MergeFrom(from._internal_status_unfollow());
      break;
    }
    case kStatusUpdate: {
      _internal_mutable_status_update()->::nakama::realtime::StatusUpdate::MergeFrom(from._internal_status_update());
      break;
    }
    case kStreamData: {
      _internal_mutable_stream_data()->::nakama::realtime::StreamData::MergeFrom(from._internal_stream_data());
      break;
    }
    case kStreamPresenceEvent: {
      _internal_mutable_stream_presence_event()->::nakama::realtime::StreamPresenceEvent::MergeFrom(from._internal_stream_presence_event());
      break;
    }
    case kPing: {
      _internal_mutable_ping()->::nakama::realtime::Ping::MergeFrom(from._internal_ping());
      break;
    }
    case kPong: {
      _internal_mutable_pong()->::nakama::realtime::Pong::MergeFrom(from._internal_pong());
      break;
    }
    case kParty: {
      _internal_mutable_party()->::nakama::realtime::Party::MergeFrom(from._internal_party());
      break;
    }
    case kPartyCreate: {
      _internal_mutable_party_create()->::nakama::realtime::PartyCreate::MergeFrom(from._internal_party_create());
      break;
    }
    case kPartyJoin: {
      _internal_mutable_party_join()->::nakama::realtime::PartyJoin::MergeFrom(from._internal_party_join());
      break;
    }
    case kPartyLeave: {
      _internal_mutable_party_leave()->::nakama::realtime::PartyLeave::MergeFrom(from._internal_party_leave());
      break;
    }
    case kPartyPromote: {
      _internal_mutable_party_promote()->::nakama::realtime::PartyPromote::MergeFrom(from._internal_party_promote());
      break;
    }
    case kPartyLeader: {
      _internal_mutable_party_leader()->::nakama::realtime::PartyLeader::MergeFrom(from._internal_party_leader());
      break;
    }
    case kPartyAccept: {
      _internal_mutable_party_accept()->::nakama::realtime::PartyAccept::MergeFrom(from._internal_party_accept());
      break;
    }
    case kPartyRemove: {
      _internal_mutable_party_remove()->::nakama::realtime::PartyRemove::MergeFrom(from._internal_party_remove());
      break;
    }
    case kPartyClose: {
      _internal_mutable_party_close()->::nakama::realtime::PartyClose::MergeFrom(from._internal_party_close());
      break;
    }
    case kPartyJoinRequestList: {
      _internal_mutable_party_join_request_list()->::nakama::realtime::PartyJoinRequestList::MergeFrom(from._internal_party_join_request_list());
      break;
    }
    case kPartyJoinRequest: {
      _internal_mutable_party_join_request()->::nakama::realtime::PartyJoinRequest::MergeFrom(from._internal_party_join_request());
      break;
    }
    case kPartyMatchmakerAdd: {
      _internal_mutable_party_matchmaker_add()->::nakama::realtime::PartyMatchmakerAdd::MergeFrom(from._internal_party_matchmaker_add());
      break;
    }
    case kPartyMatchmakerRemove: {
      _internal_mutable_party_matchmaker_remove()->::nakama::realtime::PartyMatchmakerRemove::MergeFrom(from._internal_party_matchmaker_remove());
      break;
    }
    case kPartyMatchmakerTicket: {
      _internal_mutable_party_matchmaker_ticket()->::nakama::realtime::PartyMatchmakerTicket::MergeFrom(from._internal_party_matchmaker_ticket());
      break;
    }
    case kPartyData: {
      _internal_mutable_party_data()->::nakama::realtime::PartyData::MergeFrom(from._internal_party_data());
      break;
    }
    case kPartyDataSend: {
      _internal_mutable_party_data_send()->::nakama::realtime::PartyDataSend::MergeFrom(from._internal_party_data_send());
      break;
    }
    case kPartyPresenceEvent: {
      _internal_mutable_party_presence_event()->::nakama::realtime::PartyPresenceEvent::MergeFrom(from._internal_party_presence_event());
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:nakama.realtime.Envelope)
}

void Envelope::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Envelope_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base);
  cid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clear_has_message();
}

Envelope::~Envelope() {
  // @@protoc_insertion_point(destructor:nakama.realtime.Envelope)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Envelope::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  cid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_message()) {
    clear_message();
  }
}

void Envelope::ArenaDtor(void* object) {
  Envelope* _this = reinterpret_cast< Envelope* >(object);
  (void)_this;
}
void Envelope::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Envelope::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Envelope& Envelope::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Envelope_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base);
  return *internal_default_instance();
}


void Envelope::clear_message() {
// @@protoc_insertion_point(one_of_clear_start:nakama.realtime.Envelope)
  switch (message_case()) {
    case kChannel: {
      if (GetArena() == nullptr) {
        delete message_.channel_;
      }
      break;
    }
    case kChannelJoin: {
      if (GetArena() == nullptr) {
        delete message_.channel_join_;
      }
      break;
    }
    case kChannelLeave: {
      if (GetArena() == nullptr) {
        delete message_.channel_leave_;
      }
      break;
    }
    case kChannelMessage: {
      if (GetArena() == nullptr) {
        delete message_.channel_message_;
      }
      break;
    }
    case kChannelMessageAck: {
      if (GetArena() == nullptr) {
        delete message_.channel_message_ack_;
      }
      break;
    }
    case kChannelMessageSend: {
      if (GetArena() == nullptr) {
        delete message_.channel_message_send_;
      }
      break;
    }
    case kChannelMessageUpdate: {
      if (GetArena() == nullptr) {
        delete message_.channel_message_update_;
      }
      break;
    }
    case kChannelMessageRemove: {
      if (GetArena() == nullptr) {
        delete message_.channel_message_remove_;
      }
      break;
    }
    case kChannelPresenceEvent: {
      if (GetArena() == nullptr) {
        delete message_.channel_presence_event_;
      }
      break;
    }
    case kError: {
      if (GetArena() == nullptr) {
        delete message_.error_;
      }
      break;
    }
    case kMatch: {
      if (GetArena() == nullptr) {
        delete message_.match_;
      }
      break;
    }
    case kMatchCreate: {
      if (GetArena() == nullptr) {
        delete message_.match_create_;
      }
      break;
    }
    case kMatchData: {
      if (GetArena() == nullptr) {
        delete message_.match_data_;
      }
      break;
    }
    case kMatchDataSend: {
      if (GetArena() == nullptr) {
        delete message_.match_data_send_;
      }
      break;
    }
    case kMatchJoin: {
      if (GetArena() == nullptr) {
        delete message_.match_join_;
      }
      break;
    }
    case kMatchLeave: {
      if (GetArena() == nullptr) {
        delete message_.match_leave_;
      }
      break;
    }
    case kMatchPresenceEvent: {
      if (GetArena() == nullptr) {
        delete message_.match_presence_event_;
      }
      break;
    }
    case kMatchmakerAdd: {
      if (GetArena() == nullptr) {
        delete message_.matchmaker_add_;
      }
      break;
    }
    case kMatchmakerMatched: {
      if (GetArena() == nullptr) {
        delete message_.matchmaker_matched_;
      }
      break;
    }
    case kMatchmakerRemove: {
      if (GetArena() == nullptr) {
        delete message_.matchmaker_remove_;
      }
      break;
    }
    case kMatchmakerTicket: {
      if (GetArena() == nullptr) {
        delete message_.matchmaker_ticket_;
      }
      break;
    }
    case kNotifications: {
      if (GetArena() == nullptr) {
        delete message_.notifications_;
      }
      break;
    }
    case kRpc: {
      if (GetArena() == nullptr) {
        delete message_.rpc_;
      }
      break;
    }
    case kStatus: {
      if (GetArena() == nullptr) {
        delete message_.status_;
      }
      break;
    }
    case kStatusFollow: {
      if (GetArena() == nullptr) {
        delete message_.status_follow_;
      }
      break;
    }
    case kStatusPresenceEvent: {
      if (GetArena() == nullptr) {
        delete message_.status_presence_event_;
      }
      break;
    }
    case kStatusUnfollow: {
      if (GetArena() == nullptr) {
        delete message_.status_unfollow_;
      }
      break;
    }
    case kStatusUpdate: {
      if (GetArena() == nullptr) {
        delete message_.status_update_;
      }
      break;
    }
    case kStreamData: {
      if (GetArena() == nullptr) {
        delete message_.stream_data_;
      }
      break;
    }
    case kStreamPresenceEvent: {
      if (GetArena() == nullptr) {
        delete message_.stream_presence_event_;
      }
      break;
    }
    case kPing: {
      if (GetArena() == nullptr) {
        delete message_.ping_;
      }
      break;
    }
    case kPong: {
      if (GetArena() == nullptr) {
        delete message_.pong_;
      }
      break;
    }
    case kParty: {
      if (GetArena() == nullptr) {
        delete message_.party_;
      }
      break;
    }
    case kPartyCreate: {
      if (GetArena() == nullptr) {
        delete message_.party_create_;
      }
      break;
    }
    case kPartyJoin: {
      if (GetArena() == nullptr) {
        delete message_.party_join_;
      }
      break;
    }
    case kPartyLeave: {
      if (GetArena() == nullptr) {
        delete message_.party_leave_;
      }
      break;
    }
    case kPartyPromote: {
      if (GetArena() == nullptr) {
        delete message_.party_promote_;
      }
      break;
    }
    case kPartyLeader: {
      if (GetArena() == nullptr) {
        delete message_.party_leader_;
      }
      break;
    }
    case kPartyAccept: {
      if (GetArena() == nullptr) {
        delete message_.party_accept_;
      }
      break;
    }
    case kPartyRemove: {
      if (GetArena() == nullptr) {
        delete message_.party_remove_;
      }
      break;
    }
    case kPartyClose: {
      if (GetArena() == nullptr) {
        delete message_.party_close_;
      }
      break;
    }
    case kPartyJoinRequestList: {
      if (GetArena() == nullptr) {
        delete message_.party_join_request_list_;
      }
      break;
    }
    case kPartyJoinRequest: {
      if (GetArena() == nullptr) {
        delete message_.party_join_request_;
      }
      break;
    }
    case kPartyMatchmakerAdd: {
      if (GetArena() == nullptr) {
        delete message_.party_matchmaker_add_;
      }
      break;
    }
    case kPartyMatchmakerRemove: {
      if (GetArena() == nullptr) {
        delete message_.party_matchmaker_remove_;
      }
      break;
    }
    case kPartyMatchmakerTicket: {
      if (GetArena() == nullptr) {
        delete message_.party_matchmaker_ticket_;
      }
      break;
    }
    case kPartyData: {
      if (GetArena() == nullptr) {
        delete message_.party_data_;
      }
      break;
    }
    case kPartyDataSend: {
      if (GetArena() == nullptr) {
        delete message_.party_data_send_;
      }
      break;
    }
    case kPartyPresenceEvent: {
      if (GetArena() == nullptr) {
        delete message_.party_presence_event_;
      }
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MESSAGE_NOT_SET;
}


void Envelope::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.realtime.Envelope)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cid_.ClearToEmpty();
  clear_message();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Envelope::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string cid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_cid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.realtime.Envelope.cid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nakama.realtime.Channel channel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_channel(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nakama.realtime.ChannelJoin channel_join = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_channel_join(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nakama.realtime.ChannelLeave channel_leave = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_channel_leave(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nakama.api.ChannelMessage channel_message = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_channel_message(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nakama.realtime.ChannelMessageAck channel_message_ack = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_channel_message_ack(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nakama.realtime.ChannelMessageSend channel_message_send = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_channel_message_send(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nakama.realtime.ChannelMessageUpdate channel_message_update = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_channel_message_update(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nakama.realtime.ChannelMessageRemove channel_message_remove = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_channel_message_remove(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nakama.realtime.ChannelPresenceEvent channel_presence_event = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_channel_presence_event(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nakama.realtime.Error error = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_error(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nakama.realtime.Match match = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_match(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nakama.realtime.MatchCreate match_create = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_match_create(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nakama.realtime.MatchData match_data = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_match_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nakama.realtime.MatchDataSend match_data_send = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_match_data_send(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nakama.realtime.MatchJoin match_join = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_match_join(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nakama.realtime.MatchLeave match_leave = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_match_leave(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nakama.realtime.MatchPresenceEvent match_presence_event = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_match_presence_event(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nakama.realtime.MatchmakerAdd matchmaker_add = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_matchmaker_add(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nakama.realtime.MatchmakerMatched matchmaker_matched = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_matchmaker_matched(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nakama.realtime.MatchmakerRemove matchmaker_remove = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_matchmaker_remove(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nakama.realtime.MatchmakerTicket matchmaker_ticket = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_matchmaker_ticket(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nakama.realtime.Notifications notifications = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_notifications(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nakama.api.Rpc rpc = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_rpc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nakama.realtime.Status status = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nakama.realtime.StatusFollow status_follow = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_status_follow(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nakama.realtime.StatusPresenceEvent status_presence_event = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_status_presence_event(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nakama.realtime.StatusUnfollow status_unfollow = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_status_unfollow(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nakama.realtime.StatusUpdate status_update = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_status_update(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nakama.realtime.StreamData stream_data = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_stream_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nakama.realtime.StreamPresenceEvent stream_presence_event = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_stream_presence_event(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nakama.realtime.Ping ping = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_ping(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nakama.realtime.Pong pong = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pong(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nakama.realtime.Party party = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_party(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nakama.realtime.PartyCreate party_create = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_party_create(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nakama.realtime.PartyJoin party_join = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_party_join(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nakama.realtime.PartyLeave party_leave = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_party_leave(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nakama.realtime.PartyPromote party_promote = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_party_promote(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nakama.realtime.PartyLeader party_leader = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_party_leader(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nakama.realtime.PartyAccept party_accept = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_party_accept(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nakama.realtime.PartyRemove party_remove = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_party_remove(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nakama.realtime.PartyClose party_close = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_party_close(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nakama.realtime.PartyJoinRequestList party_join_request_list = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_party_join_request_list(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nakama.realtime.PartyJoinRequest party_join_request = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_party_join_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nakama.realtime.PartyMatchmakerAdd party_matchmaker_add = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_party_matchmaker_add(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nakama.realtime.PartyMatchmakerRemove party_matchmaker_remove = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_party_matchmaker_remove(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nakama.realtime.PartyMatchmakerTicket party_matchmaker_ticket = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_party_matchmaker_ticket(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nakama.realtime.PartyData party_data = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_party_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nakama.realtime.PartyDataSend party_data_send = 49;
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_party_data_send(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nakama.realtime.PartyPresenceEvent party_presence_event = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_party_presence_event(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Envelope::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nakama.realtime.Envelope)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string cid = 1;
  if (this->cid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cid().data(), static_cast<int>(this->_internal_cid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.realtime.Envelope.cid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_cid(), target);
  }

  // .nakama.realtime.Channel channel = 2;
  if (_internal_has_channel()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::channel(this), target, stream);
  }

  // .nakama.realtime.ChannelJoin channel_join = 3;
  if (_internal_has_channel_join()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::channel_join(this), target, stream);
  }

  // .nakama.realtime.ChannelLeave channel_leave = 4;
  if (_internal_has_channel_leave()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::channel_leave(this), target, stream);
  }

  // .nakama.api.ChannelMessage channel_message = 5;
  if (_internal_has_channel_message()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::channel_message(this), target, stream);
  }

  // .nakama.realtime.ChannelMessageAck channel_message_ack = 6;
  if (_internal_has_channel_message_ack()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::channel_message_ack(this), target, stream);
  }

  // .nakama.realtime.ChannelMessageSend channel_message_send = 7;
  if (_internal_has_channel_message_send()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::channel_message_send(this), target, stream);
  }

  // .nakama.realtime.ChannelMessageUpdate channel_message_update = 8;
  if (_internal_has_channel_message_update()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::channel_message_update(this), target, stream);
  }

  // .nakama.realtime.ChannelMessageRemove channel_message_remove = 9;
  if (_internal_has_channel_message_remove()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::channel_message_remove(this), target, stream);
  }

  // .nakama.realtime.ChannelPresenceEvent channel_presence_event = 10;
  if (_internal_has_channel_presence_event()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::channel_presence_event(this), target, stream);
  }

  // .nakama.realtime.Error error = 11;
  if (_internal_has_error()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::error(this), target, stream);
  }

  // .nakama.realtime.Match match = 12;
  if (_internal_has_match()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::match(this), target, stream);
  }

  // .nakama.realtime.MatchCreate match_create = 13;
  if (_internal_has_match_create()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::match_create(this), target, stream);
  }

  // .nakama.realtime.MatchData match_data = 14;
  if (_internal_has_match_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::match_data(this), target, stream);
  }

  // .nakama.realtime.MatchDataSend match_data_send = 15;
  if (_internal_has_match_data_send()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::match_data_send(this), target, stream);
  }

  // .nakama.realtime.MatchJoin match_join = 16;
  if (_internal_has_match_join()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::match_join(this), target, stream);
  }

  // .nakama.realtime.MatchLeave match_leave = 17;
  if (_internal_has_match_leave()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::match_leave(this), target, stream);
  }

  // .nakama.realtime.MatchPresenceEvent match_presence_event = 18;
  if (_internal_has_match_presence_event()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        18, _Internal::match_presence_event(this), target, stream);
  }

  // .nakama.realtime.MatchmakerAdd matchmaker_add = 19;
  if (_internal_has_matchmaker_add()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        19, _Internal::matchmaker_add(this), target, stream);
  }

  // .nakama.realtime.MatchmakerMatched matchmaker_matched = 20;
  if (_internal_has_matchmaker_matched()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::matchmaker_matched(this), target, stream);
  }

  // .nakama.realtime.MatchmakerRemove matchmaker_remove = 21;
  if (_internal_has_matchmaker_remove()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        21, _Internal::matchmaker_remove(this), target, stream);
  }

  // .nakama.realtime.MatchmakerTicket matchmaker_ticket = 22;
  if (_internal_has_matchmaker_ticket()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        22, _Internal::matchmaker_ticket(this), target, stream);
  }

  // .nakama.realtime.Notifications notifications = 23;
  if (_internal_has_notifications()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        23, _Internal::notifications(this), target, stream);
  }

  // .nakama.api.Rpc rpc = 24;
  if (_internal_has_rpc()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        24, _Internal::rpc(this), target, stream);
  }

  // .nakama.realtime.Status status = 25;
  if (_internal_has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        25, _Internal::status(this), target, stream);
  }

  // .nakama.realtime.StatusFollow status_follow = 26;
  if (_internal_has_status_follow()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        26, _Internal::status_follow(this), target, stream);
  }

  // .nakama.realtime.StatusPresenceEvent status_presence_event = 27;
  if (_internal_has_status_presence_event()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        27, _Internal::status_presence_event(this), target, stream);
  }

  // .nakama.realtime.StatusUnfollow status_unfollow = 28;
  if (_internal_has_status_unfollow()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        28, _Internal::status_unfollow(this), target, stream);
  }

  // .nakama.realtime.StatusUpdate status_update = 29;
  if (_internal_has_status_update()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        29, _Internal::status_update(this), target, stream);
  }

  // .nakama.realtime.StreamData stream_data = 30;
  if (_internal_has_stream_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        30, _Internal::stream_data(this), target, stream);
  }

  // .nakama.realtime.StreamPresenceEvent stream_presence_event = 31;
  if (_internal_has_stream_presence_event()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        31, _Internal::stream_presence_event(this), target, stream);
  }

  // .nakama.realtime.Ping ping = 32;
  if (_internal_has_ping()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        32, _Internal::ping(this), target, stream);
  }

  // .nakama.realtime.Pong pong = 33;
  if (_internal_has_pong()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        33, _Internal::pong(this), target, stream);
  }

  // .nakama.realtime.Party party = 34;
  if (_internal_has_party()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        34, _Internal::party(this), target, stream);
  }

  // .nakama.realtime.PartyCreate party_create = 35;
  if (_internal_has_party_create()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        35, _Internal::party_create(this), target, stream);
  }

  // .nakama.realtime.PartyJoin party_join = 36;
  if (_internal_has_party_join()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        36, _Internal::party_join(this), target, stream);
  }

  // .nakama.realtime.PartyLeave party_leave = 37;
  if (_internal_has_party_leave()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        37, _Internal::party_leave(this), target, stream);
  }

  // .nakama.realtime.PartyPromote party_promote = 38;
  if (_internal_has_party_promote()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        38, _Internal::party_promote(this), target, stream);
  }

  // .nakama.realtime.PartyLeader party_leader = 39;
  if (_internal_has_party_leader()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        39, _Internal::party_leader(this), target, stream);
  }

  // .nakama.realtime.PartyAccept party_accept = 40;
  if (_internal_has_party_accept()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        40, _Internal::party_accept(this), target, stream);
  }

  // .nakama.realtime.PartyRemove party_remove = 41;
  if (_internal_has_party_remove()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        41, _Internal::party_remove(this), target, stream);
  }

  // .nakama.realtime.PartyClose party_close = 42;
  if (_internal_has_party_close()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        42, _Internal::party_close(this), target, stream);
  }

  // .nakama.realtime.PartyJoinRequestList party_join_request_list = 43;
  if (_internal_has_party_join_request_list()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        43, _Internal::party_join_request_list(this), target, stream);
  }

  // .nakama.realtime.PartyJoinRequest party_join_request = 44;
  if (_internal_has_party_join_request()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        44, _Internal::party_join_request(this), target, stream);
  }

  // .nakama.realtime.PartyMatchmakerAdd party_matchmaker_add = 45;
  if (_internal_has_party_matchmaker_add()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        45, _Internal::party_matchmaker_add(this), target, stream);
  }

  // .nakama.realtime.PartyMatchmakerRemove party_matchmaker_remove = 46;
  if (_internal_has_party_matchmaker_remove()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        46, _Internal::party_matchmaker_remove(this), target, stream);
  }

  // .nakama.realtime.PartyMatchmakerTicket party_matchmaker_ticket = 47;
  if (_internal_has_party_matchmaker_ticket()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        47, _Internal::party_matchmaker_ticket(this), target, stream);
  }

  // .nakama.realtime.PartyData party_data = 48;
  if (_internal_has_party_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        48, _Internal::party_data(this), target, stream);
  }

  // .nakama.realtime.PartyDataSend party_data_send = 49;
  if (_internal_has_party_data_send()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        49, _Internal::party_data_send(this), target, stream);
  }

  // .nakama.realtime.PartyPresenceEvent party_presence_event = 50;
  if (_internal_has_party_presence_event()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        50, _Internal::party_presence_event(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.realtime.Envelope)
  return target;
}

size_t Envelope::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.realtime.Envelope)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string cid = 1;
  if (this->cid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cid());
  }

  switch (message_case()) {
    // .nakama.realtime.Channel channel = 2;
    case kChannel: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_.channel_);
      break;
    }
    // .nakama.realtime.ChannelJoin channel_join = 3;
    case kChannelJoin: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_.channel_join_);
      break;
    }
    // .nakama.realtime.ChannelLeave channel_leave = 4;
    case kChannelLeave: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_.channel_leave_);
      break;
    }
    // .nakama.api.ChannelMessage channel_message = 5;
    case kChannelMessage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_.channel_message_);
      break;
    }
    // .nakama.realtime.ChannelMessageAck channel_message_ack = 6;
    case kChannelMessageAck: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_.channel_message_ack_);
      break;
    }
    // .nakama.realtime.ChannelMessageSend channel_message_send = 7;
    case kChannelMessageSend: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_.channel_message_send_);
      break;
    }
    // .nakama.realtime.ChannelMessageUpdate channel_message_update = 8;
    case kChannelMessageUpdate: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_.channel_message_update_);
      break;
    }
    // .nakama.realtime.ChannelMessageRemove channel_message_remove = 9;
    case kChannelMessageRemove: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_.channel_message_remove_);
      break;
    }
    // .nakama.realtime.ChannelPresenceEvent channel_presence_event = 10;
    case kChannelPresenceEvent: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_.channel_presence_event_);
      break;
    }
    // .nakama.realtime.Error error = 11;
    case kError: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_.error_);
      break;
    }
    // .nakama.realtime.Match match = 12;
    case kMatch: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_.match_);
      break;
    }
    // .nakama.realtime.MatchCreate match_create = 13;
    case kMatchCreate: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_.match_create_);
      break;
    }
    // .nakama.realtime.MatchData match_data = 14;
    case kMatchData: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_.match_data_);
      break;
    }
    // .nakama.realtime.MatchDataSend match_data_send = 15;
    case kMatchDataSend: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_.match_data_send_);
      break;
    }
    // .nakama.realtime.MatchJoin match_join = 16;
    case kMatchJoin: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_.match_join_);
      break;
    }
    // .nakama.realtime.MatchLeave match_leave = 17;
    case kMatchLeave: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_.match_leave_);
      break;
    }
    // .nakama.realtime.MatchPresenceEvent match_presence_event = 18;
    case kMatchPresenceEvent: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_.match_presence_event_);
      break;
    }
    // .nakama.realtime.MatchmakerAdd matchmaker_add = 19;
    case kMatchmakerAdd: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_.matchmaker_add_);
      break;
    }
    // .nakama.realtime.MatchmakerMatched matchmaker_matched = 20;
    case kMatchmakerMatched: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_.matchmaker_matched_);
      break;
    }
    // .nakama.realtime.MatchmakerRemove matchmaker_remove = 21;
    case kMatchmakerRemove: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_.matchmaker_remove_);
      break;
    }
    // .nakama.realtime.MatchmakerTicket matchmaker_ticket = 22;
    case kMatchmakerTicket: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_.matchmaker_ticket_);
      break;
    }
    // .nakama.realtime.Notifications notifications = 23;
    case kNotifications: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_.notifications_);
      break;
    }
    // .nakama.api.Rpc rpc = 24;
    case kRpc: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_.rpc_);
      break;
    }
    // .nakama.realtime.Status status = 25;
    case kStatus: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_.status_);
      break;
    }
    // .nakama.realtime.StatusFollow status_follow = 26;
    case kStatusFollow: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_.status_follow_);
      break;
    }
    // .nakama.realtime.StatusPresenceEvent status_presence_event = 27;
    case kStatusPresenceEvent: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_.status_presence_event_);
      break;
    }
    // .nakama.realtime.StatusUnfollow status_unfollow = 28;
    case kStatusUnfollow: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_.status_unfollow_);
      break;
    }
    // .nakama.realtime.StatusUpdate status_update = 29;
    case kStatusUpdate: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_.status_update_);
      break;
    }
    // .nakama.realtime.StreamData stream_data = 30;
    case kStreamData: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_.stream_data_);
      break;
    }
    // .nakama.realtime.StreamPresenceEvent stream_presence_event = 31;
    case kStreamPresenceEvent: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_.stream_presence_event_);
      break;
    }
    // .nakama.realtime.Ping ping = 32;
    case kPing: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_.ping_);
      break;
    }
    // .nakama.realtime.Pong pong = 33;
    case kPong: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_.pong_);
      break;
    }
    // .nakama.realtime.Party party = 34;
    case kParty: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_.party_);
      break;
    }
    // .nakama.realtime.PartyCreate party_create = 35;
    case kPartyCreate: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_.party_create_);
      break;
    }
    // .nakama.realtime.PartyJoin party_join = 36;
    case kPartyJoin: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_.party_join_);
      break;
    }
    // .nakama.realtime.PartyLeave party_leave = 37;
    case kPartyLeave: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_.party_leave_);
      break;
    }
    // .nakama.realtime.PartyPromote party_promote = 38;
    case kPartyPromote: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_.party_promote_);
      break;
    }
    // .nakama.realtime.PartyLeader party_leader = 39;
    case kPartyLeader: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_.party_leader_);
      break;
    }
    // .nakama.realtime.PartyAccept party_accept = 40;
    case kPartyAccept: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_.party_accept_);
      break;
    }
    // .nakama.realtime.PartyRemove party_remove = 41;
    case kPartyRemove: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_.party_remove_);
      break;
    }
    // .nakama.realtime.PartyClose party_close = 42;
    case kPartyClose: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_.party_close_);
      break;
    }
    // .nakama.realtime.PartyJoinRequestList party_join_request_list = 43;
    case kPartyJoinRequestList: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_.party_join_request_list_);
      break;
    }
    // .nakama.realtime.PartyJoinRequest party_join_request = 44;
    case kPartyJoinRequest: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_.party_join_request_);
      break;
    }
    // .nakama.realtime.PartyMatchmakerAdd party_matchmaker_add = 45;
    case kPartyMatchmakerAdd: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_.party_matchmaker_add_);
      break;
    }
    // .nakama.realtime.PartyMatchmakerRemove party_matchmaker_remove = 46;
    case kPartyMatchmakerRemove: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_.party_matchmaker_remove_);
      break;
    }
    // .nakama.realtime.PartyMatchmakerTicket party_matchmaker_ticket = 47;
    case kPartyMatchmakerTicket: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_.party_matchmaker_ticket_);
      break;
    }
    // .nakama.realtime.PartyData party_data = 48;
    case kPartyData: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_.party_data_);
      break;
    }
    // .nakama.realtime.PartyDataSend party_data_send = 49;
    case kPartyDataSend: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_.party_data_send_);
      break;
    }
    // .nakama.realtime.PartyPresenceEvent party_presence_event = 50;
    case kPartyPresenceEvent: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_.party_presence_event_);
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Envelope::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.realtime.Envelope)
  GOOGLE_DCHECK_NE(&from, this);
  const Envelope* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Envelope>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.realtime.Envelope)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.realtime.Envelope)
    MergeFrom(*source);
  }
}

void Envelope::MergeFrom(const Envelope& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.realtime.Envelope)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cid().size() > 0) {
    _internal_set_cid(from._internal_cid());
  }
  switch (from.message_case()) {
    case kChannel: {
      _internal_mutable_channel()->::nakama::realtime::Channel::MergeFrom(from._internal_channel());
      break;
    }
    case kChannelJoin: {
      _internal_mutable_channel_join()->::nakama::realtime::ChannelJoin::MergeFrom(from._internal_channel_join());
      break;
    }
    case kChannelLeave: {
      _internal_mutable_channel_leave()->::nakama::realtime::ChannelLeave::MergeFrom(from._internal_channel_leave());
      break;
    }
    case kChannelMessage: {
      _internal_mutable_channel_message()->::nakama::api::ChannelMessage::MergeFrom(from._internal_channel_message());
      break;
    }
    case kChannelMessageAck: {
      _internal_mutable_channel_message_ack()->::nakama::realtime::ChannelMessageAck::MergeFrom(from._internal_channel_message_ack());
      break;
    }
    case kChannelMessageSend: {
      _internal_mutable_channel_message_send()->::nakama::realtime::ChannelMessageSend::MergeFrom(from._internal_channel_message_send());
      break;
    }
    case kChannelMessageUpdate: {
      _internal_mutable_channel_message_update()->::nakama::realtime::ChannelMessageUpdate::MergeFrom(from._internal_channel_message_update());
      break;
    }
    case kChannelMessageRemove: {
      _internal_mutable_channel_message_remove()->::nakama::realtime::ChannelMessageRemove::MergeFrom(from._internal_channel_message_remove());
      break;
    }
    case kChannelPresenceEvent: {
      _internal_mutable_channel_presence_event()->::nakama::realtime::ChannelPresenceEvent::MergeFrom(from._internal_channel_presence_event());
      break;
    }
    case kError: {
      _internal_mutable_error()->::nakama::realtime::Error::MergeFrom(from._internal_error());
      break;
    }
    case kMatch: {
      _internal_mutable_match()->::nakama::realtime::Match::MergeFrom(from._internal_match());
      break;
    }
    case kMatchCreate: {
      _internal_mutable_match_create()->::nakama::realtime::MatchCreate::MergeFrom(from._internal_match_create());
      break;
    }
    case kMatchData: {
      _internal_mutable_match_data()->::nakama::realtime::MatchData::MergeFrom(from._internal_match_data());
      break;
    }
    case kMatchDataSend: {
      _internal_mutable_match_data_send()->::nakama::realtime::MatchDataSend::MergeFrom(from._internal_match_data_send());
      break;
    }
    case kMatchJoin: {
      _internal_mutable_match_join()->::nakama::realtime::MatchJoin::MergeFrom(from._internal_match_join());
      break;
    }
    case kMatchLeave: {
      _internal_mutable_match_leave()->::nakama::realtime::MatchLeave::MergeFrom(from._internal_match_leave());
      break;
    }
    case kMatchPresenceEvent: {
      _internal_mutable_match_presence_event()->::nakama::realtime::MatchPresenceEvent::MergeFrom(from._internal_match_presence_event());
      break;
    }
    case kMatchmakerAdd: {
      _internal_mutable_matchmaker_add()->::nakama::realtime::MatchmakerAdd::MergeFrom(from._internal_matchmaker_add());
      break;
    }
    case kMatchmakerMatched: {
      _internal_mutable_matchmaker_matched()->::nakama::realtime::MatchmakerMatched::MergeFrom(from._internal_matchmaker_matched());
      break;
    }
    case kMatchmakerRemove: {
      _internal_mutable_matchmaker_remove()->::nakama::realtime::MatchmakerRemove::MergeFrom(from._internal_matchmaker_remove());
      break;
    }
    case kMatchmakerTicket: {
      _internal_mutable_matchmaker_ticket()->::nakama::realtime::MatchmakerTicket::MergeFrom(from._internal_matchmaker_ticket());
      break;
    }
    case kNotifications: {
      _internal_mutable_notifications()->::nakama::realtime::Notifications::MergeFrom(from._internal_notifications());
      break;
    }
    case kRpc: {
      _internal_mutable_rpc()->::nakama::api::Rpc::MergeFrom(from._internal_rpc());
      break;
    }
    case kStatus: {
      _internal_mutable_status()->::nakama::realtime::Status::MergeFrom(from._internal_status());
      break;
    }
    case kStatusFollow: {
      _internal_mutable_status_follow()->::nakama::realtime::StatusFollow::MergeFrom(from._internal_status_follow());
      break;
    }
    case kStatusPresenceEvent: {
      _internal_mutable_status_presence_event()->::nakama::realtime::StatusPresenceEvent::MergeFrom(from._internal_status_presence_event());
      break;
    }
    case kStatusUnfollow: {
      _internal_mutable_status_unfollow()->::nakama::realtime::StatusUnfollow::MergeFrom(from._internal_status_unfollow());
      break;
    }
    case kStatusUpdate: {
      _internal_mutable_status_update()->::nakama::realtime::StatusUpdate::MergeFrom(from._internal_status_update());
      break;
    }
    case kStreamData: {
      _internal_mutable_stream_data()->::nakama::realtime::StreamData::MergeFrom(from._internal_stream_data());
      break;
    }
    case kStreamPresenceEvent: {
      _internal_mutable_stream_presence_event()->::nakama::realtime::StreamPresenceEvent::MergeFrom(from._internal_stream_presence_event());
      break;
    }
    case kPing: {
      _internal_mutable_ping()->::nakama::realtime::Ping::MergeFrom(from._internal_ping());
      break;
    }
    case kPong: {
      _internal_mutable_pong()->::nakama::realtime::Pong::MergeFrom(from._internal_pong());
      break;
    }
    case kParty: {
      _internal_mutable_party()->::nakama::realtime::Party::MergeFrom(from._internal_party());
      break;
    }
    case kPartyCreate: {
      _internal_mutable_party_create()->::nakama::realtime::PartyCreate::MergeFrom(from._internal_party_create());
      break;
    }
    case kPartyJoin: {
      _internal_mutable_party_join()->::nakama::realtime::PartyJoin::MergeFrom(from._internal_party_join());
      break;
    }
    case kPartyLeave: {
      _internal_mutable_party_leave()->::nakama::realtime::PartyLeave::MergeFrom(from._internal_party_leave());
      break;
    }
    case kPartyPromote: {
      _internal_mutable_party_promote()->::nakama::realtime::PartyPromote::MergeFrom(from._internal_party_promote());
      break;
    }
    case kPartyLeader: {
      _internal_mutable_party_leader()->::nakama::realtime::PartyLeader::MergeFrom(from._internal_party_leader());
      break;
    }
    case kPartyAccept: {
      _internal_mutable_party_accept()->::nakama::realtime::PartyAccept::MergeFrom(from._internal_party_accept());
      break;
    }
    case kPartyRemove: {
      _internal_mutable_party_remove()->::nakama::realtime::PartyRemove::MergeFrom(from._internal_party_remove());
      break;
    }
    case kPartyClose: {
      _internal_mutable_party_close()->::nakama::realtime::PartyClose::MergeFrom(from._internal_party_close());
      break;
    }
    case kPartyJoinRequestList: {
      _internal_mutable_party_join_request_list()->::nakama::realtime::PartyJoinRequestList::MergeFrom(from._internal_party_join_request_list());
      break;
    }
    case kPartyJoinRequest: {
      _internal_mutable_party_join_request()->::nakama::realtime::PartyJoinRequest::MergeFrom(from._internal_party_join_request());
      break;
    }
    case kPartyMatchmakerAdd: {
      _internal_mutable_party_matchmaker_add()->::nakama::realtime::PartyMatchmakerAdd::MergeFrom(from._internal_party_matchmaker_add());
      break;
    }
    case kPartyMatchmakerRemove: {
      _internal_mutable_party_matchmaker_remove()->::nakama::realtime::PartyMatchmakerRemove::MergeFrom(from._internal_party_matchmaker_remove());
      break;
    }
    case kPartyMatchmakerTicket: {
      _internal_mutable_party_matchmaker_ticket()->::nakama::realtime::PartyMatchmakerTicket::MergeFrom(from._internal_party_matchmaker_ticket());
      break;
    }
    case kPartyData: {
      _internal_mutable_party_data()->::nakama::realtime::PartyData::MergeFrom(from._internal_party_data());
      break;
    }
    case kPartyDataSend: {
      _internal_mutable_party_data_send()->::nakama::realtime::PartyDataSend::MergeFrom(from._internal_party_data_send());
      break;
    }
    case kPartyPresenceEvent: {
      _internal_mutable_party_presence_event()->::nakama::realtime::PartyPresenceEvent::MergeFrom(from._internal_party_presence_event());
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
}

void Envelope::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.realtime.Envelope)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Envelope::CopyFrom(const Envelope& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.realtime.Envelope)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Envelope::IsInitialized() const {
  return true;
}

void Envelope::InternalSwap(Envelope* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  cid_.Swap(&other->cid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(message_, other->message_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Envelope::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Channel::_Internal {
 public:
  static const ::nakama::realtime::UserPresence& self(const Channel* msg);
};

const ::nakama::realtime::UserPresence&
Channel::_Internal::self(const Channel* msg) {
  return *msg->self_;
}
Channel::Channel(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  presences_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nakama.realtime.Channel)
}
Channel::Channel(const Channel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      presences_(from.presences_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArena());
  }
  room_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_room_name().empty()) {
    room_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_room_name(), 
      GetArena());
  }
  group_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_group_id().empty()) {
    group_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_group_id(), 
      GetArena());
  }
  user_id_one_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_id_one().empty()) {
    user_id_one_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_user_id_one(), 
      GetArena());
  }
  user_id_two_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_id_two().empty()) {
    user_id_two_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_user_id_two(), 
      GetArena());
  }
  if (from._internal_has_self()) {
    self_ = new ::nakama::realtime::UserPresence(*from.self_);
  } else {
    self_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:nakama.realtime.Channel)
}

void Channel::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Channel_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  room_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  group_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_id_one_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_id_two_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  self_ = nullptr;
}

Channel::~Channel() {
  // @@protoc_insertion_point(destructor:nakama.realtime.Channel)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Channel::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  room_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  group_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_id_one_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_id_two_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete self_;
}

void Channel::ArenaDtor(void* object) {
  Channel* _this = reinterpret_cast< Channel* >(object);
  (void)_this;
}
void Channel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Channel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Channel& Channel::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Channel_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base);
  return *internal_default_instance();
}


void Channel::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.realtime.Channel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  presences_.Clear();
  id_.ClearToEmpty();
  room_name_.ClearToEmpty();
  group_id_.ClearToEmpty();
  user_id_one_.ClearToEmpty();
  user_id_two_.ClearToEmpty();
  if (GetArena() == nullptr && self_ != nullptr) {
    delete self_;
  }
  self_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Channel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.realtime.Channel.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .nakama.realtime.UserPresence presences = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_presences(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // .nakama.realtime.UserPresence self = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_self(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string room_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_room_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.realtime.Channel.room_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string group_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_group_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.realtime.Channel.group_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string user_id_one = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_user_id_one();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.realtime.Channel.user_id_one"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string user_id_two = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_user_id_two();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.realtime.Channel.user_id_two"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Channel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nakama.realtime.Channel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.realtime.Channel.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // repeated .nakama.realtime.UserPresence presences = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_presences_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_presences(i), target, stream);
  }

  // .nakama.realtime.UserPresence self = 3;
  if (this->has_self()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::self(this), target, stream);
  }

  // string room_name = 4;
  if (this->room_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_room_name().data(), static_cast<int>(this->_internal_room_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.realtime.Channel.room_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_room_name(), target);
  }

  // string group_id = 5;
  if (this->group_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_group_id().data(), static_cast<int>(this->_internal_group_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.realtime.Channel.group_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_group_id(), target);
  }

  // string user_id_one = 6;
  if (this->user_id_one().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id_one().data(), static_cast<int>(this->_internal_user_id_one().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.realtime.Channel.user_id_one");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_user_id_one(), target);
  }

  // string user_id_two = 7;
  if (this->user_id_two().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id_two().data(), static_cast<int>(this->_internal_user_id_two().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.realtime.Channel.user_id_two");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_user_id_two(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.realtime.Channel)
  return target;
}

size_t Channel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.realtime.Channel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .nakama.realtime.UserPresence presences = 2;
  total_size += 1UL * this->_internal_presences_size();
  for (const auto& msg : this->presences_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string room_name = 4;
  if (this->room_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_room_name());
  }

  // string group_id = 5;
  if (this->group_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_group_id());
  }

  // string user_id_one = 6;
  if (this->user_id_one().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id_one());
  }

  // string user_id_two = 7;
  if (this->user_id_two().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id_two());
  }

  // .nakama.realtime.UserPresence self = 3;
  if (this->has_self()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *self_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Channel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.realtime.Channel)
  GOOGLE_DCHECK_NE(&from, this);
  const Channel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Channel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.realtime.Channel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.realtime.Channel)
    MergeFrom(*source);
  }
}

void Channel::MergeFrom(const Channel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.realtime.Channel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  presences_.MergeFrom(from.presences_);
  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.room_name().size() > 0) {
    _internal_set_room_name(from._internal_room_name());
  }
  if (from.group_id().size() > 0) {
    _internal_set_group_id(from._internal_group_id());
  }
  if (from.user_id_one().size() > 0) {
    _internal_set_user_id_one(from._internal_user_id_one());
  }
  if (from.user_id_two().size() > 0) {
    _internal_set_user_id_two(from._internal_user_id_two());
  }
  if (from.has_self()) {
    _internal_mutable_self()->::nakama::realtime::UserPresence::MergeFrom(from._internal_self());
  }
}

void Channel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.realtime.Channel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Channel::CopyFrom(const Channel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.realtime.Channel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Channel::IsInitialized() const {
  return true;
}

void Channel::InternalSwap(Channel* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  presences_.InternalSwap(&other->presences_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  room_name_.Swap(&other->room_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  group_id_.Swap(&other->group_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_id_one_.Swap(&other->user_id_one_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_id_two_.Swap(&other->user_id_two_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(self_, other->self_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Channel::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ChannelJoin::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::BoolValue& persistence(const ChannelJoin* msg);
  static const PROTOBUF_NAMESPACE_ID::BoolValue& hidden(const ChannelJoin* msg);
};

const PROTOBUF_NAMESPACE_ID::BoolValue&
ChannelJoin::_Internal::persistence(const ChannelJoin* msg) {
  return *msg->persistence_;
}
const PROTOBUF_NAMESPACE_ID::BoolValue&
ChannelJoin::_Internal::hidden(const ChannelJoin* msg) {
  return *msg->hidden_;
}
void ChannelJoin::clear_persistence() {
  if (GetArena() == nullptr && persistence_ != nullptr) {
    delete persistence_;
  }
  persistence_ = nullptr;
}
void ChannelJoin::clear_hidden() {
  if (GetArena() == nullptr && hidden_ != nullptr) {
    delete hidden_;
  }
  hidden_ = nullptr;
}
ChannelJoin::ChannelJoin(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nakama.realtime.ChannelJoin)
}
ChannelJoin::ChannelJoin(const ChannelJoin& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  target_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_target().empty()) {
    target_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_target(), 
      GetArena());
  }
  if (from._internal_has_persistence()) {
    persistence_ = new PROTOBUF_NAMESPACE_ID::BoolValue(*from.persistence_);
  } else {
    persistence_ = nullptr;
  }
  if (from._internal_has_hidden()) {
    hidden_ = new PROTOBUF_NAMESPACE_ID::BoolValue(*from.hidden_);
  } else {
    hidden_ = nullptr;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:nakama.realtime.ChannelJoin)
}

void ChannelJoin::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChannelJoin_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base);
  target_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&persistence_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&persistence_)) + sizeof(type_));
}

ChannelJoin::~ChannelJoin() {
  // @@protoc_insertion_point(destructor:nakama.realtime.ChannelJoin)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChannelJoin::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  target_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete persistence_;
  if (this != internal_default_instance()) delete hidden_;
}

void ChannelJoin::ArenaDtor(void* object) {
  ChannelJoin* _this = reinterpret_cast< ChannelJoin* >(object);
  (void)_this;
}
void ChannelJoin::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChannelJoin::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChannelJoin& ChannelJoin::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChannelJoin_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base);
  return *internal_default_instance();
}


void ChannelJoin::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.realtime.ChannelJoin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  target_.ClearToEmpty();
  if (GetArena() == nullptr && persistence_ != nullptr) {
    delete persistence_;
  }
  persistence_ = nullptr;
  if (GetArena() == nullptr && hidden_ != nullptr) {
    delete hidden_;
  }
  hidden_ = nullptr;
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChannelJoin::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string target = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_target();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.realtime.ChannelJoin.target"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.BoolValue persistence = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_persistence(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.BoolValue hidden = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_hidden(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChannelJoin::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nakama.realtime.ChannelJoin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string target = 1;
  if (this->target().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_target().data(), static_cast<int>(this->_internal_target().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.realtime.ChannelJoin.target");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_target(), target);
  }

  // int32 type = 2;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_type(), target);
  }

  // .google.protobuf.BoolValue persistence = 3;
  if (this->has_persistence()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::persistence(this), target, stream);
  }

  // .google.protobuf.BoolValue hidden = 4;
  if (this->has_hidden()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::hidden(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.realtime.ChannelJoin)
  return target;
}

size_t ChannelJoin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.realtime.ChannelJoin)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string target = 1;
  if (this->target().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_target());
  }

  // .google.protobuf.BoolValue persistence = 3;
  if (this->has_persistence()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *persistence_);
  }

  // .google.protobuf.BoolValue hidden = 4;
  if (this->has_hidden()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hidden_);
  }

  // int32 type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChannelJoin::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.realtime.ChannelJoin)
  GOOGLE_DCHECK_NE(&from, this);
  const ChannelJoin* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChannelJoin>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.realtime.ChannelJoin)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.realtime.ChannelJoin)
    MergeFrom(*source);
  }
}

void ChannelJoin::MergeFrom(const ChannelJoin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.realtime.ChannelJoin)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.target().size() > 0) {
    _internal_set_target(from._internal_target());
  }
  if (from.has_persistence()) {
    _internal_mutable_persistence()->PROTOBUF_NAMESPACE_ID::BoolValue::MergeFrom(from._internal_persistence());
  }
  if (from.has_hidden()) {
    _internal_mutable_hidden()->PROTOBUF_NAMESPACE_ID::BoolValue::MergeFrom(from._internal_hidden());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void ChannelJoin::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.realtime.ChannelJoin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChannelJoin::CopyFrom(const ChannelJoin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.realtime.ChannelJoin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelJoin::IsInitialized() const {
  return true;
}

void ChannelJoin::InternalSwap(ChannelJoin* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  target_.Swap(&other->target_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChannelJoin, type_)
      + sizeof(ChannelJoin::type_)
      - PROTOBUF_FIELD_OFFSET(ChannelJoin, persistence_)>(
          reinterpret_cast<char*>(&persistence_),
          reinterpret_cast<char*>(&other->persistence_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChannelJoin::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ChannelLeave::_Internal {
 public:
};

ChannelLeave::ChannelLeave(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nakama.realtime.ChannelLeave)
}
ChannelLeave::ChannelLeave(const ChannelLeave& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  channel_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_channel_id().empty()) {
    channel_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_channel_id(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:nakama.realtime.ChannelLeave)
}

void ChannelLeave::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChannelLeave_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base);
  channel_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ChannelLeave::~ChannelLeave() {
  // @@protoc_insertion_point(destructor:nakama.realtime.ChannelLeave)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChannelLeave::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  channel_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ChannelLeave::ArenaDtor(void* object) {
  ChannelLeave* _this = reinterpret_cast< ChannelLeave* >(object);
  (void)_this;
}
void ChannelLeave::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChannelLeave::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChannelLeave& ChannelLeave::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChannelLeave_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base);
  return *internal_default_instance();
}


void ChannelLeave::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.realtime.ChannelLeave)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channel_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChannelLeave::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string channel_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_channel_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.realtime.ChannelLeave.channel_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChannelLeave::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nakama.realtime.ChannelLeave)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string channel_id = 1;
  if (this->channel_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_channel_id().data(), static_cast<int>(this->_internal_channel_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.realtime.ChannelLeave.channel_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_channel_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.realtime.ChannelLeave)
  return target;
}

size_t ChannelLeave::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.realtime.ChannelLeave)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string channel_id = 1;
  if (this->channel_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_channel_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChannelLeave::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.realtime.ChannelLeave)
  GOOGLE_DCHECK_NE(&from, this);
  const ChannelLeave* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChannelLeave>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.realtime.ChannelLeave)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.realtime.ChannelLeave)
    MergeFrom(*source);
  }
}

void ChannelLeave::MergeFrom(const ChannelLeave& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.realtime.ChannelLeave)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.channel_id().size() > 0) {
    _internal_set_channel_id(from._internal_channel_id());
  }
}

void ChannelLeave::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.realtime.ChannelLeave)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChannelLeave::CopyFrom(const ChannelLeave& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.realtime.ChannelLeave)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelLeave::IsInitialized() const {
  return true;
}

void ChannelLeave::InternalSwap(ChannelLeave* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  channel_id_.Swap(&other->channel_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ChannelLeave::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ChannelMessageAck::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Int32Value& code(const ChannelMessageAck* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& create_time(const ChannelMessageAck* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& update_time(const ChannelMessageAck* msg);
  static const PROTOBUF_NAMESPACE_ID::BoolValue& persistent(const ChannelMessageAck* msg);
};

const PROTOBUF_NAMESPACE_ID::Int32Value&
ChannelMessageAck::_Internal::code(const ChannelMessageAck* msg) {
  return *msg->code_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
ChannelMessageAck::_Internal::create_time(const ChannelMessageAck* msg) {
  return *msg->create_time_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
ChannelMessageAck::_Internal::update_time(const ChannelMessageAck* msg) {
  return *msg->update_time_;
}
const PROTOBUF_NAMESPACE_ID::BoolValue&
ChannelMessageAck::_Internal::persistent(const ChannelMessageAck* msg) {
  return *msg->persistent_;
}
void ChannelMessageAck::clear_code() {
  if (GetArena() == nullptr && code_ != nullptr) {
    delete code_;
  }
  code_ = nullptr;
}
void ChannelMessageAck::clear_create_time() {
  if (GetArena() == nullptr && create_time_ != nullptr) {
    delete create_time_;
  }
  create_time_ = nullptr;
}
void ChannelMessageAck::clear_update_time() {
  if (GetArena() == nullptr && update_time_ != nullptr) {
    delete update_time_;
  }
  update_time_ = nullptr;
}
void ChannelMessageAck::clear_persistent() {
  if (GetArena() == nullptr && persistent_ != nullptr) {
    delete persistent_;
  }
  persistent_ = nullptr;
}
ChannelMessageAck::ChannelMessageAck(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nakama.realtime.ChannelMessageAck)
}
ChannelMessageAck::ChannelMessageAck(const ChannelMessageAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  channel_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_channel_id().empty()) {
    channel_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_channel_id(), 
      GetArena());
  }
  message_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message_id().empty()) {
    message_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message_id(), 
      GetArena());
  }
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_username().empty()) {
    username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_username(), 
      GetArena());
  }
  room_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_room_name().empty()) {
    room_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_room_name(), 
      GetArena());
  }
  group_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_group_id().empty()) {
    group_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_group_id(), 
      GetArena());
  }
  user_id_one_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_id_one().empty()) {
    user_id_one_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_user_id_one(), 
      GetArena());
  }
  user_id_two_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_id_two().empty()) {
    user_id_two_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_user_id_two(), 
      GetArena());
  }
  if (from._internal_has_code()) {
    code_ = new PROTOBUF_NAMESPACE_ID::Int32Value(*from.code_);
  } else {
    code_ = nullptr;
  }
  if (from._internal_has_create_time()) {
    create_time_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.create_time_);
  } else {
    create_time_ = nullptr;
  }
  if (from._internal_has_update_time()) {
    update_time_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.update_time_);
  } else {
    update_time_ = nullptr;
  }
  if (from._internal_has_persistent()) {
    persistent_ = new PROTOBUF_NAMESPACE_ID::BoolValue(*from.persistent_);
  } else {
    persistent_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:nakama.realtime.ChannelMessageAck)
}

void ChannelMessageAck::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChannelMessageAck_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base);
  channel_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  room_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  group_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_id_one_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_id_two_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&code_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&persistent_) -
      reinterpret_cast<char*>(&code_)) + sizeof(persistent_));
}

ChannelMessageAck::~ChannelMessageAck() {
  // @@protoc_insertion_point(destructor:nakama.realtime.ChannelMessageAck)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChannelMessageAck::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  channel_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  room_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  group_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_id_one_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_id_two_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete code_;
  if (this != internal_default_instance()) delete create_time_;
  if (this != internal_default_instance()) delete update_time_;
  if (this != internal_default_instance()) delete persistent_;
}

void ChannelMessageAck::ArenaDtor(void* object) {
  ChannelMessageAck* _this = reinterpret_cast< ChannelMessageAck* >(object);
  (void)_this;
}
void ChannelMessageAck::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChannelMessageAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChannelMessageAck& ChannelMessageAck::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChannelMessageAck_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base);
  return *internal_default_instance();
}


void ChannelMessageAck::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.realtime.ChannelMessageAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channel_id_.ClearToEmpty();
  message_id_.ClearToEmpty();
  username_.ClearToEmpty();
  room_name_.ClearToEmpty();
  group_id_.ClearToEmpty();
  user_id_one_.ClearToEmpty();
  user_id_two_.ClearToEmpty();
  if (GetArena() == nullptr && code_ != nullptr) {
    delete code_;
  }
  code_ = nullptr;
  if (GetArena() == nullptr && create_time_ != nullptr) {
    delete create_time_;
  }
  create_time_ = nullptr;
  if (GetArena() == nullptr && update_time_ != nullptr) {
    delete update_time_;
  }
  update_time_ = nullptr;
  if (GetArena() == nullptr && persistent_ != nullptr) {
    delete persistent_;
  }
  persistent_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChannelMessageAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string channel_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_channel_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.realtime.ChannelMessageAck.channel_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string message_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_message_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.realtime.ChannelMessageAck.message_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Int32Value code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_code(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string username = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.realtime.ChannelMessageAck.username"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp create_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_create_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp update_time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_update_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.BoolValue persistent = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_persistent(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string room_name = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_room_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.realtime.ChannelMessageAck.room_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string group_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_group_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.realtime.ChannelMessageAck.group_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string user_id_one = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_user_id_one();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.realtime.ChannelMessageAck.user_id_one"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string user_id_two = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_user_id_two();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.realtime.ChannelMessageAck.user_id_two"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChannelMessageAck::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nakama.realtime.ChannelMessageAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string channel_id = 1;
  if (this->channel_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_channel_id().data(), static_cast<int>(this->_internal_channel_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.realtime.ChannelMessageAck.channel_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_channel_id(), target);
  }

  // string message_id = 2;
  if (this->message_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message_id().data(), static_cast<int>(this->_internal_message_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.realtime.ChannelMessageAck.message_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message_id(), target);
  }

  // .google.protobuf.Int32Value code = 3;
  if (this->has_code()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::code(this), target, stream);
  }

  // string username = 4;
  if (this->username().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.realtime.ChannelMessageAck.username");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_username(), target);
  }

  // .google.protobuf.Timestamp create_time = 5;
  if (this->has_create_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::create_time(this), target, stream);
  }

  // .google.protobuf.Timestamp update_time = 6;
  if (this->has_update_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::update_time(this), target, stream);
  }

  // .google.protobuf.BoolValue persistent = 7;
  if (this->has_persistent()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::persistent(this), target, stream);
  }

  // string room_name = 8;
  if (this->room_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_room_name().data(), static_cast<int>(this->_internal_room_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.realtime.ChannelMessageAck.room_name");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_room_name(), target);
  }

  // string group_id = 9;
  if (this->group_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_group_id().data(), static_cast<int>(this->_internal_group_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.realtime.ChannelMessageAck.group_id");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_group_id(), target);
  }

  // string user_id_one = 10;
  if (this->user_id_one().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id_one().data(), static_cast<int>(this->_internal_user_id_one().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.realtime.ChannelMessageAck.user_id_one");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_user_id_one(), target);
  }

  // string user_id_two = 11;
  if (this->user_id_two().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id_two().data(), static_cast<int>(this->_internal_user_id_two().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.realtime.ChannelMessageAck.user_id_two");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_user_id_two(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.realtime.ChannelMessageAck)
  return target;
}

size_t ChannelMessageAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.realtime.ChannelMessageAck)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string channel_id = 1;
  if (this->channel_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_channel_id());
  }

  // string message_id = 2;
  if (this->message_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message_id());
  }

  // string username = 4;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  // string room_name = 8;
  if (this->room_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_room_name());
  }

  // string group_id = 9;
  if (this->group_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_group_id());
  }

  // string user_id_one = 10;
  if (this->user_id_one().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id_one());
  }

  // string user_id_two = 11;
  if (this->user_id_two().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id_two());
  }

  // .google.protobuf.Int32Value code = 3;
  if (this->has_code()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *code_);
  }

  // .google.protobuf.Timestamp create_time = 5;
  if (this->has_create_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *create_time_);
  }

  // .google.protobuf.Timestamp update_time = 6;
  if (this->has_update_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *update_time_);
  }

  // .google.protobuf.BoolValue persistent = 7;
  if (this->has_persistent()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *persistent_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChannelMessageAck::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.realtime.ChannelMessageAck)
  GOOGLE_DCHECK_NE(&from, this);
  const ChannelMessageAck* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChannelMessageAck>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.realtime.ChannelMessageAck)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.realtime.ChannelMessageAck)
    MergeFrom(*source);
  }
}

void ChannelMessageAck::MergeFrom(const ChannelMessageAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.realtime.ChannelMessageAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.channel_id().size() > 0) {
    _internal_set_channel_id(from._internal_channel_id());
  }
  if (from.message_id().size() > 0) {
    _internal_set_message_id(from._internal_message_id());
  }
  if (from.username().size() > 0) {
    _internal_set_username(from._internal_username());
  }
  if (from.room_name().size() > 0) {
    _internal_set_room_name(from._internal_room_name());
  }
  if (from.group_id().size() > 0) {
    _internal_set_group_id(from._internal_group_id());
  }
  if (from.user_id_one().size() > 0) {
    _internal_set_user_id_one(from._internal_user_id_one());
  }
  if (from.user_id_two().size() > 0) {
    _internal_set_user_id_two(from._internal_user_id_two());
  }
  if (from.has_code()) {
    _internal_mutable_code()->PROTOBUF_NAMESPACE_ID::Int32Value::MergeFrom(from._internal_code());
  }
  if (from.has_create_time()) {
    _internal_mutable_create_time()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_create_time());
  }
  if (from.has_update_time()) {
    _internal_mutable_update_time()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_update_time());
  }
  if (from.has_persistent()) {
    _internal_mutable_persistent()->PROTOBUF_NAMESPACE_ID::BoolValue::MergeFrom(from._internal_persistent());
  }
}

void ChannelMessageAck::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.realtime.ChannelMessageAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChannelMessageAck::CopyFrom(const ChannelMessageAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.realtime.ChannelMessageAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelMessageAck::IsInitialized() const {
  return true;
}

void ChannelMessageAck::InternalSwap(ChannelMessageAck* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  channel_id_.Swap(&other->channel_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  message_id_.Swap(&other->message_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  username_.Swap(&other->username_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  room_name_.Swap(&other->room_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  group_id_.Swap(&other->group_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_id_one_.Swap(&other->user_id_one_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_id_two_.Swap(&other->user_id_two_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChannelMessageAck, persistent_)
      + sizeof(ChannelMessageAck::persistent_)
      - PROTOBUF_FIELD_OFFSET(ChannelMessageAck, code_)>(
          reinterpret_cast<char*>(&code_),
          reinterpret_cast<char*>(&other->code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChannelMessageAck::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ChannelMessageSend::_Internal {
 public:
};

ChannelMessageSend::ChannelMessageSend(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nakama.realtime.ChannelMessageSend)
}
ChannelMessageSend::ChannelMessageSend(const ChannelMessageSend& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  channel_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_channel_id().empty()) {
    channel_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_channel_id(), 
      GetArena());
  }
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_content().empty()) {
    content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_content(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:nakama.realtime.ChannelMessageSend)
}

void ChannelMessageSend::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChannelMessageSend_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base);
  channel_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ChannelMessageSend::~ChannelMessageSend() {
  // @@protoc_insertion_point(destructor:nakama.realtime.ChannelMessageSend)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChannelMessageSend::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  channel_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  content_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ChannelMessageSend::ArenaDtor(void* object) {
  ChannelMessageSend* _this = reinterpret_cast< ChannelMessageSend* >(object);
  (void)_this;
}
void ChannelMessageSend::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChannelMessageSend::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChannelMessageSend& ChannelMessageSend::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChannelMessageSend_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base);
  return *internal_default_instance();
}


void ChannelMessageSend::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.realtime.ChannelMessageSend)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channel_id_.ClearToEmpty();
  content_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChannelMessageSend::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string channel_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_channel_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.realtime.ChannelMessageSend.channel_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string content = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_content();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.realtime.ChannelMessageSend.content"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChannelMessageSend::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nakama.realtime.ChannelMessageSend)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string channel_id = 1;
  if (this->channel_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_channel_id().data(), static_cast<int>(this->_internal_channel_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.realtime.ChannelMessageSend.channel_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_channel_id(), target);
  }

  // string content = 2;
  if (this->content().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content().data(), static_cast<int>(this->_internal_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.realtime.ChannelMessageSend.content");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_content(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.realtime.ChannelMessageSend)
  return target;
}

size_t ChannelMessageSend::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.realtime.ChannelMessageSend)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string channel_id = 1;
  if (this->channel_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_channel_id());
  }

  // string content = 2;
  if (this->content().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChannelMessageSend::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.realtime.ChannelMessageSend)
  GOOGLE_DCHECK_NE(&from, this);
  const ChannelMessageSend* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChannelMessageSend>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.realtime.ChannelMessageSend)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.realtime.ChannelMessageSend)
    MergeFrom(*source);
  }
}

void ChannelMessageSend::MergeFrom(const ChannelMessageSend& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.realtime.ChannelMessageSend)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.channel_id().size() > 0) {
    _internal_set_channel_id(from._internal_channel_id());
  }
  if (from.content().size() > 0) {
    _internal_set_content(from._internal_content());
  }
}

void ChannelMessageSend::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.realtime.ChannelMessageSend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChannelMessageSend::CopyFrom(const ChannelMessageSend& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.realtime.ChannelMessageSend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelMessageSend::IsInitialized() const {
  return true;
}

void ChannelMessageSend::InternalSwap(ChannelMessageSend* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  channel_id_.Swap(&other->channel_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  content_.Swap(&other->content_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ChannelMessageSend::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ChannelMessageUpdate::_Internal {
 public:
};

ChannelMessageUpdate::ChannelMessageUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nakama.realtime.ChannelMessageUpdate)
}
ChannelMessageUpdate::ChannelMessageUpdate(const ChannelMessageUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  channel_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_channel_id().empty()) {
    channel_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_channel_id(), 
      GetArena());
  }
  message_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message_id().empty()) {
    message_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message_id(), 
      GetArena());
  }
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_content().empty()) {
    content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_content(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:nakama.realtime.ChannelMessageUpdate)
}

void ChannelMessageUpdate::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChannelMessageUpdate_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base);
  channel_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ChannelMessageUpdate::~ChannelMessageUpdate() {
  // @@protoc_insertion_point(destructor:nakama.realtime.ChannelMessageUpdate)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChannelMessageUpdate::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  channel_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  content_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ChannelMessageUpdate::ArenaDtor(void* object) {
  ChannelMessageUpdate* _this = reinterpret_cast< ChannelMessageUpdate* >(object);
  (void)_this;
}
void ChannelMessageUpdate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChannelMessageUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChannelMessageUpdate& ChannelMessageUpdate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChannelMessageUpdate_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base);
  return *internal_default_instance();
}


void ChannelMessageUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.realtime.ChannelMessageUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channel_id_.ClearToEmpty();
  message_id_.ClearToEmpty();
  content_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChannelMessageUpdate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string channel_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_channel_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.realtime.ChannelMessageUpdate.channel_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string message_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_message_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.realtime.ChannelMessageUpdate.message_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string content = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_content();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.realtime.ChannelMessageUpdate.content"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChannelMessageUpdate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nakama.realtime.ChannelMessageUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string channel_id = 1;
  if (this->channel_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_channel_id().data(), static_cast<int>(this->_internal_channel_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.realtime.ChannelMessageUpdate.channel_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_channel_id(), target);
  }

  // string message_id = 2;
  if (this->message_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message_id().data(), static_cast<int>(this->_internal_message_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.realtime.ChannelMessageUpdate.message_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message_id(), target);
  }

  // string content = 3;
  if (this->content().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content().data(), static_cast<int>(this->_internal_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.realtime.ChannelMessageUpdate.content");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_content(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.realtime.ChannelMessageUpdate)
  return target;
}

size_t ChannelMessageUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.realtime.ChannelMessageUpdate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string channel_id = 1;
  if (this->channel_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_channel_id());
  }

  // string message_id = 2;
  if (this->message_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message_id());
  }

  // string content = 3;
  if (this->content().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChannelMessageUpdate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.realtime.ChannelMessageUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  const ChannelMessageUpdate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChannelMessageUpdate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.realtime.ChannelMessageUpdate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.realtime.ChannelMessageUpdate)
    MergeFrom(*source);
  }
}

void ChannelMessageUpdate::MergeFrom(const ChannelMessageUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.realtime.ChannelMessageUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.channel_id().size() > 0) {
    _internal_set_channel_id(from._internal_channel_id());
  }
  if (from.message_id().size() > 0) {
    _internal_set_message_id(from._internal_message_id());
  }
  if (from.content().size() > 0) {
    _internal_set_content(from._internal_content());
  }
}

void ChannelMessageUpdate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.realtime.ChannelMessageUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChannelMessageUpdate::CopyFrom(const ChannelMessageUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.realtime.ChannelMessageUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelMessageUpdate::IsInitialized() const {
  return true;
}

void ChannelMessageUpdate::InternalSwap(ChannelMessageUpdate* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  channel_id_.Swap(&other->channel_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  message_id_.Swap(&other->message_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  content_.Swap(&other->content_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ChannelMessageUpdate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ChannelMessageRemove::_Internal {
 public:
};

ChannelMessageRemove::ChannelMessageRemove(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nakama.realtime.ChannelMessageRemove)
}
ChannelMessageRemove::ChannelMessageRemove(const ChannelMessageRemove& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  channel_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_channel_id().empty()) {
    channel_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_channel_id(), 
      GetArena());
  }
  message_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message_id().empty()) {
    message_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message_id(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:nakama.realtime.ChannelMessageRemove)
}

void ChannelMessageRemove::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChannelMessageRemove_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base);
  channel_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ChannelMessageRemove::~ChannelMessageRemove() {
  // @@protoc_insertion_point(destructor:nakama.realtime.ChannelMessageRemove)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChannelMessageRemove::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  channel_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ChannelMessageRemove::ArenaDtor(void* object) {
  ChannelMessageRemove* _this = reinterpret_cast< ChannelMessageRemove* >(object);
  (void)_this;
}
void ChannelMessageRemove::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChannelMessageRemove::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChannelMessageRemove& ChannelMessageRemove::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChannelMessageRemove_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base);
  return *internal_default_instance();
}


void ChannelMessageRemove::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.realtime.ChannelMessageRemove)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channel_id_.ClearToEmpty();
  message_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChannelMessageRemove::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string channel_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_channel_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.realtime.ChannelMessageRemove.channel_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string message_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_message_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.realtime.ChannelMessageRemove.message_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChannelMessageRemove::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nakama.realtime.ChannelMessageRemove)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string channel_id = 1;
  if (this->channel_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_channel_id().data(), static_cast<int>(this->_internal_channel_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.realtime.ChannelMessageRemove.channel_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_channel_id(), target);
  }

  // string message_id = 2;
  if (this->message_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message_id().data(), static_cast<int>(this->_internal_message_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.realtime.ChannelMessageRemove.message_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.realtime.ChannelMessageRemove)
  return target;
}

size_t ChannelMessageRemove::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.realtime.ChannelMessageRemove)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string channel_id = 1;
  if (this->channel_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_channel_id());
  }

  // string message_id = 2;
  if (this->message_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChannelMessageRemove::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.realtime.ChannelMessageRemove)
  GOOGLE_DCHECK_NE(&from, this);
  const ChannelMessageRemove* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChannelMessageRemove>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.realtime.ChannelMessageRemove)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.realtime.ChannelMessageRemove)
    MergeFrom(*source);
  }
}

void ChannelMessageRemove::MergeFrom(const ChannelMessageRemove& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.realtime.ChannelMessageRemove)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.channel_id().size() > 0) {
    _internal_set_channel_id(from._internal_channel_id());
  }
  if (from.message_id().size() > 0) {
    _internal_set_message_id(from._internal_message_id());
  }
}

void ChannelMessageRemove::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.realtime.ChannelMessageRemove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChannelMessageRemove::CopyFrom(const ChannelMessageRemove& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.realtime.ChannelMessageRemove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelMessageRemove::IsInitialized() const {
  return true;
}

void ChannelMessageRemove::InternalSwap(ChannelMessageRemove* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  channel_id_.Swap(&other->channel_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  message_id_.Swap(&other->message_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ChannelMessageRemove::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ChannelPresenceEvent::_Internal {
 public:
};

ChannelPresenceEvent::ChannelPresenceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  joins_(arena),
  leaves_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nakama.realtime.ChannelPresenceEvent)
}
ChannelPresenceEvent::ChannelPresenceEvent(const ChannelPresenceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      joins_(from.joins_),
      leaves_(from.leaves_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  channel_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_channel_id().empty()) {
    channel_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_channel_id(), 
      GetArena());
  }
  room_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_room_name().empty()) {
    room_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_room_name(), 
      GetArena());
  }
  group_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_group_id().empty()) {
    group_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_group_id(), 
      GetArena());
  }
  user_id_one_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_id_one().empty()) {
    user_id_one_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_user_id_one(), 
      GetArena());
  }
  user_id_two_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_id_two().empty()) {
    user_id_two_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_user_id_two(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:nakama.realtime.ChannelPresenceEvent)
}

void ChannelPresenceEvent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChannelPresenceEvent_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base);
  channel_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  room_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  group_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_id_one_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_id_two_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ChannelPresenceEvent::~ChannelPresenceEvent() {
  // @@protoc_insertion_point(destructor:nakama.realtime.ChannelPresenceEvent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChannelPresenceEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  channel_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  room_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  group_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_id_one_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_id_two_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ChannelPresenceEvent::ArenaDtor(void* object) {
  ChannelPresenceEvent* _this = reinterpret_cast< ChannelPresenceEvent* >(object);
  (void)_this;
}
void ChannelPresenceEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChannelPresenceEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChannelPresenceEvent& ChannelPresenceEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChannelPresenceEvent_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base);
  return *internal_default_instance();
}


void ChannelPresenceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.realtime.ChannelPresenceEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  joins_.Clear();
  leaves_.Clear();
  channel_id_.ClearToEmpty();
  room_name_.ClearToEmpty();
  group_id_.ClearToEmpty();
  user_id_one_.ClearToEmpty();
  user_id_two_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChannelPresenceEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string channel_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_channel_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.realtime.ChannelPresenceEvent.channel_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .nakama.realtime.UserPresence joins = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_joins(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .nakama.realtime.UserPresence leaves = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_leaves(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // string room_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_room_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.realtime.ChannelPresenceEvent.room_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string group_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_group_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.realtime.ChannelPresenceEvent.group_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string user_id_one = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_user_id_one();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.realtime.ChannelPresenceEvent.user_id_one"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string user_id_two = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_user_id_two();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.realtime.ChannelPresenceEvent.user_id_two"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChannelPresenceEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nakama.realtime.ChannelPresenceEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string channel_id = 1;
  if (this->channel_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_channel_id().data(), static_cast<int>(this->_internal_channel_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.realtime.ChannelPresenceEvent.channel_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_channel_id(), target);
  }

  // repeated .nakama.realtime.UserPresence joins = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_joins_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_joins(i), target, stream);
  }

  // repeated .nakama.realtime.UserPresence leaves = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_leaves_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_leaves(i), target, stream);
  }

  // string room_name = 4;
  if (this->room_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_room_name().data(), static_cast<int>(this->_internal_room_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.realtime.ChannelPresenceEvent.room_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_room_name(), target);
  }

  // string group_id = 5;
  if (this->group_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_group_id().data(), static_cast<int>(this->_internal_group_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.realtime.ChannelPresenceEvent.group_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_group_id(), target);
  }

  // string user_id_one = 6;
  if (this->user_id_one().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id_one().data(), static_cast<int>(this->_internal_user_id_one().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.realtime.ChannelPresenceEvent.user_id_one");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_user_id_one(), target);
  }

  // string user_id_two = 7;
  if (this->user_id_two().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id_two().data(), static_cast<int>(this->_internal_user_id_two().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.realtime.ChannelPresenceEvent.user_id_two");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_user_id_two(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.realtime.ChannelPresenceEvent)
  return target;
}

size_t ChannelPresenceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.realtime.ChannelPresenceEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .nakama.realtime.UserPresence joins = 2;
  total_size += 1UL * this->_internal_joins_size();
  for (const auto& msg : this->joins_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .nakama.realtime.UserPresence leaves = 3;
  total_size += 1UL * this->_internal_leaves_size();
  for (const auto& msg : this->leaves_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string channel_id = 1;
  if (this->channel_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_channel_id());
  }

  // string room_name = 4;
  if (this->room_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_room_name());
  }

  // string group_id = 5;
  if (this->group_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_group_id());
  }

  // string user_id_one = 6;
  if (this->user_id_one().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id_one());
  }

  // string user_id_two = 7;
  if (this->user_id_two().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id_two());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChannelPresenceEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.realtime.ChannelPresenceEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const ChannelPresenceEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChannelPresenceEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.realtime.ChannelPresenceEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.realtime.ChannelPresenceEvent)
    MergeFrom(*source);
  }
}

void ChannelPresenceEvent::MergeFrom(const ChannelPresenceEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.realtime.ChannelPresenceEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  joins_.MergeFrom(from.joins_);
  leaves_.MergeFrom(from.leaves_);
  if (from.channel_id().size() > 0) {
    _internal_set_channel_id(from._internal_channel_id());
  }
  if (from.room_name().size() > 0) {
    _internal_set_room_name(from._internal_room_name());
  }
  if (from.group_id().size() > 0) {
    _internal_set_group_id(from._internal_group_id());
  }
  if (from.user_id_one().size() > 0) {
    _internal_set_user_id_one(from._internal_user_id_one());
  }
  if (from.user_id_two().size() > 0) {
    _internal_set_user_id_two(from._internal_user_id_two());
  }
}

void ChannelPresenceEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.realtime.ChannelPresenceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChannelPresenceEvent::CopyFrom(const ChannelPresenceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.realtime.ChannelPresenceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelPresenceEvent::IsInitialized() const {
  return true;
}

void ChannelPresenceEvent::InternalSwap(ChannelPresenceEvent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  joins_.InternalSwap(&other->joins_);
  leaves_.InternalSwap(&other->leaves_);
  channel_id_.Swap(&other->channel_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  room_name_.Swap(&other->room_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  group_id_.Swap(&other->group_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_id_one_.Swap(&other->user_id_one_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_id_two_.Swap(&other->user_id_two_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ChannelPresenceEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

Error_ContextEntry_DoNotUse::Error_ContextEntry_DoNotUse() {}
Error_ContextEntry_DoNotUse::Error_ContextEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Error_ContextEntry_DoNotUse::MergeFrom(const Error_ContextEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Error_ContextEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void Error_ContextEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

class Error::_Internal {
 public:
};

Error::Error(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  context_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nakama.realtime.Error)
}
Error::Error(const Error& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  context_.MergeFrom(from.context_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArena());
  }
  code_ = from.code_;
  // @@protoc_insertion_point(copy_constructor:nakama.realtime.Error)
}

void Error::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Error_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  code_ = 0;
}

Error::~Error() {
  // @@protoc_insertion_point(destructor:nakama.realtime.Error)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Error::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Error::ArenaDtor(void* object) {
  Error* _this = reinterpret_cast< Error* >(object);
  (void)_this;
}
void Error::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Error::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Error& Error::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Error_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base);
  return *internal_default_instance();
}


void Error::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.realtime.Error)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  context_.Clear();
  message_.ClearToEmpty();
  code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Error::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.realtime.Error.message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> context = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&context_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Error::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nakama.realtime.Error)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 code = 1;
  if (this->code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_code(), target);
  }

  // string message = 2;
  if (this->message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.realtime.Error.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  // map<string, string> context = 3;
  if (!this->_internal_context().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "nakama.realtime.Error.ContextEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "nakama.realtime.Error.ContextEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_context().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_context().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_context().begin();
          it != this->_internal_context().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Error_ContextEntry_DoNotUse::Funcs::InternalSerialize(3, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_context().begin();
          it != this->_internal_context().end(); ++it) {
        target = Error_ContextEntry_DoNotUse::Funcs::InternalSerialize(3, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.realtime.Error)
  return target;
}

size_t Error::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.realtime.Error)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> context = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_context_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_context().begin();
      it != this->_internal_context().end(); ++it) {
    total_size += Error_ContextEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string message = 2;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // int32 code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Error::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.realtime.Error)
  GOOGLE_DCHECK_NE(&from, this);
  const Error* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Error>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.realtime.Error)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.realtime.Error)
    MergeFrom(*source);
  }
}

void Error::MergeFrom(const Error& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.realtime.Error)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  context_.MergeFrom(from.context_);
  if (from.message().size() > 0) {
    _internal_set_message(from._internal_message());
  }
  if (from.code() != 0) {
    _internal_set_code(from._internal_code());
  }
}

void Error::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.realtime.Error)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Error::CopyFrom(const Error& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.realtime.Error)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Error::IsInitialized() const {
  return true;
}

void Error::InternalSwap(Error* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  context_.Swap(&other->context_);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(code_, other->code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Error::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Match::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::StringValue& label(const Match* msg);
  static const ::nakama::realtime::UserPresence& self(const Match* msg);
};

const PROTOBUF_NAMESPACE_ID::StringValue&
Match::_Internal::label(const Match* msg) {
  return *msg->label_;
}
const ::nakama::realtime::UserPresence&
Match::_Internal::self(const Match* msg) {
  return *msg->self_;
}
void Match::clear_label() {
  if (GetArena() == nullptr && label_ != nullptr) {
    delete label_;
  }
  label_ = nullptr;
}
Match::Match(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  presences_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nakama.realtime.Match)
}
Match::Match(const Match& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      presences_(from.presences_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  match_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_match_id().empty()) {
    match_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_match_id(), 
      GetArena());
  }
  if (from._internal_has_label()) {
    label_ = new PROTOBUF_NAMESPACE_ID::StringValue(*from.label_);
  } else {
    label_ = nullptr;
  }
  if (from._internal_has_self()) {
    self_ = new ::nakama::realtime::UserPresence(*from.self_);
  } else {
    self_ = nullptr;
  }
  ::memcpy(&authoritative_, &from.authoritative_,
    static_cast<size_t>(reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&authoritative_)) + sizeof(size_));
  // @@protoc_insertion_point(copy_constructor:nakama.realtime.Match)
}

void Match::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Match_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base);
  match_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&label_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&label_)) + sizeof(size_));
}

Match::~Match() {
  // @@protoc_insertion_point(destructor:nakama.realtime.Match)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Match::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  match_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete label_;
  if (this != internal_default_instance()) delete self_;
}

void Match::ArenaDtor(void* object) {
  Match* _this = reinterpret_cast< Match* >(object);
  (void)_this;
}
void Match::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Match::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Match& Match::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Match_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base);
  return *internal_default_instance();
}


void Match::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.realtime.Match)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  presences_.Clear();
  match_id_.ClearToEmpty();
  if (GetArena() == nullptr && label_ != nullptr) {
    delete label_;
  }
  label_ = nullptr;
  if (GetArena() == nullptr && self_ != nullptr) {
    delete self_;
  }
  self_ = nullptr;
  ::memset(&authoritative_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&authoritative_)) + sizeof(size_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Match::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string match_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_match_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.realtime.Match.match_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool authoritative = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          authoritative_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.StringValue label = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_label(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .nakama.realtime.UserPresence presences = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_presences(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // .nakama.realtime.UserPresence self = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_self(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Match::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nakama.realtime.Match)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string match_id = 1;
  if (this->match_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_match_id().data(), static_cast<int>(this->_internal_match_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.realtime.Match.match_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_match_id(), target);
  }

  // bool authoritative = 2;
  if (this->authoritative() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_authoritative(), target);
  }

  // .google.protobuf.StringValue label = 3;
  if (this->has_label()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::label(this), target, stream);
  }

  // int32 size = 4;
  if (this->size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_size(), target);
  }

  // repeated .nakama.realtime.UserPresence presences = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_presences_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_presences(i), target, stream);
  }

  // .nakama.realtime.UserPresence self = 6;
  if (this->has_self()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::self(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.realtime.Match)
  return target;
}

size_t Match::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.realtime.Match)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .nakama.realtime.UserPresence presences = 5;
  total_size += 1UL * this->_internal_presences_size();
  for (const auto& msg : this->presences_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string match_id = 1;
  if (this->match_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_match_id());
  }

  // .google.protobuf.StringValue label = 3;
  if (this->has_label()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *label_);
  }

  // .nakama.realtime.UserPresence self = 6;
  if (this->has_self()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *self_);
  }

  // bool authoritative = 2;
  if (this->authoritative() != 0) {
    total_size += 1 + 1;
  }

  // int32 size = 4;
  if (this->size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Match::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.realtime.Match)
  GOOGLE_DCHECK_NE(&from, this);
  const Match* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Match>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.realtime.Match)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.realtime.Match)
    MergeFrom(*source);
  }
}

void Match::MergeFrom(const Match& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.realtime.Match)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  presences_.MergeFrom(from.presences_);
  if (from.match_id().size() > 0) {
    _internal_set_match_id(from._internal_match_id());
  }
  if (from.has_label()) {
    _internal_mutable_label()->PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from._internal_label());
  }
  if (from.has_self()) {
    _internal_mutable_self()->::nakama::realtime::UserPresence::MergeFrom(from._internal_self());
  }
  if (from.authoritative() != 0) {
    _internal_set_authoritative(from._internal_authoritative());
  }
  if (from.size() != 0) {
    _internal_set_size(from._internal_size());
  }
}

void Match::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.realtime.Match)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Match::CopyFrom(const Match& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.realtime.Match)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Match::IsInitialized() const {
  return true;
}

void Match::InternalSwap(Match* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  presences_.InternalSwap(&other->presences_);
  match_id_.Swap(&other->match_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Match, size_)
      + sizeof(Match::size_)
      - PROTOBUF_FIELD_OFFSET(Match, label_)>(
          reinterpret_cast<char*>(&label_),
          reinterpret_cast<char*>(&other->label_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Match::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MatchCreate::_Internal {
 public:
};

MatchCreate::MatchCreate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nakama.realtime.MatchCreate)
}
MatchCreate::MatchCreate(const MatchCreate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:nakama.realtime.MatchCreate)
}

void MatchCreate::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MatchCreate_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MatchCreate::~MatchCreate() {
  // @@protoc_insertion_point(destructor:nakama.realtime.MatchCreate)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MatchCreate::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MatchCreate::ArenaDtor(void* object) {
  MatchCreate* _this = reinterpret_cast< MatchCreate* >(object);
  (void)_this;
}
void MatchCreate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MatchCreate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MatchCreate& MatchCreate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MatchCreate_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base);
  return *internal_default_instance();
}


void MatchCreate::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.realtime.MatchCreate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MatchCreate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.realtime.MatchCreate.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MatchCreate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nakama.realtime.MatchCreate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.realtime.MatchCreate.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.realtime.MatchCreate)
  return target;
}

size_t MatchCreate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.realtime.MatchCreate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MatchCreate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.realtime.MatchCreate)
  GOOGLE_DCHECK_NE(&from, this);
  const MatchCreate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MatchCreate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.realtime.MatchCreate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.realtime.MatchCreate)
    MergeFrom(*source);
  }
}

void MatchCreate::MergeFrom(const MatchCreate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.realtime.MatchCreate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
}

void MatchCreate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.realtime.MatchCreate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatchCreate::CopyFrom(const MatchCreate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.realtime.MatchCreate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchCreate::IsInitialized() const {
  return true;
}

void MatchCreate::InternalSwap(MatchCreate* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata MatchCreate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MatchData::_Internal {
 public:
  static const ::nakama::realtime::UserPresence& presence(const MatchData* msg);
};

const ::nakama::realtime::UserPresence&
MatchData::_Internal::presence(const MatchData* msg) {
  return *msg->presence_;
}
MatchData::MatchData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nakama.realtime.MatchData)
}
MatchData::MatchData(const MatchData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  match_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_match_id().empty()) {
    match_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_match_id(), 
      GetArena());
  }
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data(), 
      GetArena());
  }
  if (from._internal_has_presence()) {
    presence_ = new ::nakama::realtime::UserPresence(*from.presence_);
  } else {
    presence_ = nullptr;
  }
  ::memcpy(&op_code_, &from.op_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&reliable_) -
    reinterpret_cast<char*>(&op_code_)) + sizeof(reliable_));
  // @@protoc_insertion_point(copy_constructor:nakama.realtime.MatchData)
}

void MatchData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MatchData_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base);
  match_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&presence_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&reliable_) -
      reinterpret_cast<char*>(&presence_)) + sizeof(reliable_));
}

MatchData::~MatchData() {
  // @@protoc_insertion_point(destructor:nakama.realtime.MatchData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MatchData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  match_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete presence_;
}

void MatchData::ArenaDtor(void* object) {
  MatchData* _this = reinterpret_cast< MatchData* >(object);
  (void)_this;
}
void MatchData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MatchData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MatchData& MatchData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MatchData_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base);
  return *internal_default_instance();
}


void MatchData::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.realtime.MatchData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  match_id_.ClearToEmpty();
  data_.ClearToEmpty();
  if (GetArena() == nullptr && presence_ != nullptr) {
    delete presence_;
  }
  presence_ = nullptr;
  ::memset(&op_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reliable_) -
      reinterpret_cast<char*>(&op_code_)) + sizeof(reliable_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MatchData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string match_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_match_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.realtime.MatchData.match_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nakama.realtime.UserPresence presence = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_presence(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 op_code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          op_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool reliable = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          reliable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MatchData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nakama.realtime.MatchData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string match_id = 1;
  if (this->match_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_match_id().data(), static_cast<int>(this->_internal_match_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.realtime.MatchData.match_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_match_id(), target);
  }

  // .nakama.realtime.UserPresence presence = 2;
  if (this->has_presence()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::presence(this), target, stream);
  }

  // int64 op_code = 3;
  if (this->op_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_op_code(), target);
  }

  // bytes data = 4;
  if (this->data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_data(), target);
  }

  // bool reliable = 5;
  if (this->reliable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_reliable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.realtime.MatchData)
  return target;
}

size_t MatchData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.realtime.MatchData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string match_id = 1;
  if (this->match_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_match_id());
  }

  // bytes data = 4;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // .nakama.realtime.UserPresence presence = 2;
  if (this->has_presence()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *presence_);
  }

  // int64 op_code = 3;
  if (this->op_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_op_code());
  }

  // bool reliable = 5;
  if (this->reliable() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MatchData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.realtime.MatchData)
  GOOGLE_DCHECK_NE(&from, this);
  const MatchData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MatchData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.realtime.MatchData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.realtime.MatchData)
    MergeFrom(*source);
  }
}

void MatchData::MergeFrom(const MatchData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.realtime.MatchData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.match_id().size() > 0) {
    _internal_set_match_id(from._internal_match_id());
  }
  if (from.data().size() > 0) {
    _internal_set_data(from._internal_data());
  }
  if (from.has_presence()) {
    _internal_mutable_presence()->::nakama::realtime::UserPresence::MergeFrom(from._internal_presence());
  }
  if (from.op_code() != 0) {
    _internal_set_op_code(from._internal_op_code());
  }
  if (from.reliable() != 0) {
    _internal_set_reliable(from._internal_reliable());
  }
}

void MatchData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.realtime.MatchData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatchData::CopyFrom(const MatchData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.realtime.MatchData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchData::IsInitialized() const {
  return true;
}

void MatchData::InternalSwap(MatchData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  match_id_.Swap(&other->match_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MatchData, reliable_)
      + sizeof(MatchData::reliable_)
      - PROTOBUF_FIELD_OFFSET(MatchData, presence_)>(
          reinterpret_cast<char*>(&presence_),
          reinterpret_cast<char*>(&other->presence_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MatchData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MatchDataSend::_Internal {
 public:
};

MatchDataSend::MatchDataSend(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  presences_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nakama.realtime.MatchDataSend)
}
MatchDataSend::MatchDataSend(const MatchDataSend& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      presences_(from.presences_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  match_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_match_id().empty()) {
    match_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_match_id(), 
      GetArena());
  }
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data(), 
      GetArena());
  }
  ::memcpy(&op_code_, &from.op_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&reliable_) -
    reinterpret_cast<char*>(&op_code_)) + sizeof(reliable_));
  // @@protoc_insertion_point(copy_constructor:nakama.realtime.MatchDataSend)
}

void MatchDataSend::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MatchDataSend_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base);
  match_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&op_code_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&reliable_) -
      reinterpret_cast<char*>(&op_code_)) + sizeof(reliable_));
}

MatchDataSend::~MatchDataSend() {
  // @@protoc_insertion_point(destructor:nakama.realtime.MatchDataSend)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MatchDataSend::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  match_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MatchDataSend::ArenaDtor(void* object) {
  MatchDataSend* _this = reinterpret_cast< MatchDataSend* >(object);
  (void)_this;
}
void MatchDataSend::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MatchDataSend::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MatchDataSend& MatchDataSend::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MatchDataSend_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base);
  return *internal_default_instance();
}


void MatchDataSend::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.realtime.MatchDataSend)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  presences_.Clear();
  match_id_.ClearToEmpty();
  data_.ClearToEmpty();
  ::memset(&op_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reliable_) -
      reinterpret_cast<char*>(&op_code_)) + sizeof(reliable_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MatchDataSend::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string match_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_match_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.realtime.MatchDataSend.match_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 op_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          op_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .nakama.realtime.UserPresence presences = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_presences(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // bool reliable = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          reliable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MatchDataSend::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nakama.realtime.MatchDataSend)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string match_id = 1;
  if (this->match_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_match_id().data(), static_cast<int>(this->_internal_match_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.realtime.MatchDataSend.match_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_match_id(), target);
  }

  // int64 op_code = 2;
  if (this->op_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_op_code(), target);
  }

  // bytes data = 3;
  if (this->data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_data(), target);
  }

  // repeated .nakama.realtime.UserPresence presences = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_presences_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_presences(i), target, stream);
  }

  // bool reliable = 5;
  if (this->reliable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_reliable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.realtime.MatchDataSend)
  return target;
}

size_t MatchDataSend::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.realtime.MatchDataSend)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .nakama.realtime.UserPresence presences = 4;
  total_size += 1UL * this->_internal_presences_size();
  for (const auto& msg : this->presences_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string match_id = 1;
  if (this->match_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_match_id());
  }

  // bytes data = 3;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // int64 op_code = 2;
  if (this->op_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_op_code());
  }

  // bool reliable = 5;
  if (this->reliable() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MatchDataSend::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.realtime.MatchDataSend)
  GOOGLE_DCHECK_NE(&from, this);
  const MatchDataSend* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MatchDataSend>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.realtime.MatchDataSend)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.realtime.MatchDataSend)
    MergeFrom(*source);
  }
}

void MatchDataSend::MergeFrom(const MatchDataSend& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.realtime.MatchDataSend)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  presences_.MergeFrom(from.presences_);
  if (from.match_id().size() > 0) {
    _internal_set_match_id(from._internal_match_id());
  }
  if (from.data().size() > 0) {
    _internal_set_data(from._internal_data());
  }
  if (from.op_code() != 0) {
    _internal_set_op_code(from._internal_op_code());
  }
  if (from.reliable() != 0) {
    _internal_set_reliable(from._internal_reliable());
  }
}

void MatchDataSend::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.realtime.MatchDataSend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatchDataSend::CopyFrom(const MatchDataSend& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.realtime.MatchDataSend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchDataSend::IsInitialized() const {
  return true;
}

void MatchDataSend::InternalSwap(MatchDataSend* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  presences_.InternalSwap(&other->presences_);
  match_id_.Swap(&other->match_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MatchDataSend, reliable_)
      + sizeof(MatchDataSend::reliable_)
      - PROTOBUF_FIELD_OFFSET(MatchDataSend, op_code_)>(
          reinterpret_cast<char*>(&op_code_),
          reinterpret_cast<char*>(&other->op_code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MatchDataSend::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

MatchJoin_MetadataEntry_DoNotUse::MatchJoin_MetadataEntry_DoNotUse() {}
MatchJoin_MetadataEntry_DoNotUse::MatchJoin_MetadataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void MatchJoin_MetadataEntry_DoNotUse::MergeFrom(const MatchJoin_MetadataEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata MatchJoin_MetadataEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void MatchJoin_MetadataEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

class MatchJoin::_Internal {
 public:
};

MatchJoin::MatchJoin(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nakama.realtime.MatchJoin)
}
MatchJoin::MatchJoin(const MatchJoin& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  metadata_.MergeFrom(from.metadata_);
  clear_has_id();
  switch (from.id_case()) {
    case kMatchId: {
      _internal_set_match_id(from._internal_match_id());
      break;
    }
    case kToken: {
      _internal_set_token(from._internal_token());
      break;
    }
    case ID_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:nakama.realtime.MatchJoin)
}

void MatchJoin::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MatchJoin_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base);
  clear_has_id();
}

MatchJoin::~MatchJoin() {
  // @@protoc_insertion_point(destructor:nakama.realtime.MatchJoin)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MatchJoin::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_id()) {
    clear_id();
  }
}

void MatchJoin::ArenaDtor(void* object) {
  MatchJoin* _this = reinterpret_cast< MatchJoin* >(object);
  (void)_this;
}
void MatchJoin::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MatchJoin::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MatchJoin& MatchJoin::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MatchJoin_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base);
  return *internal_default_instance();
}


void MatchJoin::clear_id() {
// @@protoc_insertion_point(one_of_clear_start:nakama.realtime.MatchJoin)
  switch (id_case()) {
    case kMatchId: {
      id_.match_id_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
      break;
    }
    case kToken: {
      id_.token_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
      break;
    }
    case ID_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ID_NOT_SET;
}


void MatchJoin::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.realtime.MatchJoin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  metadata_.Clear();
  clear_id();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MatchJoin::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string match_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_match_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.realtime.MatchJoin.match_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.realtime.MatchJoin.token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> metadata = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&metadata_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MatchJoin::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nakama.realtime.MatchJoin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string match_id = 1;
  if (_internal_has_match_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_match_id().data(), static_cast<int>(this->_internal_match_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.realtime.MatchJoin.match_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_match_id(), target);
  }

  // string token = 2;
  if (_internal_has_token()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.realtime.MatchJoin.token");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_token(), target);
  }

  // map<string, string> metadata = 3;
  if (!this->_internal_metadata().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "nakama.realtime.MatchJoin.MetadataEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "nakama.realtime.MatchJoin.MetadataEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_metadata().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_metadata().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_metadata().begin();
          it != this->_internal_metadata().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = MatchJoin_MetadataEntry_DoNotUse::Funcs::InternalSerialize(3, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_metadata().begin();
          it != this->_internal_metadata().end(); ++it) {
        target = MatchJoin_MetadataEntry_DoNotUse::Funcs::InternalSerialize(3, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.realtime.MatchJoin)
  return target;
}

size_t MatchJoin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.realtime.MatchJoin)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> metadata = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_metadata_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_metadata().begin();
      it != this->_internal_metadata().end(); ++it) {
    total_size += MatchJoin_MetadataEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  switch (id_case()) {
    // string match_id = 1;
    case kMatchId: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_match_id());
      break;
    }
    // string token = 2;
    case kToken: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_token());
      break;
    }
    case ID_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MatchJoin::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.realtime.MatchJoin)
  GOOGLE_DCHECK_NE(&from, this);
  const MatchJoin* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MatchJoin>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.realtime.MatchJoin)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.realtime.MatchJoin)
    MergeFrom(*source);
  }
}

void MatchJoin::MergeFrom(const MatchJoin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.realtime.MatchJoin)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  metadata_.MergeFrom(from.metadata_);
  switch (from.id_case()) {
    case kMatchId: {
      _internal_set_match_id(from._internal_match_id());
      break;
    }
    case kToken: {
      _internal_set_token(from._internal_token());
      break;
    }
    case ID_NOT_SET: {
      break;
    }
  }
}

void MatchJoin::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.realtime.MatchJoin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatchJoin::CopyFrom(const MatchJoin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.realtime.MatchJoin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchJoin::IsInitialized() const {
  return true;
}

void MatchJoin::InternalSwap(MatchJoin* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  metadata_.Swap(&other->metadata_);
  swap(id_, other->id_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MatchJoin::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MatchLeave::_Internal {
 public:
};

MatchLeave::MatchLeave(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nakama.realtime.MatchLeave)
}
MatchLeave::MatchLeave(const MatchLeave& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  match_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_match_id().empty()) {
    match_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_match_id(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:nakama.realtime.MatchLeave)
}

void MatchLeave::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MatchLeave_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base);
  match_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MatchLeave::~MatchLeave() {
  // @@protoc_insertion_point(destructor:nakama.realtime.MatchLeave)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MatchLeave::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  match_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MatchLeave::ArenaDtor(void* object) {
  MatchLeave* _this = reinterpret_cast< MatchLeave* >(object);
  (void)_this;
}
void MatchLeave::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MatchLeave::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MatchLeave& MatchLeave::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MatchLeave_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base);
  return *internal_default_instance();
}


void MatchLeave::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.realtime.MatchLeave)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  match_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MatchLeave::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string match_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_match_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.realtime.MatchLeave.match_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MatchLeave::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nakama.realtime.MatchLeave)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string match_id = 1;
  if (this->match_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_match_id().data(), static_cast<int>(this->_internal_match_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.realtime.MatchLeave.match_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_match_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.realtime.MatchLeave)
  return target;
}

size_t MatchLeave::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.realtime.MatchLeave)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string match_id = 1;
  if (this->match_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_match_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MatchLeave::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.realtime.MatchLeave)
  GOOGLE_DCHECK_NE(&from, this);
  const MatchLeave* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MatchLeave>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.realtime.MatchLeave)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.realtime.MatchLeave)
    MergeFrom(*source);
  }
}

void MatchLeave::MergeFrom(const MatchLeave& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.realtime.MatchLeave)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.match_id().size() > 0) {
    _internal_set_match_id(from._internal_match_id());
  }
}

void MatchLeave::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.realtime.MatchLeave)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatchLeave::CopyFrom(const MatchLeave& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.realtime.MatchLeave)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchLeave::IsInitialized() const {
  return true;
}

void MatchLeave::InternalSwap(MatchLeave* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  match_id_.Swap(&other->match_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata MatchLeave::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MatchPresenceEvent::_Internal {
 public:
};

MatchPresenceEvent::MatchPresenceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  joins_(arena),
  leaves_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nakama.realtime.MatchPresenceEvent)
}
MatchPresenceEvent::MatchPresenceEvent(const MatchPresenceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      joins_(from.joins_),
      leaves_(from.leaves_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  match_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_match_id().empty()) {
    match_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_match_id(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:nakama.realtime.MatchPresenceEvent)
}

void MatchPresenceEvent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MatchPresenceEvent_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base);
  match_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MatchPresenceEvent::~MatchPresenceEvent() {
  // @@protoc_insertion_point(destructor:nakama.realtime.MatchPresenceEvent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MatchPresenceEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  match_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MatchPresenceEvent::ArenaDtor(void* object) {
  MatchPresenceEvent* _this = reinterpret_cast< MatchPresenceEvent* >(object);
  (void)_this;
}
void MatchPresenceEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MatchPresenceEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MatchPresenceEvent& MatchPresenceEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MatchPresenceEvent_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base);
  return *internal_default_instance();
}


void MatchPresenceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.realtime.MatchPresenceEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  joins_.Clear();
  leaves_.Clear();
  match_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MatchPresenceEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string match_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_match_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.realtime.MatchPresenceEvent.match_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .nakama.realtime.UserPresence joins = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_joins(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .nakama.realtime.UserPresence leaves = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_leaves(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MatchPresenceEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nakama.realtime.MatchPresenceEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string match_id = 1;
  if (this->match_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_match_id().data(), static_cast<int>(this->_internal_match_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.realtime.MatchPresenceEvent.match_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_match_id(), target);
  }

  // repeated .nakama.realtime.UserPresence joins = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_joins_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_joins(i), target, stream);
  }

  // repeated .nakama.realtime.UserPresence leaves = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_leaves_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_leaves(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.realtime.MatchPresenceEvent)
  return target;
}

size_t MatchPresenceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.realtime.MatchPresenceEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .nakama.realtime.UserPresence joins = 2;
  total_size += 1UL * this->_internal_joins_size();
  for (const auto& msg : this->joins_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .nakama.realtime.UserPresence leaves = 3;
  total_size += 1UL * this->_internal_leaves_size();
  for (const auto& msg : this->leaves_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string match_id = 1;
  if (this->match_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_match_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MatchPresenceEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.realtime.MatchPresenceEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const MatchPresenceEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MatchPresenceEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.realtime.MatchPresenceEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.realtime.MatchPresenceEvent)
    MergeFrom(*source);
  }
}

void MatchPresenceEvent::MergeFrom(const MatchPresenceEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.realtime.MatchPresenceEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  joins_.MergeFrom(from.joins_);
  leaves_.MergeFrom(from.leaves_);
  if (from.match_id().size() > 0) {
    _internal_set_match_id(from._internal_match_id());
  }
}

void MatchPresenceEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.realtime.MatchPresenceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatchPresenceEvent::CopyFrom(const MatchPresenceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.realtime.MatchPresenceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchPresenceEvent::IsInitialized() const {
  return true;
}

void MatchPresenceEvent::InternalSwap(MatchPresenceEvent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  joins_.InternalSwap(&other->joins_);
  leaves_.InternalSwap(&other->leaves_);
  match_id_.Swap(&other->match_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata MatchPresenceEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

MatchmakerAdd_StringPropertiesEntry_DoNotUse::MatchmakerAdd_StringPropertiesEntry_DoNotUse() {}
MatchmakerAdd_StringPropertiesEntry_DoNotUse::MatchmakerAdd_StringPropertiesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void MatchmakerAdd_StringPropertiesEntry_DoNotUse::MergeFrom(const MatchmakerAdd_StringPropertiesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata MatchmakerAdd_StringPropertiesEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void MatchmakerAdd_StringPropertiesEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

MatchmakerAdd_NumericPropertiesEntry_DoNotUse::MatchmakerAdd_NumericPropertiesEntry_DoNotUse() {}
MatchmakerAdd_NumericPropertiesEntry_DoNotUse::MatchmakerAdd_NumericPropertiesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void MatchmakerAdd_NumericPropertiesEntry_DoNotUse::MergeFrom(const MatchmakerAdd_NumericPropertiesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata MatchmakerAdd_NumericPropertiesEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void MatchmakerAdd_NumericPropertiesEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

class MatchmakerAdd::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Int32Value& count_multiple(const MatchmakerAdd* msg);
};

const PROTOBUF_NAMESPACE_ID::Int32Value&
MatchmakerAdd::_Internal::count_multiple(const MatchmakerAdd* msg) {
  return *msg->count_multiple_;
}
void MatchmakerAdd::clear_count_multiple() {
  if (GetArena() == nullptr && count_multiple_ != nullptr) {
    delete count_multiple_;
  }
  count_multiple_ = nullptr;
}
MatchmakerAdd::MatchmakerAdd(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  string_properties_(arena),
  numeric_properties_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nakama.realtime.MatchmakerAdd)
}
MatchmakerAdd::MatchmakerAdd(const MatchmakerAdd& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  string_properties_.MergeFrom(from.string_properties_);
  numeric_properties_.MergeFrom(from.numeric_properties_);
  query_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_query().empty()) {
    query_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_query(), 
      GetArena());
  }
  if (from._internal_has_count_multiple()) {
    count_multiple_ = new PROTOBUF_NAMESPACE_ID::Int32Value(*from.count_multiple_);
  } else {
    count_multiple_ = nullptr;
  }
  ::memcpy(&min_count_, &from.min_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_count_) -
    reinterpret_cast<char*>(&min_count_)) + sizeof(max_count_));
  // @@protoc_insertion_point(copy_constructor:nakama.realtime.MatchmakerAdd)
}

void MatchmakerAdd::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MatchmakerAdd_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base);
  query_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&count_multiple_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&max_count_) -
      reinterpret_cast<char*>(&count_multiple_)) + sizeof(max_count_));
}

MatchmakerAdd::~MatchmakerAdd() {
  // @@protoc_insertion_point(destructor:nakama.realtime.MatchmakerAdd)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MatchmakerAdd::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  query_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete count_multiple_;
}

void MatchmakerAdd::ArenaDtor(void* object) {
  MatchmakerAdd* _this = reinterpret_cast< MatchmakerAdd* >(object);
  (void)_this;
}
void MatchmakerAdd::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MatchmakerAdd::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MatchmakerAdd& MatchmakerAdd::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MatchmakerAdd_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base);
  return *internal_default_instance();
}


void MatchmakerAdd::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.realtime.MatchmakerAdd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  string_properties_.Clear();
  numeric_properties_.Clear();
  query_.ClearToEmpty();
  if (GetArena() == nullptr && count_multiple_ != nullptr) {
    delete count_multiple_;
  }
  count_multiple_ = nullptr;
  ::memset(&min_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_count_) -
      reinterpret_cast<char*>(&min_count_)) + sizeof(max_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MatchmakerAdd::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 min_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          min_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 max_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          max_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string query = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_query();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.realtime.MatchmakerAdd.query"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> string_properties = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&string_properties_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, double> numeric_properties = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&numeric_properties_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Int32Value count_multiple = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_count_multiple(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MatchmakerAdd::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nakama.realtime.MatchmakerAdd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 min_count = 1;
  if (this->min_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_min_count(), target);
  }

  // int32 max_count = 2;
  if (this->max_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_max_count(), target);
  }

  // string query = 3;
  if (this->query().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_query().data(), static_cast<int>(this->_internal_query().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.realtime.MatchmakerAdd.query");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_query(), target);
  }

  // map<string, string> string_properties = 4;
  if (!this->_internal_string_properties().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "nakama.realtime.MatchmakerAdd.StringPropertiesEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "nakama.realtime.MatchmakerAdd.StringPropertiesEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_string_properties().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_string_properties().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_string_properties().begin();
          it != this->_internal_string_properties().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = MatchmakerAdd_StringPropertiesEntry_DoNotUse::Funcs::InternalSerialize(4, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_string_properties().begin();
          it != this->_internal_string_properties().end(); ++it) {
        target = MatchmakerAdd_StringPropertiesEntry_DoNotUse::Funcs::InternalSerialize(4, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, double> numeric_properties = 5;
  if (!this->_internal_numeric_properties().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "nakama.realtime.MatchmakerAdd.NumericPropertiesEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_numeric_properties().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_numeric_properties().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::const_iterator
          it = this->_internal_numeric_properties().begin();
          it != this->_internal_numeric_properties().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = MatchmakerAdd_NumericPropertiesEntry_DoNotUse::Funcs::InternalSerialize(5, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::const_iterator
          it = this->_internal_numeric_properties().begin();
          it != this->_internal_numeric_properties().end(); ++it) {
        target = MatchmakerAdd_NumericPropertiesEntry_DoNotUse::Funcs::InternalSerialize(5, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // .google.protobuf.Int32Value count_multiple = 6;
  if (this->has_count_multiple()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::count_multiple(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.realtime.MatchmakerAdd)
  return target;
}

size_t MatchmakerAdd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.realtime.MatchmakerAdd)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> string_properties = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_string_properties_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_string_properties().begin();
      it != this->_internal_string_properties().end(); ++it) {
    total_size += MatchmakerAdd_StringPropertiesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, double> numeric_properties = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_numeric_properties_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::const_iterator
      it = this->_internal_numeric_properties().begin();
      it != this->_internal_numeric_properties().end(); ++it) {
    total_size += MatchmakerAdd_NumericPropertiesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string query = 3;
  if (this->query().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_query());
  }

  // .google.protobuf.Int32Value count_multiple = 6;
  if (this->has_count_multiple()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *count_multiple_);
  }

  // int32 min_count = 1;
  if (this->min_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_min_count());
  }

  // int32 max_count = 2;
  if (this->max_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_max_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MatchmakerAdd::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.realtime.MatchmakerAdd)
  GOOGLE_DCHECK_NE(&from, this);
  const MatchmakerAdd* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MatchmakerAdd>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.realtime.MatchmakerAdd)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.realtime.MatchmakerAdd)
    MergeFrom(*source);
  }
}

void MatchmakerAdd::MergeFrom(const MatchmakerAdd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.realtime.MatchmakerAdd)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  string_properties_.MergeFrom(from.string_properties_);
  numeric_properties_.MergeFrom(from.numeric_properties_);
  if (from.query().size() > 0) {
    _internal_set_query(from._internal_query());
  }
  if (from.has_count_multiple()) {
    _internal_mutable_count_multiple()->PROTOBUF_NAMESPACE_ID::Int32Value::MergeFrom(from._internal_count_multiple());
  }
  if (from.min_count() != 0) {
    _internal_set_min_count(from._internal_min_count());
  }
  if (from.max_count() != 0) {
    _internal_set_max_count(from._internal_max_count());
  }
}

void MatchmakerAdd::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.realtime.MatchmakerAdd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatchmakerAdd::CopyFrom(const MatchmakerAdd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.realtime.MatchmakerAdd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchmakerAdd::IsInitialized() const {
  return true;
}

void MatchmakerAdd::InternalSwap(MatchmakerAdd* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  string_properties_.Swap(&other->string_properties_);
  numeric_properties_.Swap(&other->numeric_properties_);
  query_.Swap(&other->query_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MatchmakerAdd, max_count_)
      + sizeof(MatchmakerAdd::max_count_)
      - PROTOBUF_FIELD_OFFSET(MatchmakerAdd, count_multiple_)>(
          reinterpret_cast<char*>(&count_multiple_),
          reinterpret_cast<char*>(&other->count_multiple_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MatchmakerAdd::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

MatchmakerMatched_MatchmakerUser_StringPropertiesEntry_DoNotUse::MatchmakerMatched_MatchmakerUser_StringPropertiesEntry_DoNotUse() {}
MatchmakerMatched_MatchmakerUser_StringPropertiesEntry_DoNotUse::MatchmakerMatched_MatchmakerUser_StringPropertiesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void MatchmakerMatched_MatchmakerUser_StringPropertiesEntry_DoNotUse::MergeFrom(const MatchmakerMatched_MatchmakerUser_StringPropertiesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata MatchmakerMatched_MatchmakerUser_StringPropertiesEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void MatchmakerMatched_MatchmakerUser_StringPropertiesEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

MatchmakerMatched_MatchmakerUser_NumericPropertiesEntry_DoNotUse::MatchmakerMatched_MatchmakerUser_NumericPropertiesEntry_DoNotUse() {}
MatchmakerMatched_MatchmakerUser_NumericPropertiesEntry_DoNotUse::MatchmakerMatched_MatchmakerUser_NumericPropertiesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void MatchmakerMatched_MatchmakerUser_NumericPropertiesEntry_DoNotUse::MergeFrom(const MatchmakerMatched_MatchmakerUser_NumericPropertiesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata MatchmakerMatched_MatchmakerUser_NumericPropertiesEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void MatchmakerMatched_MatchmakerUser_NumericPropertiesEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

class MatchmakerMatched_MatchmakerUser::_Internal {
 public:
  static const ::nakama::realtime::UserPresence& presence(const MatchmakerMatched_MatchmakerUser* msg);
};

const ::nakama::realtime::UserPresence&
MatchmakerMatched_MatchmakerUser::_Internal::presence(const MatchmakerMatched_MatchmakerUser* msg) {
  return *msg->presence_;
}
MatchmakerMatched_MatchmakerUser::MatchmakerMatched_MatchmakerUser(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  string_properties_(arena),
  numeric_properties_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nakama.realtime.MatchmakerMatched.MatchmakerUser)
}
MatchmakerMatched_MatchmakerUser::MatchmakerMatched_MatchmakerUser(const MatchmakerMatched_MatchmakerUser& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  string_properties_.MergeFrom(from.string_properties_);
  numeric_properties_.MergeFrom(from.numeric_properties_);
  party_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_party_id().empty()) {
    party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_party_id(), 
      GetArena());
  }
  if (from._internal_has_presence()) {
    presence_ = new ::nakama::realtime::UserPresence(*from.presence_);
  } else {
    presence_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:nakama.realtime.MatchmakerMatched.MatchmakerUser)
}

void MatchmakerMatched_MatchmakerUser::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MatchmakerMatched_MatchmakerUser_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base);
  party_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  presence_ = nullptr;
}

MatchmakerMatched_MatchmakerUser::~MatchmakerMatched_MatchmakerUser() {
  // @@protoc_insertion_point(destructor:nakama.realtime.MatchmakerMatched.MatchmakerUser)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MatchmakerMatched_MatchmakerUser::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  party_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete presence_;
}

void MatchmakerMatched_MatchmakerUser::ArenaDtor(void* object) {
  MatchmakerMatched_MatchmakerUser* _this = reinterpret_cast< MatchmakerMatched_MatchmakerUser* >(object);
  (void)_this;
}
void MatchmakerMatched_MatchmakerUser::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MatchmakerMatched_MatchmakerUser::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MatchmakerMatched_MatchmakerUser& MatchmakerMatched_MatchmakerUser::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MatchmakerMatched_MatchmakerUser_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base);
  return *internal_default_instance();
}


void MatchmakerMatched_MatchmakerUser::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.realtime.MatchmakerMatched.MatchmakerUser)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  string_properties_.Clear();
  numeric_properties_.Clear();
  party_id_.ClearToEmpty();
  if (GetArena() == nullptr && presence_ != nullptr) {
    delete presence_;
  }
  presence_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MatchmakerMatched_MatchmakerUser::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .nakama.realtime.UserPresence presence = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_presence(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string party_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_party_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.realtime.MatchmakerMatched.MatchmakerUser.party_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> string_properties = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&string_properties_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, double> numeric_properties = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&numeric_properties_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MatchmakerMatched_MatchmakerUser::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nakama.realtime.MatchmakerMatched.MatchmakerUser)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .nakama.realtime.UserPresence presence = 1;
  if (this->has_presence()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::presence(this), target, stream);
  }

  // string party_id = 2;
  if (this->party_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_party_id().data(), static_cast<int>(this->_internal_party_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.realtime.MatchmakerMatched.MatchmakerUser.party_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_party_id(), target);
  }

  // map<string, string> string_properties = 5;
  if (!this->_internal_string_properties().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "nakama.realtime.MatchmakerMatched.MatchmakerUser.StringPropertiesEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "nakama.realtime.MatchmakerMatched.MatchmakerUser.StringPropertiesEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_string_properties().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_string_properties().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_string_properties().begin();
          it != this->_internal_string_properties().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = MatchmakerMatched_MatchmakerUser_StringPropertiesEntry_DoNotUse::Funcs::InternalSerialize(5, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_string_properties().begin();
          it != this->_internal_string_properties().end(); ++it) {
        target = MatchmakerMatched_MatchmakerUser_StringPropertiesEntry_DoNotUse::Funcs::InternalSerialize(5, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, double> numeric_properties = 6;
  if (!this->_internal_numeric_properties().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "nakama.realtime.MatchmakerMatched.MatchmakerUser.NumericPropertiesEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_numeric_properties().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_numeric_properties().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::const_iterator
          it = this->_internal_numeric_properties().begin();
          it != this->_internal_numeric_properties().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = MatchmakerMatched_MatchmakerUser_NumericPropertiesEntry_DoNotUse::Funcs::InternalSerialize(6, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::const_iterator
          it = this->_internal_numeric_properties().begin();
          it != this->_internal_numeric_properties().end(); ++it) {
        target = MatchmakerMatched_MatchmakerUser_NumericPropertiesEntry_DoNotUse::Funcs::InternalSerialize(6, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.realtime.MatchmakerMatched.MatchmakerUser)
  return target;
}

size_t MatchmakerMatched_MatchmakerUser::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.realtime.MatchmakerMatched.MatchmakerUser)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> string_properties = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_string_properties_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_string_properties().begin();
      it != this->_internal_string_properties().end(); ++it) {
    total_size += MatchmakerMatched_MatchmakerUser_StringPropertiesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, double> numeric_properties = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_numeric_properties_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::const_iterator
      it = this->_internal_numeric_properties().begin();
      it != this->_internal_numeric_properties().end(); ++it) {
    total_size += MatchmakerMatched_MatchmakerUser_NumericPropertiesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string party_id = 2;
  if (this->party_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_party_id());
  }

  // .nakama.realtime.UserPresence presence = 1;
  if (this->has_presence()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *presence_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MatchmakerMatched_MatchmakerUser::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.realtime.MatchmakerMatched.MatchmakerUser)
  GOOGLE_DCHECK_NE(&from, this);
  const MatchmakerMatched_MatchmakerUser* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MatchmakerMatched_MatchmakerUser>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.realtime.MatchmakerMatched.MatchmakerUser)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.realtime.MatchmakerMatched.MatchmakerUser)
    MergeFrom(*source);
  }
}

void MatchmakerMatched_MatchmakerUser::MergeFrom(const MatchmakerMatched_MatchmakerUser& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.realtime.MatchmakerMatched.MatchmakerUser)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  string_properties_.MergeFrom(from.string_properties_);
  numeric_properties_.MergeFrom(from.numeric_properties_);
  if (from.party_id().size() > 0) {
    _internal_set_party_id(from._internal_party_id());
  }
  if (from.has_presence()) {
    _internal_mutable_presence()->::nakama::realtime::UserPresence::MergeFrom(from._internal_presence());
  }
}

void MatchmakerMatched_MatchmakerUser::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.realtime.MatchmakerMatched.MatchmakerUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatchmakerMatched_MatchmakerUser::CopyFrom(const MatchmakerMatched_MatchmakerUser& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.realtime.MatchmakerMatched.MatchmakerUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchmakerMatched_MatchmakerUser::IsInitialized() const {
  return true;
}

void MatchmakerMatched_MatchmakerUser::InternalSwap(MatchmakerMatched_MatchmakerUser* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  string_properties_.Swap(&other->string_properties_);
  numeric_properties_.Swap(&other->numeric_properties_);
  party_id_.Swap(&other->party_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(presence_, other->presence_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MatchmakerMatched_MatchmakerUser::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MatchmakerMatched::_Internal {
 public:
  static const ::nakama::realtime::MatchmakerMatched_MatchmakerUser& self(const MatchmakerMatched* msg);
};

const ::nakama::realtime::MatchmakerMatched_MatchmakerUser&
MatchmakerMatched::_Internal::self(const MatchmakerMatched* msg) {
  return *msg->self_;
}
MatchmakerMatched::MatchmakerMatched(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  users_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nakama.realtime.MatchmakerMatched)
}
MatchmakerMatched::MatchmakerMatched(const MatchmakerMatched& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      users_(from.users_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ticket_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ticket().empty()) {
    ticket_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ticket(), 
      GetArena());
  }
  if (from._internal_has_self()) {
    self_ = new ::nakama::realtime::MatchmakerMatched_MatchmakerUser(*from.self_);
  } else {
    self_ = nullptr;
  }
  clear_has_id();
  switch (from.id_case()) {
    case kMatchId: {
      _internal_set_match_id(from._internal_match_id());
      break;
    }
    case kToken: {
      _internal_set_token(from._internal_token());
      break;
    }
    case ID_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:nakama.realtime.MatchmakerMatched)
}

void MatchmakerMatched::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MatchmakerMatched_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base);
  ticket_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  self_ = nullptr;
  clear_has_id();
}

MatchmakerMatched::~MatchmakerMatched() {
  // @@protoc_insertion_point(destructor:nakama.realtime.MatchmakerMatched)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MatchmakerMatched::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  ticket_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete self_;
  if (has_id()) {
    clear_id();
  }
}

void MatchmakerMatched::ArenaDtor(void* object) {
  MatchmakerMatched* _this = reinterpret_cast< MatchmakerMatched* >(object);
  (void)_this;
}
void MatchmakerMatched::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MatchmakerMatched::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MatchmakerMatched& MatchmakerMatched::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MatchmakerMatched_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base);
  return *internal_default_instance();
}


void MatchmakerMatched::clear_id() {
// @@protoc_insertion_point(one_of_clear_start:nakama.realtime.MatchmakerMatched)
  switch (id_case()) {
    case kMatchId: {
      id_.match_id_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
      break;
    }
    case kToken: {
      id_.token_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
      break;
    }
    case ID_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ID_NOT_SET;
}


void MatchmakerMatched::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.realtime.MatchmakerMatched)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  users_.Clear();
  ticket_.ClearToEmpty();
  if (GetArena() == nullptr && self_ != nullptr) {
    delete self_;
  }
  self_ = nullptr;
  clear_id();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MatchmakerMatched::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string ticket = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_ticket();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.realtime.MatchmakerMatched.ticket"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string match_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_match_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.realtime.MatchmakerMatched.match_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string token = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.realtime.MatchmakerMatched.token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .nakama.realtime.MatchmakerMatched.MatchmakerUser users = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_users(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // .nakama.realtime.MatchmakerMatched.MatchmakerUser self = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_self(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MatchmakerMatched::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nakama.realtime.MatchmakerMatched)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ticket = 1;
  if (this->ticket().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ticket().data(), static_cast<int>(this->_internal_ticket().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.realtime.MatchmakerMatched.ticket");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_ticket(), target);
  }

  // string match_id = 2;
  if (_internal_has_match_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_match_id().data(), static_cast<int>(this->_internal_match_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.realtime.MatchmakerMatched.match_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_match_id(), target);
  }

  // string token = 3;
  if (_internal_has_token()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.realtime.MatchmakerMatched.token");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_token(), target);
  }

  // repeated .nakama.realtime.MatchmakerMatched.MatchmakerUser users = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_users_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_users(i), target, stream);
  }

  // .nakama.realtime.MatchmakerMatched.MatchmakerUser self = 5;
  if (this->has_self()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::self(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.realtime.MatchmakerMatched)
  return target;
}

size_t MatchmakerMatched::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.realtime.MatchmakerMatched)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .nakama.realtime.MatchmakerMatched.MatchmakerUser users = 4;
  total_size += 1UL * this->_internal_users_size();
  for (const auto& msg : this->users_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string ticket = 1;
  if (this->ticket().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ticket());
  }

  // .nakama.realtime.MatchmakerMatched.MatchmakerUser self = 5;
  if (this->has_self()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *self_);
  }

  switch (id_case()) {
    // string match_id = 2;
    case kMatchId: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_match_id());
      break;
    }
    // string token = 3;
    case kToken: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_token());
      break;
    }
    case ID_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MatchmakerMatched::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.realtime.MatchmakerMatched)
  GOOGLE_DCHECK_NE(&from, this);
  const MatchmakerMatched* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MatchmakerMatched>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.realtime.MatchmakerMatched)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.realtime.MatchmakerMatched)
    MergeFrom(*source);
  }
}

void MatchmakerMatched::MergeFrom(const MatchmakerMatched& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.realtime.MatchmakerMatched)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  users_.MergeFrom(from.users_);
  if (from.ticket().size() > 0) {
    _internal_set_ticket(from._internal_ticket());
  }
  if (from.has_self()) {
    _internal_mutable_self()->::nakama::realtime::MatchmakerMatched_MatchmakerUser::MergeFrom(from._internal_self());
  }
  switch (from.id_case()) {
    case kMatchId: {
      _internal_set_match_id(from._internal_match_id());
      break;
    }
    case kToken: {
      _internal_set_token(from._internal_token());
      break;
    }
    case ID_NOT_SET: {
      break;
    }
  }
}

void MatchmakerMatched::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.realtime.MatchmakerMatched)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatchmakerMatched::CopyFrom(const MatchmakerMatched& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.realtime.MatchmakerMatched)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchmakerMatched::IsInitialized() const {
  return true;
}

void MatchmakerMatched::InternalSwap(MatchmakerMatched* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  users_.InternalSwap(&other->users_);
  ticket_.Swap(&other->ticket_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(self_, other->self_);
  swap(id_, other->id_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MatchmakerMatched::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MatchmakerRemove::_Internal {
 public:
};

MatchmakerRemove::MatchmakerRemove(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nakama.realtime.MatchmakerRemove)
}
MatchmakerRemove::MatchmakerRemove(const MatchmakerRemove& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ticket_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ticket().empty()) {
    ticket_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ticket(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:nakama.realtime.MatchmakerRemove)
}

void MatchmakerRemove::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MatchmakerRemove_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base);
  ticket_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MatchmakerRemove::~MatchmakerRemove() {
  // @@protoc_insertion_point(destructor:nakama.realtime.MatchmakerRemove)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MatchmakerRemove::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  ticket_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MatchmakerRemove::ArenaDtor(void* object) {
  MatchmakerRemove* _this = reinterpret_cast< MatchmakerRemove* >(object);
  (void)_this;
}
void MatchmakerRemove::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MatchmakerRemove::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MatchmakerRemove& MatchmakerRemove::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MatchmakerRemove_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base);
  return *internal_default_instance();
}


void MatchmakerRemove::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.realtime.MatchmakerRemove)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ticket_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MatchmakerRemove::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string ticket = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_ticket();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.realtime.MatchmakerRemove.ticket"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MatchmakerRemove::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nakama.realtime.MatchmakerRemove)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ticket = 1;
  if (this->ticket().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ticket().data(), static_cast<int>(this->_internal_ticket().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.realtime.MatchmakerRemove.ticket");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_ticket(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.realtime.MatchmakerRemove)
  return target;
}

size_t MatchmakerRemove::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.realtime.MatchmakerRemove)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ticket = 1;
  if (this->ticket().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ticket());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MatchmakerRemove::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.realtime.MatchmakerRemove)
  GOOGLE_DCHECK_NE(&from, this);
  const MatchmakerRemove* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MatchmakerRemove>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.realtime.MatchmakerRemove)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.realtime.MatchmakerRemove)
    MergeFrom(*source);
  }
}

void MatchmakerRemove::MergeFrom(const MatchmakerRemove& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.realtime.MatchmakerRemove)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ticket().size() > 0) {
    _internal_set_ticket(from._internal_ticket());
  }
}

void MatchmakerRemove::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.realtime.MatchmakerRemove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatchmakerRemove::CopyFrom(const MatchmakerRemove& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.realtime.MatchmakerRemove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchmakerRemove::IsInitialized() const {
  return true;
}

void MatchmakerRemove::InternalSwap(MatchmakerRemove* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ticket_.Swap(&other->ticket_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata MatchmakerRemove::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MatchmakerTicket::_Internal {
 public:
};

MatchmakerTicket::MatchmakerTicket(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nakama.realtime.MatchmakerTicket)
}
MatchmakerTicket::MatchmakerTicket(const MatchmakerTicket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ticket_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ticket().empty()) {
    ticket_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ticket(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:nakama.realtime.MatchmakerTicket)
}

void MatchmakerTicket::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MatchmakerTicket_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base);
  ticket_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MatchmakerTicket::~MatchmakerTicket() {
  // @@protoc_insertion_point(destructor:nakama.realtime.MatchmakerTicket)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MatchmakerTicket::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  ticket_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MatchmakerTicket::ArenaDtor(void* object) {
  MatchmakerTicket* _this = reinterpret_cast< MatchmakerTicket* >(object);
  (void)_this;
}
void MatchmakerTicket::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MatchmakerTicket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MatchmakerTicket& MatchmakerTicket::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MatchmakerTicket_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base);
  return *internal_default_instance();
}


void MatchmakerTicket::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.realtime.MatchmakerTicket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ticket_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MatchmakerTicket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string ticket = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_ticket();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.realtime.MatchmakerTicket.ticket"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MatchmakerTicket::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nakama.realtime.MatchmakerTicket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ticket = 1;
  if (this->ticket().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ticket().data(), static_cast<int>(this->_internal_ticket().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.realtime.MatchmakerTicket.ticket");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_ticket(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.realtime.MatchmakerTicket)
  return target;
}

size_t MatchmakerTicket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.realtime.MatchmakerTicket)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ticket = 1;
  if (this->ticket().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ticket());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MatchmakerTicket::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.realtime.MatchmakerTicket)
  GOOGLE_DCHECK_NE(&from, this);
  const MatchmakerTicket* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MatchmakerTicket>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.realtime.MatchmakerTicket)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.realtime.MatchmakerTicket)
    MergeFrom(*source);
  }
}

void MatchmakerTicket::MergeFrom(const MatchmakerTicket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.realtime.MatchmakerTicket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ticket().size() > 0) {
    _internal_set_ticket(from._internal_ticket());
  }
}

void MatchmakerTicket::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.realtime.MatchmakerTicket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatchmakerTicket::CopyFrom(const MatchmakerTicket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.realtime.MatchmakerTicket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchmakerTicket::IsInitialized() const {
  return true;
}

void MatchmakerTicket::InternalSwap(MatchmakerTicket* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ticket_.Swap(&other->ticket_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata MatchmakerTicket::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Notifications::_Internal {
 public:
};

void Notifications::clear_notifications() {
  notifications_.Clear();
}
Notifications::Notifications(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  notifications_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nakama.realtime.Notifications)
}
Notifications::Notifications(const Notifications& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      notifications_(from.notifications_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:nakama.realtime.Notifications)
}

void Notifications::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Notifications_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base);
}

Notifications::~Notifications() {
  // @@protoc_insertion_point(destructor:nakama.realtime.Notifications)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Notifications::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Notifications::ArenaDtor(void* object) {
  Notifications* _this = reinterpret_cast< Notifications* >(object);
  (void)_this;
}
void Notifications::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Notifications::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Notifications& Notifications::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Notifications_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base);
  return *internal_default_instance();
}


void Notifications::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.realtime.Notifications)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  notifications_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Notifications::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .nakama.api.Notification notifications = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_notifications(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Notifications::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nakama.realtime.Notifications)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .nakama.api.Notification notifications = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_notifications_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_notifications(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.realtime.Notifications)
  return target;
}

size_t Notifications::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.realtime.Notifications)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .nakama.api.Notification notifications = 1;
  total_size += 1UL * this->_internal_notifications_size();
  for (const auto& msg : this->notifications_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Notifications::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.realtime.Notifications)
  GOOGLE_DCHECK_NE(&from, this);
  const Notifications* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Notifications>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.realtime.Notifications)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.realtime.Notifications)
    MergeFrom(*source);
  }
}

void Notifications::MergeFrom(const Notifications& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.realtime.Notifications)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  notifications_.MergeFrom(from.notifications_);
}

void Notifications::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.realtime.Notifications)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Notifications::CopyFrom(const Notifications& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.realtime.Notifications)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Notifications::IsInitialized() const {
  return true;
}

void Notifications::InternalSwap(Notifications* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  notifications_.InternalSwap(&other->notifications_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Notifications::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Party::_Internal {
 public:
  static const ::nakama::realtime::UserPresence& self(const Party* msg);
  static const ::nakama::realtime::UserPresence& leader(const Party* msg);
};

const ::nakama::realtime::UserPresence&
Party::_Internal::self(const Party* msg) {
  return *msg->self_;
}
const ::nakama::realtime::UserPresence&
Party::_Internal::leader(const Party* msg) {
  return *msg->leader_;
}
Party::Party(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  presences_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nakama.realtime.Party)
}
Party::Party(const Party& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      presences_(from.presences_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  party_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_party_id().empty()) {
    party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_party_id(), 
      GetArena());
  }
  if (from._internal_has_self()) {
    self_ = new ::nakama::realtime::UserPresence(*from.self_);
  } else {
    self_ = nullptr;
  }
  if (from._internal_has_leader()) {
    leader_ = new ::nakama::realtime::UserPresence(*from.leader_);
  } else {
    leader_ = nullptr;
  }
  ::memcpy(&open_, &from.open_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_size_) -
    reinterpret_cast<char*>(&open_)) + sizeof(max_size_));
  // @@protoc_insertion_point(copy_constructor:nakama.realtime.Party)
}

void Party::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Party_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base);
  party_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&self_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&max_size_) -
      reinterpret_cast<char*>(&self_)) + sizeof(max_size_));
}

Party::~Party() {
  // @@protoc_insertion_point(destructor:nakama.realtime.Party)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Party::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  party_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete self_;
  if (this != internal_default_instance()) delete leader_;
}

void Party::ArenaDtor(void* object) {
  Party* _this = reinterpret_cast< Party* >(object);
  (void)_this;
}
void Party::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Party::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Party& Party::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Party_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base);
  return *internal_default_instance();
}


void Party::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.realtime.Party)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  presences_.Clear();
  party_id_.ClearToEmpty();
  if (GetArena() == nullptr && self_ != nullptr) {
    delete self_;
  }
  self_ = nullptr;
  if (GetArena() == nullptr && leader_ != nullptr) {
    delete leader_;
  }
  leader_ = nullptr;
  ::memset(&open_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_size_) -
      reinterpret_cast<char*>(&open_)) + sizeof(max_size_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Party::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string party_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_party_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.realtime.Party.party_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool open = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          open_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 max_size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          max_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nakama.realtime.UserPresence self = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_self(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nakama.realtime.UserPresence leader = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_leader(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .nakama.realtime.UserPresence presences = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_presences(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Party::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nakama.realtime.Party)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string party_id = 1;
  if (this->party_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_party_id().data(), static_cast<int>(this->_internal_party_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.realtime.Party.party_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_party_id(), target);
  }

  // bool open = 2;
  if (this->open() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_open(), target);
  }

  // int32 max_size = 3;
  if (this->max_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_max_size(), target);
  }

  // .nakama.realtime.UserPresence self = 4;
  if (this->has_self()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::self(this), target, stream);
  }

  // .nakama.realtime.UserPresence leader = 5;
  if (this->has_leader()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::leader(this), target, stream);
  }

  // repeated .nakama.realtime.UserPresence presences = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_presences_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_presences(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.realtime.Party)
  return target;
}

size_t Party::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.realtime.Party)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .nakama.realtime.UserPresence presences = 6;
  total_size += 1UL * this->_internal_presences_size();
  for (const auto& msg : this->presences_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string party_id = 1;
  if (this->party_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_party_id());
  }

  // .nakama.realtime.UserPresence self = 4;
  if (this->has_self()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *self_);
  }

  // .nakama.realtime.UserPresence leader = 5;
  if (this->has_leader()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *leader_);
  }

  // bool open = 2;
  if (this->open() != 0) {
    total_size += 1 + 1;
  }

  // int32 max_size = 3;
  if (this->max_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_max_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Party::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.realtime.Party)
  GOOGLE_DCHECK_NE(&from, this);
  const Party* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Party>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.realtime.Party)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.realtime.Party)
    MergeFrom(*source);
  }
}

void Party::MergeFrom(const Party& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.realtime.Party)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  presences_.MergeFrom(from.presences_);
  if (from.party_id().size() > 0) {
    _internal_set_party_id(from._internal_party_id());
  }
  if (from.has_self()) {
    _internal_mutable_self()->::nakama::realtime::UserPresence::MergeFrom(from._internal_self());
  }
  if (from.has_leader()) {
    _internal_mutable_leader()->::nakama::realtime::UserPresence::MergeFrom(from._internal_leader());
  }
  if (from.open() != 0) {
    _internal_set_open(from._internal_open());
  }
  if (from.max_size() != 0) {
    _internal_set_max_size(from._internal_max_size());
  }
}

void Party::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.realtime.Party)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Party::CopyFrom(const Party& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.realtime.Party)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Party::IsInitialized() const {
  return true;
}

void Party::InternalSwap(Party* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  presences_.InternalSwap(&other->presences_);
  party_id_.Swap(&other->party_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Party, max_size_)
      + sizeof(Party::max_size_)
      - PROTOBUF_FIELD_OFFSET(Party, self_)>(
          reinterpret_cast<char*>(&self_),
          reinterpret_cast<char*>(&other->self_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Party::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PartyCreate::_Internal {
 public:
};

PartyCreate::PartyCreate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nakama.realtime.PartyCreate)
}
PartyCreate::PartyCreate(const PartyCreate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&open_, &from.open_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_size_) -
    reinterpret_cast<char*>(&open_)) + sizeof(max_size_));
  // @@protoc_insertion_point(copy_constructor:nakama.realtime.PartyCreate)
}

void PartyCreate::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&open_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&max_size_) -
      reinterpret_cast<char*>(&open_)) + sizeof(max_size_));
}

PartyCreate::~PartyCreate() {
  // @@protoc_insertion_point(destructor:nakama.realtime.PartyCreate)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PartyCreate::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PartyCreate::ArenaDtor(void* object) {
  PartyCreate* _this = reinterpret_cast< PartyCreate* >(object);
  (void)_this;
}
void PartyCreate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PartyCreate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PartyCreate& PartyCreate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PartyCreate_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base);
  return *internal_default_instance();
}


void PartyCreate::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.realtime.PartyCreate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&open_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_size_) -
      reinterpret_cast<char*>(&open_)) + sizeof(max_size_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PartyCreate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool open = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          open_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 max_size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          max_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PartyCreate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nakama.realtime.PartyCreate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool open = 1;
  if (this->open() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_open(), target);
  }

  // int32 max_size = 2;
  if (this->max_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_max_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.realtime.PartyCreate)
  return target;
}

size_t PartyCreate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.realtime.PartyCreate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool open = 1;
  if (this->open() != 0) {
    total_size += 1 + 1;
  }

  // int32 max_size = 2;
  if (this->max_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_max_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PartyCreate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.realtime.PartyCreate)
  GOOGLE_DCHECK_NE(&from, this);
  const PartyCreate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PartyCreate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.realtime.PartyCreate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.realtime.PartyCreate)
    MergeFrom(*source);
  }
}

void PartyCreate::MergeFrom(const PartyCreate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.realtime.PartyCreate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.open() != 0) {
    _internal_set_open(from._internal_open());
  }
  if (from.max_size() != 0) {
    _internal_set_max_size(from._internal_max_size());
  }
}

void PartyCreate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.realtime.PartyCreate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PartyCreate::CopyFrom(const PartyCreate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.realtime.PartyCreate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PartyCreate::IsInitialized() const {
  return true;
}

void PartyCreate::InternalSwap(PartyCreate* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PartyCreate, max_size_)
      + sizeof(PartyCreate::max_size_)
      - PROTOBUF_FIELD_OFFSET(PartyCreate, open_)>(
          reinterpret_cast<char*>(&open_),
          reinterpret_cast<char*>(&other->open_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PartyCreate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PartyJoin::_Internal {
 public:
};

PartyJoin::PartyJoin(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nakama.realtime.PartyJoin)
}
PartyJoin::PartyJoin(const PartyJoin& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  party_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_party_id().empty()) {
    party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_party_id(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:nakama.realtime.PartyJoin)
}

void PartyJoin::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PartyJoin_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base);
  party_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PartyJoin::~PartyJoin() {
  // @@protoc_insertion_point(destructor:nakama.realtime.PartyJoin)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PartyJoin::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  party_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PartyJoin::ArenaDtor(void* object) {
  PartyJoin* _this = reinterpret_cast< PartyJoin* >(object);
  (void)_this;
}
void PartyJoin::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PartyJoin::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PartyJoin& PartyJoin::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PartyJoin_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base);
  return *internal_default_instance();
}


void PartyJoin::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.realtime.PartyJoin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  party_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PartyJoin::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string party_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_party_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.realtime.PartyJoin.party_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PartyJoin::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nakama.realtime.PartyJoin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string party_id = 1;
  if (this->party_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_party_id().data(), static_cast<int>(this->_internal_party_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.realtime.PartyJoin.party_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_party_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.realtime.PartyJoin)
  return target;
}

size_t PartyJoin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.realtime.PartyJoin)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string party_id = 1;
  if (this->party_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_party_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PartyJoin::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.realtime.PartyJoin)
  GOOGLE_DCHECK_NE(&from, this);
  const PartyJoin* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PartyJoin>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.realtime.PartyJoin)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.realtime.PartyJoin)
    MergeFrom(*source);
  }
}

void PartyJoin::MergeFrom(const PartyJoin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.realtime.PartyJoin)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.party_id().size() > 0) {
    _internal_set_party_id(from._internal_party_id());
  }
}

void PartyJoin::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.realtime.PartyJoin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PartyJoin::CopyFrom(const PartyJoin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.realtime.PartyJoin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PartyJoin::IsInitialized() const {
  return true;
}

void PartyJoin::InternalSwap(PartyJoin* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  party_id_.Swap(&other->party_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata PartyJoin::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PartyLeave::_Internal {
 public:
};

PartyLeave::PartyLeave(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nakama.realtime.PartyLeave)
}
PartyLeave::PartyLeave(const PartyLeave& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  party_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_party_id().empty()) {
    party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_party_id(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:nakama.realtime.PartyLeave)
}

void PartyLeave::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PartyLeave_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base);
  party_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PartyLeave::~PartyLeave() {
  // @@protoc_insertion_point(destructor:nakama.realtime.PartyLeave)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PartyLeave::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  party_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PartyLeave::ArenaDtor(void* object) {
  PartyLeave* _this = reinterpret_cast< PartyLeave* >(object);
  (void)_this;
}
void PartyLeave::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PartyLeave::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PartyLeave& PartyLeave::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PartyLeave_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base);
  return *internal_default_instance();
}


void PartyLeave::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.realtime.PartyLeave)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  party_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PartyLeave::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string party_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_party_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.realtime.PartyLeave.party_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PartyLeave::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nakama.realtime.PartyLeave)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string party_id = 1;
  if (this->party_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_party_id().data(), static_cast<int>(this->_internal_party_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.realtime.PartyLeave.party_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_party_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.realtime.PartyLeave)
  return target;
}

size_t PartyLeave::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.realtime.PartyLeave)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string party_id = 1;
  if (this->party_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_party_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PartyLeave::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.realtime.PartyLeave)
  GOOGLE_DCHECK_NE(&from, this);
  const PartyLeave* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PartyLeave>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.realtime.PartyLeave)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.realtime.PartyLeave)
    MergeFrom(*source);
  }
}

void PartyLeave::MergeFrom(const PartyLeave& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.realtime.PartyLeave)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.party_id().size() > 0) {
    _internal_set_party_id(from._internal_party_id());
  }
}

void PartyLeave::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.realtime.PartyLeave)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PartyLeave::CopyFrom(const PartyLeave& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.realtime.PartyLeave)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PartyLeave::IsInitialized() const {
  return true;
}

void PartyLeave::InternalSwap(PartyLeave* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  party_id_.Swap(&other->party_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata PartyLeave::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PartyPromote::_Internal {
 public:
  static const ::nakama::realtime::UserPresence& presence(const PartyPromote* msg);
};

const ::nakama::realtime::UserPresence&
PartyPromote::_Internal::presence(const PartyPromote* msg) {
  return *msg->presence_;
}
PartyPromote::PartyPromote(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nakama.realtime.PartyPromote)
}
PartyPromote::PartyPromote(const PartyPromote& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  party_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_party_id().empty()) {
    party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_party_id(), 
      GetArena());
  }
  if (from._internal_has_presence()) {
    presence_ = new ::nakama::realtime::UserPresence(*from.presence_);
  } else {
    presence_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:nakama.realtime.PartyPromote)
}

void PartyPromote::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PartyPromote_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base);
  party_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  presence_ = nullptr;
}

PartyPromote::~PartyPromote() {
  // @@protoc_insertion_point(destructor:nakama.realtime.PartyPromote)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PartyPromote::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  party_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete presence_;
}

void PartyPromote::ArenaDtor(void* object) {
  PartyPromote* _this = reinterpret_cast< PartyPromote* >(object);
  (void)_this;
}
void PartyPromote::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PartyPromote::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PartyPromote& PartyPromote::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PartyPromote_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base);
  return *internal_default_instance();
}


void PartyPromote::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.realtime.PartyPromote)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  party_id_.ClearToEmpty();
  if (GetArena() == nullptr && presence_ != nullptr) {
    delete presence_;
  }
  presence_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PartyPromote::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string party_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_party_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.realtime.PartyPromote.party_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nakama.realtime.UserPresence presence = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_presence(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PartyPromote::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nakama.realtime.PartyPromote)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string party_id = 1;
  if (this->party_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_party_id().data(), static_cast<int>(this->_internal_party_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.realtime.PartyPromote.party_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_party_id(), target);
  }

  // .nakama.realtime.UserPresence presence = 2;
  if (this->has_presence()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::presence(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.realtime.PartyPromote)
  return target;
}

size_t PartyPromote::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.realtime.PartyPromote)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string party_id = 1;
  if (this->party_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_party_id());
  }

  // .nakama.realtime.UserPresence presence = 2;
  if (this->has_presence()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *presence_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PartyPromote::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.realtime.PartyPromote)
  GOOGLE_DCHECK_NE(&from, this);
  const PartyPromote* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PartyPromote>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.realtime.PartyPromote)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.realtime.PartyPromote)
    MergeFrom(*source);
  }
}

void PartyPromote::MergeFrom(const PartyPromote& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.realtime.PartyPromote)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.party_id().size() > 0) {
    _internal_set_party_id(from._internal_party_id());
  }
  if (from.has_presence()) {
    _internal_mutable_presence()->::nakama::realtime::UserPresence::MergeFrom(from._internal_presence());
  }
}

void PartyPromote::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.realtime.PartyPromote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PartyPromote::CopyFrom(const PartyPromote& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.realtime.PartyPromote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PartyPromote::IsInitialized() const {
  return true;
}

void PartyPromote::InternalSwap(PartyPromote* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  party_id_.Swap(&other->party_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(presence_, other->presence_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PartyPromote::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PartyLeader::_Internal {
 public:
  static const ::nakama::realtime::UserPresence& presence(const PartyLeader* msg);
};

const ::nakama::realtime::UserPresence&
PartyLeader::_Internal::presence(const PartyLeader* msg) {
  return *msg->presence_;
}
PartyLeader::PartyLeader(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nakama.realtime.PartyLeader)
}
PartyLeader::PartyLeader(const PartyLeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  party_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_party_id().empty()) {
    party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_party_id(), 
      GetArena());
  }
  if (from._internal_has_presence()) {
    presence_ = new ::nakama::realtime::UserPresence(*from.presence_);
  } else {
    presence_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:nakama.realtime.PartyLeader)
}

void PartyLeader::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PartyLeader_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base);
  party_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  presence_ = nullptr;
}

PartyLeader::~PartyLeader() {
  // @@protoc_insertion_point(destructor:nakama.realtime.PartyLeader)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PartyLeader::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  party_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete presence_;
}

void PartyLeader::ArenaDtor(void* object) {
  PartyLeader* _this = reinterpret_cast< PartyLeader* >(object);
  (void)_this;
}
void PartyLeader::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PartyLeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PartyLeader& PartyLeader::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PartyLeader_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base);
  return *internal_default_instance();
}


void PartyLeader::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.realtime.PartyLeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  party_id_.ClearToEmpty();
  if (GetArena() == nullptr && presence_ != nullptr) {
    delete presence_;
  }
  presence_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PartyLeader::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string party_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_party_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.realtime.PartyLeader.party_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nakama.realtime.UserPresence presence = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_presence(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PartyLeader::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nakama.realtime.PartyLeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string party_id = 1;
  if (this->party_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_party_id().data(), static_cast<int>(this->_internal_party_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.realtime.PartyLeader.party_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_party_id(), target);
  }

  // .nakama.realtime.UserPresence presence = 2;
  if (this->has_presence()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::presence(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.realtime.PartyLeader)
  return target;
}

size_t PartyLeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.realtime.PartyLeader)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string party_id = 1;
  if (this->party_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_party_id());
  }

  // .nakama.realtime.UserPresence presence = 2;
  if (this->has_presence()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *presence_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PartyLeader::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.realtime.PartyLeader)
  GOOGLE_DCHECK_NE(&from, this);
  const PartyLeader* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PartyLeader>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.realtime.PartyLeader)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.realtime.PartyLeader)
    MergeFrom(*source);
  }
}

void PartyLeader::MergeFrom(const PartyLeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.realtime.PartyLeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.party_id().size() > 0) {
    _internal_set_party_id(from._internal_party_id());
  }
  if (from.has_presence()) {
    _internal_mutable_presence()->::nakama::realtime::UserPresence::MergeFrom(from._internal_presence());
  }
}

void PartyLeader::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.realtime.PartyLeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PartyLeader::CopyFrom(const PartyLeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.realtime.PartyLeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PartyLeader::IsInitialized() const {
  return true;
}

void PartyLeader::InternalSwap(PartyLeader* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  party_id_.Swap(&other->party_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(presence_, other->presence_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PartyLeader::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PartyAccept::_Internal {
 public:
  static const ::nakama::realtime::UserPresence& presence(const PartyAccept* msg);
};

const ::nakama::realtime::UserPresence&
PartyAccept::_Internal::presence(const PartyAccept* msg) {
  return *msg->presence_;
}
PartyAccept::PartyAccept(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nakama.realtime.PartyAccept)
}
PartyAccept::PartyAccept(const PartyAccept& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  party_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_party_id().empty()) {
    party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_party_id(), 
      GetArena());
  }
  if (from._internal_has_presence()) {
    presence_ = new ::nakama::realtime::UserPresence(*from.presence_);
  } else {
    presence_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:nakama.realtime.PartyAccept)
}

void PartyAccept::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PartyAccept_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base);
  party_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  presence_ = nullptr;
}

PartyAccept::~PartyAccept() {
  // @@protoc_insertion_point(destructor:nakama.realtime.PartyAccept)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PartyAccept::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  party_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete presence_;
}

void PartyAccept::ArenaDtor(void* object) {
  PartyAccept* _this = reinterpret_cast< PartyAccept* >(object);
  (void)_this;
}
void PartyAccept::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PartyAccept::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PartyAccept& PartyAccept::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PartyAccept_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base);
  return *internal_default_instance();
}


void PartyAccept::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.realtime.PartyAccept)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  party_id_.ClearToEmpty();
  if (GetArena() == nullptr && presence_ != nullptr) {
    delete presence_;
  }
  presence_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PartyAccept::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string party_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_party_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.realtime.PartyAccept.party_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nakama.realtime.UserPresence presence = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_presence(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PartyAccept::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nakama.realtime.PartyAccept)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string party_id = 1;
  if (this->party_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_party_id().data(), static_cast<int>(this->_internal_party_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.realtime.PartyAccept.party_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_party_id(), target);
  }

  // .nakama.realtime.UserPresence presence = 2;
  if (this->has_presence()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::presence(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.realtime.PartyAccept)
  return target;
}

size_t PartyAccept::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.realtime.PartyAccept)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string party_id = 1;
  if (this->party_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_party_id());
  }

  // .nakama.realtime.UserPresence presence = 2;
  if (this->has_presence()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *presence_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PartyAccept::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.realtime.PartyAccept)
  GOOGLE_DCHECK_NE(&from, this);
  const PartyAccept* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PartyAccept>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.realtime.PartyAccept)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.realtime.PartyAccept)
    MergeFrom(*source);
  }
}

void PartyAccept::MergeFrom(const PartyAccept& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.realtime.PartyAccept)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.party_id().size() > 0) {
    _internal_set_party_id(from._internal_party_id());
  }
  if (from.has_presence()) {
    _internal_mutable_presence()->::nakama::realtime::UserPresence::MergeFrom(from._internal_presence());
  }
}

void PartyAccept::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.realtime.PartyAccept)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PartyAccept::CopyFrom(const PartyAccept& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.realtime.PartyAccept)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PartyAccept::IsInitialized() const {
  return true;
}

void PartyAccept::InternalSwap(PartyAccept* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  party_id_.Swap(&other->party_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(presence_, other->presence_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PartyAccept::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PartyRemove::_Internal {
 public:
  static const ::nakama::realtime::UserPresence& presence(const PartyRemove* msg);
};

const ::nakama::realtime::UserPresence&
PartyRemove::_Internal::presence(const PartyRemove* msg) {
  return *msg->presence_;
}
PartyRemove::PartyRemove(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nakama.realtime.PartyRemove)
}
PartyRemove::PartyRemove(const PartyRemove& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  party_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_party_id().empty()) {
    party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_party_id(), 
      GetArena());
  }
  if (from._internal_has_presence()) {
    presence_ = new ::nakama::realtime::UserPresence(*from.presence_);
  } else {
    presence_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:nakama.realtime.PartyRemove)
}

void PartyRemove::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PartyRemove_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base);
  party_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  presence_ = nullptr;
}

PartyRemove::~PartyRemove() {
  // @@protoc_insertion_point(destructor:nakama.realtime.PartyRemove)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PartyRemove::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  party_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete presence_;
}

void PartyRemove::ArenaDtor(void* object) {
  PartyRemove* _this = reinterpret_cast< PartyRemove* >(object);
  (void)_this;
}
void PartyRemove::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PartyRemove::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PartyRemove& PartyRemove::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PartyRemove_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base);
  return *internal_default_instance();
}


void PartyRemove::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.realtime.PartyRemove)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  party_id_.ClearToEmpty();
  if (GetArena() == nullptr && presence_ != nullptr) {
    delete presence_;
  }
  presence_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PartyRemove::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string party_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_party_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.realtime.PartyRemove.party_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nakama.realtime.UserPresence presence = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_presence(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PartyRemove::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nakama.realtime.PartyRemove)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string party_id = 1;
  if (this->party_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_party_id().data(), static_cast<int>(this->_internal_party_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.realtime.PartyRemove.party_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_party_id(), target);
  }

  // .nakama.realtime.UserPresence presence = 2;
  if (this->has_presence()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::presence(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.realtime.PartyRemove)
  return target;
}

size_t PartyRemove::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.realtime.PartyRemove)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string party_id = 1;
  if (this->party_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_party_id());
  }

  // .nakama.realtime.UserPresence presence = 2;
  if (this->has_presence()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *presence_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PartyRemove::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.realtime.PartyRemove)
  GOOGLE_DCHECK_NE(&from, this);
  const PartyRemove* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PartyRemove>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.realtime.PartyRemove)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.realtime.PartyRemove)
    MergeFrom(*source);
  }
}

void PartyRemove::MergeFrom(const PartyRemove& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.realtime.PartyRemove)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.party_id().size() > 0) {
    _internal_set_party_id(from._internal_party_id());
  }
  if (from.has_presence()) {
    _internal_mutable_presence()->::nakama::realtime::UserPresence::MergeFrom(from._internal_presence());
  }
}

void PartyRemove::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.realtime.PartyRemove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PartyRemove::CopyFrom(const PartyRemove& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.realtime.PartyRemove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PartyRemove::IsInitialized() const {
  return true;
}

void PartyRemove::InternalSwap(PartyRemove* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  party_id_.Swap(&other->party_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(presence_, other->presence_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PartyRemove::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PartyClose::_Internal {
 public:
};

PartyClose::PartyClose(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nakama.realtime.PartyClose)
}
PartyClose::PartyClose(const PartyClose& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  party_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_party_id().empty()) {
    party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_party_id(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:nakama.realtime.PartyClose)
}

void PartyClose::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PartyClose_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base);
  party_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PartyClose::~PartyClose() {
  // @@protoc_insertion_point(destructor:nakama.realtime.PartyClose)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PartyClose::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  party_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PartyClose::ArenaDtor(void* object) {
  PartyClose* _this = reinterpret_cast< PartyClose* >(object);
  (void)_this;
}
void PartyClose::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PartyClose::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PartyClose& PartyClose::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PartyClose_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base);
  return *internal_default_instance();
}


void PartyClose::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.realtime.PartyClose)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  party_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PartyClose::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string party_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_party_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.realtime.PartyClose.party_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PartyClose::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nakama.realtime.PartyClose)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string party_id = 1;
  if (this->party_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_party_id().data(), static_cast<int>(this->_internal_party_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.realtime.PartyClose.party_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_party_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.realtime.PartyClose)
  return target;
}

size_t PartyClose::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.realtime.PartyClose)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string party_id = 1;
  if (this->party_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_party_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PartyClose::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.realtime.PartyClose)
  GOOGLE_DCHECK_NE(&from, this);
  const PartyClose* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PartyClose>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.realtime.PartyClose)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.realtime.PartyClose)
    MergeFrom(*source);
  }
}

void PartyClose::MergeFrom(const PartyClose& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.realtime.PartyClose)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.party_id().size() > 0) {
    _internal_set_party_id(from._internal_party_id());
  }
}

void PartyClose::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.realtime.PartyClose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PartyClose::CopyFrom(const PartyClose& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.realtime.PartyClose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PartyClose::IsInitialized() const {
  return true;
}

void PartyClose::InternalSwap(PartyClose* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  party_id_.Swap(&other->party_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata PartyClose::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PartyJoinRequestList::_Internal {
 public:
};

PartyJoinRequestList::PartyJoinRequestList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nakama.realtime.PartyJoinRequestList)
}
PartyJoinRequestList::PartyJoinRequestList(const PartyJoinRequestList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  party_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_party_id().empty()) {
    party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_party_id(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:nakama.realtime.PartyJoinRequestList)
}

void PartyJoinRequestList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PartyJoinRequestList_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base);
  party_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PartyJoinRequestList::~PartyJoinRequestList() {
  // @@protoc_insertion_point(destructor:nakama.realtime.PartyJoinRequestList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PartyJoinRequestList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  party_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PartyJoinRequestList::ArenaDtor(void* object) {
  PartyJoinRequestList* _this = reinterpret_cast< PartyJoinRequestList* >(object);
  (void)_this;
}
void PartyJoinRequestList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PartyJoinRequestList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PartyJoinRequestList& PartyJoinRequestList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PartyJoinRequestList_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base);
  return *internal_default_instance();
}


void PartyJoinRequestList::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.realtime.PartyJoinRequestList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  party_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PartyJoinRequestList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string party_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_party_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.realtime.PartyJoinRequestList.party_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PartyJoinRequestList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nakama.realtime.PartyJoinRequestList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string party_id = 1;
  if (this->party_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_party_id().data(), static_cast<int>(this->_internal_party_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.realtime.PartyJoinRequestList.party_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_party_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.realtime.PartyJoinRequestList)
  return target;
}

size_t PartyJoinRequestList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.realtime.PartyJoinRequestList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string party_id = 1;
  if (this->party_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_party_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PartyJoinRequestList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.realtime.PartyJoinRequestList)
  GOOGLE_DCHECK_NE(&from, this);
  const PartyJoinRequestList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PartyJoinRequestList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.realtime.PartyJoinRequestList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.realtime.PartyJoinRequestList)
    MergeFrom(*source);
  }
}

void PartyJoinRequestList::MergeFrom(const PartyJoinRequestList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.realtime.PartyJoinRequestList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.party_id().size() > 0) {
    _internal_set_party_id(from._internal_party_id());
  }
}

void PartyJoinRequestList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.realtime.PartyJoinRequestList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PartyJoinRequestList::CopyFrom(const PartyJoinRequestList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.realtime.PartyJoinRequestList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PartyJoinRequestList::IsInitialized() const {
  return true;
}

void PartyJoinRequestList::InternalSwap(PartyJoinRequestList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  party_id_.Swap(&other->party_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata PartyJoinRequestList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PartyJoinRequest::_Internal {
 public:
};

PartyJoinRequest::PartyJoinRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  presences_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nakama.realtime.PartyJoinRequest)
}
PartyJoinRequest::PartyJoinRequest(const PartyJoinRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      presences_(from.presences_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  party_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_party_id().empty()) {
    party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_party_id(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:nakama.realtime.PartyJoinRequest)
}

void PartyJoinRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PartyJoinRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base);
  party_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PartyJoinRequest::~PartyJoinRequest() {
  // @@protoc_insertion_point(destructor:nakama.realtime.PartyJoinRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PartyJoinRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  party_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PartyJoinRequest::ArenaDtor(void* object) {
  PartyJoinRequest* _this = reinterpret_cast< PartyJoinRequest* >(object);
  (void)_this;
}
void PartyJoinRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PartyJoinRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PartyJoinRequest& PartyJoinRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PartyJoinRequest_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base);
  return *internal_default_instance();
}


void PartyJoinRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.realtime.PartyJoinRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  presences_.Clear();
  party_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PartyJoinRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string party_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_party_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.realtime.PartyJoinRequest.party_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .nakama.realtime.UserPresence presences = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_presences(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PartyJoinRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nakama.realtime.PartyJoinRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string party_id = 1;
  if (this->party_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_party_id().data(), static_cast<int>(this->_internal_party_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.realtime.PartyJoinRequest.party_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_party_id(), target);
  }

  // repeated .nakama.realtime.UserPresence presences = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_presences_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_presences(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.realtime.PartyJoinRequest)
  return target;
}

size_t PartyJoinRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.realtime.PartyJoinRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .nakama.realtime.UserPresence presences = 2;
  total_size += 1UL * this->_internal_presences_size();
  for (const auto& msg : this->presences_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string party_id = 1;
  if (this->party_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_party_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PartyJoinRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.realtime.PartyJoinRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PartyJoinRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PartyJoinRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.realtime.PartyJoinRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.realtime.PartyJoinRequest)
    MergeFrom(*source);
  }
}

void PartyJoinRequest::MergeFrom(const PartyJoinRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.realtime.PartyJoinRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  presences_.MergeFrom(from.presences_);
  if (from.party_id().size() > 0) {
    _internal_set_party_id(from._internal_party_id());
  }
}

void PartyJoinRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.realtime.PartyJoinRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PartyJoinRequest::CopyFrom(const PartyJoinRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.realtime.PartyJoinRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PartyJoinRequest::IsInitialized() const {
  return true;
}

void PartyJoinRequest::InternalSwap(PartyJoinRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  presences_.InternalSwap(&other->presences_);
  party_id_.Swap(&other->party_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata PartyJoinRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

PartyMatchmakerAdd_StringPropertiesEntry_DoNotUse::PartyMatchmakerAdd_StringPropertiesEntry_DoNotUse() {}
PartyMatchmakerAdd_StringPropertiesEntry_DoNotUse::PartyMatchmakerAdd_StringPropertiesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void PartyMatchmakerAdd_StringPropertiesEntry_DoNotUse::MergeFrom(const PartyMatchmakerAdd_StringPropertiesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata PartyMatchmakerAdd_StringPropertiesEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void PartyMatchmakerAdd_StringPropertiesEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

PartyMatchmakerAdd_NumericPropertiesEntry_DoNotUse::PartyMatchmakerAdd_NumericPropertiesEntry_DoNotUse() {}
PartyMatchmakerAdd_NumericPropertiesEntry_DoNotUse::PartyMatchmakerAdd_NumericPropertiesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void PartyMatchmakerAdd_NumericPropertiesEntry_DoNotUse::MergeFrom(const PartyMatchmakerAdd_NumericPropertiesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata PartyMatchmakerAdd_NumericPropertiesEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void PartyMatchmakerAdd_NumericPropertiesEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

class PartyMatchmakerAdd::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Int32Value& count_multiple(const PartyMatchmakerAdd* msg);
};

const PROTOBUF_NAMESPACE_ID::Int32Value&
PartyMatchmakerAdd::_Internal::count_multiple(const PartyMatchmakerAdd* msg) {
  return *msg->count_multiple_;
}
void PartyMatchmakerAdd::clear_count_multiple() {
  if (GetArena() == nullptr && count_multiple_ != nullptr) {
    delete count_multiple_;
  }
  count_multiple_ = nullptr;
}
PartyMatchmakerAdd::PartyMatchmakerAdd(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  string_properties_(arena),
  numeric_properties_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nakama.realtime.PartyMatchmakerAdd)
}
PartyMatchmakerAdd::PartyMatchmakerAdd(const PartyMatchmakerAdd& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  string_properties_.MergeFrom(from.string_properties_);
  numeric_properties_.MergeFrom(from.numeric_properties_);
  party_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_party_id().empty()) {
    party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_party_id(), 
      GetArena());
  }
  query_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_query().empty()) {
    query_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_query(), 
      GetArena());
  }
  if (from._internal_has_count_multiple()) {
    count_multiple_ = new PROTOBUF_NAMESPACE_ID::Int32Value(*from.count_multiple_);
  } else {
    count_multiple_ = nullptr;
  }
  ::memcpy(&min_count_, &from.min_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_count_) -
    reinterpret_cast<char*>(&min_count_)) + sizeof(max_count_));
  // @@protoc_insertion_point(copy_constructor:nakama.realtime.PartyMatchmakerAdd)
}

void PartyMatchmakerAdd::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PartyMatchmakerAdd_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base);
  party_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  query_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&count_multiple_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&max_count_) -
      reinterpret_cast<char*>(&count_multiple_)) + sizeof(max_count_));
}

PartyMatchmakerAdd::~PartyMatchmakerAdd() {
  // @@protoc_insertion_point(destructor:nakama.realtime.PartyMatchmakerAdd)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PartyMatchmakerAdd::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  party_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  query_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete count_multiple_;
}

void PartyMatchmakerAdd::ArenaDtor(void* object) {
  PartyMatchmakerAdd* _this = reinterpret_cast< PartyMatchmakerAdd* >(object);
  (void)_this;
}
void PartyMatchmakerAdd::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PartyMatchmakerAdd::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PartyMatchmakerAdd& PartyMatchmakerAdd::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PartyMatchmakerAdd_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base);
  return *internal_default_instance();
}


void PartyMatchmakerAdd::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.realtime.PartyMatchmakerAdd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  string_properties_.Clear();
  numeric_properties_.Clear();
  party_id_.ClearToEmpty();
  query_.ClearToEmpty();
  if (GetArena() == nullptr && count_multiple_ != nullptr) {
    delete count_multiple_;
  }
  count_multiple_ = nullptr;
  ::memset(&min_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_count_) -
      reinterpret_cast<char*>(&min_count_)) + sizeof(max_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PartyMatchmakerAdd::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string party_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_party_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.realtime.PartyMatchmakerAdd.party_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 min_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          min_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 max_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          max_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string query = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_query();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.realtime.PartyMatchmakerAdd.query"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> string_properties = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&string_properties_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, double> numeric_properties = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&numeric_properties_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Int32Value count_multiple = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_count_multiple(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PartyMatchmakerAdd::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nakama.realtime.PartyMatchmakerAdd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string party_id = 1;
  if (this->party_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_party_id().data(), static_cast<int>(this->_internal_party_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.realtime.PartyMatchmakerAdd.party_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_party_id(), target);
  }

  // int32 min_count = 2;
  if (this->min_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_min_count(), target);
  }

  // int32 max_count = 3;
  if (this->max_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_max_count(), target);
  }

  // string query = 4;
  if (this->query().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_query().data(), static_cast<int>(this->_internal_query().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.realtime.PartyMatchmakerAdd.query");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_query(), target);
  }

  // map<string, string> string_properties = 5;
  if (!this->_internal_string_properties().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "nakama.realtime.PartyMatchmakerAdd.StringPropertiesEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "nakama.realtime.PartyMatchmakerAdd.StringPropertiesEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_string_properties().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_string_properties().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_string_properties().begin();
          it != this->_internal_string_properties().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = PartyMatchmakerAdd_StringPropertiesEntry_DoNotUse::Funcs::InternalSerialize(5, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_string_properties().begin();
          it != this->_internal_string_properties().end(); ++it) {
        target = PartyMatchmakerAdd_StringPropertiesEntry_DoNotUse::Funcs::InternalSerialize(5, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, double> numeric_properties = 6;
  if (!this->_internal_numeric_properties().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "nakama.realtime.PartyMatchmakerAdd.NumericPropertiesEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_numeric_properties().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_numeric_properties().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::const_iterator
          it = this->_internal_numeric_properties().begin();
          it != this->_internal_numeric_properties().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = PartyMatchmakerAdd_NumericPropertiesEntry_DoNotUse::Funcs::InternalSerialize(6, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::const_iterator
          it = this->_internal_numeric_properties().begin();
          it != this->_internal_numeric_properties().end(); ++it) {
        target = PartyMatchmakerAdd_NumericPropertiesEntry_DoNotUse::Funcs::InternalSerialize(6, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // .google.protobuf.Int32Value count_multiple = 7;
  if (this->has_count_multiple()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::count_multiple(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.realtime.PartyMatchmakerAdd)
  return target;
}

size_t PartyMatchmakerAdd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.realtime.PartyMatchmakerAdd)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> string_properties = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_string_properties_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_string_properties().begin();
      it != this->_internal_string_properties().end(); ++it) {
    total_size += PartyMatchmakerAdd_StringPropertiesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, double> numeric_properties = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_numeric_properties_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::const_iterator
      it = this->_internal_numeric_properties().begin();
      it != this->_internal_numeric_properties().end(); ++it) {
    total_size += PartyMatchmakerAdd_NumericPropertiesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string party_id = 1;
  if (this->party_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_party_id());
  }

  // string query = 4;
  if (this->query().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_query());
  }

  // .google.protobuf.Int32Value count_multiple = 7;
  if (this->has_count_multiple()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *count_multiple_);
  }

  // int32 min_count = 2;
  if (this->min_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_min_count());
  }

  // int32 max_count = 3;
  if (this->max_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_max_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PartyMatchmakerAdd::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.realtime.PartyMatchmakerAdd)
  GOOGLE_DCHECK_NE(&from, this);
  const PartyMatchmakerAdd* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PartyMatchmakerAdd>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.realtime.PartyMatchmakerAdd)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.realtime.PartyMatchmakerAdd)
    MergeFrom(*source);
  }
}

void PartyMatchmakerAdd::MergeFrom(const PartyMatchmakerAdd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.realtime.PartyMatchmakerAdd)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  string_properties_.MergeFrom(from.string_properties_);
  numeric_properties_.MergeFrom(from.numeric_properties_);
  if (from.party_id().size() > 0) {
    _internal_set_party_id(from._internal_party_id());
  }
  if (from.query().size() > 0) {
    _internal_set_query(from._internal_query());
  }
  if (from.has_count_multiple()) {
    _internal_mutable_count_multiple()->PROTOBUF_NAMESPACE_ID::Int32Value::MergeFrom(from._internal_count_multiple());
  }
  if (from.min_count() != 0) {
    _internal_set_min_count(from._internal_min_count());
  }
  if (from.max_count() != 0) {
    _internal_set_max_count(from._internal_max_count());
  }
}

void PartyMatchmakerAdd::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.realtime.PartyMatchmakerAdd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PartyMatchmakerAdd::CopyFrom(const PartyMatchmakerAdd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.realtime.PartyMatchmakerAdd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PartyMatchmakerAdd::IsInitialized() const {
  return true;
}

void PartyMatchmakerAdd::InternalSwap(PartyMatchmakerAdd* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  string_properties_.Swap(&other->string_properties_);
  numeric_properties_.Swap(&other->numeric_properties_);
  party_id_.Swap(&other->party_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  query_.Swap(&other->query_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PartyMatchmakerAdd, max_count_)
      + sizeof(PartyMatchmakerAdd::max_count_)
      - PROTOBUF_FIELD_OFFSET(PartyMatchmakerAdd, count_multiple_)>(
          reinterpret_cast<char*>(&count_multiple_),
          reinterpret_cast<char*>(&other->count_multiple_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PartyMatchmakerAdd::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PartyMatchmakerRemove::_Internal {
 public:
};

PartyMatchmakerRemove::PartyMatchmakerRemove(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nakama.realtime.PartyMatchmakerRemove)
}
PartyMatchmakerRemove::PartyMatchmakerRemove(const PartyMatchmakerRemove& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  party_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_party_id().empty()) {
    party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_party_id(), 
      GetArena());
  }
  ticket_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ticket().empty()) {
    ticket_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ticket(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:nakama.realtime.PartyMatchmakerRemove)
}

void PartyMatchmakerRemove::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PartyMatchmakerRemove_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base);
  party_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ticket_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PartyMatchmakerRemove::~PartyMatchmakerRemove() {
  // @@protoc_insertion_point(destructor:nakama.realtime.PartyMatchmakerRemove)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PartyMatchmakerRemove::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  party_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ticket_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PartyMatchmakerRemove::ArenaDtor(void* object) {
  PartyMatchmakerRemove* _this = reinterpret_cast< PartyMatchmakerRemove* >(object);
  (void)_this;
}
void PartyMatchmakerRemove::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PartyMatchmakerRemove::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PartyMatchmakerRemove& PartyMatchmakerRemove::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PartyMatchmakerRemove_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base);
  return *internal_default_instance();
}


void PartyMatchmakerRemove::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.realtime.PartyMatchmakerRemove)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  party_id_.ClearToEmpty();
  ticket_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PartyMatchmakerRemove::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string party_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_party_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.realtime.PartyMatchmakerRemove.party_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ticket = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_ticket();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.realtime.PartyMatchmakerRemove.ticket"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PartyMatchmakerRemove::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nakama.realtime.PartyMatchmakerRemove)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string party_id = 1;
  if (this->party_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_party_id().data(), static_cast<int>(this->_internal_party_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.realtime.PartyMatchmakerRemove.party_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_party_id(), target);
  }

  // string ticket = 2;
  if (this->ticket().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ticket().data(), static_cast<int>(this->_internal_ticket().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.realtime.PartyMatchmakerRemove.ticket");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_ticket(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.realtime.PartyMatchmakerRemove)
  return target;
}

size_t PartyMatchmakerRemove::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.realtime.PartyMatchmakerRemove)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string party_id = 1;
  if (this->party_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_party_id());
  }

  // string ticket = 2;
  if (this->ticket().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ticket());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PartyMatchmakerRemove::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.realtime.PartyMatchmakerRemove)
  GOOGLE_DCHECK_NE(&from, this);
  const PartyMatchmakerRemove* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PartyMatchmakerRemove>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.realtime.PartyMatchmakerRemove)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.realtime.PartyMatchmakerRemove)
    MergeFrom(*source);
  }
}

void PartyMatchmakerRemove::MergeFrom(const PartyMatchmakerRemove& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.realtime.PartyMatchmakerRemove)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.party_id().size() > 0) {
    _internal_set_party_id(from._internal_party_id());
  }
  if (from.ticket().size() > 0) {
    _internal_set_ticket(from._internal_ticket());
  }
}

void PartyMatchmakerRemove::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.realtime.PartyMatchmakerRemove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PartyMatchmakerRemove::CopyFrom(const PartyMatchmakerRemove& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.realtime.PartyMatchmakerRemove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PartyMatchmakerRemove::IsInitialized() const {
  return true;
}

void PartyMatchmakerRemove::InternalSwap(PartyMatchmakerRemove* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  party_id_.Swap(&other->party_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ticket_.Swap(&other->ticket_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata PartyMatchmakerRemove::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PartyMatchmakerTicket::_Internal {
 public:
};

PartyMatchmakerTicket::PartyMatchmakerTicket(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nakama.realtime.PartyMatchmakerTicket)
}
PartyMatchmakerTicket::PartyMatchmakerTicket(const PartyMatchmakerTicket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  party_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_party_id().empty()) {
    party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_party_id(), 
      GetArena());
  }
  ticket_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ticket().empty()) {
    ticket_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ticket(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:nakama.realtime.PartyMatchmakerTicket)
}

void PartyMatchmakerTicket::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PartyMatchmakerTicket_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base);
  party_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ticket_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PartyMatchmakerTicket::~PartyMatchmakerTicket() {
  // @@protoc_insertion_point(destructor:nakama.realtime.PartyMatchmakerTicket)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PartyMatchmakerTicket::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  party_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ticket_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PartyMatchmakerTicket::ArenaDtor(void* object) {
  PartyMatchmakerTicket* _this = reinterpret_cast< PartyMatchmakerTicket* >(object);
  (void)_this;
}
void PartyMatchmakerTicket::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PartyMatchmakerTicket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PartyMatchmakerTicket& PartyMatchmakerTicket::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PartyMatchmakerTicket_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base);
  return *internal_default_instance();
}


void PartyMatchmakerTicket::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.realtime.PartyMatchmakerTicket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  party_id_.ClearToEmpty();
  ticket_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PartyMatchmakerTicket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string party_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_party_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.realtime.PartyMatchmakerTicket.party_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ticket = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_ticket();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.realtime.PartyMatchmakerTicket.ticket"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PartyMatchmakerTicket::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nakama.realtime.PartyMatchmakerTicket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string party_id = 1;
  if (this->party_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_party_id().data(), static_cast<int>(this->_internal_party_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.realtime.PartyMatchmakerTicket.party_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_party_id(), target);
  }

  // string ticket = 2;
  if (this->ticket().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ticket().data(), static_cast<int>(this->_internal_ticket().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.realtime.PartyMatchmakerTicket.ticket");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_ticket(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.realtime.PartyMatchmakerTicket)
  return target;
}

size_t PartyMatchmakerTicket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.realtime.PartyMatchmakerTicket)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string party_id = 1;
  if (this->party_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_party_id());
  }

  // string ticket = 2;
  if (this->ticket().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ticket());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PartyMatchmakerTicket::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.realtime.PartyMatchmakerTicket)
  GOOGLE_DCHECK_NE(&from, this);
  const PartyMatchmakerTicket* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PartyMatchmakerTicket>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.realtime.PartyMatchmakerTicket)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.realtime.PartyMatchmakerTicket)
    MergeFrom(*source);
  }
}

void PartyMatchmakerTicket::MergeFrom(const PartyMatchmakerTicket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.realtime.PartyMatchmakerTicket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.party_id().size() > 0) {
    _internal_set_party_id(from._internal_party_id());
  }
  if (from.ticket().size() > 0) {
    _internal_set_ticket(from._internal_ticket());
  }
}

void PartyMatchmakerTicket::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.realtime.PartyMatchmakerTicket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PartyMatchmakerTicket::CopyFrom(const PartyMatchmakerTicket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.realtime.PartyMatchmakerTicket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PartyMatchmakerTicket::IsInitialized() const {
  return true;
}

void PartyMatchmakerTicket::InternalSwap(PartyMatchmakerTicket* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  party_id_.Swap(&other->party_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ticket_.Swap(&other->ticket_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata PartyMatchmakerTicket::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PartyData::_Internal {
 public:
  static const ::nakama::realtime::UserPresence& presence(const PartyData* msg);
};

const ::nakama::realtime::UserPresence&
PartyData::_Internal::presence(const PartyData* msg) {
  return *msg->presence_;
}
PartyData::PartyData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nakama.realtime.PartyData)
}
PartyData::PartyData(const PartyData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  party_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_party_id().empty()) {
    party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_party_id(), 
      GetArena());
  }
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data(), 
      GetArena());
  }
  if (from._internal_has_presence()) {
    presence_ = new ::nakama::realtime::UserPresence(*from.presence_);
  } else {
    presence_ = nullptr;
  }
  op_code_ = from.op_code_;
  // @@protoc_insertion_point(copy_constructor:nakama.realtime.PartyData)
}

void PartyData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PartyData_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base);
  party_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&presence_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&op_code_) -
      reinterpret_cast<char*>(&presence_)) + sizeof(op_code_));
}

PartyData::~PartyData() {
  // @@protoc_insertion_point(destructor:nakama.realtime.PartyData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PartyData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  party_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete presence_;
}

void PartyData::ArenaDtor(void* object) {
  PartyData* _this = reinterpret_cast< PartyData* >(object);
  (void)_this;
}
void PartyData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PartyData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PartyData& PartyData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PartyData_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base);
  return *internal_default_instance();
}


void PartyData::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.realtime.PartyData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  party_id_.ClearToEmpty();
  data_.ClearToEmpty();
  if (GetArena() == nullptr && presence_ != nullptr) {
    delete presence_;
  }
  presence_ = nullptr;
  op_code_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PartyData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string party_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_party_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.realtime.PartyData.party_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nakama.realtime.UserPresence presence = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_presence(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 op_code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          op_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PartyData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nakama.realtime.PartyData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string party_id = 1;
  if (this->party_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_party_id().data(), static_cast<int>(this->_internal_party_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.realtime.PartyData.party_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_party_id(), target);
  }

  // .nakama.realtime.UserPresence presence = 2;
  if (this->has_presence()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::presence(this), target, stream);
  }

  // int64 op_code = 3;
  if (this->op_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_op_code(), target);
  }

  // bytes data = 4;
  if (this->data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.realtime.PartyData)
  return target;
}

size_t PartyData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.realtime.PartyData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string party_id = 1;
  if (this->party_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_party_id());
  }

  // bytes data = 4;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // .nakama.realtime.UserPresence presence = 2;
  if (this->has_presence()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *presence_);
  }

  // int64 op_code = 3;
  if (this->op_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_op_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PartyData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.realtime.PartyData)
  GOOGLE_DCHECK_NE(&from, this);
  const PartyData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PartyData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.realtime.PartyData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.realtime.PartyData)
    MergeFrom(*source);
  }
}

void PartyData::MergeFrom(const PartyData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.realtime.PartyData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.party_id().size() > 0) {
    _internal_set_party_id(from._internal_party_id());
  }
  if (from.data().size() > 0) {
    _internal_set_data(from._internal_data());
  }
  if (from.has_presence()) {
    _internal_mutable_presence()->::nakama::realtime::UserPresence::MergeFrom(from._internal_presence());
  }
  if (from.op_code() != 0) {
    _internal_set_op_code(from._internal_op_code());
  }
}

void PartyData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.realtime.PartyData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PartyData::CopyFrom(const PartyData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.realtime.PartyData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PartyData::IsInitialized() const {
  return true;
}

void PartyData::InternalSwap(PartyData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  party_id_.Swap(&other->party_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PartyData, op_code_)
      + sizeof(PartyData::op_code_)
      - PROTOBUF_FIELD_OFFSET(PartyData, presence_)>(
          reinterpret_cast<char*>(&presence_),
          reinterpret_cast<char*>(&other->presence_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PartyData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PartyDataSend::_Internal {
 public:
};

PartyDataSend::PartyDataSend(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nakama.realtime.PartyDataSend)
}
PartyDataSend::PartyDataSend(const PartyDataSend& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  party_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_party_id().empty()) {
    party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_party_id(), 
      GetArena());
  }
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data(), 
      GetArena());
  }
  op_code_ = from.op_code_;
  // @@protoc_insertion_point(copy_constructor:nakama.realtime.PartyDataSend)
}

void PartyDataSend::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PartyDataSend_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base);
  party_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  op_code_ = PROTOBUF_LONGLONG(0);
}

PartyDataSend::~PartyDataSend() {
  // @@protoc_insertion_point(destructor:nakama.realtime.PartyDataSend)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PartyDataSend::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  party_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PartyDataSend::ArenaDtor(void* object) {
  PartyDataSend* _this = reinterpret_cast< PartyDataSend* >(object);
  (void)_this;
}
void PartyDataSend::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PartyDataSend::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PartyDataSend& PartyDataSend::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PartyDataSend_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base);
  return *internal_default_instance();
}


void PartyDataSend::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.realtime.PartyDataSend)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  party_id_.ClearToEmpty();
  data_.ClearToEmpty();
  op_code_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PartyDataSend::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string party_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_party_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.realtime.PartyDataSend.party_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 op_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          op_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PartyDataSend::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nakama.realtime.PartyDataSend)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string party_id = 1;
  if (this->party_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_party_id().data(), static_cast<int>(this->_internal_party_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.realtime.PartyDataSend.party_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_party_id(), target);
  }

  // int64 op_code = 2;
  if (this->op_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_op_code(), target);
  }

  // bytes data = 3;
  if (this->data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.realtime.PartyDataSend)
  return target;
}

size_t PartyDataSend::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.realtime.PartyDataSend)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string party_id = 1;
  if (this->party_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_party_id());
  }

  // bytes data = 3;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // int64 op_code = 2;
  if (this->op_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_op_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PartyDataSend::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.realtime.PartyDataSend)
  GOOGLE_DCHECK_NE(&from, this);
  const PartyDataSend* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PartyDataSend>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.realtime.PartyDataSend)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.realtime.PartyDataSend)
    MergeFrom(*source);
  }
}

void PartyDataSend::MergeFrom(const PartyDataSend& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.realtime.PartyDataSend)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.party_id().size() > 0) {
    _internal_set_party_id(from._internal_party_id());
  }
  if (from.data().size() > 0) {
    _internal_set_data(from._internal_data());
  }
  if (from.op_code() != 0) {
    _internal_set_op_code(from._internal_op_code());
  }
}

void PartyDataSend::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.realtime.PartyDataSend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PartyDataSend::CopyFrom(const PartyDataSend& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.realtime.PartyDataSend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PartyDataSend::IsInitialized() const {
  return true;
}

void PartyDataSend::InternalSwap(PartyDataSend* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  party_id_.Swap(&other->party_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(op_code_, other->op_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PartyDataSend::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PartyPresenceEvent::_Internal {
 public:
};

PartyPresenceEvent::PartyPresenceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  joins_(arena),
  leaves_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nakama.realtime.PartyPresenceEvent)
}
PartyPresenceEvent::PartyPresenceEvent(const PartyPresenceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      joins_(from.joins_),
      leaves_(from.leaves_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  party_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_party_id().empty()) {
    party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_party_id(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:nakama.realtime.PartyPresenceEvent)
}

void PartyPresenceEvent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PartyPresenceEvent_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base);
  party_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PartyPresenceEvent::~PartyPresenceEvent() {
  // @@protoc_insertion_point(destructor:nakama.realtime.PartyPresenceEvent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PartyPresenceEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  party_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PartyPresenceEvent::ArenaDtor(void* object) {
  PartyPresenceEvent* _this = reinterpret_cast< PartyPresenceEvent* >(object);
  (void)_this;
}
void PartyPresenceEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PartyPresenceEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PartyPresenceEvent& PartyPresenceEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PartyPresenceEvent_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base);
  return *internal_default_instance();
}


void PartyPresenceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.realtime.PartyPresenceEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  joins_.Clear();
  leaves_.Clear();
  party_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PartyPresenceEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string party_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_party_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.realtime.PartyPresenceEvent.party_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .nakama.realtime.UserPresence joins = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_joins(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .nakama.realtime.UserPresence leaves = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_leaves(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PartyPresenceEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nakama.realtime.PartyPresenceEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string party_id = 1;
  if (this->party_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_party_id().data(), static_cast<int>(this->_internal_party_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.realtime.PartyPresenceEvent.party_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_party_id(), target);
  }

  // repeated .nakama.realtime.UserPresence joins = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_joins_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_joins(i), target, stream);
  }

  // repeated .nakama.realtime.UserPresence leaves = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_leaves_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_leaves(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.realtime.PartyPresenceEvent)
  return target;
}

size_t PartyPresenceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.realtime.PartyPresenceEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .nakama.realtime.UserPresence joins = 2;
  total_size += 1UL * this->_internal_joins_size();
  for (const auto& msg : this->joins_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .nakama.realtime.UserPresence leaves = 3;
  total_size += 1UL * this->_internal_leaves_size();
  for (const auto& msg : this->leaves_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string party_id = 1;
  if (this->party_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_party_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PartyPresenceEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.realtime.PartyPresenceEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const PartyPresenceEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PartyPresenceEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.realtime.PartyPresenceEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.realtime.PartyPresenceEvent)
    MergeFrom(*source);
  }
}

void PartyPresenceEvent::MergeFrom(const PartyPresenceEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.realtime.PartyPresenceEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  joins_.MergeFrom(from.joins_);
  leaves_.MergeFrom(from.leaves_);
  if (from.party_id().size() > 0) {
    _internal_set_party_id(from._internal_party_id());
  }
}

void PartyPresenceEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.realtime.PartyPresenceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PartyPresenceEvent::CopyFrom(const PartyPresenceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.realtime.PartyPresenceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PartyPresenceEvent::IsInitialized() const {
  return true;
}

void PartyPresenceEvent::InternalSwap(PartyPresenceEvent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  joins_.InternalSwap(&other->joins_);
  leaves_.InternalSwap(&other->leaves_);
  party_id_.Swap(&other->party_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata PartyPresenceEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Ping::_Internal {
 public:
};

Ping::Ping(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nakama.realtime.Ping)
}
Ping::Ping(const Ping& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:nakama.realtime.Ping)
}

void Ping::SharedCtor() {
}

Ping::~Ping() {
  // @@protoc_insertion_point(destructor:nakama.realtime.Ping)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Ping::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Ping::ArenaDtor(void* object) {
  Ping* _this = reinterpret_cast< Ping* >(object);
  (void)_this;
}
void Ping::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Ping::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Ping& Ping::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Ping_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base);
  return *internal_default_instance();
}


void Ping::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.realtime.Ping)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Ping::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Ping::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nakama.realtime.Ping)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.realtime.Ping)
  return target;
}

size_t Ping::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.realtime.Ping)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Ping::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.realtime.Ping)
  GOOGLE_DCHECK_NE(&from, this);
  const Ping* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Ping>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.realtime.Ping)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.realtime.Ping)
    MergeFrom(*source);
  }
}

void Ping::MergeFrom(const Ping& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.realtime.Ping)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Ping::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.realtime.Ping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ping::CopyFrom(const Ping& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.realtime.Ping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ping::IsInitialized() const {
  return true;
}

void Ping::InternalSwap(Ping* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Ping::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Pong::_Internal {
 public:
};

Pong::Pong(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nakama.realtime.Pong)
}
Pong::Pong(const Pong& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:nakama.realtime.Pong)
}

void Pong::SharedCtor() {
}

Pong::~Pong() {
  // @@protoc_insertion_point(destructor:nakama.realtime.Pong)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Pong::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Pong::ArenaDtor(void* object) {
  Pong* _this = reinterpret_cast< Pong* >(object);
  (void)_this;
}
void Pong::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Pong::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Pong& Pong::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Pong_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base);
  return *internal_default_instance();
}


void Pong::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.realtime.Pong)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Pong::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Pong::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nakama.realtime.Pong)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.realtime.Pong)
  return target;
}

size_t Pong::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.realtime.Pong)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Pong::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.realtime.Pong)
  GOOGLE_DCHECK_NE(&from, this);
  const Pong* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Pong>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.realtime.Pong)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.realtime.Pong)
    MergeFrom(*source);
  }
}

void Pong::MergeFrom(const Pong& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.realtime.Pong)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Pong::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.realtime.Pong)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pong::CopyFrom(const Pong& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.realtime.Pong)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pong::IsInitialized() const {
  return true;
}

void Pong::InternalSwap(Pong* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Pong::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Status::_Internal {
 public:
};

Status::Status(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  presences_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nakama.realtime.Status)
}
Status::Status(const Status& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      presences_(from.presences_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:nakama.realtime.Status)
}

void Status::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Status_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base);
}

Status::~Status() {
  // @@protoc_insertion_point(destructor:nakama.realtime.Status)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Status::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Status::ArenaDtor(void* object) {
  Status* _this = reinterpret_cast< Status* >(object);
  (void)_this;
}
void Status::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Status::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Status& Status::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Status_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base);
  return *internal_default_instance();
}


void Status::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.realtime.Status)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  presences_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Status::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .nakama.realtime.UserPresence presences = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_presences(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Status::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nakama.realtime.Status)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .nakama.realtime.UserPresence presences = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_presences_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_presences(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.realtime.Status)
  return target;
}

size_t Status::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.realtime.Status)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .nakama.realtime.UserPresence presences = 1;
  total_size += 1UL * this->_internal_presences_size();
  for (const auto& msg : this->presences_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Status::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.realtime.Status)
  GOOGLE_DCHECK_NE(&from, this);
  const Status* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Status>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.realtime.Status)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.realtime.Status)
    MergeFrom(*source);
  }
}

void Status::MergeFrom(const Status& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.realtime.Status)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  presences_.MergeFrom(from.presences_);
}

void Status::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.realtime.Status)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Status::CopyFrom(const Status& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.realtime.Status)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Status::IsInitialized() const {
  return true;
}

void Status::InternalSwap(Status* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  presences_.InternalSwap(&other->presences_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Status::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class StatusFollow::_Internal {
 public:
};

StatusFollow::StatusFollow(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  user_ids_(arena),
  usernames_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nakama.realtime.StatusFollow)
}
StatusFollow::StatusFollow(const StatusFollow& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      user_ids_(from.user_ids_),
      usernames_(from.usernames_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:nakama.realtime.StatusFollow)
}

void StatusFollow::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StatusFollow_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base);
}

StatusFollow::~StatusFollow() {
  // @@protoc_insertion_point(destructor:nakama.realtime.StatusFollow)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StatusFollow::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void StatusFollow::ArenaDtor(void* object) {
  StatusFollow* _this = reinterpret_cast< StatusFollow* >(object);
  (void)_this;
}
void StatusFollow::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StatusFollow::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StatusFollow& StatusFollow::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StatusFollow_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base);
  return *internal_default_instance();
}


void StatusFollow::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.realtime.StatusFollow)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_ids_.Clear();
  usernames_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StatusFollow::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string user_ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_user_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.realtime.StatusFollow.user_ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string usernames = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_usernames();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.realtime.StatusFollow.usernames"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StatusFollow::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nakama.realtime.StatusFollow)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string user_ids = 1;
  for (int i = 0, n = this->_internal_user_ids_size(); i < n; i++) {
    const auto& s = this->_internal_user_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.realtime.StatusFollow.user_ids");
    target = stream->WriteString(1, s, target);
  }

  // repeated string usernames = 2;
  for (int i = 0, n = this->_internal_usernames_size(); i < n; i++) {
    const auto& s = this->_internal_usernames(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.realtime.StatusFollow.usernames");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.realtime.StatusFollow)
  return target;
}

size_t StatusFollow::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.realtime.StatusFollow)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string user_ids = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(user_ids_.size());
  for (int i = 0, n = user_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      user_ids_.Get(i));
  }

  // repeated string usernames = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(usernames_.size());
  for (int i = 0, n = usernames_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      usernames_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StatusFollow::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.realtime.StatusFollow)
  GOOGLE_DCHECK_NE(&from, this);
  const StatusFollow* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StatusFollow>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.realtime.StatusFollow)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.realtime.StatusFollow)
    MergeFrom(*source);
  }
}

void StatusFollow::MergeFrom(const StatusFollow& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.realtime.StatusFollow)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  user_ids_.MergeFrom(from.user_ids_);
  usernames_.MergeFrom(from.usernames_);
}

void StatusFollow::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.realtime.StatusFollow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatusFollow::CopyFrom(const StatusFollow& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.realtime.StatusFollow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatusFollow::IsInitialized() const {
  return true;
}

void StatusFollow::InternalSwap(StatusFollow* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  user_ids_.InternalSwap(&other->user_ids_);
  usernames_.InternalSwap(&other->usernames_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StatusFollow::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class StatusPresenceEvent::_Internal {
 public:
};

StatusPresenceEvent::StatusPresenceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  joins_(arena),
  leaves_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nakama.realtime.StatusPresenceEvent)
}
StatusPresenceEvent::StatusPresenceEvent(const StatusPresenceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      joins_(from.joins_),
      leaves_(from.leaves_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:nakama.realtime.StatusPresenceEvent)
}

void StatusPresenceEvent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StatusPresenceEvent_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base);
}

StatusPresenceEvent::~StatusPresenceEvent() {
  // @@protoc_insertion_point(destructor:nakama.realtime.StatusPresenceEvent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StatusPresenceEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void StatusPresenceEvent::ArenaDtor(void* object) {
  StatusPresenceEvent* _this = reinterpret_cast< StatusPresenceEvent* >(object);
  (void)_this;
}
void StatusPresenceEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StatusPresenceEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StatusPresenceEvent& StatusPresenceEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StatusPresenceEvent_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base);
  return *internal_default_instance();
}


void StatusPresenceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.realtime.StatusPresenceEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  joins_.Clear();
  leaves_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StatusPresenceEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .nakama.realtime.UserPresence joins = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_joins(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .nakama.realtime.UserPresence leaves = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_leaves(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StatusPresenceEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nakama.realtime.StatusPresenceEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .nakama.realtime.UserPresence joins = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_joins_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_joins(i), target, stream);
  }

  // repeated .nakama.realtime.UserPresence leaves = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_leaves_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_leaves(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.realtime.StatusPresenceEvent)
  return target;
}

size_t StatusPresenceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.realtime.StatusPresenceEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .nakama.realtime.UserPresence joins = 2;
  total_size += 1UL * this->_internal_joins_size();
  for (const auto& msg : this->joins_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .nakama.realtime.UserPresence leaves = 3;
  total_size += 1UL * this->_internal_leaves_size();
  for (const auto& msg : this->leaves_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StatusPresenceEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.realtime.StatusPresenceEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const StatusPresenceEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StatusPresenceEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.realtime.StatusPresenceEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.realtime.StatusPresenceEvent)
    MergeFrom(*source);
  }
}

void StatusPresenceEvent::MergeFrom(const StatusPresenceEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.realtime.StatusPresenceEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  joins_.MergeFrom(from.joins_);
  leaves_.MergeFrom(from.leaves_);
}

void StatusPresenceEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.realtime.StatusPresenceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatusPresenceEvent::CopyFrom(const StatusPresenceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.realtime.StatusPresenceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatusPresenceEvent::IsInitialized() const {
  return true;
}

void StatusPresenceEvent::InternalSwap(StatusPresenceEvent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  joins_.InternalSwap(&other->joins_);
  leaves_.InternalSwap(&other->leaves_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StatusPresenceEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class StatusUnfollow::_Internal {
 public:
};

StatusUnfollow::StatusUnfollow(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  user_ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nakama.realtime.StatusUnfollow)
}
StatusUnfollow::StatusUnfollow(const StatusUnfollow& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      user_ids_(from.user_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:nakama.realtime.StatusUnfollow)
}

void StatusUnfollow::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StatusUnfollow_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base);
}

StatusUnfollow::~StatusUnfollow() {
  // @@protoc_insertion_point(destructor:nakama.realtime.StatusUnfollow)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StatusUnfollow::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void StatusUnfollow::ArenaDtor(void* object) {
  StatusUnfollow* _this = reinterpret_cast< StatusUnfollow* >(object);
  (void)_this;
}
void StatusUnfollow::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StatusUnfollow::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StatusUnfollow& StatusUnfollow::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StatusUnfollow_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base);
  return *internal_default_instance();
}


void StatusUnfollow::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.realtime.StatusUnfollow)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_ids_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StatusUnfollow::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string user_ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_user_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.realtime.StatusUnfollow.user_ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StatusUnfollow::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nakama.realtime.StatusUnfollow)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string user_ids = 1;
  for (int i = 0, n = this->_internal_user_ids_size(); i < n; i++) {
    const auto& s = this->_internal_user_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.realtime.StatusUnfollow.user_ids");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.realtime.StatusUnfollow)
  return target;
}

size_t StatusUnfollow::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.realtime.StatusUnfollow)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string user_ids = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(user_ids_.size());
  for (int i = 0, n = user_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      user_ids_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StatusUnfollow::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.realtime.StatusUnfollow)
  GOOGLE_DCHECK_NE(&from, this);
  const StatusUnfollow* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StatusUnfollow>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.realtime.StatusUnfollow)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.realtime.StatusUnfollow)
    MergeFrom(*source);
  }
}

void StatusUnfollow::MergeFrom(const StatusUnfollow& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.realtime.StatusUnfollow)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  user_ids_.MergeFrom(from.user_ids_);
}

void StatusUnfollow::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.realtime.StatusUnfollow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatusUnfollow::CopyFrom(const StatusUnfollow& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.realtime.StatusUnfollow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatusUnfollow::IsInitialized() const {
  return true;
}

void StatusUnfollow::InternalSwap(StatusUnfollow* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  user_ids_.InternalSwap(&other->user_ids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StatusUnfollow::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class StatusUpdate::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::StringValue& status(const StatusUpdate* msg);
};

const PROTOBUF_NAMESPACE_ID::StringValue&
StatusUpdate::_Internal::status(const StatusUpdate* msg) {
  return *msg->status_;
}
void StatusUpdate::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
StatusUpdate::StatusUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nakama.realtime.StatusUpdate)
}
StatusUpdate::StatusUpdate(const StatusUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new PROTOBUF_NAMESPACE_ID::StringValue(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:nakama.realtime.StatusUpdate)
}

void StatusUpdate::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StatusUpdate_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base);
  status_ = nullptr;
}

StatusUpdate::~StatusUpdate() {
  // @@protoc_insertion_point(destructor:nakama.realtime.StatusUpdate)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StatusUpdate::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void StatusUpdate::ArenaDtor(void* object) {
  StatusUpdate* _this = reinterpret_cast< StatusUpdate* >(object);
  (void)_this;
}
void StatusUpdate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StatusUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StatusUpdate& StatusUpdate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StatusUpdate_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base);
  return *internal_default_instance();
}


void StatusUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.realtime.StatusUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StatusUpdate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.protobuf.StringValue status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StatusUpdate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nakama.realtime.StatusUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.StringValue status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.realtime.StatusUpdate)
  return target;
}

size_t StatusUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.realtime.StatusUpdate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.StringValue status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StatusUpdate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.realtime.StatusUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  const StatusUpdate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StatusUpdate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.realtime.StatusUpdate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.realtime.StatusUpdate)
    MergeFrom(*source);
  }
}

void StatusUpdate::MergeFrom(const StatusUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.realtime.StatusUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_status()) {
    _internal_mutable_status()->PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from._internal_status());
  }
}

void StatusUpdate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.realtime.StatusUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatusUpdate::CopyFrom(const StatusUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.realtime.StatusUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatusUpdate::IsInitialized() const {
  return true;
}

void StatusUpdate::InternalSwap(StatusUpdate* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StatusUpdate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Stream::_Internal {
 public:
};

Stream::Stream(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nakama.realtime.Stream)
}
Stream::Stream(const Stream& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  subject_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_subject().empty()) {
    subject_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_subject(), 
      GetArena());
  }
  subcontext_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_subcontext().empty()) {
    subcontext_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_subcontext(), 
      GetArena());
  }
  label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_label().empty()) {
    label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_label(), 
      GetArena());
  }
  mode_ = from.mode_;
  // @@protoc_insertion_point(copy_constructor:nakama.realtime.Stream)
}

void Stream::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Stream_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base);
  subject_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  subcontext_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mode_ = 0;
}

Stream::~Stream() {
  // @@protoc_insertion_point(destructor:nakama.realtime.Stream)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Stream::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  subject_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  subcontext_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  label_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Stream::ArenaDtor(void* object) {
  Stream* _this = reinterpret_cast< Stream* >(object);
  (void)_this;
}
void Stream::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Stream::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Stream& Stream::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Stream_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base);
  return *internal_default_instance();
}


void Stream::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.realtime.Stream)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  subject_.ClearToEmpty();
  subcontext_.ClearToEmpty();
  label_.ClearToEmpty();
  mode_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Stream::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 mode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string subject = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_subject();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.realtime.Stream.subject"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string subcontext = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_subcontext();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.realtime.Stream.subcontext"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string label = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_label();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.realtime.Stream.label"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Stream::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nakama.realtime.Stream)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 mode = 1;
  if (this->mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_mode(), target);
  }

  // string subject = 2;
  if (this->subject().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_subject().data(), static_cast<int>(this->_internal_subject().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.realtime.Stream.subject");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_subject(), target);
  }

  // string subcontext = 3;
  if (this->subcontext().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_subcontext().data(), static_cast<int>(this->_internal_subcontext().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.realtime.Stream.subcontext");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_subcontext(), target);
  }

  // string label = 4;
  if (this->label().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_label().data(), static_cast<int>(this->_internal_label().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.realtime.Stream.label");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_label(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.realtime.Stream)
  return target;
}

size_t Stream::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.realtime.Stream)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string subject = 2;
  if (this->subject().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_subject());
  }

  // string subcontext = 3;
  if (this->subcontext().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_subcontext());
  }

  // string label = 4;
  if (this->label().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_label());
  }

  // int32 mode = 1;
  if (this->mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Stream::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.realtime.Stream)
  GOOGLE_DCHECK_NE(&from, this);
  const Stream* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Stream>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.realtime.Stream)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.realtime.Stream)
    MergeFrom(*source);
  }
}

void Stream::MergeFrom(const Stream& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.realtime.Stream)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.subject().size() > 0) {
    _internal_set_subject(from._internal_subject());
  }
  if (from.subcontext().size() > 0) {
    _internal_set_subcontext(from._internal_subcontext());
  }
  if (from.label().size() > 0) {
    _internal_set_label(from._internal_label());
  }
  if (from.mode() != 0) {
    _internal_set_mode(from._internal_mode());
  }
}

void Stream::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.realtime.Stream)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Stream::CopyFrom(const Stream& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.realtime.Stream)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Stream::IsInitialized() const {
  return true;
}

void Stream::InternalSwap(Stream* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  subject_.Swap(&other->subject_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  subcontext_.Swap(&other->subcontext_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  label_.Swap(&other->label_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(mode_, other->mode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Stream::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class StreamData::_Internal {
 public:
  static const ::nakama::realtime::Stream& stream(const StreamData* msg);
  static const ::nakama::realtime::UserPresence& sender(const StreamData* msg);
};

const ::nakama::realtime::Stream&
StreamData::_Internal::stream(const StreamData* msg) {
  return *msg->stream_;
}
const ::nakama::realtime::UserPresence&
StreamData::_Internal::sender(const StreamData* msg) {
  return *msg->sender_;
}
StreamData::StreamData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nakama.realtime.StreamData)
}
StreamData::StreamData(const StreamData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data(), 
      GetArena());
  }
  if (from._internal_has_stream()) {
    stream_ = new ::nakama::realtime::Stream(*from.stream_);
  } else {
    stream_ = nullptr;
  }
  if (from._internal_has_sender()) {
    sender_ = new ::nakama::realtime::UserPresence(*from.sender_);
  } else {
    sender_ = nullptr;
  }
  reliable_ = from.reliable_;
  // @@protoc_insertion_point(copy_constructor:nakama.realtime.StreamData)
}

void StreamData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StreamData_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&stream_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&reliable_) -
      reinterpret_cast<char*>(&stream_)) + sizeof(reliable_));
}

StreamData::~StreamData() {
  // @@protoc_insertion_point(destructor:nakama.realtime.StreamData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StreamData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete stream_;
  if (this != internal_default_instance()) delete sender_;
}

void StreamData::ArenaDtor(void* object) {
  StreamData* _this = reinterpret_cast< StreamData* >(object);
  (void)_this;
}
void StreamData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StreamData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StreamData& StreamData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StreamData_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base);
  return *internal_default_instance();
}


void StreamData::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.realtime.StreamData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmpty();
  if (GetArena() == nullptr && stream_ != nullptr) {
    delete stream_;
  }
  stream_ = nullptr;
  if (GetArena() == nullptr && sender_ != nullptr) {
    delete sender_;
  }
  sender_ = nullptr;
  reliable_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .nakama.realtime.Stream stream = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_stream(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nakama.realtime.UserPresence sender = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_sender(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.realtime.StreamData.data"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool reliable = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          reliable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StreamData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nakama.realtime.StreamData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .nakama.realtime.Stream stream = 1;
  if (this->has_stream()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::stream(this), target, stream);
  }

  // .nakama.realtime.UserPresence sender = 2;
  if (this->has_sender()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::sender(this), target, stream);
  }

  // string data = 3;
  if (this->data().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_data().data(), static_cast<int>(this->_internal_data().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.realtime.StreamData.data");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_data(), target);
  }

  // bool reliable = 4;
  if (this->reliable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_reliable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.realtime.StreamData)
  return target;
}

size_t StreamData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.realtime.StreamData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string data = 3;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_data());
  }

  // .nakama.realtime.Stream stream = 1;
  if (this->has_stream()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stream_);
  }

  // .nakama.realtime.UserPresence sender = 2;
  if (this->has_sender()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sender_);
  }

  // bool reliable = 4;
  if (this->reliable() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StreamData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.realtime.StreamData)
  GOOGLE_DCHECK_NE(&from, this);
  const StreamData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StreamData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.realtime.StreamData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.realtime.StreamData)
    MergeFrom(*source);
  }
}

void StreamData::MergeFrom(const StreamData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.realtime.StreamData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {
    _internal_set_data(from._internal_data());
  }
  if (from.has_stream()) {
    _internal_mutable_stream()->::nakama::realtime::Stream::MergeFrom(from._internal_stream());
  }
  if (from.has_sender()) {
    _internal_mutable_sender()->::nakama::realtime::UserPresence::MergeFrom(from._internal_sender());
  }
  if (from.reliable() != 0) {
    _internal_set_reliable(from._internal_reliable());
  }
}

void StreamData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.realtime.StreamData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamData::CopyFrom(const StreamData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.realtime.StreamData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamData::IsInitialized() const {
  return true;
}

void StreamData::InternalSwap(StreamData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StreamData, reliable_)
      + sizeof(StreamData::reliable_)
      - PROTOBUF_FIELD_OFFSET(StreamData, stream_)>(
          reinterpret_cast<char*>(&stream_),
          reinterpret_cast<char*>(&other->stream_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class StreamPresenceEvent::_Internal {
 public:
  static const ::nakama::realtime::Stream& stream(const StreamPresenceEvent* msg);
};

const ::nakama::realtime::Stream&
StreamPresenceEvent::_Internal::stream(const StreamPresenceEvent* msg) {
  return *msg->stream_;
}
StreamPresenceEvent::StreamPresenceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  joins_(arena),
  leaves_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nakama.realtime.StreamPresenceEvent)
}
StreamPresenceEvent::StreamPresenceEvent(const StreamPresenceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      joins_(from.joins_),
      leaves_(from.leaves_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_stream()) {
    stream_ = new ::nakama::realtime::Stream(*from.stream_);
  } else {
    stream_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:nakama.realtime.StreamPresenceEvent)
}

void StreamPresenceEvent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StreamPresenceEvent_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base);
  stream_ = nullptr;
}

StreamPresenceEvent::~StreamPresenceEvent() {
  // @@protoc_insertion_point(destructor:nakama.realtime.StreamPresenceEvent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StreamPresenceEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete stream_;
}

void StreamPresenceEvent::ArenaDtor(void* object) {
  StreamPresenceEvent* _this = reinterpret_cast< StreamPresenceEvent* >(object);
  (void)_this;
}
void StreamPresenceEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StreamPresenceEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StreamPresenceEvent& StreamPresenceEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StreamPresenceEvent_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base);
  return *internal_default_instance();
}


void StreamPresenceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.realtime.StreamPresenceEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  joins_.Clear();
  leaves_.Clear();
  if (GetArena() == nullptr && stream_ != nullptr) {
    delete stream_;
  }
  stream_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamPresenceEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .nakama.realtime.Stream stream = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_stream(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .nakama.realtime.UserPresence joins = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_joins(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .nakama.realtime.UserPresence leaves = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_leaves(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StreamPresenceEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nakama.realtime.StreamPresenceEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .nakama.realtime.Stream stream = 1;
  if (this->has_stream()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::stream(this), target, stream);
  }

  // repeated .nakama.realtime.UserPresence joins = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_joins_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_joins(i), target, stream);
  }

  // repeated .nakama.realtime.UserPresence leaves = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_leaves_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_leaves(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.realtime.StreamPresenceEvent)
  return target;
}

size_t StreamPresenceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.realtime.StreamPresenceEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .nakama.realtime.UserPresence joins = 2;
  total_size += 1UL * this->_internal_joins_size();
  for (const auto& msg : this->joins_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .nakama.realtime.UserPresence leaves = 3;
  total_size += 1UL * this->_internal_leaves_size();
  for (const auto& msg : this->leaves_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .nakama.realtime.Stream stream = 1;
  if (this->has_stream()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stream_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StreamPresenceEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.realtime.StreamPresenceEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const StreamPresenceEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StreamPresenceEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.realtime.StreamPresenceEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.realtime.StreamPresenceEvent)
    MergeFrom(*source);
  }
}

void StreamPresenceEvent::MergeFrom(const StreamPresenceEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.realtime.StreamPresenceEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  joins_.MergeFrom(from.joins_);
  leaves_.MergeFrom(from.leaves_);
  if (from.has_stream()) {
    _internal_mutable_stream()->::nakama::realtime::Stream::MergeFrom(from._internal_stream());
  }
}

void StreamPresenceEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.realtime.StreamPresenceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamPresenceEvent::CopyFrom(const StreamPresenceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.realtime.StreamPresenceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamPresenceEvent::IsInitialized() const {
  return true;
}

void StreamPresenceEvent::InternalSwap(StreamPresenceEvent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  joins_.InternalSwap(&other->joins_);
  leaves_.InternalSwap(&other->leaves_);
  swap(stream_, other->stream_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamPresenceEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class UserPresence::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::StringValue& status(const UserPresence* msg);
};

const PROTOBUF_NAMESPACE_ID::StringValue&
UserPresence::_Internal::status(const UserPresence* msg) {
  return *msg->status_;
}
void UserPresence::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
UserPresence::UserPresence(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nakama.realtime.UserPresence)
}
UserPresence::UserPresence(const UserPresence& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_id().empty()) {
    user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_user_id(), 
      GetArena());
  }
  session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_session_id().empty()) {
    session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_session_id(), 
      GetArena());
  }
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_username().empty()) {
    username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_username(), 
      GetArena());
  }
  if (from._internal_has_status()) {
    status_ = new PROTOBUF_NAMESPACE_ID::StringValue(*from.status_);
  } else {
    status_ = nullptr;
  }
  persistence_ = from.persistence_;
  // @@protoc_insertion_point(copy_constructor:nakama.realtime.UserPresence)
}

void UserPresence::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UserPresence_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&persistence_) -
      reinterpret_cast<char*>(&status_)) + sizeof(persistence_));
}

UserPresence::~UserPresence() {
  // @@protoc_insertion_point(destructor:nakama.realtime.UserPresence)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UserPresence::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  session_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete status_;
}

void UserPresence::ArenaDtor(void* object) {
  UserPresence* _this = reinterpret_cast< UserPresence* >(object);
  (void)_this;
}
void UserPresence::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UserPresence::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserPresence& UserPresence::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserPresence_github_2ecom_2fheroiclabs_2fnakama_2dcommon_2frtapi_2frealtime_2eproto.base);
  return *internal_default_instance();
}


void UserPresence::Clear() {
// @@protoc_insertion_point(message_clear_start:nakama.realtime.UserPresence)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_id_.ClearToEmpty();
  session_id_.ClearToEmpty();
  username_.ClearToEmpty();
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  persistence_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserPresence::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.realtime.UserPresence.user_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string session_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_session_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.realtime.UserPresence.session_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string username = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nakama.realtime.UserPresence.username"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool persistence = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          persistence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.StringValue status = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserPresence::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nakama.realtime.UserPresence)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_id = 1;
  if (this->user_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.realtime.UserPresence.user_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user_id(), target);
  }

  // string session_id = 2;
  if (this->session_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_session_id().data(), static_cast<int>(this->_internal_session_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.realtime.UserPresence.session_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_session_id(), target);
  }

  // string username = 3;
  if (this->username().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nakama.realtime.UserPresence.username");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_username(), target);
  }

  // bool persistence = 4;
  if (this->persistence() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_persistence(), target);
  }

  // .google.protobuf.StringValue status = 5;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::status(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nakama.realtime.UserPresence)
  return target;
}

size_t UserPresence::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nakama.realtime.UserPresence)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user_id = 1;
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // string session_id = 2;
  if (this->session_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_session_id());
  }

  // string username = 3;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  // .google.protobuf.StringValue status = 5;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // bool persistence = 4;
  if (this->persistence() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserPresence::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nakama.realtime.UserPresence)
  GOOGLE_DCHECK_NE(&from, this);
  const UserPresence* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UserPresence>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nakama.realtime.UserPresence)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nakama.realtime.UserPresence)
    MergeFrom(*source);
  }
}

void UserPresence::MergeFrom(const UserPresence& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nakama.realtime.UserPresence)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_id().size() > 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.session_id().size() > 0) {
    _internal_set_session_id(from._internal_session_id());
  }
  if (from.username().size() > 0) {
    _internal_set_username(from._internal_username());
  }
  if (from.has_status()) {
    _internal_mutable_status()->PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from._internal_status());
  }
  if (from.persistence() != 0) {
    _internal_set_persistence(from._internal_persistence());
  }
}

void UserPresence::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nakama.realtime.UserPresence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserPresence::CopyFrom(const UserPresence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nakama.realtime.UserPresence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserPresence::IsInitialized() const {
  return true;
}

void UserPresence::InternalSwap(UserPresence* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  user_id_.Swap(&other->user_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  session_id_.Swap(&other->session_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  username_.Swap(&other->username_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UserPresence, persistence_)
      + sizeof(UserPresence::persistence_)
      - PROTOBUF_FIELD_OFFSET(UserPresence, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UserPresence::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace realtime
}  // namespace nakama
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::nakama::realtime::Envelope* Arena::CreateMaybeMessage< ::nakama::realtime::Envelope >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::realtime::Envelope >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::realtime::Channel* Arena::CreateMaybeMessage< ::nakama::realtime::Channel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::realtime::Channel >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::realtime::ChannelJoin* Arena::CreateMaybeMessage< ::nakama::realtime::ChannelJoin >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::realtime::ChannelJoin >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::realtime::ChannelLeave* Arena::CreateMaybeMessage< ::nakama::realtime::ChannelLeave >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::realtime::ChannelLeave >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::realtime::ChannelMessageAck* Arena::CreateMaybeMessage< ::nakama::realtime::ChannelMessageAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::realtime::ChannelMessageAck >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::realtime::ChannelMessageSend* Arena::CreateMaybeMessage< ::nakama::realtime::ChannelMessageSend >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::realtime::ChannelMessageSend >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::realtime::ChannelMessageUpdate* Arena::CreateMaybeMessage< ::nakama::realtime::ChannelMessageUpdate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::realtime::ChannelMessageUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::realtime::ChannelMessageRemove* Arena::CreateMaybeMessage< ::nakama::realtime::ChannelMessageRemove >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::realtime::ChannelMessageRemove >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::realtime::ChannelPresenceEvent* Arena::CreateMaybeMessage< ::nakama::realtime::ChannelPresenceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::realtime::ChannelPresenceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::realtime::Error_ContextEntry_DoNotUse* Arena::CreateMaybeMessage< ::nakama::realtime::Error_ContextEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::realtime::Error_ContextEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::realtime::Error* Arena::CreateMaybeMessage< ::nakama::realtime::Error >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::realtime::Error >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::realtime::Match* Arena::CreateMaybeMessage< ::nakama::realtime::Match >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::realtime::Match >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::realtime::MatchCreate* Arena::CreateMaybeMessage< ::nakama::realtime::MatchCreate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::realtime::MatchCreate >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::realtime::MatchData* Arena::CreateMaybeMessage< ::nakama::realtime::MatchData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::realtime::MatchData >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::realtime::MatchDataSend* Arena::CreateMaybeMessage< ::nakama::realtime::MatchDataSend >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::realtime::MatchDataSend >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::realtime::MatchJoin_MetadataEntry_DoNotUse* Arena::CreateMaybeMessage< ::nakama::realtime::MatchJoin_MetadataEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::realtime::MatchJoin_MetadataEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::realtime::MatchJoin* Arena::CreateMaybeMessage< ::nakama::realtime::MatchJoin >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::realtime::MatchJoin >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::realtime::MatchLeave* Arena::CreateMaybeMessage< ::nakama::realtime::MatchLeave >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::realtime::MatchLeave >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::realtime::MatchPresenceEvent* Arena::CreateMaybeMessage< ::nakama::realtime::MatchPresenceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::realtime::MatchPresenceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::realtime::MatchmakerAdd_StringPropertiesEntry_DoNotUse* Arena::CreateMaybeMessage< ::nakama::realtime::MatchmakerAdd_StringPropertiesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::realtime::MatchmakerAdd_StringPropertiesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::realtime::MatchmakerAdd_NumericPropertiesEntry_DoNotUse* Arena::CreateMaybeMessage< ::nakama::realtime::MatchmakerAdd_NumericPropertiesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::realtime::MatchmakerAdd_NumericPropertiesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::realtime::MatchmakerAdd* Arena::CreateMaybeMessage< ::nakama::realtime::MatchmakerAdd >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::realtime::MatchmakerAdd >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::realtime::MatchmakerMatched_MatchmakerUser_StringPropertiesEntry_DoNotUse* Arena::CreateMaybeMessage< ::nakama::realtime::MatchmakerMatched_MatchmakerUser_StringPropertiesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::realtime::MatchmakerMatched_MatchmakerUser_StringPropertiesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::realtime::MatchmakerMatched_MatchmakerUser_NumericPropertiesEntry_DoNotUse* Arena::CreateMaybeMessage< ::nakama::realtime::MatchmakerMatched_MatchmakerUser_NumericPropertiesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::realtime::MatchmakerMatched_MatchmakerUser_NumericPropertiesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::realtime::MatchmakerMatched_MatchmakerUser* Arena::CreateMaybeMessage< ::nakama::realtime::MatchmakerMatched_MatchmakerUser >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::realtime::MatchmakerMatched_MatchmakerUser >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::realtime::MatchmakerMatched* Arena::CreateMaybeMessage< ::nakama::realtime::MatchmakerMatched >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::realtime::MatchmakerMatched >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::realtime::MatchmakerRemove* Arena::CreateMaybeMessage< ::nakama::realtime::MatchmakerRemove >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::realtime::MatchmakerRemove >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::realtime::MatchmakerTicket* Arena::CreateMaybeMessage< ::nakama::realtime::MatchmakerTicket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::realtime::MatchmakerTicket >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::realtime::Notifications* Arena::CreateMaybeMessage< ::nakama::realtime::Notifications >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::realtime::Notifications >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::realtime::Party* Arena::CreateMaybeMessage< ::nakama::realtime::Party >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::realtime::Party >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::realtime::PartyCreate* Arena::CreateMaybeMessage< ::nakama::realtime::PartyCreate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::realtime::PartyCreate >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::realtime::PartyJoin* Arena::CreateMaybeMessage< ::nakama::realtime::PartyJoin >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::realtime::PartyJoin >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::realtime::PartyLeave* Arena::CreateMaybeMessage< ::nakama::realtime::PartyLeave >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::realtime::PartyLeave >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::realtime::PartyPromote* Arena::CreateMaybeMessage< ::nakama::realtime::PartyPromote >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::realtime::PartyPromote >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::realtime::PartyLeader* Arena::CreateMaybeMessage< ::nakama::realtime::PartyLeader >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::realtime::PartyLeader >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::realtime::PartyAccept* Arena::CreateMaybeMessage< ::nakama::realtime::PartyAccept >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::realtime::PartyAccept >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::realtime::PartyRemove* Arena::CreateMaybeMessage< ::nakama::realtime::PartyRemove >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::realtime::PartyRemove >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::realtime::PartyClose* Arena::CreateMaybeMessage< ::nakama::realtime::PartyClose >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::realtime::PartyClose >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::realtime::PartyJoinRequestList* Arena::CreateMaybeMessage< ::nakama::realtime::PartyJoinRequestList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::realtime::PartyJoinRequestList >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::realtime::PartyJoinRequest* Arena::CreateMaybeMessage< ::nakama::realtime::PartyJoinRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::realtime::PartyJoinRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::realtime::PartyMatchmakerAdd_StringPropertiesEntry_DoNotUse* Arena::CreateMaybeMessage< ::nakama::realtime::PartyMatchmakerAdd_StringPropertiesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::realtime::PartyMatchmakerAdd_StringPropertiesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::realtime::PartyMatchmakerAdd_NumericPropertiesEntry_DoNotUse* Arena::CreateMaybeMessage< ::nakama::realtime::PartyMatchmakerAdd_NumericPropertiesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::realtime::PartyMatchmakerAdd_NumericPropertiesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::realtime::PartyMatchmakerAdd* Arena::CreateMaybeMessage< ::nakama::realtime::PartyMatchmakerAdd >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::realtime::PartyMatchmakerAdd >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::realtime::PartyMatchmakerRemove* Arena::CreateMaybeMessage< ::nakama::realtime::PartyMatchmakerRemove >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::realtime::PartyMatchmakerRemove >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::realtime::PartyMatchmakerTicket* Arena::CreateMaybeMessage< ::nakama::realtime::PartyMatchmakerTicket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::realtime::PartyMatchmakerTicket >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::realtime::PartyData* Arena::CreateMaybeMessage< ::nakama::realtime::PartyData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::realtime::PartyData >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::realtime::PartyDataSend* Arena::CreateMaybeMessage< ::nakama::realtime::PartyDataSend >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::realtime::PartyDataSend >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::realtime::PartyPresenceEvent* Arena::CreateMaybeMessage< ::nakama::realtime::PartyPresenceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::realtime::PartyPresenceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::realtime::Ping* Arena::CreateMaybeMessage< ::nakama::realtime::Ping >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::realtime::Ping >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::realtime::Pong* Arena::CreateMaybeMessage< ::nakama::realtime::Pong >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::realtime::Pong >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::realtime::Status* Arena::CreateMaybeMessage< ::nakama::realtime::Status >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::realtime::Status >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::realtime::StatusFollow* Arena::CreateMaybeMessage< ::nakama::realtime::StatusFollow >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::realtime::StatusFollow >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::realtime::StatusPresenceEvent* Arena::CreateMaybeMessage< ::nakama::realtime::StatusPresenceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::realtime::StatusPresenceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::realtime::StatusUnfollow* Arena::CreateMaybeMessage< ::nakama::realtime::StatusUnfollow >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::realtime::StatusUnfollow >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::realtime::StatusUpdate* Arena::CreateMaybeMessage< ::nakama::realtime::StatusUpdate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::realtime::StatusUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::realtime::Stream* Arena::CreateMaybeMessage< ::nakama::realtime::Stream >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::realtime::Stream >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::realtime::StreamData* Arena::CreateMaybeMessage< ::nakama::realtime::StreamData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::realtime::StreamData >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::realtime::StreamPresenceEvent* Arena::CreateMaybeMessage< ::nakama::realtime::StreamPresenceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::realtime::StreamPresenceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::nakama::realtime::UserPresence* Arena::CreateMaybeMessage< ::nakama::realtime::UserPresence >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nakama::realtime::UserPresence >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
