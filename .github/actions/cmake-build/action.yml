name: 'CMake build for libnakama'
description: 'Configures build environment and invokes CMake. Not generic, tailored for libnakama.'
inputs:
  preset:
    description: 'Configure preset name'
    required: true
  build_type:
    description: 'Build config: MinSizeRel or Debug'
    required: true
    default: 'MinSizeRel'
  artifact_retention_days:
    description: 'Artifact retention days'
    default: 2
  GITHUB_TOKEN:
    description: 'Github token for Github Package Registry'
    required: true


outputs:
  artifact_name:
    description: 'Artifact name'
    value: ${{ steps.artifact_name.outputs.name }}
runs:
  using: "composite"
  steps:
    - name: Setup vcpkg
      shell: bash
      run: >
        if [ ! -d "${PWD}/vcpkg" ]; then
          git clone https://github.com/microsoft/vcpkg.git && echo "VCPKG_ROOT=${PWD}/vcpkg" >> $GITHUB_ENV
        fi
    - run: echo "VCPKG_BINARY_SOURCES=clear;nuget,GitHub,readwrite" >> $GITHUB_ENV
      shell: bash
    - name: 'Setup NuGet Credentials'
      shell: bash
      run: >
        mono=$( type -p mono || :);
        nuget="$mono $(vcpkg fetch nuget | tail -n 1)";
        $nuget sources list  | grep -q ${{ github.repository_owner }} || $nuget sources add
        -source "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json"
        -storepasswordincleartext
        -name "GitHub"
        -username "heroiclabs"
        -password "${{ inputs.GITHUB_TOKEN }}"
    - name: Setup NuGet API key
      shell: bash
      run: >
        $( type -p mono || :) `vcpkg fetch nuget | tail -n 1`
        setapikey "${{ inputs.GITHUB_TOKEN }}"
        -source "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json"
    - name: Installing prerequisites
      run:  |
        if [[ "${{ runner.os }}"  == "Linux" ]]; then
          sudo ./ci/setup-ubuntu.sh
        elif [[ "${{ runner.os }}" == "macOS" ]]; then
          ./ci/setup-osx.sh
        fi

        if [[ "${{ runner.os }}" == "Linux" ]]; then
          echo 'CC=/usr/bin/gcc-11' >> "$GITHUB_ENV"
          echo 'CXX=/usr/bin/g++-11' >> "$GITHUB_ENV"
        fi
      shell: bash
    - run: rm -rf out
      shell: bash
    - run: cmake --preset ${{ inputs.preset }} ${{ steps.cmake_args.outputs.args }}
      shell: bash
    - if: always()
      run: >
        vcpkg_log=./build/${{ inputs.preset }}/vcpkg-manifest-install.log;
        if test -f "$vcpkg_log"; then
          cat ${vcpkg_log}
        fi
      shell: bash
    - run: cmake --build ./build/${{ inputs.preset }} --config ${{ inputs.build_type }} --verbose
      shell: bash
    - run: cmake --install ./build/${{ inputs.preset }} --config ${{ inputs.build_type }}
      shell: bash
    - run: cd test && cmake --preset ${{ inputs.preset }}
      shell: bash
    - run: cd test && cmake --build ./build/${{ inputs.preset }} --config ${{ inputs.build_type }} --verbose
      shell: bash
    - run: cd test && cmake --install ./build/${{ inputs.preset }} --config ${{ inputs.build_type }}
      shell: bash
    - id: artifact_name
      shell: bash
      run: |
        sha=${{ github.sha }}
        preset="${{ inputs.preset }}"
        # strip -host_{arm64,x64} from the preset, because it is not relevant for users
        preset=${preset%-host_*}
        name="libnakama-${preset}-${{ inputs.build_type }}-git.${sha:0:8}"
        echo "::set-output name=artifact::${name}"
    #
    - run: >
        rm -rf ./out/*/*libHttpClient*.{lib,a};
        rm -rf ./out/Nakama/libnakama/*/*libHttpClient*.{lib,a};

      shell: bash

    - name: Prepare artifact archive
      run: |
        bin7z=$(type -p 7z || type -p 7zr)  # windows and linux/osx has different 7z binaries names
        cd out
        ${bin7z} a ../${{ steps.artifact_name.outputs.artifact }}.7z '*'
      shell: bash

    - uses: actions/upload-artifact@v3
      with:
        name: ${{ steps.artifact_name.outputs.artifact }}
        path: ./${{ steps.artifact_name.outputs.artifact }}.7z
        retention-days: ${{ inputs.artifact_retention_days }}
    - if: failure()
      uses: actions/upload-artifact@v3
      with:
        name: ${{ steps.artifact_name.outputs.artifact }}-workdir-debug
        path: |
          ./build
          ./cmake/vcpkg/buildtrees
        retention-days: 1
