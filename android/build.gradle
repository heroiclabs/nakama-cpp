import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform

buildscript {
    dependencies {
        classpath 'com.android.tools.build:gradle:7.2.1'
    }
}
plugins {
    id 'com.android.library' version '7.2.1'
    id 'org.barfuin.gradle.taskinfo' version '1.4.0'
}

repositories {
    google()
    mavenCentral()
}

def headersBuildDir = layout.buildDirectory.dir('headers')
def headersDir = layout.buildDirectory.dir('headers/include')
def vcpkgRoot = System.getenv('VCPKG_ROOT')


def vcpkgHostTriplet() {
    def os = DefaultNativePlatform.getCurrentOperatingSystem()
    def arch = DefaultNativePlatform.getCurrentArchitecture()

    if (os.isLinux()) {
        return 'x64-linux-heroic'
    } else if (os.isWindows()) {
        return 'x64-windows-static-md-release'
    } else if (os.isMacOsX()) {
        if (arch.getName() == 'aarch64') {
            return 'arm64-osx-heroic'
        } else {
            return 'x64-osx-heroic'
        }
    }
}


android {
    compileSdkVersion 31
    ndkVersion "23.2.8568313"
    buildTypes {
        minsizerel {}
    }

    defaultConfig {
        targetSdkVersion 30
        // IMPORTANT: adjust ANDROID_PLATFORM value in the cmake/vcpkg-triplets/ when updating this
        minSdkVersion 21

        ndk {
            abiFilters 'arm64-v8a', 'armeabi-v7a', 'x86_64'
            stl 'c++_shared'
        }



        externalNativeBuild {
            cmake {
                arguments '--preset', 'android',
                        "-DTOOLCHAIN_LOAD_FIRST=${vcpkgRoot}/scripts/buildsystems/vcpkg.cmake",
                        "-DANDROID_STL=${ndk.stl}",
                        "-DVCPKG_HOST_TRIPLET=${vcpkgHostTriplet()}"
                targets 'nakama-sdk'
            }
        }
    }

    externalNativeBuild {
        cmake {
            version "3.23.0+"
            path "../CMakeLists.txt"
        }
    }
    buildFeatures {
        prefabPublishing true
    }

    prefab {
        'nakama-sdk' {
            headers headersDir.get().getAsFile().getPath()
        }
    }

    sourceSets {
        main {
            java.srcDirs '../third_party/libHttpClient/Build/libHttpClient.Android/src/main'
            manifest.srcFile '../third_party/libHttpClient/Build/libHttpClient.Android/src/main/AndroidManifest.xml'
        }
    }
}

def buildHeaders = tasks.register('buildHeaders') {
    doLast {
        exec {
            workingDir '..'
            commandLine 'cmake', '--preset', 'android',
                    "-DANDROID_NDK=${android.ndkDirectory.path}",
                    '-DANDROID_ABI=arm64-v8a',
                    "-DANDROID_PLATFORM=${android.defaultConfig.minSdkVersion.getApiString()}",
                    "-DVCPKG_HOST_TRIPLET=${vcpkgHostTriplet()}"
        }
    }

    doLast {
        exec {
            workingDir '..'
            commandLine  'cmake', '--build', 'build/android', '--config', 'MinSizeRel', '--target', 'nakama-sdk-interface'
        }
    }

    doLast {
        exec {
            workingDir '..'
            commandLine  'cmake', '--install', 'build/android', '--component', 'headers', '--config', 'MinSizeRel', '--prefix', headersBuildDir.get().getAsFile().getPath()
        }
    }
    outputs.dir(headersBuildDir)
}

// anrdoid plugin tasks are not available at this moment yet, hook up
// to when they'll be added by the plugin later
tasks.whenObjectAdded( task -> {
    // Anroid plugin discourages referencing tasks by it's name, but it leaves us
    // no option, because they don't allow prefab headers to be resolved lazily, so
    // we have to impose dependency on a task level explicitly
    if(task.getName().startsWith('prefab')) {
        // prefabs for all architectures use same set of headers
        task.dependsOn buildHeaders
    }
})

dependencies {
    implementation 'com.squareup.okhttp3:okhttp:4.9.1'
}
