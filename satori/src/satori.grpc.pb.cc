// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: satori.proto

#include "satori.pb.h"
#include "satori.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace satori {
namespace api {

static const char* Satori_method_names[] = {
  "/satori.api.Satori/Authenticate",
  "/satori.api.Satori/AuthenticateLogout",
  "/satori.api.Satori/AuthenticateRefresh",
  "/satori.api.Satori/DeleteIdentity",
  "/satori.api.Satori/Event",
  "/satori.api.Satori/GetExperiments",
  "/satori.api.Satori/GetFlags",
  "/satori.api.Satori/GetLiveEvents",
  "/satori.api.Satori/Healthcheck",
  "/satori.api.Satori/Identify",
  "/satori.api.Satori/ListProperties",
  "/satori.api.Satori/Readycheck",
  "/satori.api.Satori/UpdateProperties",
  "/satori.api.Satori/GetMessageList",
  "/satori.api.Satori/UpdateMessage",
  "/satori.api.Satori/DeleteMessage",
};

std::unique_ptr< Satori::Stub> Satori::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Satori::Stub> stub(new Satori::Stub(channel, options));
  return stub;
}

Satori::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Authenticate_(Satori_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AuthenticateLogout_(Satori_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AuthenticateRefresh_(Satori_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteIdentity_(Satori_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Event_(Satori_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetExperiments_(Satori_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetFlags_(Satori_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetLiveEvents_(Satori_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Healthcheck_(Satori_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Identify_(Satori_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListProperties_(Satori_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Readycheck_(Satori_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateProperties_(Satori_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetMessageList_(Satori_method_names[13], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateMessage_(Satori_method_names[14], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteMessage_(Satori_method_names[15], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Satori::Stub::Authenticate(::grpc::ClientContext* context, const ::satori::api::AuthenticateRequest& request, ::satori::api::Session* response) {
  return ::grpc::internal::BlockingUnaryCall< ::satori::api::AuthenticateRequest, ::satori::api::Session, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Authenticate_, context, request, response);
}

void Satori::Stub::async::Authenticate(::grpc::ClientContext* context, const ::satori::api::AuthenticateRequest* request, ::satori::api::Session* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::satori::api::AuthenticateRequest, ::satori::api::Session, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Authenticate_, context, request, response, std::move(f));
}

void Satori::Stub::async::Authenticate(::grpc::ClientContext* context, const ::satori::api::AuthenticateRequest* request, ::satori::api::Session* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Authenticate_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::satori::api::Session>* Satori::Stub::PrepareAsyncAuthenticateRaw(::grpc::ClientContext* context, const ::satori::api::AuthenticateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::satori::api::Session, ::satori::api::AuthenticateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Authenticate_, context, request);
}

::grpc::ClientAsyncResponseReader< ::satori::api::Session>* Satori::Stub::AsyncAuthenticateRaw(::grpc::ClientContext* context, const ::satori::api::AuthenticateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAuthenticateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Satori::Stub::AuthenticateLogout(::grpc::ClientContext* context, const ::satori::api::AuthenticateLogoutRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::satori::api::AuthenticateLogoutRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AuthenticateLogout_, context, request, response);
}

void Satori::Stub::async::AuthenticateLogout(::grpc::ClientContext* context, const ::satori::api::AuthenticateLogoutRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::satori::api::AuthenticateLogoutRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AuthenticateLogout_, context, request, response, std::move(f));
}

void Satori::Stub::async::AuthenticateLogout(::grpc::ClientContext* context, const ::satori::api::AuthenticateLogoutRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AuthenticateLogout_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Satori::Stub::PrepareAsyncAuthenticateLogoutRaw(::grpc::ClientContext* context, const ::satori::api::AuthenticateLogoutRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::satori::api::AuthenticateLogoutRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AuthenticateLogout_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Satori::Stub::AsyncAuthenticateLogoutRaw(::grpc::ClientContext* context, const ::satori::api::AuthenticateLogoutRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAuthenticateLogoutRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Satori::Stub::AuthenticateRefresh(::grpc::ClientContext* context, const ::satori::api::AuthenticateRefreshRequest& request, ::satori::api::Session* response) {
  return ::grpc::internal::BlockingUnaryCall< ::satori::api::AuthenticateRefreshRequest, ::satori::api::Session, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AuthenticateRefresh_, context, request, response);
}

void Satori::Stub::async::AuthenticateRefresh(::grpc::ClientContext* context, const ::satori::api::AuthenticateRefreshRequest* request, ::satori::api::Session* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::satori::api::AuthenticateRefreshRequest, ::satori::api::Session, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AuthenticateRefresh_, context, request, response, std::move(f));
}

void Satori::Stub::async::AuthenticateRefresh(::grpc::ClientContext* context, const ::satori::api::AuthenticateRefreshRequest* request, ::satori::api::Session* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AuthenticateRefresh_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::satori::api::Session>* Satori::Stub::PrepareAsyncAuthenticateRefreshRaw(::grpc::ClientContext* context, const ::satori::api::AuthenticateRefreshRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::satori::api::Session, ::satori::api::AuthenticateRefreshRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AuthenticateRefresh_, context, request);
}

::grpc::ClientAsyncResponseReader< ::satori::api::Session>* Satori::Stub::AsyncAuthenticateRefreshRaw(::grpc::ClientContext* context, const ::satori::api::AuthenticateRefreshRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAuthenticateRefreshRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Satori::Stub::DeleteIdentity(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteIdentity_, context, request, response);
}

void Satori::Stub::async::DeleteIdentity(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteIdentity_, context, request, response, std::move(f));
}

void Satori::Stub::async::DeleteIdentity(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteIdentity_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Satori::Stub::PrepareAsyncDeleteIdentityRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteIdentity_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Satori::Stub::AsyncDeleteIdentityRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteIdentityRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Satori::Stub::Event(::grpc::ClientContext* context, const ::satori::api::EventRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::satori::api::EventRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Event_, context, request, response);
}

void Satori::Stub::async::Event(::grpc::ClientContext* context, const ::satori::api::EventRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::satori::api::EventRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Event_, context, request, response, std::move(f));
}

void Satori::Stub::async::Event(::grpc::ClientContext* context, const ::satori::api::EventRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Event_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Satori::Stub::PrepareAsyncEventRaw(::grpc::ClientContext* context, const ::satori::api::EventRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::satori::api::EventRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Event_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Satori::Stub::AsyncEventRaw(::grpc::ClientContext* context, const ::satori::api::EventRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncEventRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Satori::Stub::GetExperiments(::grpc::ClientContext* context, const ::satori::api::GetExperimentsRequest& request, ::satori::api::ExperimentList* response) {
  return ::grpc::internal::BlockingUnaryCall< ::satori::api::GetExperimentsRequest, ::satori::api::ExperimentList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetExperiments_, context, request, response);
}

void Satori::Stub::async::GetExperiments(::grpc::ClientContext* context, const ::satori::api::GetExperimentsRequest* request, ::satori::api::ExperimentList* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::satori::api::GetExperimentsRequest, ::satori::api::ExperimentList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetExperiments_, context, request, response, std::move(f));
}

void Satori::Stub::async::GetExperiments(::grpc::ClientContext* context, const ::satori::api::GetExperimentsRequest* request, ::satori::api::ExperimentList* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetExperiments_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::satori::api::ExperimentList>* Satori::Stub::PrepareAsyncGetExperimentsRaw(::grpc::ClientContext* context, const ::satori::api::GetExperimentsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::satori::api::ExperimentList, ::satori::api::GetExperimentsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetExperiments_, context, request);
}

::grpc::ClientAsyncResponseReader< ::satori::api::ExperimentList>* Satori::Stub::AsyncGetExperimentsRaw(::grpc::ClientContext* context, const ::satori::api::GetExperimentsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetExperimentsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Satori::Stub::GetFlags(::grpc::ClientContext* context, const ::satori::api::GetFlagsRequest& request, ::satori::api::FlagList* response) {
  return ::grpc::internal::BlockingUnaryCall< ::satori::api::GetFlagsRequest, ::satori::api::FlagList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetFlags_, context, request, response);
}

void Satori::Stub::async::GetFlags(::grpc::ClientContext* context, const ::satori::api::GetFlagsRequest* request, ::satori::api::FlagList* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::satori::api::GetFlagsRequest, ::satori::api::FlagList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetFlags_, context, request, response, std::move(f));
}

void Satori::Stub::async::GetFlags(::grpc::ClientContext* context, const ::satori::api::GetFlagsRequest* request, ::satori::api::FlagList* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetFlags_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::satori::api::FlagList>* Satori::Stub::PrepareAsyncGetFlagsRaw(::grpc::ClientContext* context, const ::satori::api::GetFlagsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::satori::api::FlagList, ::satori::api::GetFlagsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetFlags_, context, request);
}

::grpc::ClientAsyncResponseReader< ::satori::api::FlagList>* Satori::Stub::AsyncGetFlagsRaw(::grpc::ClientContext* context, const ::satori::api::GetFlagsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetFlagsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Satori::Stub::GetLiveEvents(::grpc::ClientContext* context, const ::satori::api::GetLiveEventsRequest& request, ::satori::api::LiveEventList* response) {
  return ::grpc::internal::BlockingUnaryCall< ::satori::api::GetLiveEventsRequest, ::satori::api::LiveEventList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetLiveEvents_, context, request, response);
}

void Satori::Stub::async::GetLiveEvents(::grpc::ClientContext* context, const ::satori::api::GetLiveEventsRequest* request, ::satori::api::LiveEventList* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::satori::api::GetLiveEventsRequest, ::satori::api::LiveEventList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetLiveEvents_, context, request, response, std::move(f));
}

void Satori::Stub::async::GetLiveEvents(::grpc::ClientContext* context, const ::satori::api::GetLiveEventsRequest* request, ::satori::api::LiveEventList* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetLiveEvents_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::satori::api::LiveEventList>* Satori::Stub::PrepareAsyncGetLiveEventsRaw(::grpc::ClientContext* context, const ::satori::api::GetLiveEventsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::satori::api::LiveEventList, ::satori::api::GetLiveEventsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetLiveEvents_, context, request);
}

::grpc::ClientAsyncResponseReader< ::satori::api::LiveEventList>* Satori::Stub::AsyncGetLiveEventsRaw(::grpc::ClientContext* context, const ::satori::api::GetLiveEventsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetLiveEventsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Satori::Stub::Healthcheck(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Healthcheck_, context, request, response);
}

void Satori::Stub::async::Healthcheck(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Healthcheck_, context, request, response, std::move(f));
}

void Satori::Stub::async::Healthcheck(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Healthcheck_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Satori::Stub::PrepareAsyncHealthcheckRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Healthcheck_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Satori::Stub::AsyncHealthcheckRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncHealthcheckRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Satori::Stub::Identify(::grpc::ClientContext* context, const ::satori::api::IdentifyRequest& request, ::satori::api::Session* response) {
  return ::grpc::internal::BlockingUnaryCall< ::satori::api::IdentifyRequest, ::satori::api::Session, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Identify_, context, request, response);
}

void Satori::Stub::async::Identify(::grpc::ClientContext* context, const ::satori::api::IdentifyRequest* request, ::satori::api::Session* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::satori::api::IdentifyRequest, ::satori::api::Session, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Identify_, context, request, response, std::move(f));
}

void Satori::Stub::async::Identify(::grpc::ClientContext* context, const ::satori::api::IdentifyRequest* request, ::satori::api::Session* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Identify_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::satori::api::Session>* Satori::Stub::PrepareAsyncIdentifyRaw(::grpc::ClientContext* context, const ::satori::api::IdentifyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::satori::api::Session, ::satori::api::IdentifyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Identify_, context, request);
}

::grpc::ClientAsyncResponseReader< ::satori::api::Session>* Satori::Stub::AsyncIdentifyRaw(::grpc::ClientContext* context, const ::satori::api::IdentifyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncIdentifyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Satori::Stub::ListProperties(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::satori::api::Properties* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::satori::api::Properties, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListProperties_, context, request, response);
}

void Satori::Stub::async::ListProperties(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::satori::api::Properties* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::satori::api::Properties, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListProperties_, context, request, response, std::move(f));
}

void Satori::Stub::async::ListProperties(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::satori::api::Properties* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListProperties_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::satori::api::Properties>* Satori::Stub::PrepareAsyncListPropertiesRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::satori::api::Properties, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListProperties_, context, request);
}

::grpc::ClientAsyncResponseReader< ::satori::api::Properties>* Satori::Stub::AsyncListPropertiesRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListPropertiesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Satori::Stub::Readycheck(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Readycheck_, context, request, response);
}

void Satori::Stub::async::Readycheck(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Readycheck_, context, request, response, std::move(f));
}

void Satori::Stub::async::Readycheck(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Readycheck_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Satori::Stub::PrepareAsyncReadycheckRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Readycheck_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Satori::Stub::AsyncReadycheckRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncReadycheckRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Satori::Stub::UpdateProperties(::grpc::ClientContext* context, const ::satori::api::UpdatePropertiesRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::satori::api::UpdatePropertiesRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateProperties_, context, request, response);
}

void Satori::Stub::async::UpdateProperties(::grpc::ClientContext* context, const ::satori::api::UpdatePropertiesRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::satori::api::UpdatePropertiesRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateProperties_, context, request, response, std::move(f));
}

void Satori::Stub::async::UpdateProperties(::grpc::ClientContext* context, const ::satori::api::UpdatePropertiesRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateProperties_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Satori::Stub::PrepareAsyncUpdatePropertiesRaw(::grpc::ClientContext* context, const ::satori::api::UpdatePropertiesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::satori::api::UpdatePropertiesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateProperties_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Satori::Stub::AsyncUpdatePropertiesRaw(::grpc::ClientContext* context, const ::satori::api::UpdatePropertiesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdatePropertiesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Satori::Stub::GetMessageList(::grpc::ClientContext* context, const ::satori::api::GetMessageListRequest& request, ::satori::api::GetMessageListResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::satori::api::GetMessageListRequest, ::satori::api::GetMessageListResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetMessageList_, context, request, response);
}

void Satori::Stub::async::GetMessageList(::grpc::ClientContext* context, const ::satori::api::GetMessageListRequest* request, ::satori::api::GetMessageListResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::satori::api::GetMessageListRequest, ::satori::api::GetMessageListResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetMessageList_, context, request, response, std::move(f));
}

void Satori::Stub::async::GetMessageList(::grpc::ClientContext* context, const ::satori::api::GetMessageListRequest* request, ::satori::api::GetMessageListResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetMessageList_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::satori::api::GetMessageListResponse>* Satori::Stub::PrepareAsyncGetMessageListRaw(::grpc::ClientContext* context, const ::satori::api::GetMessageListRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::satori::api::GetMessageListResponse, ::satori::api::GetMessageListRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetMessageList_, context, request);
}

::grpc::ClientAsyncResponseReader< ::satori::api::GetMessageListResponse>* Satori::Stub::AsyncGetMessageListRaw(::grpc::ClientContext* context, const ::satori::api::GetMessageListRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetMessageListRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Satori::Stub::UpdateMessage(::grpc::ClientContext* context, const ::satori::api::UpdateMessageRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::satori::api::UpdateMessageRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateMessage_, context, request, response);
}

void Satori::Stub::async::UpdateMessage(::grpc::ClientContext* context, const ::satori::api::UpdateMessageRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::satori::api::UpdateMessageRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateMessage_, context, request, response, std::move(f));
}

void Satori::Stub::async::UpdateMessage(::grpc::ClientContext* context, const ::satori::api::UpdateMessageRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateMessage_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Satori::Stub::PrepareAsyncUpdateMessageRaw(::grpc::ClientContext* context, const ::satori::api::UpdateMessageRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::satori::api::UpdateMessageRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateMessage_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Satori::Stub::AsyncUpdateMessageRaw(::grpc::ClientContext* context, const ::satori::api::UpdateMessageRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateMessageRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Satori::Stub::DeleteMessage(::grpc::ClientContext* context, const ::satori::api::DeleteMessageRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::satori::api::DeleteMessageRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteMessage_, context, request, response);
}

void Satori::Stub::async::DeleteMessage(::grpc::ClientContext* context, const ::satori::api::DeleteMessageRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::satori::api::DeleteMessageRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteMessage_, context, request, response, std::move(f));
}

void Satori::Stub::async::DeleteMessage(::grpc::ClientContext* context, const ::satori::api::DeleteMessageRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteMessage_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Satori::Stub::PrepareAsyncDeleteMessageRaw(::grpc::ClientContext* context, const ::satori::api::DeleteMessageRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::satori::api::DeleteMessageRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteMessage_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Satori::Stub::AsyncDeleteMessageRaw(::grpc::ClientContext* context, const ::satori::api::DeleteMessageRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteMessageRaw(context, request, cq);
  result->StartCall();
  return result;
}

Satori::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Satori_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Satori::Service, ::satori::api::AuthenticateRequest, ::satori::api::Session, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Satori::Service* service,
             ::grpc::ServerContext* ctx,
             const ::satori::api::AuthenticateRequest* req,
             ::satori::api::Session* resp) {
               return service->Authenticate(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Satori_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Satori::Service, ::satori::api::AuthenticateLogoutRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Satori::Service* service,
             ::grpc::ServerContext* ctx,
             const ::satori::api::AuthenticateLogoutRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->AuthenticateLogout(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Satori_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Satori::Service, ::satori::api::AuthenticateRefreshRequest, ::satori::api::Session, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Satori::Service* service,
             ::grpc::ServerContext* ctx,
             const ::satori::api::AuthenticateRefreshRequest* req,
             ::satori::api::Session* resp) {
               return service->AuthenticateRefresh(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Satori_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Satori::Service, ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Satori::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::google::protobuf::Empty* resp) {
               return service->DeleteIdentity(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Satori_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Satori::Service, ::satori::api::EventRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Satori::Service* service,
             ::grpc::ServerContext* ctx,
             const ::satori::api::EventRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->Event(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Satori_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Satori::Service, ::satori::api::GetExperimentsRequest, ::satori::api::ExperimentList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Satori::Service* service,
             ::grpc::ServerContext* ctx,
             const ::satori::api::GetExperimentsRequest* req,
             ::satori::api::ExperimentList* resp) {
               return service->GetExperiments(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Satori_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Satori::Service, ::satori::api::GetFlagsRequest, ::satori::api::FlagList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Satori::Service* service,
             ::grpc::ServerContext* ctx,
             const ::satori::api::GetFlagsRequest* req,
             ::satori::api::FlagList* resp) {
               return service->GetFlags(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Satori_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Satori::Service, ::satori::api::GetLiveEventsRequest, ::satori::api::LiveEventList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Satori::Service* service,
             ::grpc::ServerContext* ctx,
             const ::satori::api::GetLiveEventsRequest* req,
             ::satori::api::LiveEventList* resp) {
               return service->GetLiveEvents(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Satori_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Satori::Service, ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Satori::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::google::protobuf::Empty* resp) {
               return service->Healthcheck(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Satori_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Satori::Service, ::satori::api::IdentifyRequest, ::satori::api::Session, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Satori::Service* service,
             ::grpc::ServerContext* ctx,
             const ::satori::api::IdentifyRequest* req,
             ::satori::api::Session* resp) {
               return service->Identify(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Satori_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Satori::Service, ::google::protobuf::Empty, ::satori::api::Properties, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Satori::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::satori::api::Properties* resp) {
               return service->ListProperties(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Satori_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Satori::Service, ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Satori::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::google::protobuf::Empty* resp) {
               return service->Readycheck(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Satori_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Satori::Service, ::satori::api::UpdatePropertiesRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Satori::Service* service,
             ::grpc::ServerContext* ctx,
             const ::satori::api::UpdatePropertiesRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->UpdateProperties(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Satori_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Satori::Service, ::satori::api::GetMessageListRequest, ::satori::api::GetMessageListResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Satori::Service* service,
             ::grpc::ServerContext* ctx,
             const ::satori::api::GetMessageListRequest* req,
             ::satori::api::GetMessageListResponse* resp) {
               return service->GetMessageList(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Satori_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Satori::Service, ::satori::api::UpdateMessageRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Satori::Service* service,
             ::grpc::ServerContext* ctx,
             const ::satori::api::UpdateMessageRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->UpdateMessage(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Satori_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Satori::Service, ::satori::api::DeleteMessageRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Satori::Service* service,
             ::grpc::ServerContext* ctx,
             const ::satori::api::DeleteMessageRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->DeleteMessage(ctx, req, resp);
             }, this)));
}

Satori::Service::~Service() {
}

::grpc::Status Satori::Service::Authenticate(::grpc::ServerContext* context, const ::satori::api::AuthenticateRequest* request, ::satori::api::Session* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Satori::Service::AuthenticateLogout(::grpc::ServerContext* context, const ::satori::api::AuthenticateLogoutRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Satori::Service::AuthenticateRefresh(::grpc::ServerContext* context, const ::satori::api::AuthenticateRefreshRequest* request, ::satori::api::Session* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Satori::Service::DeleteIdentity(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Satori::Service::Event(::grpc::ServerContext* context, const ::satori::api::EventRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Satori::Service::GetExperiments(::grpc::ServerContext* context, const ::satori::api::GetExperimentsRequest* request, ::satori::api::ExperimentList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Satori::Service::GetFlags(::grpc::ServerContext* context, const ::satori::api::GetFlagsRequest* request, ::satori::api::FlagList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Satori::Service::GetLiveEvents(::grpc::ServerContext* context, const ::satori::api::GetLiveEventsRequest* request, ::satori::api::LiveEventList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Satori::Service::Healthcheck(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Satori::Service::Identify(::grpc::ServerContext* context, const ::satori::api::IdentifyRequest* request, ::satori::api::Session* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Satori::Service::ListProperties(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::satori::api::Properties* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Satori::Service::Readycheck(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Satori::Service::UpdateProperties(::grpc::ServerContext* context, const ::satori::api::UpdatePropertiesRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Satori::Service::GetMessageList(::grpc::ServerContext* context, const ::satori::api::GetMessageListRequest* request, ::satori::api::GetMessageListResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Satori::Service::UpdateMessage(::grpc::ServerContext* context, const ::satori::api::UpdateMessageRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Satori::Service::DeleteMessage(::grpc::ServerContext* context, const ::satori::api::DeleteMessageRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace satori
}  // namespace api

